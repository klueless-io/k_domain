{
  "domain": {
    "models": [
      {
        "name": "account_history_datum",
        "name_plural": "account_history_data",
        "table_name": "account_history_data",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/account_history_data.rb",
          "exist": true,
          "state": [
            "has_ruby_model",
            "nonconventional_name"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_id",
            "name_plural": "source_account_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "balance",
            "name_plural": "balances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "currentagingbucket",
            "name_plural": "currentagingbuckets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "custpo",
            "name_plural": "custpos",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpaychecknumber",
            "name_plural": "finalpaychecknumbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpaypaymethod",
            "name_plural": "finalpaypaymethods",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpayrefnumber",
            "name_plural": "finalpayrefnumbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpaytotal",
            "name_plural": "finalpaytotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpaymentdate",
            "name_plural": "finalpaymentdates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financecharge",
            "name_plural": "financecharges",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_id",
            "name_plural": "source_invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_id",
            "name_plural": "invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "invoice",
            "foreign_table_plural": "invoices"
          },
          {
            "name": "invoicenumber",
            "name_plural": "invoicenumbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_journal_id",
            "name_plural": "source_journal_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "adjustment_id",
            "name_plural": "adjustment_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "adjustment",
            "foreign_table_plural": "adjustments"
          },
          {
            "name": "memoforcedtaxadded",
            "name_plural": "memoforcedtaxaddeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "memoforcedtaxremoval",
            "name_plural": "memoforcedtaxremovals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ordernodisplay",
            "name_plural": "ordernodisplays",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpayamount",
            "name_plural": "partialpayamounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaychecknumber",
            "name_plural": "partialpaychecknumbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaycnt",
            "name_plural": "partialpaycnts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaypaymethod",
            "name_plural": "partialpaypaymethods",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaypaydate",
            "name_plural": "partialpaypaydates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpayrefnumber",
            "name_plural": "partialpayrefnumbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaytotal",
            "name_plural": "partialpaytotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "paymentduedate",
            "name_plural": "paymentduedates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "posteddate",
            "name_plural": "posteddates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "recordtype",
            "name_plural": "recordtypes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "refundtotal",
            "name_plural": "refundtotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "storenum",
            "name_plural": "storenums",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "storenumber",
            "name_plural": "storenumbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "subtotalposted",
            "name_plural": "subtotalposteds",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total",
            "name_plural": "totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "usersalesname",
            "name_plural": "usersalesnames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "webreferenceid",
            "name_plural": "webreferenceids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpaycct_id",
            "name_plural": "finalpaycct_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finalpaymentcreditcard_id",
            "name_plural": "finalpaymentcreditcard_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaycct_id",
            "name_plural": "partialpaycct_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "partialpaymentcreditcard_id",
            "name_plural": "partialpaymentcreditcard_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totaltax_id",
            "name_plural": "totaltax_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ready",
            "name_plural": "readies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assocation_checks",
            "name_plural": "assocation_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "action_log",
        "name_plural": "action_logs",
        "table_name": "action_logs",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/action_log.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_id",
            "name_plural": "location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "location",
            "foreign_table_plural": "locations"
          },
          {
            "name": "action",
            "name_plural": "actions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "activity",
        "name_plural": "activities",
        "table_name": "activities",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/activity.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "element_id",
            "name_plural": "element_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "element_type",
            "name_plural": "element_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "estimate_id",
            "name_plural": "estimate_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "estimate",
            "foreign_table_plural": "estimates"
          },
          {
            "name": "invoice_id",
            "name_plural": "invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "invoice",
            "foreign_table_plural": "invoices"
          },
          {
            "name": "phone_call_id",
            "name_plural": "phone_call_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "phone_call",
            "foreign_table_plural": "phone_calls"
          },
          {
            "name": "task_id",
            "name_plural": "task_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "task",
            "foreign_table_plural": "tasks"
          },
          {
            "name": "email_id",
            "name_plural": "email_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email",
            "foreign_table_plural": "emails"
          },
          {
            "name": "comment_id",
            "name_plural": "comment_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "comment",
            "foreign_table_plural": "comments"
          },
          {
            "name": "order_id",
            "name_plural": "order_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sale_id",
            "name_plural": "sale_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tracker_id",
            "name_plural": "tracker_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tracker",
            "foreign_table_plural": "trackers"
          },
          {
            "name": "email_message_id",
            "name_plural": "email_message_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "note_id",
            "name_plural": "note_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "note",
            "foreign_table_plural": "notes"
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "activity_for",
            "name_plural": "activity_fors",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hide",
            "name_plural": "hides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_id",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign",
            "foreign_table_plural": "campaigns"
          },
          {
            "name": "campaign_message_id",
            "name_plural": "campaign_message_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign_message",
            "foreign_table_plural": "campaign_messages"
          },
          {
            "name": "parent_contact_id",
            "name_plural": "parent_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_comment_id",
            "name_plural": "portal_comment_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "portal_comment",
            "foreign_table_plural": "portal_comments"
          },
          {
            "name": "meeting_id",
            "name_plural": "meeting_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "meeting",
            "foreign_table_plural": "meetings"
          },
          {
            "name": "inquiry_id",
            "name_plural": "inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "inquiry",
            "foreign_table_plural": "inquiries"
          },
          {
            "name": "shipment_id",
            "name_plural": "shipment_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "shipment",
            "foreign_table_plural": "shipments"
          }
        ]
      },
      {
        "name": "address",
        "name_plural": "addresses",
        "table_name": "addresses",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/address.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "city",
            "name_plural": "cities",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "country",
            "name_plural": "countries",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "manualchange",
            "name_plural": "manualchanges",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "state",
            "name_plural": "states",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "street1",
            "name_plural": "street1s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "street2",
            "name_plural": "street2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "street3",
            "name_plural": "street3s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "webid",
            "name_plural": "webids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "zip",
            "name_plural": "zips",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "zone",
            "name_plural": "zones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "latitude",
            "name_plural": "latitudes",
            "type": "float",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "longitude",
            "name_plural": "longitudes",
            "type": "float",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "adjustment",
        "name_plural": "adjustments",
        "table_name": "adjustments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/adjustment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total",
            "name_plural": "totals",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_id",
            "name_plural": "invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "invoice",
            "foreign_table_plural": "invoices"
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ready",
            "name_plural": "readies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assocation_checks",
            "name_plural": "assocation_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_id",
            "name_plural": "source_account_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_id",
            "name_plural": "source_invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "affect_sales",
            "name_plural": "affect_sales",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "posted_date",
            "name_plural": "posted_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "final_payment_date",
            "name_plural": "final_payment_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "voided",
            "name_plural": "voideds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_month",
            "name_plural": "accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_year",
            "name_plural": "accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "comment",
            "name_plural": "comments",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_sales_rep",
            "name_plural": "source_sales_reps",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reference_number",
            "name_plural": "reference_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_refreshed_at",
            "name_plural": "last_refreshed_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_refreshed_version",
            "name_plural": "last_refreshed_versions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_summary_id",
            "name_plural": "sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sales_summary",
            "foreign_table_plural": "sales_summaries"
          },
          {
            "name": "daily_accounting_day",
            "name_plural": "daily_accounting_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_month",
            "name_plural": "daily_accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_year",
            "name_plural": "daily_accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_sales_summary_id",
            "name_plural": "daily_sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_less_non_sales",
            "name_plural": "total_less_non_sales",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "markups",
            "name_plural": "markups",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "discounts",
            "name_plural": "discounts",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipping",
            "name_plural": "shippings",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "affiliation",
        "name_plural": "affiliations",
        "table_name": "affiliations",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "primary",
            "name_plural": "primaries",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "api_log",
        "name_plural": "api_logs",
        "table_name": "api_logs",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/api_log.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "url",
            "name_plural": "urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "response_message",
            "name_plural": "response_messages",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "retry_count",
            "name_plural": "retry_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "asset",
        "name_plural": "assets",
        "table_name": "assets",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/asset.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "category",
            "name_plural": "categories",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "file_name",
            "name_plural": "file_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "file_hash",
            "name_plural": "file_hashes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "content_type",
            "name_plural": "content_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tracker_id",
            "name_plural": "tracker_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tracker",
            "foreign_table_plural": "trackers"
          },
          {
            "name": "archived",
            "name_plural": "archiveds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "meta_data",
            "name_plural": "meta_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "background_job_result",
        "name_plural": "background_job_results",
        "table_name": "background_job_results",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/background_job_result.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "job_hash",
            "name_plural": "job_hashes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_type",
            "name_plural": "job_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status_view",
            "name_plural": "status_views",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed_view",
            "name_plural": "completed_views",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "data",
            "name_plural": "data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "result",
            "name_plural": "results",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "expires_at",
            "name_plural": "expires_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "background_job",
        "name_plural": "background_jobs",
        "table_name": "background_jobs",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/background_job.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "job_type",
            "name_plural": "job_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status_view",
            "name_plural": "status_views",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed_view",
            "name_plural": "completed_views",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "data",
            "name_plural": "data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "result",
            "name_plural": "results",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "complete",
            "name_plural": "completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed_at",
            "name_plural": "completed_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_hash",
            "name_plural": "job_hashes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "backup",
        "name_plural": "backups",
        "table_name": "backups",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/backup.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "filename",
            "name_plural": "filenames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "success",
            "name_plural": "successes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "badges_sash",
        "name_plural": "badges_sashes",
        "table_name": "badges_sashes",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "badge_id",
            "name_plural": "badge_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sash_id",
            "name_plural": "sash_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notified_user",
            "name_plural": "notified_users",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "bookmark",
        "name_plural": "bookmarks",
        "table_name": "bookmarks",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/bookmark.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "budget_month",
        "name_plural": "budget_months",
        "table_name": "budget_months",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/budget_month.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "budget_id",
            "name_plural": "budget_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "budget",
            "foreign_table_plural": "budgets"
          },
          {
            "name": "total",
            "name_plural": "totals",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "month_date",
            "name_plural": "month_dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_total",
            "name_plural": "enterprise_totals",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "budget",
        "name_plural": "budgets",
        "table_name": "budgets",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/budget.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "financial_year",
            "name_plural": "financial_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "comp_perc",
            "name_plural": "comp_percs",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_comp_perc",
            "name_plural": "enterprise_comp_percs",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "build",
        "name_plural": "builds",
        "table_name": "builds",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/build.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "os",
            "name_plural": "os",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "checksum",
            "name_plural": "checksums",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "business_plan_marketing_activity",
        "name_plural": "business_plan_marketing_activities",
        "table_name": "business_plan_marketing_activities",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/business_plan_marketing_activity.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "title",
            "name_plural": "titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_1",
            "name_plural": "quarter_1s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_2",
            "name_plural": "quarter_2s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_3",
            "name_plural": "quarter_3s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_4",
            "name_plural": "quarter_4s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "percentage",
            "name_plural": "percentages",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "max_cap",
            "name_plural": "max_caps",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_plan_id",
            "name_plural": "business_plan_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "business_plan",
            "foreign_table_plural": "business_plans"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "business_plan_sales_investment",
        "name_plural": "business_plan_sales_investments",
        "table_name": "business_plan_sales_investments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/business_plan_sales_investment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "business_plan_id",
            "name_plural": "business_plan_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "business_plan",
            "foreign_table_plural": "business_plans"
          },
          {
            "name": "quarter_1",
            "name_plural": "quarter_1s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_2",
            "name_plural": "quarter_2s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_3",
            "name_plural": "quarter_3s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "quarter_4",
            "name_plural": "quarter_4s",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "business_plan",
        "name_plural": "business_plans",
        "table_name": "business_plans",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/business_plan.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year",
            "name_plural": "financial_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "growth_target",
            "name_plural": "growth_targets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 5,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "win_back_target",
            "name_plural": "win_back_targets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 25,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ten_companies",
            "name_plural": "ten_companies",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "calendar_entry",
        "name_plural": "calendar_entries",
        "table_name": "calendar_entries",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/calendar_entry.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_id",
            "name_plural": "calendar_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "calendar",
            "foreign_table_plural": "calendars"
          },
          {
            "name": "entry_ident",
            "name_plural": "entry_idents",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "start_time",
            "name_plural": "start_times",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "end_time",
            "name_plural": "end_times",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "summary",
            "name_plural": "summaries",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated",
            "name_plural": "updateds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "calendar_entry_deletion",
        "name_plural": "calendar_entry_deletions",
        "table_name": "calendar_entry_deletions",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/calendar_entry_deletion.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "calendar_ident",
            "name_plural": "calendar_idents",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "entry_ident",
            "name_plural": "entry_idents",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "send_updates",
            "name_plural": "send_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "calendar",
        "name_plural": "calendars",
        "table_name": "calendars",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/calendar.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_ident",
            "name_plural": "calendar_idents",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sync",
            "name_plural": "last_syncs",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "next_sync_token",
            "name_plural": "next_sync_tokens",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "timezone",
            "name_plural": "timezones",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_ids",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "campaign_calendar_entry",
        "name_plural": "campaign_calendar_entries",
        "table_name": "campaign_calendar_entries",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_calendar_entry.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_id",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign",
            "foreign_table_plural": "campaigns"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "calendar_entry_id",
            "name_plural": "calendar_entry_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "calendar_entry",
            "foreign_table_plural": "calendar_entries"
          },
          {
            "name": "date",
            "name_plural": "dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "campaign_count",
        "name_plural": "campaign_counts",
        "table_name": "campaign_counts",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_count.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "campaign_id",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign",
            "foreign_table_plural": "campaigns"
          },
          {
            "name": "total_count",
            "name_plural": "total_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "campaign_exclusion",
        "name_plural": "campaign_exclusions",
        "table_name": "campaign_exclusions",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_exclusion.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_id",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign",
            "foreign_table_plural": "campaigns"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          }
        ]
      },
      {
        "name": "campaign_group",
        "name_plural": "campaign_groups",
        "table_name": "campaign_groups",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "primary_id",
            "name_plural": "primary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_ids",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "campaign_message",
        "name_plural": "campaign_messages",
        "table_name": "campaign_messages",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_message.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_id",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign",
            "foreign_table_plural": "campaigns"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "opened",
            "name_plural": "openeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sent",
            "name_plural": "sents",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "failed",
            "name_plural": "faileds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "note",
            "name_plural": "notes",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_message_id",
            "name_plural": "parent_message_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sent_date",
            "name_plural": "sent_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "failed_reason",
            "name_plural": "failed_reasons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "unsubscribed",
            "name_plural": "unsubscribeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_contact_id",
            "name_plural": "parent_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sent_message_id",
            "name_plural": "sent_message_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "complaint",
            "name_plural": "complaints",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "delivered",
            "name_plural": "delivereds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fixed",
            "name_plural": "fixeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "campaign_messages_tracker",
        "name_plural": "campaign_messages_trackers",
        "table_name": "campaign_messages_trackers",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "campaign_message_id",
            "name_plural": "campaign_message_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign_message",
            "foreign_table_plural": "campaign_messages"
          },
          {
            "name": "tracker_id",
            "name_plural": "tracker_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tracker",
            "foreign_table_plural": "trackers"
          }
        ]
      },
      {
        "name": "campaign",
        "name_plural": "campaigns",
        "table_name": "campaigns",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "method",
            "name_plural": "methods",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "subject",
            "name_plural": "subjects",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_id",
            "name_plural": "email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_template",
            "foreign_table_plural": "email_templates"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "parent_id",
            "name_plural": "parent_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test",
            "name_plural": "tests",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "identity_id",
            "name_plural": "identity_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "identity",
            "foreign_table_plural": "identities"
          },
          {
            "name": "scheduled",
            "name_plural": "scheduleds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_weekday",
            "name_plural": "schedule_weekdays",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "scheduled_at",
            "name_plural": "scheduled_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_week",
            "name_plural": "schedule_weeks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_hour",
            "name_plural": "schedule_hours",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 10,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "allow_override",
            "name_plural": "allow_overrides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test_confirmed",
            "name_plural": "test_confirmeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "clear_exclusions",
            "name_plural": "clear_exclusions",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "hidden_tenants",
            "name_plural": "hidden_tenants",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_campaign",
            "name_plural": "enterprise_campaigns",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "selected_tenants",
            "name_plural": "selected_tenants",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test_emails",
            "name_plural": "test_emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "global_hide",
            "name_plural": "global_hides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "paused",
            "name_plural": "pauseds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_date",
            "name_plural": "schedule_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_interval_type",
            "name_plural": "schedule_interval_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "none",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_interval",
            "name_plural": "schedule_intervals",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_day_lock",
            "name_plural": "schedule_day_locks",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "none",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_auto_send",
            "name_plural": "schedule_auto_sends",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_send_tenants",
            "name_plural": "auto_send_tenants",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "alerts",
            "name_plural": "alerts",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "approvals",
            "name_plural": "approvals",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_send_throttle_override",
            "name_plural": "auto_send_throttle_overrides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_approve",
            "name_plural": "auto_approves",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "skips",
            "name_plural": "skips",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "campaigns_contact_list",
        "name_plural": "campaigns_contact_lists",
        "table_name": "campaigns_contact_lists",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "campaign_id",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "campaign",
            "foreign_table_plural": "campaigns"
          },
          {
            "name": "contact_list_id",
            "name_plural": "contact_list_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_list",
            "foreign_table_plural": "contact_lists"
          }
        ]
      },
      {
        "name": "cash_drawer",
        "name_plural": "cash_drawers",
        "table_name": "cash_drawers",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "amount",
            "name_plural": "amounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "arbalance",
            "name_plural": "arbalances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cardcount",
            "name_plural": "cardcounts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cardtotal",
            "name_plural": "cardtotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cashtotal",
            "name_plural": "cashtotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "changefund",
            "name_plural": "changefunds",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "checkcount",
            "name_plural": "checkcounts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "checktotal",
            "name_plural": "checktotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fund",
            "name_plural": "funds",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "held",
            "name_plural": "helds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lastcloseoutdate",
            "name_plural": "lastcloseoutdates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "laststartupdate",
            "name_plural": "laststartupdates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "paidouts",
            "name_plural": "paidouts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prevarbalance",
            "name_plural": "prevarbalances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "transactiondate",
            "name_plural": "transactiondates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "clearbit_quotum",
        "name_plural": "clearbit_quota",
        "table_name": "clearbit_quota",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/clearbit_quota.rb",
          "exist": true,
          "state": [
            "has_ruby_model",
            "nonconventional_name"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "klass",
            "name_plural": "klasses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "used",
            "name_plural": "useds",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "max",
            "name_plural": "maxes",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1000,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "start_date",
            "name_plural": "start_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "end_date",
            "name_plural": "end_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "comment",
        "name_plural": "comments",
        "table_name": "comments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/comment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "title",
            "name_plural": "titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": 50,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "comment",
            "name_plural": "comments",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "commentable_id",
            "name_plural": "commentable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "commentable_type",
            "name_plural": "commentable_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "company",
        "name_plural": "companies",
        "table_name": "companies",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/company.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "exclude_from_analysis",
            "name_plural": "exclude_from_analyses",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "walk_in",
            "name_plural": "walk_ins",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "avg_conversion_ratio",
            "name_plural": "avg_conversion_ratios",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mtd_sales",
            "name_plural": "mtd_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ytd_sales",
            "name_plural": "ytd_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_recalc",
            "name_plural": "needs_recalcs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_hash",
            "name_plural": "sales_hashes",
            "type": "hstore",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mtd_rank",
            "name_plural": "mtd_ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ytd_rank",
            "name_plural": "ytd_ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ly_rank",
            "name_plural": "ly_ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_rank",
            "name_plural": "rolling_12_month_ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ly_sales",
            "name_plural": "ly_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales",
            "name_plural": "rolling_12_month_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect",
            "name_plural": "prospects",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_type",
            "name_plural": "account_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_rank_ly",
            "name_plural": "rolling_12_month_rank_lies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales_ly",
            "name_plural": "rolling_12_month_sales_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_billtoaddress_id",
            "name_plural": "source_billtoaddress_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_billtocontact_id",
            "name_plural": "source_billtocontact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_salesrep_id",
            "name_plural": "source_salesrep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_shiptoaddress_id",
            "name_plural": "source_shiptoaddress_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_contact_id",
            "name_plural": "source_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_shippingmode_id",
            "name_plural": "source_shippingmode_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_taxtable_id",
            "name_plural": "source_taxtable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_do_not_mail",
            "name_plural": "marketing_do_not_mails",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_avg_conversion_ratio",
            "name_plural": "needs_avg_conversion_ratios",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_clearbit_data_fetch_date",
            "name_plural": "last_clearbit_data_fetch_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_cogs",
            "name_plural": "rolling_12_month_cogs",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_order_date",
            "name_plural": "last_order_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "growth_percentage",
            "name_plural": "growth_percentages",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lifetime_value",
            "name_plural": "lifetime_values",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_lifetime_value_recalc",
            "name_plural": "needs_lifetime_value_recalcs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "oldest_interaction",
            "name_plural": "oldest_interactions",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_1_month_sales",
            "name_plural": "rolling_1_month_sales",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "order_count",
            "name_plural": "order_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cache_data",
            "name_plural": "cache_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_viewed",
            "name_plural": "last_vieweds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "has_clearbit_data",
            "name_plural": "has_clearbit_data",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "clearbit_data",
            "name_plural": "clearbit_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "custom_data",
            "name_plural": "custom_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_payable_id",
            "name_plural": "account_payable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "master_account",
            "name_plural": "master_accounts",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_source",
            "name_plural": "lead_sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_source_2",
            "name_plural": "lead_source_2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_contact",
            "name_plural": "last_contacts",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_email_sent",
            "name_plural": "last_email_sents",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_email_received",
            "name_plural": "last_email_receiveds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_phone_call",
            "name_plural": "last_phone_calls",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_rank_ly_ly",
            "name_plural": "rolling_12_month_rank_ly_lies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales_ly_ly",
            "name_plural": "rolling_12_month_sales_ly_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_rank_ly_previous",
            "name_plural": "rolling_12_month_rank_ly_previous",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales_ly_previous",
            "name_plural": "rolling_12_month_sales_ly_previous",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_note",
            "name_plural": "account_notes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_note",
            "name_plural": "job_notes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "credit_limit",
            "name_plural": "credit_limits",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_created_date",
            "name_plural": "account_created_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_display_id",
            "name_plural": "account_display_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_type_code",
            "name_plural": "business_type_codes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_refreshed_at",
            "name_plural": "last_refreshed_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_refreshed_version",
            "name_plural": "last_refreshed_versions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_created_date",
            "name_plural": "company_created_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "web",
            "name_plural": "webs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "balance",
            "name_plural": "balances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "no_notifications",
            "name_plural": "no_notifications",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_sales_rep_update",
            "name_plural": "remote_sales_rep_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_pickup_date",
            "name_plural": "last_pickup_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "single_sale_only_at",
            "name_plural": "single_sale_only_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_lead_source_update",
            "name_plural": "remote_lead_source_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "send_invoice_ap_contact",
            "name_plural": "send_invoice_ap_contacts",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "primary_contact_id",
            "name_plural": "primary_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_id",
            "name_plural": "prospect_status_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status",
            "foreign_table_plural": "prospect_statuses"
          },
          {
            "name": "prospect_sentiment",
            "name_plural": "prospect_sentiments",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_address_id",
            "name_plural": "invoice_address_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "statement_address_id",
            "name_plural": "statement_address_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "est_spend",
            "name_plural": "est_spends",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "conv_prob",
            "name_plural": "conv_probs",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_account_update",
            "name_plural": "remote_account_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "created_ps",
            "name_plural": "created_ps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "walk_in_lead_transfer_initial",
            "name_plural": "walk_in_lead_transfer_initials",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "walk_in_lead_transfer_to",
            "name_plural": "walk_in_lead_transfer_tos",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_meeting",
            "name_plural": "last_meetings",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "meta_data",
            "name_plural": "meta_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_center",
            "name_plural": "mbe_centers",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "b2b",
            "name_plural": "b2bs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_id",
            "name_plural": "mbe_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "is_lead",
            "name_plural": "is_leads",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_privilege",
            "name_plural": "mbe_privileges",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_sale_at",
            "name_plural": "first_sale_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_platform_id",
            "name_plural": "sales_rep_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tmp_data",
            "name_plural": "tmp_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sale_order_date",
            "name_plural": "last_sale_order_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sale_pickup_date",
            "name_plural": "last_sale_pickup_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_shipment_date",
            "name_plural": "last_shipment_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_lapsed_date",
            "name_plural": "last_lapsed_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "propagate_sales_reps",
            "name_plural": "propagate_sales_reps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_rank",
            "name_plural": "financial_year_ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_sales",
            "name_plural": "financial_year_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_cogs",
            "name_plural": "financial_year_cogs",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_rank_ly",
            "name_plural": "financial_year_rank_lies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_sales_ly",
            "name_plural": "financial_year_sales_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_rank_ly_ly",
            "name_plural": "financial_year_rank_ly_lies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_sales_ly_ly",
            "name_plural": "financial_year_sales_ly_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "growth_percentage_financial_year",
            "name_plural": "growth_percentage_financial_years",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "company_metric",
        "name_plural": "company_metrics",
        "table_name": "company_metrics",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/company_metric.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "report_month",
            "name_plural": "report_months",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "report_series",
            "name_plural": "report_series",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "contact_group",
        "name_plural": "contact_groups",
        "table_name": "contact_groups",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_group.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_name",
            "name_plural": "first_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_name",
            "name_plural": "last_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email",
            "name_plural": "emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_count",
            "name_plural": "estimate_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_count",
            "name_plural": "invoice_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_total",
            "name_plural": "estimate_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_total",
            "name_plural": "invoice_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_estimate",
            "name_plural": "first_estimates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_invoice",
            "name_plural": "first_invoices",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_estimate",
            "name_plural": "last_estimates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_invoice",
            "name_plural": "last_invoices",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "count",
            "name_plural": "counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "sales_total",
            "name_plural": "sales_totals",
            "type": "hstore",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "contact_groups_contact",
        "name_plural": "contact_groups_contacts",
        "table_name": "contact_groups_contacts",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "contact_group_id",
            "name_plural": "contact_group_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_group",
            "foreign_table_plural": "contact_groups"
          }
        ]
      },
      {
        "name": "contact_list_count",
        "name_plural": "contact_list_counts",
        "table_name": "contact_list_counts",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list_count.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "contact_list_id",
            "name_plural": "contact_list_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_list",
            "foreign_table_plural": "contact_lists"
          },
          {
            "name": "total_count",
            "name_plural": "total_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "generate_duration",
            "name_plural": "generate_durations",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "contact_list_exclusion",
        "name_plural": "contact_list_exclusions",
        "table_name": "contact_list_exclusions",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list_exclusion.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_list_id",
            "name_plural": "contact_list_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_list",
            "foreign_table_plural": "contact_lists"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "contact_list_rule",
        "name_plural": "contact_list_rules",
        "table_name": "contact_list_rules",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list_rule.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_list_id",
            "name_plural": "contact_list_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_list",
            "foreign_table_plural": "contact_lists"
          },
          {
            "name": "category",
            "name_plural": "categories",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "operand",
            "name_plural": "operands",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "value",
            "name_plural": "values",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "value2",
            "name_plural": "value2s",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier",
            "name_plural": "modifiers",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier_operand",
            "name_plural": "modifier_operands",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier_value",
            "name_plural": "modifier_values",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier_value2",
            "name_plural": "modifier_value2s",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "negate",
            "name_plural": "negates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_id",
            "name_plural": "sales_rep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sales_rep",
            "foreign_table_plural": "sales_reps"
          },
          {
            "name": "taken_by_id",
            "name_plural": "taken_by_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier2",
            "name_plural": "modifier2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier2_operand",
            "name_plural": "modifier2_operands",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier2_value",
            "name_plural": "modifier2_values",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "modifier2_value2",
            "name_plural": "modifier2_value2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "contact_list",
        "name_plural": "contact_lists",
        "table_name": "contact_lists",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "icon",
            "name_plural": "icons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "colour",
            "name_plural": "colours",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hide_from_tenant",
            "name_plural": "hide_from_tenants",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "account_type",
            "name_plural": "account_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "account",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "contact_lists_contact",
        "name_plural": "contact_lists_contacts",
        "table_name": "contact_lists_contacts",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "contact_list_id",
            "name_plural": "contact_list_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_list",
            "foreign_table_plural": "contact_lists"
          }
        ]
      },
      {
        "name": "contact",
        "name_plural": "contacts",
        "table_name": "contacts",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_name",
            "name_plural": "first_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_name",
            "name_plural": "last_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email",
            "name_plural": "emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "gender",
            "name_plural": "genders",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "temp",
            "name_plural": "temps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_address_id",
            "name_plural": "source_address_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ready",
            "name_plural": "readies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assocation_checks",
            "name_plural": "assocation_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_id",
            "name_plural": "source_account_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_update_required",
            "name_plural": "remote_update_requireds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "in_group",
            "name_plural": "in_groups",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_contact_id",
            "name_plural": "parent_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mobile",
            "name_plural": "mobiles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fax",
            "name_plural": "faxes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "home_phone",
            "name_plural": "home_phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "twitter",
            "name_plural": "twitters",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "other",
            "name_plural": "others",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "facebook",
            "name_plural": "facebooks",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "website",
            "name_plural": "websites",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "buy_frequency",
            "name_plural": "buy_frequencies",
            "type": "float",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "days_outside_buy_freq",
            "name_plural": "days_outside_buy_freqs",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_do_not_mail",
            "name_plural": "marketing_do_not_mails",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_unsubscribe",
            "name_plural": "marketing_unsubscribes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_salesrep_id",
            "name_plural": "source_salesrep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales",
            "name_plural": "rolling_12_month_sales",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales_ly",
            "name_plural": "rolling_12_month_sales_lies",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "latest_order_date",
            "name_plural": "latest_order_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_cogs",
            "name_plural": "rolling_12_month_cogs",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_unsubscribe_reason",
            "name_plural": "marketing_unsubscribe_reasons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "on_suppression_list",
            "name_plural": "on_suppression_lists",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "growth_percentage",
            "name_plural": "growth_percentages",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_1_month_sales",
            "name_plural": "rolling_1_month_sales",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "order_count",
            "name_plural": "order_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address_id",
            "name_plural": "address_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "address",
            "foreign_table_plural": "addresses"
          },
          {
            "name": "average_invoice",
            "name_plural": "average_invoices",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "has_clearbit_data",
            "name_plural": "has_clearbit_data",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "clearbit_data",
            "name_plural": "clearbit_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "custom_data",
            "name_plural": "custom_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_clearbit_data_fetch_date",
            "name_plural": "last_clearbit_data_fetch_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_viewed",
            "name_plural": "last_vieweds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "guessed_gender",
            "name_plural": "guessed_genders",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "guessed_gender_confidence",
            "name_plural": "guessed_gender_confidences",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bounced_email_addresses",
            "name_plural": "bounced_email_addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_contact",
            "name_plural": "last_contacts",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_email_sent",
            "name_plural": "last_email_sents",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_email_received",
            "name_plural": "last_email_receiveds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_phone_call",
            "name_plural": "last_phone_calls",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rolling_12_month_sales_ly_ly",
            "name_plural": "rolling_12_month_sales_ly_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_sales_rep_update",
            "name_plural": "remote_sales_rep_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_pickup_date",
            "name_plural": "last_pickup_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_source",
            "name_plural": "lead_sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_source_2",
            "name_plural": "lead_source_2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prefix",
            "name_plural": "prefixes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "suffix",
            "name_plural": "suffixes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_email_remap",
            "name_plural": "needs_email_remaps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_title",
            "name_plural": "job_titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "est_spend",
            "name_plural": "est_spends",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "conv_prob",
            "name_plural": "conv_probs",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "next_activity_date",
            "name_plural": "next_activity_dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "next_activity_type",
            "name_plural": "next_activity_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "use_contact_address",
            "name_plural": "use_contact_addresses",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_id",
            "name_plural": "prospect_status_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status",
            "foreign_table_plural": "prospect_statuses"
          },
          {
            "name": "needs_email_validation",
            "name_plural": "needs_email_validations",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_inquiry_id",
            "name_plural": "source_inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_validation_attempts",
            "name_plural": "email_validation_attempts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "next_activity",
            "name_plural": "next_activities",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "oldest_rolling_12_invoice",
            "name_plural": "oldest_rolling_12_invoices",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "oldest_rolling_12_ly_invoice",
            "name_plural": "oldest_rolling_12_ly_invoices",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "oldest_rolling_12_ly_ly_invoice",
            "name_plural": "oldest_rolling_12_ly_ly_invoices",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "oldest_rolling_1_invoice",
            "name_plural": "oldest_rolling_1_invoices",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "unsubscribed",
            "name_plural": "unsubscribeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_meeting",
            "name_plural": "last_meetings",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "old_prospect_status_id",
            "name_plural": "old_prospect_status_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_created_at",
            "name_plural": "lead_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "do_not_sms",
            "name_plural": "do_not_sms",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "single_sale_only_at",
            "name_plural": "single_sale_only_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_sale_at",
            "name_plural": "first_sale_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_platform_id",
            "name_plural": "sales_rep_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tmp_data",
            "name_plural": "tmp_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sale_order_date",
            "name_plural": "last_sale_order_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sale_pickup_date",
            "name_plural": "last_sale_pickup_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_shipment_date",
            "name_plural": "last_shipment_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "oldest_interaction",
            "name_plural": "oldest_interactions",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_lapsed_date",
            "name_plural": "last_lapsed_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "privacy_data",
            "name_plural": "privacy_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "do_not_sms_reply",
            "name_plural": "do_not_sms_replies",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "potential",
            "name_plural": "potentials",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_rank",
            "name_plural": "financial_year_ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_sales",
            "name_plural": "financial_year_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_cogs",
            "name_plural": "financial_year_cogs",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_rank_ly",
            "name_plural": "financial_year_rank_lies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_sales_ly",
            "name_plural": "financial_year_sales_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_rank_ly_ly",
            "name_plural": "financial_year_rank_ly_lies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_sales_ly_ly",
            "name_plural": "financial_year_sales_ly_lies",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "growth_percentage_financial_year",
            "name_plural": "growth_percentage_financial_years",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "country",
        "name_plural": "countries",
        "table_name": "countries",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/country.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "countries_enterprise",
        "name_plural": "countries_enterprises",
        "table_name": "countries_enterprises",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "country_id",
            "name_plural": "country_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "country",
            "foreign_table_plural": "countries"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "country_state",
        "name_plural": "country_states",
        "table_name": "country_states",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/country_state.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "country_id",
            "name_plural": "country_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "country",
            "foreign_table_plural": "countries"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "country_states_holiday",
        "name_plural": "country_states_holidays",
        "table_name": "country_states_holidays",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "holiday_id",
            "name_plural": "holiday_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "holiday",
            "foreign_table_plural": "holidays"
          },
          {
            "name": "country_state_id",
            "name_plural": "country_state_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "country_state",
            "foreign_table_plural": "country_states"
          }
        ]
      },
      {
        "name": "deployment",
        "name_plural": "deployments",
        "table_name": "deployments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/deployment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "os",
            "name_plural": "os",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "checksum",
            "name_plural": "checksums",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "version",
            "name_plural": "versions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "built_on",
            "name_plural": "built_ons",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address",
            "name_plural": "addresses",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_alias",
        "name_plural": "email_aliases",
        "table_name": "email_aliases",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_alias.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "email",
            "name_plural": "emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_credential",
        "name_plural": "email_credentials",
        "table_name": "email_credentials",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_credential.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "platform",
            "name_plural": "platforms",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "credentials",
            "name_plural": "credentials",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_delivery",
        "name_plural": "email_deliveries",
        "table_name": "email_deliveries",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_delivery.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "message",
            "name_plural": "messages",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_message_activity",
        "name_plural": "email_message_activities",
        "table_name": "email_message_activities",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_message_activity.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_inbox_id",
            "name_plural": "email_inbox_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_email_message_id",
            "name_plural": "last_email_message_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_scan",
            "name_plural": "last_scans",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "forward_scan_id",
            "name_plural": "forward_scan_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reverse_scan_id",
            "name_plural": "reverse_scan_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_soft_bounce",
        "name_plural": "email_soft_bounces",
        "table_name": "email_soft_bounces",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_soft_bounce.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "email_address",
            "name_plural": "email_addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "soft_bounce_count",
            "name_plural": "soft_bounce_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_status",
        "name_plural": "email_statuses",
        "table_name": "email_statuses",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_status.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_address",
            "name_plural": "email_addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "info",
            "name_plural": "infos",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_tag",
        "name_plural": "email_tags",
        "table_name": "email_tags",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_tag.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "label_id",
            "name_plural": "label_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "label_type",
            "name_plural": "label_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_tags_email",
        "name_plural": "email_tags_emails",
        "table_name": "email_tags_emails",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "email_id",
            "name_plural": "email_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email",
            "foreign_table_plural": "emails"
          },
          {
            "name": "email_tag_id",
            "name_plural": "email_tag_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_tag",
            "foreign_table_plural": "email_tags"
          }
        ]
      },
      {
        "name": "email_template_category",
        "name_plural": "email_template_categories",
        "table_name": "email_template_categories",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template_category.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_id",
            "name_plural": "email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_template",
            "foreign_table_plural": "email_templates"
          },
          {
            "name": "category",
            "name_plural": "categories",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_template_field",
        "name_plural": "email_template_fields",
        "table_name": "email_template_fields",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template_field.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_id",
            "name_plural": "email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_template",
            "foreign_table_plural": "email_templates"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "required",
            "name_plural": "requireds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_template_value",
        "name_plural": "email_template_values",
        "table_name": "email_template_values",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template_value.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_field_id",
            "name_plural": "email_template_field_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_template_field",
            "foreign_table_plural": "email_template_fields"
          },
          {
            "name": "element_id",
            "name_plural": "element_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "element_type",
            "name_plural": "element_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "value",
            "name_plural": "values",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "email_template",
        "name_plural": "email_templates",
        "table_name": "email_templates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "subject",
            "name_plural": "subjects",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "key",
            "name_plural": "keys",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shell",
            "name_plural": "shells",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wrapper_id",
            "name_plural": "wrapper_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hidden",
            "name_plural": "hiddens",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "auto_cc",
            "name_plural": "auto_ccs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_cc_sales_rep",
            "name_plural": "auto_cc_sales_reps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "archived",
            "name_plural": "archiveds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "production_location_id",
            "name_plural": "production_location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "production_location",
            "foreign_table_plural": "production_locations"
          },
          {
            "name": "default_attach",
            "name_plural": "default_attaches",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "copied_email_template_id",
            "name_plural": "copied_email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "copied_similarity",
            "name_plural": "copied_similarities",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "copied_root_email_template_id",
            "name_plural": "copied_root_email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "copied_depth",
            "name_plural": "copied_depths",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "root_similarity",
            "name_plural": "root_similarities",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "use_roboto",
            "name_plural": "use_robotos",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_validation_reset_contact_id",
        "name_plural": "email_validation_reset_contact_ids",
        "table_name": "email_validation_reset_contact_ids",
        "pk": {
          "name": "contact_id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email_validation",
        "name_plural": "email_validations",
        "table_name": "email_validations",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_validation.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "address",
            "name_plural": "addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "code",
            "name_plural": "codes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_id",
            "name_plural": "parent_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fixed",
            "name_plural": "fixeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rescan_needed",
            "name_plural": "rescan_neededs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pending_rescan",
            "name_plural": "pending_rescans",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "email",
        "name_plural": "emails",
        "table_name": "emails",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "to",
            "name_plural": "tos",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "from",
            "name_plural": "froms",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "read",
            "name_plural": "reads",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "from_user_id",
            "name_plural": "from_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "to_user_id",
            "name_plural": "to_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "direction",
            "name_plural": "directions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "subject",
            "name_plural": "subjects",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_id",
            "name_plural": "email_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email",
            "foreign_table_plural": "emails"
          },
          {
            "name": "thread_id",
            "name_plural": "thread_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "processed",
            "name_plural": "processeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "labels",
            "name_plural": "labels",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sending_as_user_id",
            "name_plural": "sending_as_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cc",
            "name_plural": "ccs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "attachment_uuid",
            "name_plural": "attachment_uuids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test",
            "name_plural": "tests",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bcc",
            "name_plural": "bccs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "failed_reason",
            "name_plural": "failed_reasons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "message_id",
            "name_plural": "message_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "error_backoff",
            "name_plural": "error_backoffs",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bulk",
            "name_plural": "bulks",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_item_contact_id",
            "name_plural": "prospect_status_item_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_item_contact",
            "foreign_table_plural": "prospect_status_item_contacts"
          }
        ]
      },
      {
        "name": "emails_tracker",
        "name_plural": "emails_trackers",
        "table_name": "emails_trackers",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "email_id",
            "name_plural": "email_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email",
            "foreign_table_plural": "emails"
          },
          {
            "name": "tracker_id",
            "name_plural": "tracker_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tracker",
            "foreign_table_plural": "trackers"
          }
        ]
      },
      {
        "name": "enterprise_business_welcome",
        "name_plural": "enterprise_business_welcomes",
        "table_name": "enterprise_business_welcomes",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise_business_welcome.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year",
            "name_plural": "financial_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "enterprise_salestarget",
        "name_plural": "enterprise_salestargets",
        "table_name": "enterprise_salestargets",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise_salestarget.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_id",
            "name_plural": "prospect_status_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status",
            "foreign_table_plural": "prospect_statuses"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "amount",
            "name_plural": "amounts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "items",
            "name_plural": "items",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          }
        ]
      },
      {
        "name": "enterprise_togglefield",
        "name_plural": "enterprise_togglefields",
        "table_name": "enterprise_togglefields",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise_togglefield.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "field",
            "name_plural": "fields",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 40,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "read_only",
            "name_plural": "read_onlies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "enterprise",
        "name_plural": "enterprises",
        "table_name": "enterprises",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_eula",
            "name_plural": "show_eulas",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "eula_body",
            "name_plural": "eula_bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "setup_user",
            "name_plural": "setup_users",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "setup_password",
            "name_plural": "setup_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_test_address",
            "name_plural": "campaign_test_addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "unsubscribe_template",
            "name_plural": "unsubscribe_templates",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "banner_id",
            "name_plural": "banner_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_email_template_id",
            "name_plural": "default_email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_approval_address",
            "name_plural": "campaign_approval_addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "intercom_app_id",
            "name_plural": "intercom_app_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "freshchat_token",
            "name_plural": "freshchat_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_comment_template_id",
            "name_plural": "portal_estimate_comment_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_approved_template_id",
            "name_plural": "portal_estimate_approved_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_canceled_template_id",
            "name_plural": "portal_estimate_canceled_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_copy",
            "name_plural": "portal_estimate_copies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_company_emailt_id",
            "name_plural": "default_company_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_contact_emailt_id",
            "name_plural": "default_contact_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_estimate_emailt_id",
            "name_plural": "default_estimate_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_order_emailt_id",
            "name_plural": "default_order_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_sale_emailt_id",
            "name_plural": "default_sale_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "currency_locale",
            "name_plural": "currency_locales",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "statement_template_name",
            "name_plural": "statement_template_names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "statement_template",
            "name_plural": "statement_templates",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_gen_link",
            "name_plural": "pdf_gen_links",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_salestarget_amount",
            "name_plural": "default_salestarget_amounts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_salestarget_number",
            "name_plural": "default_salestarget_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted_at",
            "name_plural": "deleted_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "deleted_at",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "api_token",
            "name_plural": "api_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_inquiry_emailt_id",
            "name_plural": "default_inquiry_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "connection_type",
            "name_plural": "connection_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "printsmith",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "locale",
            "name_plural": "locales",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "en",
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_comment_template_id",
            "name_plural": "portal_proof_comment_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_approved_template_id",
            "name_plural": "portal_proof_approved_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_copy",
            "name_plural": "portal_proof_copies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "brand_colors",
            "name_plural": "brand_colors",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_type",
            "name_plural": "platform_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_roboto_font",
            "name_plural": "default_roboto_fonts",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "agi_brand",
            "name_plural": "agi_brands",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_language",
            "name_plural": "show_languages",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_shipment_emailt_id",
            "name_plural": "default_shipment_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_multi_users",
            "name_plural": "show_multi_users",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_name",
            "name_plural": "platform_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_create_identities",
            "name_plural": "tenant_create_identities",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_edit_identities",
            "name_plural": "tenant_edit_identities",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_ses_verification",
            "name_plural": "tenant_ses_verifications",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_tenant_id",
            "name_plural": "default_tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enabled_lang",
            "name_plural": "enabled_langs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": [
              "en",
              "en_KKA"
            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_blacklist",
            "name_plural": "email_blacklists",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "api_base_url",
            "name_plural": "api_base_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "api_base_token",
            "name_plural": "api_base_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "api_username",
            "name_plural": "api_usernames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "api_password",
            "name_plural": "api_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_marketing_name_base",
            "name_plural": "default_marketing_name_bases",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_website_base",
            "name_plural": "default_website_bases",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_facebook",
            "name_plural": "default_facebooks",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_twitter",
            "name_plural": "default_twitters",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_instagram",
            "name_plural": "default_instagrams",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_youtube",
            "name_plural": "default_youtubes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_linked_in",
            "name_plural": "default_linked_ins",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "csv_col_sep",
            "name_plural": "csv_col_seps",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": ",",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "currency_decimal",
            "name_plural": "currency_decimals",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "default",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_welcome",
            "name_plural": "business_welcomes",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_growth",
            "name_plural": "business_growths",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 5,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_proof_emailt_id",
            "name_plural": "default_proof_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_revision_emailt_id",
            "name_plural": "default_revision_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_proof_reminder_emailt_id",
            "name_plural": "default_proof_reminder_emailt_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "starter_pack_url",
            "name_plural": "starter_pack_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "online_help_url",
            "name_plural": "online_help_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_signature_template",
            "name_plural": "user_signature_templates",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_banner_id",
            "name_plural": "proof_banner_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_banner",
            "name_plural": "marketing_banners",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "docs_second",
            "name_plural": "docs_seconds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_blog",
            "name_plural": "default_blogs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_request_quote",
            "name_plural": "default_request_quotes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_pinterest",
            "name_plural": "default_pinterests",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_section_url",
            "name_plural": "marketing_section_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_titles",
            "name_plural": "job_titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_primary_focus",
            "name_plural": "business_primary_focus",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bs_benchmark_revenue",
            "name_plural": "bs_benchmark_revenues",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 7.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "estimate_element",
        "name_plural": "estimate_elements",
        "table_name": "estimate_elements",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/estimate_element.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_id",
            "name_plural": "estimate_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "estimate",
            "foreign_table_plural": "estimates"
          },
          {
            "name": "element_id",
            "name_plural": "element_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "element_type",
            "name_plural": "element_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "estimate",
        "name_plural": "estimates",
        "table_name": "estimates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/estimate.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "grand_total",
            "name_plural": "grand_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted_at",
            "name_plural": "deleted_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "deleted_at",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "on_pending_list",
            "name_plural": "on_pending_lists",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wanted_by",
            "name_plural": "wanted_bies",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "off_pending_date",
            "name_plural": "off_pending_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reorder_date",
            "name_plural": "reorder_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "salesrep_id",
            "name_plural": "salesrep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notes_id",
            "name_plural": "notes_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "note",
            "foreign_table_plural": "notes"
          },
          {
            "name": "special_instructions_id",
            "name_plural": "special_instructions_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "documentlocation_id",
            "name_plural": "documentlocation_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_cost",
            "name_plural": "total_costs",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_taken_by",
            "name_plural": "source_taken_bies",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_by",
            "name_plural": "created_bies",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "customer_po",
            "name_plural": "customer_pos",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_notes",
            "name_plural": "estimate_notes",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_number",
            "name_plural": "invoice_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_sub_total",
            "name_plural": "price_sub_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_total",
            "name_plural": "price_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "costed",
            "name_plural": "costeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "firm_wanted_by_date",
            "name_plural": "firm_wanted_by_dates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "source_estimate_id",
            "name_plural": "source_estimate_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_id",
            "name_plural": "source_invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "voided",
            "name_plural": "voideds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "converted_invoice_id",
            "name_plural": "converted_invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "converted_invoice_number",
            "name_plural": "converted_invoice_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_estimate_number",
            "name_plural": "source_estimate_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_number",
            "name_plural": "source_invoice_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "actioned",
            "name_plural": "actioneds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tax",
            "name_plural": "taxes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "grand_total_inc_tax",
            "name_plural": "grand_total_inc_taxes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "overdue_actioned",
            "name_plural": "overdue_actioneds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_pdf",
            "name_plural": "needs_pdfs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "key",
            "name_plural": "keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ordered_date",
            "name_plural": "ordered_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ready",
            "name_plural": "readies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assocation_checks",
            "name_plural": "assocation_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_id",
            "name_plural": "source_account_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_contact_id",
            "name_plural": "source_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "production_location_id",
            "name_plural": "production_location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "production_location",
            "foreign_table_plural": "production_locations"
          },
          {
            "name": "public_token",
            "name_plural": "public_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "instructions",
            "name_plural": "instructions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "workflow_status",
            "name_plural": "workflow_statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "follow_up_date",
            "name_plural": "follow_up_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "follow_up_count",
            "name_plural": "follow_up_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_update_required",
            "name_plural": "remote_update_requireds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reason",
            "name_plural": "reasons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_id",
            "name_plural": "pdf_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "pdf",
            "foreign_table_plural": "pdfs"
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taken_by_id",
            "name_plural": "taken_by_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_group_id",
            "name_plural": "contact_group_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_group",
            "foreign_table_plural": "contact_groups"
          },
          {
            "name": "rounded_amount",
            "name_plural": "rounded_amounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taken_by_user_id",
            "name_plural": "taken_by_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "report_name",
            "name_plural": "report_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_error_count",
            "name_plural": "pdf_error_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "retry_location_update",
            "name_plural": "retry_location_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "archived_at",
            "name_plural": "archived_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "archived_user_id",
            "name_plural": "archived_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "retry_archive",
            "name_plural": "retry_archives",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_contact_id",
            "name_plural": "parent_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reason_value",
            "name_plural": "reason_values",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty_skip_pdf",
            "name_plural": "dirty_skip_pdfs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_descriptions",
            "name_plural": "job_descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_refreshed_at",
            "name_plural": "last_refreshed_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_by",
            "name_plural": "proof_bies",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "web",
            "name_plural": "webs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holdstate_id",
            "name_plural": "holdstate_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_key",
            "name_plural": "portal_keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "approval_status",
            "name_plural": "approval_statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_sales_rep_update",
            "name_plural": "remote_sales_rep_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_proof_by_update",
            "name_plural": "remote_proof_by_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "retry_convert_update",
            "name_plural": "retry_convert_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_id",
            "name_plural": "inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "inquiry",
            "foreign_table_plural": "inquiries"
          },
          {
            "name": "inquiry_auto",
            "name_plural": "inquiry_autos",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "converted",
            "name_plural": "converteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_platform_id",
            "name_plural": "sales_rep_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tmp_data",
            "name_plural": "tmp_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "etl_setting",
        "name_plural": "etl_settings",
        "table_name": "etl_settings",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/etl_setting.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "klass",
            "name_plural": "klasses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_created_at",
            "name_plural": "last_created_ats",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_updated_at",
            "name_plural": "last_updated_ats",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_created_id",
            "name_plural": "last_created_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_updated_id",
            "name_plural": "last_updated_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_created_count",
            "name_plural": "last_created_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_updated_count",
            "name_plural": "last_updated_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_created_offset",
            "name_plural": "last_created_offsets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_updated_offset",
            "name_plural": "last_updated_offsets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "event_stat",
        "name_plural": "event_stats",
        "table_name": "event_stats",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/event_stat.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "event_type",
            "name_plural": "event_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "data",
            "name_plural": "data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "duration",
            "name_plural": "durations",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source",
            "name_plural": "sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "event",
        "name_plural": "events",
        "table_name": "events",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/event.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "event_type",
            "name_plural": "event_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "queued",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "data",
            "name_plural": "data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "schedule_date",
            "name_plural": "schedule_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source",
            "name_plural": "sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "exclusion",
        "name_plural": "exclusions",
        "table_name": "exclusions",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/exclusion.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "filter_default",
        "name_plural": "filter_defaults",
        "table_name": "filter_defaults",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/filter_default.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "section",
            "name_plural": "sections",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "group",
        "name_plural": "groups",
        "table_name": "groups",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/group.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "group_type",
            "name_plural": "group_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default",
            "name_plural": "defaults",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "groups_tenant",
        "name_plural": "groups_tenants",
        "table_name": "groups_tenants",
        "pk": {
          "name": null,
          "type": null,
          "exist": false
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "group_id",
            "name_plural": "group_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "group",
            "foreign_table_plural": "groups"
          }
        ]
      },
      {
        "name": "hidden_email_template",
        "name_plural": "hidden_email_templates",
        "table_name": "hidden_email_templates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_email_template.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_id",
            "name_plural": "email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_template",
            "foreign_table_plural": "email_templates"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "hidden_holiday",
        "name_plural": "hidden_holidays",
        "table_name": "hidden_holidays",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_holiday.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holiday_id",
            "name_plural": "holiday_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "holiday",
            "foreign_table_plural": "holidays"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "hidden_lead_type",
        "name_plural": "hidden_lead_types",
        "table_name": "hidden_lead_types",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_lead_type.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "hidden_task_type",
        "name_plural": "hidden_task_types",
        "table_name": "hidden_task_types",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_task_type.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "task_type_id",
            "name_plural": "task_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "task_type",
            "foreign_table_plural": "task_types"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          }
        ]
      },
      {
        "name": "holiday_date",
        "name_plural": "holiday_dates",
        "table_name": "holiday_dates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/holiday_date.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holiday_id",
            "name_plural": "holiday_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "holiday",
            "foreign_table_plural": "holidays"
          },
          {
            "name": "date",
            "name_plural": "dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "holiday",
        "name_plural": "holidays",
        "table_name": "holidays",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/holiday.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "state",
            "name_plural": "states",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "year",
            "name_plural": "years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "month",
            "name_plural": "months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "day",
            "name_plural": "days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "identity",
        "name_plural": "identities",
        "table_name": "identities",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/identity.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "email_marketing",
            "name_plural": "email_marketings",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_name",
            "name_plural": "contact_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_validated",
            "name_plural": "last_validateds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default",
            "name_plural": "defaults",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address_1",
            "name_plural": "address_1s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address_2",
            "name_plural": "address_2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "suburb",
            "name_plural": "suburbs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "state",
            "name_plural": "states",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "postcode",
            "name_plural": "postcodes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_hours",
            "name_plural": "business_hours",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "website",
            "name_plural": "websites",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_name",
            "name_plural": "marketing_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holiday_last_day",
            "name_plural": "holiday_last_days",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holiday_returning",
            "name_plural": "holiday_returnings",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "website_url",
            "name_plural": "website_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "request_quote_url",
            "name_plural": "request_quote_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "facebook",
            "name_plural": "facebooks",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "twitter",
            "name_plural": "twitters",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "instagram",
            "name_plural": "instagrams",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pinterest",
            "name_plural": "pinterests",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "review_url",
            "name_plural": "review_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "number",
            "name_plural": "numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "blog",
            "name_plural": "blogs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "linked_in",
            "name_plural": "linked_ins",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "youtube",
            "name_plural": "youtubes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_status",
            "name_plural": "email_statuses",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "inquiry",
        "name_plural": "inquiries",
        "table_name": "inquiries",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/inquiry.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "from_name",
            "name_plural": "from_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "from_email",
            "name_plural": "from_emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "pinned",
            "name_plural": "pinneds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "priority",
            "name_plural": "priorities",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_type",
            "name_plural": "inquiry_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_name",
            "name_plural": "first_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_name",
            "name_plural": "last_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "postcode",
            "name_plural": "postcodes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_name",
            "name_plural": "company_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "replied",
            "name_plural": "replieds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "lead_source",
            "name_plural": "lead_sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "active_inquiry",
            "name_plural": "active_inquiries",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_number",
            "name_plural": "invoice_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_status",
            "name_plural": "inquiry_statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notification_ids",
            "name_plural": "notification_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "salesrep_id",
            "name_plural": "salesrep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lost_reason",
            "name_plural": "lost_reasons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "unique_id",
            "name_plural": "unique_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "has_asset",
            "name_plural": "has_assets",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_identifier",
            "name_plural": "inquiry_identifiers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_platform_id",
            "name_plural": "sales_rep_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tmp_data",
            "name_plural": "tmp_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "inquiry_attachment",
        "name_plural": "inquiry_attachments",
        "table_name": "inquiry_attachments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/inquiry_attachment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_id",
            "name_plural": "inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "inquiry",
            "foreign_table_plural": "inquiries"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "url",
            "name_plural": "urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "interest_category",
        "name_plural": "interest_categories",
        "table_name": "interest_categories",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/interest_category.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "interest_type",
            "name_plural": "interest_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "interest_context",
        "name_plural": "interest_contexts",
        "table_name": "interest_contexts",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/interest_context.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "interest_id",
            "name_plural": "interest_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "interest",
            "foreign_table_plural": "interests"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "interest_type",
            "name_plural": "interest_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "interest",
        "name_plural": "interests",
        "table_name": "interests",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/interest.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "interest_category_id",
            "name_plural": "interest_category_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "interest_category",
            "foreign_table_plural": "interest_categories"
          }
        ]
      },
      {
        "name": "invoice_element",
        "name_plural": "invoice_elements",
        "table_name": "invoice_elements",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/invoice_element.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_id",
            "name_plural": "invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "invoice",
            "foreign_table_plural": "invoices"
          },
          {
            "name": "element_id",
            "name_plural": "element_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "element_type",
            "name_plural": "element_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "invoice",
        "name_plural": "invoices",
        "table_name": "invoices",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/invoice.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "grand_total",
            "name_plural": "grand_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted_at",
            "name_plural": "deleted_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "deleted_at",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed",
            "name_plural": "completeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pickup_date",
            "name_plural": "pickup_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wanted_by",
            "name_plural": "wanted_bies",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "off_pending_date",
            "name_plural": "off_pending_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reorder_date",
            "name_plural": "reorder_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "salesrep_id",
            "name_plural": "salesrep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notes_id",
            "name_plural": "notes_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "note",
            "foreign_table_plural": "notes"
          },
          {
            "name": "special_instructions_id",
            "name_plural": "special_instructions_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "documentlocation_id",
            "name_plural": "documentlocation_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_cost",
            "name_plural": "total_costs",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_taken_by",
            "name_plural": "source_taken_bies",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_by",
            "name_plural": "created_bies",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "customer_po",
            "name_plural": "customer_pos",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_notes",
            "name_plural": "estimate_notes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_number",
            "name_plural": "invoice_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_sub_total",
            "name_plural": "price_sub_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_total",
            "name_plural": "price_totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "costed",
            "name_plural": "costeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "firm_wanted_by_date",
            "name_plural": "firm_wanted_by_dates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "on_pending_list",
            "name_plural": "on_pending_lists",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "production_location_id",
            "name_plural": "production_location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "production_location",
            "foreign_table_plural": "production_locations"
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "source_invoice_id",
            "name_plural": "source_invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_estimate_id",
            "name_plural": "source_estimate_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "voided",
            "name_plural": "voideds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "converted_invoice_number",
            "name_plural": "converted_invoice_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_number",
            "name_plural": "source_invoice_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_estimate_number",
            "name_plural": "source_estimate_numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tax",
            "name_plural": "taxes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "grand_total_inc_tax",
            "name_plural": "grand_total_inc_taxes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "overdue_actioned",
            "name_plural": "overdue_actioneds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "key",
            "name_plural": "keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_pdf",
            "name_plural": "needs_pdfs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ordered_date",
            "name_plural": "ordered_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ready",
            "name_plural": "readies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assocation_checks",
            "name_plural": "assocation_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_contact_id",
            "name_plural": "source_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_id",
            "name_plural": "source_account_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "public_token",
            "name_plural": "public_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "instructions",
            "name_plural": "instructions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_id",
            "name_plural": "pdf_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "pdf",
            "foreign_table_plural": "pdfs"
          },
          {
            "name": "accounting_month",
            "name_plural": "accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_year",
            "name_plural": "accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_summary_id",
            "name_plural": "sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sales_summary",
            "foreign_table_plural": "sales_summaries"
          },
          {
            "name": "taken_by_id",
            "name_plural": "taken_by_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_group_id",
            "name_plural": "contact_group_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact_group",
            "foreign_table_plural": "contact_groups"
          },
          {
            "name": "rounded_amount",
            "name_plural": "rounded_amounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_day",
            "name_plural": "daily_accounting_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_month",
            "name_plural": "daily_accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_year",
            "name_plural": "daily_accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_sales_summary_id",
            "name_plural": "daily_sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taken_by_user_id",
            "name_plural": "taken_by_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "report_name",
            "name_plural": "report_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_update_required",
            "name_plural": "remote_update_requireds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_error_count",
            "name_plural": "pdf_error_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "retry_location_update",
            "name_plural": "retry_location_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "amount_due",
            "name_plural": "amount_dues",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_contact_id",
            "name_plural": "parent_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty_skip_pdf",
            "name_plural": "dirty_skip_pdfs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_descriptions",
            "name_plural": "job_descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_refreshed_at",
            "name_plural": "last_refreshed_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_by",
            "name_plural": "proof_bies",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "web",
            "name_plural": "webs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reorder_followed_up",
            "name_plural": "reorder_followed_ups",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holdstate_id",
            "name_plural": "holdstate_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_sales_rep_update",
            "name_plural": "remote_sales_rep_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_po_update",
            "name_plural": "remote_po_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remote_proof_by_update",
            "name_plural": "remote_proof_by_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_id",
            "name_plural": "inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "inquiry",
            "foreign_table_plural": "inquiries"
          },
          {
            "name": "portal_key",
            "name_plural": "portal_keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_approval_status",
            "name_plural": "proof_approval_statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_approved_id",
            "name_plural": "proof_approved_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_id",
            "name_plural": "proof_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "proof",
            "foreign_table_plural": "proofs"
          },
          {
            "name": "converted",
            "name_plural": "converteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_external_id",
            "name_plural": "source_invoice_external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "meta_data",
            "name_plural": "meta_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sale_id",
            "name_plural": "sale_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "invoice",
            "foreign_table_plural": "invoices"
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_type",
            "name_plural": "invoice_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_platform_id",
            "name_plural": "sales_rep_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tmp_data",
            "name_plural": "tmp_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_salesrep_id",
            "name_plural": "source_salesrep_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "job_stat",
        "name_plural": "job_stats",
        "table_name": "job_stats",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/job_stat.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_name",
            "name_plural": "job_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_id",
            "name_plural": "job_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_start",
            "name_plural": "job_starts",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_end",
            "name_plural": "job_ends",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "exception_type",
            "name_plural": "exception_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "exception_message",
            "name_plural": "exception_messages",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "lead_source",
        "name_plural": "lead_sources",
        "table_name": "lead_sources",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/lead_source.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "lead_type",
        "name_plural": "lead_types",
        "table_name": "lead_types",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/lead_type.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "lead_status_visibility",
            "name_plural": "lead_status_visibilities",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "active_status_version",
            "name_plural": "active_status_versions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 2,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "is_default",
            "name_plural": "is_defaults",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "list",
        "name_plural": "lists",
        "table_name": "lists",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/list.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "filter",
            "name_plural": "filters",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "site_wide",
            "name_plural": "site_wides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "location",
        "name_plural": "locations",
        "table_name": "locations",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/location.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default",
            "name_plural": "defaults",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "identity_id",
            "name_plural": "identity_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "identity",
            "foreign_table_plural": "identities"
          }
        ]
      },
      {
        "name": "marketing_group",
        "name_plural": "marketing_groups",
        "table_name": "marketing_groups",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/marketing_group.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_ids",
            "name_plural": "email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_ids",
            "name_plural": "campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "excluded_campaign_ids",
            "name_plural": "excluded_campaign_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "excluded_email_template_ids",
            "name_plural": "excluded_email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "meeting_attendee",
        "name_plural": "meeting_attendees",
        "table_name": "meeting_attendees",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/meeting_attendee.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "meeting_id",
            "name_plural": "meeting_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "meeting",
            "foreign_table_plural": "meetings"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "email_address",
            "name_plural": "email_addresses",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "custom_time_zone",
            "name_plural": "custom_time_zones",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "note",
            "name_plural": "notes",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_calendar_entry_id",
            "name_plural": "user_calendar_entry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "meeting",
        "name_plural": "meetings",
        "table_name": "meetings",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/meeting.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "message",
            "name_plural": "messages",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location",
            "name_plural": "locations",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "title",
            "name_plural": "titles",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "summary",
            "name_plural": "summaries",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "start_date",
            "name_plural": "start_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "end_date",
            "name_plural": "end_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "note",
            "name_plural": "notes",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_needs_update",
            "name_plural": "calendar_needs_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_calendar_entry_id",
            "name_plural": "user_calendar_entry_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reminder_sent",
            "name_plural": "reminder_sents",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_item_contact_id",
            "name_plural": "prospect_status_item_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_item_contact",
            "foreign_table_plural": "prospect_status_item_contacts"
          }
        ]
      },
      {
        "name": "news",
        "name_plural": "news",
        "table_name": "news",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/news.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "title",
            "name_plural": "titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "next_activity",
        "name_plural": "next_activities",
        "table_name": "next_activities",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/next_activity.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "scheduled",
            "name_plural": "scheduleds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "note",
        "name_plural": "notes",
        "table_name": "notes",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/note.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "message",
            "name_plural": "messages",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "title",
            "name_plural": "titles",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_item_id",
            "name_plural": "prospect_status_item_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_item",
            "foreign_table_plural": "prospect_status_items"
          }
        ]
      },
      {
        "name": "original_user",
        "name_plural": "original_users",
        "table_name": "original_users",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/original_user.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "target_user_id",
            "name_plural": "target_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "uuid",
            "name_plural": "uuids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "pdf",
        "name_plural": "pdfs",
        "table_name": "pdfs",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/pdf.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "page_count",
            "name_plural": "page_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "key",
            "name_plural": "keys",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "pending_attachment",
        "name_plural": "pending_attachments",
        "table_name": "pending_attachments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/pending_attachment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "uuid",
            "name_plural": "uuids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "file_name",
            "name_plural": "file_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "path",
            "name_plural": "paths",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "complete",
            "name_plural": "completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inline",
            "name_plural": "inlines",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_asset",
            "name_plural": "needs_assets",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "error",
            "name_plural": "errors",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "warn",
            "name_plural": "warns",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bulk",
            "name_plural": "bulks",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "phone_call",
        "name_plural": "phone_calls",
        "table_name": "phone_calls",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/phone_call.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "phoneable_id",
            "name_plural": "phoneable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phoneable_type",
            "name_plural": "phoneable_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "to",
            "name_plural": "tos",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "subject",
            "name_plural": "subjects",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "call_date",
            "name_plural": "call_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "call_type",
            "name_plural": "call_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "twillio_message_sid",
            "name_plural": "twillio_message_sids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sms_status",
            "name_plural": "sms_statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test_number",
            "name_plural": "test_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_item_contact_id",
            "name_plural": "prospect_status_item_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_item_contact",
            "foreign_table_plural": "prospect_status_item_contacts"
          },
          {
            "name": "twillio_message",
            "name_plural": "twillio_messages",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sms_reply",
            "name_plural": "sms_replies",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "portal_comment",
        "name_plural": "portal_comments",
        "table_name": "portal_comments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/portal_comment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "context_type",
            "name_plural": "context_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "context_id",
            "name_plural": "context_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_id",
            "name_plural": "proof_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "proof",
            "foreign_table_plural": "proofs"
          }
        ]
      },
      {
        "name": "production_location",
        "name_plural": "production_locations",
        "table_name": "production_locations",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/production_location.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_key",
            "name_plural": "printsmith_keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "orderby",
            "name_plural": "orderbies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "proof",
        "name_plural": "proofs",
        "table_name": "proofs",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/proof.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "asset_data",
            "name_plural": "asset_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "approval_status",
            "name_plural": "approval_statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_id",
            "name_plural": "invoice_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "invoice",
            "foreign_table_plural": "invoices"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "revision_of_id",
            "name_plural": "revision_of_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "revision_count",
            "name_plural": "revision_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "number",
            "name_plural": "numbers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "approval_date",
            "name_plural": "approval_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "prospect_status_item_contact",
        "name_plural": "prospect_status_item_contacts",
        "table_name": "prospect_status_item_contacts",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status_item_contact.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_item_id",
            "name_plural": "prospect_status_item_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_item",
            "foreign_table_plural": "prospect_status_items"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "start_date",
            "name_plural": "start_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "due_date",
            "name_plural": "due_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completion_date",
            "name_plural": "completion_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "prospect_status_item",
        "name_plural": "prospect_status_items",
        "table_name": "prospect_status_items",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status_item.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "prospect_status_id",
            "name_plural": "prospect_status_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status",
            "foreign_table_plural": "prospect_statuses"
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "position",
            "name_plural": "positions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "item_type",
            "name_plural": "item_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "start_after_days",
            "name_plural": "start_after_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completion_time",
            "name_plural": "completion_times",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_template_id",
            "name_plural": "email_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "email_template",
            "foreign_table_plural": "email_templates"
          }
        ]
      },
      {
        "name": "prospect_status_version",
        "name_plural": "prospect_status_versions",
        "table_name": "prospect_status_versions",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status_version.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "version_no",
            "name_plural": "version_nos",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "prospect_status",
        "name_plural": "prospect_statuses",
        "table_name": "prospect_statuses",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "position",
            "name_plural": "positions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_type_id",
            "name_plural": "lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "lead_type",
            "foreign_table_plural": "lead_types"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "prospect_status_version_id",
            "name_plural": "prospect_status_version_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_version",
            "foreign_table_plural": "prospect_status_versions"
          }
        ]
      },
      {
        "name": "read_mark",
        "name_plural": "read_marks",
        "table_name": "read_marks",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "readable_id",
            "name_plural": "readable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "readable_type",
            "name_plural": "readable_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reader_id",
            "name_plural": "reader_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reader_type",
            "name_plural": "reader_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "timestamp",
            "name_plural": "timestamps",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "region_config",
        "name_plural": "region_configs",
        "table_name": "region_configs",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/region_config.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "option",
            "name_plural": "options",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "value",
            "name_plural": "values",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "report_row",
        "name_plural": "report_rows",
        "table_name": "report_rows",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/report_row.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "columns",
            "name_plural": "columns",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "report_id",
            "name_plural": "report_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "report",
            "foreign_table_plural": "reports"
          },
          {
            "name": "position",
            "name_plural": "positions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "report",
        "name_plural": "reports",
        "table_name": "reports",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/report.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_base_tax",
        "name_plural": "sales_base_taxes",
        "table_name": "sales_base_taxes",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_base_tax.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "source_type",
            "name_plural": "source_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "posted_date",
            "name_plural": "posted_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total",
            "name_plural": "totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_base_id",
            "name_plural": "sales_base_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_sales_base_id",
            "name_plural": "source_sales_base_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_tax",
            "name_plural": "total_taxes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_non_taxable",
            "name_plural": "total_non_taxables",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_taxable",
            "name_plural": "total_taxables",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_category",
        "name_plural": "sales_categories",
        "table_name": "sales_categories",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_category.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "glaccount",
            "name_plural": "glaccounts",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "interest",
            "name_plural": "interests",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "nonsale",
            "name_plural": "nonsales",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "salescatid",
            "name_plural": "salescatids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipping",
            "name_plural": "shippings",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_rep_update",
        "name_plural": "sales_rep_updates",
        "table_name": "sales_rep_updates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_rep_update.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "sales_rep_id",
            "name_plural": "sales_rep_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sales_rep",
            "foreign_table_plural": "sales_reps"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_rep",
        "name_plural": "sales_reps",
        "table_name": "sales_reps",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_rep.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "location_id",
            "name_plural": "location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "location",
            "foreign_table_plural": "locations"
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "latest_context_date",
            "name_plural": "latest_context_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_mapped",
            "name_plural": "auto_mappeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "add_in_table_list",
            "name_plural": "add_in_table_lists",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_summary",
        "name_plural": "sales_summaries",
        "table_name": "sales_summaries",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_summary.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "arbalance",
            "name_plural": "arbalances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "arcard",
            "name_plural": "arcards",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "arcash",
            "name_plural": "arcashes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "archarge",
            "name_plural": "archarges",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "archeck",
            "name_plural": "archecks",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bankdeposit",
            "name_plural": "bankdeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cardcount",
            "name_plural": "cardcounts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "closeoutdate",
            "name_plural": "closeoutdates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "composite",
            "name_plural": "composites",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "datarepaired",
            "name_plural": "datarepaireds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "depositbalance",
            "name_plural": "depositbalances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "discounts",
            "name_plural": "discounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "draw",
            "name_plural": "draws",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "employees",
            "name_plural": "employees",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enddate",
            "name_plural": "enddates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fmaccount",
            "name_plural": "fmaccounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "forfeitdeposits",
            "name_plural": "forfeitdeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoicetotal",
            "name_plural": "invoicetotals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "isdeleted",
            "name_plural": "isdeleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "markups",
            "name_plural": "markups",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "newdeposits",
            "name_plural": "newdeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "nontaxreceipts",
            "name_plural": "nontaxreceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "nontaxsales",
            "name_plural": "nontaxsales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "numperiods",
            "name_plural": "numperiods",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "onaccount",
            "name_plural": "onaccounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "onaccountbalance",
            "name_plural": "onaccountbalances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "otherhours",
            "name_plural": "otherhours",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "poscard",
            "name_plural": "poscards",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "poscash",
            "name_plural": "poscashes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "poscheck",
            "name_plural": "poschecks",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "presshours",
            "name_plural": "presshours",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "productionhours",
            "name_plural": "productionhours",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "refundchecks",
            "name_plural": "refundchecks",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "returndeposits",
            "name_plural": "returndeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shiftcloseout",
            "name_plural": "shiftcloseouts",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipping",
            "name_plural": "shippings",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "squarefeet",
            "name_plural": "squarefeets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taxonreceipts",
            "name_plural": "taxonreceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taxonsales",
            "name_plural": "taxonsales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taxablereceipts",
            "name_plural": "taxablereceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taxablesales",
            "name_plural": "taxablesales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totaldeletes",
            "name_plural": "totaldeletes",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totalmemos",
            "name_plural": "totalmemos",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totalnosalememos",
            "name_plural": "totalnosalememos",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totalother",
            "name_plural": "totalothers",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totalreceipts",
            "name_plural": "totalreceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totalsales",
            "name_plural": "totalsales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "totalvoid",
            "name_plural": "totalvoids",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "variance",
            "name_plural": "variances",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wiptotaldone",
            "name_plural": "wiptotaldones",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wiptotalest",
            "name_plural": "wiptotalests",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wiptotalinv",
            "name_plural": "wiptotalinvs",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily",
            "name_plural": "dailies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "monthly",
            "name_plural": "monthlies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "applydeposits",
            "name_plural": "applydeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_day",
            "name_plural": "accounting_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_month",
            "name_plural": "accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_year",
            "name_plural": "accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_day",
            "name_plural": "daily_accounting_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_month",
            "name_plural": "daily_accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_year",
            "name_plural": "daily_accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "complete",
            "name_plural": "completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accurate",
            "name_plural": "accurates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "difference",
            "name_plural": "differences",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_count",
            "name_plural": "invoice_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "avg_sale",
            "name_plural": "avg_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "attempts",
            "name_plural": "attempts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_summary_pickup",
        "name_plural": "sales_summary_pickups",
        "table_name": "sales_summary_pickups",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_summary_pickup.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_history_item_id",
            "name_plural": "source_account_history_item_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_history_item_id",
            "name_plural": "account_history_item_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_sales_summary_id",
            "name_plural": "source_sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_summary_id",
            "name_plural": "sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sales_summary",
            "foreign_table_plural": "sales_summaries"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "printsmith_id",
            "name_plural": "printsmith_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ready",
            "name_plural": "readies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "boolean",
            "name_plural": "booleans",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assocation_checks",
            "name_plural": "assocation_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "integer",
            "name_plural": "integers",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sales_tag_by_month",
        "name_plural": "sales_tag_by_months",
        "table_name": "sales_tag_by_months",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_tag_by_month.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "total_sales",
            "name_plural": "total_sales",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_invoice_count",
            "name_plural": "total_invoice_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_companies",
            "name_plural": "total_companies",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tags_data",
            "name_plural": "tags_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "month_date",
            "name_plural": "month_dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "update_required",
            "name_plural": "update_requireds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "salestarget",
        "name_plural": "salestargets",
        "table_name": "salestargets",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/salestarget.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "target_type",
            "name_plural": "target_types",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "amount",
            "name_plural": "amounts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "items",
            "name_plural": "items",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          }
        ]
      },
      {
        "name": "saved_report",
        "name_plural": "saved_reports",
        "table_name": "saved_reports",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/saved_report.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "data",
            "name_plural": "data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ytd",
            "name_plural": "ytds",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "report_type",
            "name_plural": "report_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "shared_user",
        "name_plural": "shared_users",
        "table_name": "shared_users",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/shared_user.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "shared_id",
            "name_plural": "shared_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "shipment",
        "name_plural": "shipments",
        "table_name": "shipments",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/shipment.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "grand_total",
            "name_plural": "grand_totals",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_total",
            "name_plural": "price_totals",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_sub_total",
            "name_plural": "price_sub_totals",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "voided",
            "name_plural": "voideds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_pdf",
            "name_plural": "needs_pdfs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipment_type",
            "name_plural": "shipment_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_tracking",
            "name_plural": "mbe_trackings",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "courier_tracking",
            "name_plural": "courier_trackings",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "courier_weight",
            "name_plural": "courier_weights",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipment_date",
            "name_plural": "shipment_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_account_platform_id",
            "name_plural": "source_account_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_invoice_platform_id",
            "name_plural": "source_invoice_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_error_count",
            "name_plural": "pdf_error_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "key",
            "name_plural": "keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "associations_complete",
            "name_plural": "associations_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "association_checks",
            "name_plural": "association_checks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_service_id",
            "name_plural": "mbe_service_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "packge_type_id",
            "name_plural": "packge_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "goods_type_id",
            "name_plural": "goods_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "courier_id",
            "name_plural": "courier_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "courier_service_id",
            "name_plural": "courier_service_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "delivered",
            "name_plural": "delivereds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "delivered_date",
            "name_plural": "delivered_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pdf_id",
            "name_plural": "pdf_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "pdf",
            "foreign_table_plural": "pdfs"
          },
          {
            "name": "not_to_invoice",
            "name_plural": "not_to_invoices",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "dirty",
            "name_plural": "dirties",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_cost",
            "name_plural": "total_costs",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_platform_id",
            "name_plural": "sales_rep_platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tmp_data",
            "name_plural": "tmp_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_salesrep_id",
            "name_plural": "source_salesrep_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_month",
            "name_plural": "accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_year",
            "name_plural": "accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_summary_id",
            "name_plural": "sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sales_summary",
            "foreign_table_plural": "sales_summaries"
          },
          {
            "name": "daily_accounting_day",
            "name_plural": "daily_accounting_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_month",
            "name_plural": "daily_accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_accounting_year",
            "name_plural": "daily_accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "daily_sales_summary_id",
            "name_plural": "daily_sales_summary_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_id",
            "name_plural": "inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "inquiry",
            "foreign_table_plural": "inquiries"
          },
          {
            "name": "source",
            "name_plural": "sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_freight",
            "name_plural": "price_freights",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "price_freight_vat",
            "name_plural": "price_freight_vats",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "freight_cost",
            "name_plural": "freight_costs",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_freight_cost",
            "name_plural": "total_freight_costs",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_cost",
            "name_plural": "mbe_costs",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": 0.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "short_url",
        "name_plural": "short_urls",
        "table_name": "short_urls",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/short_url.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "url",
            "name_plural": "urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "slug",
            "name_plural": "slugs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "clicked",
            "name_plural": "clickeds",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sms_template_category",
        "name_plural": "sms_template_categories",
        "table_name": "sms_template_categories",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sms_template_category.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sms_template_id",
            "name_plural": "sms_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "sms_template",
            "foreign_table_plural": "sms_templates"
          },
          {
            "name": "category",
            "name_plural": "categories",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "sms_template",
        "name_plural": "sms_templates",
        "table_name": "sms_templates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sms_template.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "body",
            "name_plural": "bodies",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wrapper_id",
            "name_plural": "wrapper_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "statistic",
        "name_plural": "statistics",
        "table_name": "statistics",
        "pk": {
          "name": "id",
          "type": "bigserial",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/statistic.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigserial",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "month",
            "name_plural": "months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "year",
            "name_plural": "years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year",
            "name_plural": "financial_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "rank",
            "name_plural": "ranks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total",
            "name_plural": "totals",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "average",
            "name_plural": "averages",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "count",
            "name_plural": "counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "statistic_for",
            "name_plural": "statistic_fors",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_recalc",
            "name_plural": "needs_recalcs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_year",
            "name_plural": "accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_month",
            "name_plural": "accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "accounting_day",
            "name_plural": "accounting_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_year",
            "name_plural": "calendar_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_month",
            "name_plural": "calendar_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_day",
            "name_plural": "calendar_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_sales",
            "name_plural": "total_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_sales",
            "name_plural": "invoice_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cash_sales",
            "name_plural": "cash_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "adjustments",
            "name_plural": "adjustments",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "day",
            "name_plural": "days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "markups",
            "name_plural": "markups",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "department_cash_sales",
            "name_plural": "department_cash_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "finance_charges",
            "name_plural": "finance_charges",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "location_id",
            "name_plural": "location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "location",
            "foreign_table_plural": "locations"
          },
          {
            "name": "date",
            "name_plural": "dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "order_intake",
            "name_plural": "order_intakes",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipments",
            "name_plural": "shipments",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoiced_sales",
            "name_plural": "invoiced_sales",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deferred_sales",
            "name_plural": "deferred_sales",
            "type": "decimal",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "suppressed_address",
        "name_plural": "suppressed_addresses",
        "table_name": "suppressed_addresses",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "email_address",
            "name_plural": "email_addresses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "date",
            "name_plural": "dates",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reason",
            "name_plural": "reasons",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ignore",
            "name_plural": "ignores",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "tag_category",
        "name_plural": "tag_categories",
        "table_name": "tag_categories",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tag_category.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "word_matches",
            "name_plural": "word_matches",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "",
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "up_to_date",
            "name_plural": "up_to_dates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hidden",
            "name_plural": "hiddens",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "performing_cleanup",
            "name_plural": "performing_cleanups",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hidden_tenants",
            "name_plural": "hidden_tenants",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "system_match",
            "name_plural": "system_matches",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "tag_category_context",
        "name_plural": "tag_category_contexts",
        "table_name": "tag_category_contexts",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tag_category_context.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tag_category_id",
            "name_plural": "tag_category_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tag_category",
            "foreign_table_plural": "tag_categories"
          },
          {
            "name": "last_scanned_id",
            "name_plural": "last_scanned_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_scanned_offset",
            "name_plural": "last_scanned_offsets",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_scanned",
            "name_plural": "last_scanneds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "scan_progress",
            "name_plural": "scan_progresses",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "tag",
        "name_plural": "tags",
        "table_name": "tags",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tag.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "taggable_id",
            "name_plural": "taggable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taggable_type",
            "name_plural": "taggable_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tag_category_id",
            "name_plural": "tag_category_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tag_category",
            "foreign_table_plural": "tag_categories"
          },
          {
            "name": "manual",
            "name_plural": "manuals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted",
            "name_plural": "deleteds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "parent_id",
            "name_plural": "parent_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bubbled",
            "name_plural": "bubbleds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "taken_by_update",
        "name_plural": "taken_by_updates",
        "table_name": "taken_by_updates",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/taken_by_update.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "taken_by_id",
            "name_plural": "taken_by_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "taken_by",
        "name_plural": "taken_bys",
        "table_name": "taken_bys",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/taken_by.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_id",
            "name_plural": "location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "location",
            "foreign_table_plural": "locations"
          },
          {
            "name": "latest_context_date",
            "name_plural": "latest_context_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_mapped",
            "name_plural": "auto_mappeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "target",
        "name_plural": "targets",
        "table_name": "targets",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/target.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "location_id",
            "name_plural": "location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "location",
            "foreign_table_plural": "locations"
          },
          {
            "name": "taken_by_user_id",
            "name_plural": "taken_by_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_user_id",
            "name_plural": "sales_rep_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "location_user_id",
            "name_plural": "location_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "month",
            "name_plural": "months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "year",
            "name_plural": "years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total",
            "name_plural": "totals",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "klass",
            "name_plural": "klasses",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "task_repeat",
        "name_plural": "task_repeats",
        "table_name": "task_repeats",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/task_repeat.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "task_id",
            "name_plural": "task_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "task",
            "foreign_table_plural": "tasks"
          },
          {
            "name": "repeat_type",
            "name_plural": "repeat_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "task_type",
        "name_plural": "task_types",
        "table_name": "task_types",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/task_type.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "task",
        "name_plural": "tasks",
        "table_name": "tasks",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/task.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "mode",
            "name_plural": "modes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "status",
            "name_plural": "statuses",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "description",
            "name_plural": "descriptions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taskable_id",
            "name_plural": "taskable_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taskable_type",
            "name_plural": "taskable_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "start_date",
            "name_plural": "start_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "end_date",
            "name_plural": "end_dates",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assigned_user_id",
            "name_plural": "assigned_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "add_to_calendar",
            "name_plural": "add_to_calendars",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "position",
            "name_plural": "positions",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "calendar_needs_update",
            "name_plural": "calendar_needs_updates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_calendar_entry_id",
            "name_plural": "user_calendar_entry_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "assigned_user_calendar_entry_id",
            "name_plural": "assigned_user_calendar_entry_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "final_comment",
            "name_plural": "final_comments",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed_at",
            "name_plural": "completed_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "task_type_id",
            "name_plural": "task_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "task_type",
            "foreign_table_plural": "task_types"
          },
          {
            "name": "portal_task",
            "name_plural": "portal_tasks",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notify_due",
            "name_plural": "notify_dues",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notify_due_email_sent",
            "name_plural": "notify_due_email_sents",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "notify_date",
            "name_plural": "notify_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "task_repeat_id",
            "name_plural": "task_repeat_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "task_repeat",
            "foreign_table_plural": "task_repeats"
          },
          {
            "name": "notification_ids",
            "name_plural": "notification_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": [

            ],
            "null": null,
            "limit": null,
            "array": true,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_id",
            "name_plural": "inquiry_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "inquiry",
            "foreign_table_plural": "inquiries"
          },
          {
            "name": "prospect_status_item_contact_id",
            "name_plural": "prospect_status_item_contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "prospect_status_item_contact",
            "foreign_table_plural": "prospect_status_item_contacts"
          }
        ]
      },
      {
        "name": "tenant",
        "name_plural": "tenants",
        "table_name": "tenants",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tenant.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "number",
            "name_plural": "numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_ip",
            "name_plural": "printsmith_ips",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_username",
            "name_plural": "printsmith_usernames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_password",
            "name_plural": "printsmith_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_database",
            "name_plural": "printsmith_databases",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inital_import_complete",
            "name_plural": "inital_import_completes",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "allow_access",
            "name_plural": "allow_accesses",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "disable_import",
            "name_plural": "disable_imports",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "time_zone",
            "name_plural": "time_zones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "UTC",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "state",
            "name_plural": "states",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "connection_success_counter",
            "name_plural": "connection_success_counters",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "connection_failure_counter",
            "name_plural": "connection_failure_counters",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_connection_failure_at",
            "name_plural": "last_connection_failure_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "connection_status",
            "name_plural": "connection_statuses",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_start_day",
            "name_plural": "financial_year_start_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_start_month",
            "name_plural": "financial_year_start_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_end_day",
            "name_plural": "financial_year_end_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 31,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "financial_year_end_month",
            "name_plural": "financial_year_end_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 12,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_name",
            "name_plural": "estimate_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok",
            "name_plural": "ngroks",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_port",
            "name_plural": "printsmith_ports",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "report_url",
            "name_plural": "report_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_name",
            "name_plural": "invoice_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_authtoken",
            "name_plural": "ngrok_authtokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_remote_addr",
            "name_plural": "ngrok_remote_addrs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_uuid",
            "name_plural": "ngrok_uuids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "s3_region",
            "name_plural": "s3_regions",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "s3_bucket",
            "name_plural": "s3_buckets",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "s3_access_key",
            "name_plural": "s3_access_keys",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "s3_client_secret",
            "name_plural": "s3_client_secrets",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_views",
            "name_plural": "estimate_views",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wanted_by_adjustments",
            "name_plural": "wanted_by_adjustments",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "needs_backup",
            "name_plural": "needs_backups",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "multi_location",
            "name_plural": "multi_locations",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "taken_by_for_locations",
            "name_plural": "taken_by_for_locations",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sales_rep_for_locations",
            "name_plural": "sales_rep_for_locations",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "training",
            "name_plural": "trainings",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "beta_tester",
            "name_plural": "beta_testers",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_version",
            "name_plural": "printsmith_versions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address_1",
            "name_plural": "address_1s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address_2",
            "name_plural": "address_2s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "suburb",
            "name_plural": "suburbs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "postcode",
            "name_plural": "postcodes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_marketing",
            "name_plural": "email_marketings",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_name",
            "name_plural": "contact_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_hours",
            "name_plural": "business_hours",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pgdump_path",
            "name_plural": "pgdump_paths",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "backup_path",
            "name_plural": "backup_paths",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "local_path",
            "name_plural": "local_paths",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_accounting_month",
            "name_plural": "last_accounting_months",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_accounting_year",
            "name_plural": "last_accounting_years",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_unsubscribe_source_id",
            "name_plural": "marketing_unsubscribe_source_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_email_to_test_send",
            "name_plural": "default_email_to_test_sends",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "display_month_first",
            "name_plural": "display_month_firsts",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_email_template",
            "name_plural": "estimate_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sale_email_template",
            "name_plural": "sale_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "order_email_template",
            "name_plural": "order_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "contact_email_template",
            "name_plural": "contact_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "ngrok_needs_restart",
            "name_plural": "ngrok_needs_restarts",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "most_recent_monthly_closeout_date",
            "name_plural": "most_recent_monthly_closeout_dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_email_template",
            "name_plural": "company_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hide_from_ladders",
            "name_plural": "hide_from_ladders",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_cogs",
            "name_plural": "show_cogs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_min_resend_days",
            "name_plural": "campaign_min_resend_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 25,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cog_green_threshold",
            "name_plural": "cog_green_thresholds",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 30.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "cog_orange_threshold",
            "name_plural": "cog_orange_thresholds",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 70.0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_version",
            "name_plural": "ngrok_versions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_tcp_online",
            "name_plural": "ngrok_tcp_onlines",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_http_online",
            "name_plural": "ngrok_http_onlines",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "week_start",
            "name_plural": "week_starts",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "allow_production_features_on_staging",
            "name_plural": "allow_production_features_on_stagings",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "campaign_monitor_client_id",
            "name_plural": "campaign_monitor_client_ids",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "website",
            "name_plural": "websites",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wanted_days",
            "name_plural": "wanted_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_blacklist",
            "name_plural": "email_blacklists",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_picker_name",
            "name_plural": "tenant_picker_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_name",
            "name_plural": "marketing_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_crt",
            "name_plural": "ngrok_crts",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ngrok_key",
            "name_plural": "ngrok_keys",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "demo",
            "name_plural": "demos",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_api_token",
            "name_plural": "printsmith_api_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "exclude_non_sales",
            "name_plural": "exclude_non_sales",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_name_list",
            "name_plural": "estimate_name_lists",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_name_list",
            "name_plural": "invoice_name_lists",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_name_default",
            "name_plural": "estimate_name_defaults",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_name_default",
            "name_plural": "invoice_name_defaults",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_api_version",
            "name_plural": "printsmith_api_versions",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "estimate_name_enforce",
            "name_plural": "estimate_name_enforces",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "invoice_name_enforce",
            "name_plural": "invoice_name_enforces",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test_email",
            "name_plural": "test_emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enforce_old_printsmith_api",
            "name_plural": "enforce_old_printsmith_apis",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "banner_id",
            "name_plural": "banner_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holiday_last_day",
            "name_plural": "holiday_last_days",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "holiday_returning",
            "name_plural": "holiday_returnings",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_company_tags",
            "name_plural": "show_company_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_contacts_tags",
            "name_plural": "show_contacts_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_estimates_tags",
            "name_plural": "show_estimates_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_orders_tags",
            "name_plural": "show_orders_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_sales_tags",
            "name_plural": "show_sales_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "website_url",
            "name_plural": "website_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "request_quote_url",
            "name_plural": "request_quote_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sales_report_start",
            "name_plural": "last_sales_report_starts",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sales_report_finish",
            "name_plural": "last_sales_report_finishes",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "monitor_counters",
            "name_plural": "monitor_counters",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "facebook",
            "name_plural": "facebooks",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "twitter",
            "name_plural": "twitters",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "instagram",
            "name_plural": "instagrams",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pinterest",
            "name_plural": "pinterests",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "printsmith_local_port",
            "name_plural": "printsmith_local_ports",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "5432",
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "review_url",
            "name_plural": "review_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "account_history_trigger",
            "name_plural": "account_history_triggers",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_comment_template_id",
            "name_plural": "portal_estimate_comment_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_approved_template_id",
            "name_plural": "portal_estimate_approved_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_estimate_canceled_template_id",
            "name_plural": "portal_estimate_canceled_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "owner_open_date",
            "name_plural": "owner_open_dates",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "use_complex_cost",
            "name_plural": "use_complex_costs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "use_smtp",
            "name_plural": "use_smtps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_sources",
            "name_plural": "lead_sources",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "statement_template_name",
            "name_plural": "statement_template_names",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "statement_template",
            "name_plural": "statement_templates",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "pay_url",
            "name_plural": "pay_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "auto_self_bcc",
            "name_plural": "auto_self_bccs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reorder_days",
            "name_plural": "reorder_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "use_sms",
            "name_plural": "use_sms",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sms_send_number",
            "name_plural": "sms_send_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_sales",
            "name_plural": "show_sales",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "job_titles",
            "name_plural": "job_titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "budget_lock",
            "name_plural": "budget_locks",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lead_to_psv",
            "name_plural": "lead_to_psvs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "s3_key_created",
            "name_plural": "s3_key_createds",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "backup_api_key",
            "name_plural": "backup_api_keys",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_inquiries",
            "name_plural": "show_inquiries",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_inquiry_user_id",
            "name_plural": "default_inquiry_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "allow_email_validation",
            "name_plural": "allow_email_validations",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_email_template",
            "name_plural": "inquiry_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "blog",
            "name_plural": "blogs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "linked_in",
            "name_plural": "linked_ins",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_auto_assign_estimate",
            "name_plural": "inquiry_auto_assign_estimates",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_comment_template_id",
            "name_plural": "portal_proof_comment_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_approved_template_id",
            "name_plural": "portal_proof_approved_template_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_approved_production_location_id",
            "name_plural": "portal_proof_approved_production_location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "portal_proof_amended_production_location_id",
            "name_plural": "portal_proof_amended_production_location_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_refresh_token",
            "name_plural": "mbe_refresh_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_refresh_token_expire_at",
            "name_plural": "mbe_refresh_token_expire_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_access_token",
            "name_plural": "mbe_access_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_access_token_expire_at",
            "name_plural": "mbe_access_token_expire_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_tenant_id",
            "name_plural": "mbe_tenant_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_multistore_id",
            "name_plural": "mbe_multistore_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_store_id",
            "name_plural": "mbe_store_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "address_3",
            "name_plural": "address_3s",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_username",
            "name_plural": "mbe_usernames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_password",
            "name_plural": "mbe_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_created_at",
            "name_plural": "source_created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "source_updated_at",
            "name_plural": "source_updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_lead_types",
            "name_plural": "show_lead_types",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "use_new_lead",
            "name_plural": "use_new_leads",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_lead_type_id",
            "name_plural": "default_lead_type_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_api_base_url",
            "name_plural": "mbe_api_base_urls",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_api_basic_auth_token",
            "name_plural": "mbe_api_basic_auth_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "shipment_email_template",
            "name_plural": "shipment_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "inquiry_notifications",
            "name_plural": "inquiry_notifications",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "youtube",
            "name_plural": "youtubes",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_shipments_tags",
            "name_plural": "show_shipments_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "show_inquiries_tags",
            "name_plural": "show_inquiries_tags",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "leads_notify",
            "name_plural": "leads_notifies",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_plan",
            "name_plural": "business_plans",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "follow_up_days",
            "name_plural": "follow_up_days",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 1,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "follow_up_sync",
            "name_plural": "follow_up_syncs",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": true,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "new_proof_email_template",
            "name_plural": "new_proof_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "revision_proof_email_template",
            "name_plural": "revision_proof_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "proof_reminder_email_template",
            "name_plural": "proof_reminder_email_templates",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "token",
        "name_plural": "tokens",
        "table_name": "tokens",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/token.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "access_token",
            "name_plural": "access_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "refresh_token",
            "name_plural": "refresh_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "expires_at",
            "name_plural": "expires_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sync_token",
            "name_plural": "sync_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "gmail_sync_token",
            "name_plural": "gmail_sync_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "gmail_history_id",
            "name_plural": "gmail_history_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "encrypted_access_token",
            "name_plural": "encrypted_access_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "encrypted_access_token_iv",
            "name_plural": "encrypted_access_token_ivs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "encrypted_refresh_token",
            "name_plural": "encrypted_refresh_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "encrypted_refresh_token_iv",
            "name_plural": "encrypted_refresh_token_ivs",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "tracker_hit",
        "name_plural": "tracker_hits",
        "table_name": "tracker_hits",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tracker_hit.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tracker_id",
            "name_plural": "tracker_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tracker",
            "foreign_table_plural": "trackers"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "user_agent",
            "name_plural": "user_agents",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "referer",
            "name_plural": "referers",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bot",
            "name_plural": "bots",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "browser_modern",
            "name_plural": "browser_moderns",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "browser",
            "name_plural": "browsers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "device",
            "name_plural": "devices",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform",
            "name_plural": "platforms",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "tracker",
        "name_plural": "trackers",
        "table_name": "trackers",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tracker.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "uuid",
            "name_plural": "uuids",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "method",
            "name_plural": "methods",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "path",
            "name_plural": "paths",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "unsubscribe",
        "name_plural": "unsubscribes",
        "table_name": "unsubscribes",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/unsubscribe.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "contact_id",
            "name_plural": "contact_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "contact",
            "foreign_table_plural": "contacts"
          },
          {
            "name": "unsub_type",
            "name_plural": "unsub_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email",
            "name_plural": "emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "data",
            "name_plural": "data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": {
            },
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fixed",
            "name_plural": "fixeds",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "fixed_by_user_id",
            "name_plural": "fixed_by_user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "user",
        "name_plural": "users",
        "table_name": "users",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/user.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "manual_email",
            "name_plural": "manual_emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "",
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "encrypted_password",
            "name_plural": "encrypted_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": "",
            "null": false,
            "limit": 255,
            "array": null,
            "structure_type": "encrypted_password",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reset_password_token",
            "name_plural": "reset_password_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "reset_password_sent_at",
            "name_plural": "reset_password_sent_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "remember_created_at",
            "name_plural": "remember_created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sign_in_count",
            "name_plural": "sign_in_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "current_sign_in_at",
            "name_plural": "current_sign_in_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sign_in_at",
            "name_plural": "last_sign_in_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "current_sign_in_ip",
            "name_plural": "current_sign_in_ips",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_sign_in_ip",
            "name_plural": "last_sign_in_ips",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": 6,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "username",
            "name_plural": "usernames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "first_name",
            "name_plural": "first_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_name",
            "name_plural": "last_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "roles_mask",
            "name_plural": "roles_masks",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "gmail_username",
            "name_plural": "gmail_usernames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "gmail_password",
            "name_plural": "gmail_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "test_email",
            "name_plural": "test_emails",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": 255,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_signature",
            "name_plural": "email_signatures",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "settings",
            "name_plural": "settings",
            "type": "hstore",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hide",
            "name_plural": "hides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "role",
            "name_plural": "roles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "deleted_at",
            "name_plural": "deleted_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "deleted_at",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "task_calendar_color",
            "name_plural": "task_calendar_colors",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "display_name",
            "name_plural": "display_names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "api_token",
            "name_plural": "api_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "ip_whitelist",
            "name_plural": "ip_whitelists",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sash_id",
            "name_plural": "sash_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "level",
            "name_plural": "levels",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "current_date_for_ui",
            "name_plural": "current_date_for_uis",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "marketing_calendar_events",
            "name_plural": "marketing_calendar_events",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "eula_accepted_at",
            "name_plural": "eula_accepted_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "default_alias",
            "name_plural": "default_aliases",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "banner_id",
            "name_plural": "banner_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "phone",
            "name_plural": "phones",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lock_sales_rep",
            "name_plural": "lock_sales_reps",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "add_task_to_my_calendar",
            "name_plural": "add_task_to_my_calendars",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "smtp_server",
            "name_plural": "smtp_servers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "smtp_port",
            "name_plural": "smtp_ports",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "smtp_username",
            "name_plural": "smtp_usernames",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "smtp_password",
            "name_plural": "smtp_passwords",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hide_reports",
            "name_plural": "hide_reports",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "email_notifications",
            "name_plural": "email_notifications",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sms_test_number",
            "name_plural": "sms_test_numbers",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "last_token_refresh_time",
            "name_plural": "last_token_refresh_times",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "failed_attempts",
            "name_plural": "failed_attempts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "unlock_token",
            "name_plural": "unlock_tokens",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "locked_at",
            "name_plural": "locked_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "external_id",
            "name_plural": "external_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_access_token",
            "name_plural": "mbe_access_tokens",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_refresh_token",
            "name_plural": "mbe_refresh_tokens",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "token",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "mbe_refresh_token_expire_at",
            "name_plural": "mbe_refresh_token_expire_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_id",
            "name_plural": "platform_ids",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "platform_data",
            "name_plural": "platform_data",
            "type": "jsonb",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "sso_onboarding",
            "name_plural": "sso_onboardings",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "parent_id",
            "name_plural": "parent_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "business_plan",
            "name_plural": "business_plans",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "hide_leads",
            "name_plural": "hide_leads",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "home_today",
            "name_plural": "home_todays",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "lock_set_default",
            "name_plural": "lock_set_defaults",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bs_job_title",
            "name_plural": "bs_job_titles",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bs_years_exp",
            "name_plural": "bs_years_exps",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bs_complete_sell",
            "name_plural": "bs_complete_sells",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "bs_primary_sale",
            "name_plural": "bs_primary_sales",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "version",
        "name_plural": "versions",
        "table_name": "versions",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "",
          "exist": false,
          "state": [

          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "item_type",
            "name_plural": "item_types",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "item_id",
            "name_plural": "item_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": 8,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "event",
            "name_plural": "events",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "whodunnit",
            "name_plural": "whodunnits",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "object",
            "name_plural": "objects",
            "type": "text",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "wip",
        "name_plural": "wips",
        "table_name": "wips",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/wip.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "date",
            "name_plural": "dates",
            "type": "date",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wip_value",
            "name_plural": "wip_values",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "wip_count",
            "name_plural": "wip_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed_wip_value",
            "name_plural": "completed_wip_values",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "completed_wip_count",
            "name_plural": "completed_wip_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_wip_value",
            "name_plural": "total_wip_values",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "total_wip_count",
            "name_plural": "total_wip_counts",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": 0,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      },
      {
        "name": "workflow",
        "name_plural": "workflows",
        "table_name": "workflows",
        "pk": {
          "name": "id",
          "type": "bigint",
          "exist": true
        },
        "erd_location": {
          "file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/workflow.rb",
          "exist": true,
          "state": [
            "has_ruby_model"
          ]
        },
        "statistics": {
        },
        "columns": [
          {
            "name": "id",
            "name_plural": "ids",
            "type": "bigint",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "primary_key",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "name",
            "name_plural": "names",
            "type": "string",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "company_id",
            "name_plural": "company_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "company",
            "foreign_table_plural": "companies"
          },
          {
            "name": "user_id",
            "name_plural": "user_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "user",
            "foreign_table_plural": "users"
          },
          {
            "name": "global",
            "name_plural": "globals",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "site_wide",
            "name_plural": "site_wides",
            "type": "boolean",
            "precision": null,
            "scale": null,
            "default": false,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "data",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "tenant_id",
            "name_plural": "tenant_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": null,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "tenant",
            "foreign_table_plural": "tenants"
          },
          {
            "name": "enterprise_id",
            "name_plural": "enterprise_ids",
            "type": "integer",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "foreign_key",
            "foreign_key": true,
            "foreign_table": "enterprise",
            "foreign_table_plural": "enterprises"
          },
          {
            "name": "created_at",
            "name_plural": "created_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          },
          {
            "name": "updated_at",
            "name_plural": "updated_ats",
            "type": "datetime",
            "precision": null,
            "scale": null,
            "default": null,
            "null": false,
            "limit": null,
            "array": null,
            "structure_type": "timestamp",
            "foreign_key": false,
            "foreign_table": "",
            "foreign_table_plural": ""
          }
        ]
      }
    ],
    "erd_files": [
      {
        "name": "account_history_datum",
        "name_plural": "account_history_data",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/account_history_data.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass AccountHistoryData < ActiveRecord::Base\n  default_scope { where(deleted: false) }\n  belongs_to :company\n  belongs_to :tenant\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "action_log",
        "name_plural": "action_logs",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/action_log.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ActionLog < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :context, polymorphic: true\n\n  validates :tenant_id, presence: true\n  validates :action, presence: true\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant_id",
              "raw_options": "presence: true"
            },
            {
              "name": "action",
              "raw_options": "presence: true"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "activity",
        "name_plural": "activities",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/activity.rb",
        "source": {
          "ruby": "class Activity < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :contact\n  belongs_to :company\n  belongs_to :estimate\n  belongs_to :invoice\n  belongs_to :order\n  belongs_to :sale\n  belongs_to :phone_call\n  belongs_to :task\n  belongs_to :email\n  belongs_to :comment\n  belongs_to :tracker\n  belongs_to :note\n  belongs_to :shipment\n  belongs_to :campaign\n  belongs_to :campaign_message\n  belongs_to :portal_comment\n  belongs_to :comment\n  belongs_to :inquiry\n  default_scope { where(hide: false, deleted: false).order(\"activities.source_created_at DESC NULLS LAST\") }\n  before_create :update_source_created_at\n  before_save :update_source_created_at\n  after_create :update_last_contact\n  after_save :update_last_contact\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\n\n  def estimate\n    Estimate.unscoped.where(tenant_id: tenant_id).where(id: estimate_id).try(:first) unless estimate_id.nil?\n  end\n\n  def invoice\n    Invoice.unscoped.where(tenant_id: tenant_id).where(id: invoice_id).try(:first) unless invoice_id.nil?\n  end\n\n  def email_message\n    msg = nil\n    if email_message_id\n      msg = EmailMessage.where(id: email_message_id).first\n      if msg.nil?\n        self.deleted = true\n        save\n      end\n    elsif !email.try(:message_id).blank?\n      msg = EmailMessage.where(internal_message_id: email.message_id).first\n    end\n    msg\n  end\n\n  def self.add_contextual_attribute(attribs, context)\n    if context\n      key = (context.class.superclass == Invoice) ? \"invoice\" : context.class.to_s.downcase.to_s\n      value = context\n      attribs[key] = value\n    end\n    attribs\n  end\n\n  def self.default_excluded_activities\n    %w[campaign_message campaign_opened]\n  end\n\n  def email_attachment_assets\n    Asset.where(tenant_id: tenant.id, category: \"Email Attachment\", context_type: \"Email\", context_id: email_id)\n  end\n\n  private\n\n  def update_source_created_at\n    self.source_created_at = created_at if source_created_at.nil?\n  end\n\n  def update_last_contact\n    if %w[email phone_call meeting_completed].include?(activity_for)\n      meeting = nil\n      target_contact = contact\n      target_company = company\n\n      if activity_for == \"meeting_completed\"\n        meeting = Meeting.where(id: meeting_id).first\n        if meeting\n          if meeting.context.class == Contact\n            target_contact = meeting.context\n          elsif meeting.context.class == Company\n            target_company = meeting.context\n          else\n            target_contact = meeting.context.try(:contact)\n          end\n        end\n      end\n\n\n      if !target_contact.nil?\n        did_update = false\n        if activity_for == \"email\"\n          if !email_id.nil?\n            if target_contact.last_email_sent.nil? || (!target_contact.last_email_sent.nil? && source_created_at > target_contact.last_email_sent)\n              target_contact.update(last_email_sent: source_created_at)\n              did_update = true\n            end\n          else\n            if target_contact.last_email_received.nil? || (!target_contact.last_email_received.nil? && source_created_at > target_contact.last_email_received)\n              target_contact.update(last_email_received: source_created_at)\n              did_update = true\n            end\n          end\n        elsif activity_for == \"phone_call\"\n          if !phone_call_id.nil? && (target_contact.last_phone_call.nil? || (!target_contact.last_phone_call.nil? && source_created_at > target_contact.last_phone_call))\n            target_contact.update(last_phone_call: source_created_at)\n            did_update = true\n          end\n        elsif activity_for == \"meeting_completed\"\n          if !meeting_id.nil? && (target_contact.last_meeting.nil? || (!target_contact.last_meeting.nil? && source_created_at > target_contact.last_meeting))\n            target_contact.update(last_meeting: source_created_at)\n            did_update = true\n          end\n        end\n        target_contact.update(last_contact: source_created_at) if did_update && (target_contact.last_contact.nil? || source_created_at > target_contact.last_contact)\n      end\n\n      target_company = target_contact.company if target_company.nil? && !target_contact.nil?\n      if !target_company.nil?\n        did_update = false\n        if activity_for == \"email\"\n          if !email_id.nil?\n            if target_company.last_email_sent.nil? || (!target_company.last_email_sent.nil? && source_created_at > target_company.last_email_sent)\n              company.update(last_email_sent: source_created_at)\n              did_update = true\n            end\n          else\n            if target_company.last_email_received.nil? || (!company.last_email_received.nil? && source_created_at > target_company.last_email_received)\n              target_company.update(last_email_received: source_created_at)\n              did_update = true\n            end\n          end\n        elsif activity_for == \"phone_call\"\n          if !phone_call_id.nil? && (target_company.last_phone_call.nil? || (!target_company.last_phone_call.nil? && source_created_at > target_company.last_phone_call))\n            target_company.update(last_phone_call: source_created_at)\n            did_update = true\n          end\n        elsif activity_for == \"meeting_completed\"\n          if !meeting_id.nil? && (target_company.last_meeting.nil? || (!target_company.last_meeting.nil? && source_created_at > target_company.last_meeting))\n            target_company.update(last_meeting: source_created_at)\n            did_update = true\n          end\n        end\n        target_company.update(last_contact: source_created_at) if did_update && (target_company.last_contact.nil? || source_created_at > target_company.last_contact)\n      end\n    end\n  end\nend",
          "public": "class Activity < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :contact\n  belongs_to :company\n  belongs_to :estimate\n  belongs_to :invoice\n  belongs_to :order\n  belongs_to :sale\n  belongs_to :phone_call\n  belongs_to :task\n  belongs_to :email\n  belongs_to :comment\n  belongs_to :tracker\n  belongs_to :note\n  belongs_to :shipment\n  belongs_to :campaign\n  belongs_to :campaign_message\n  belongs_to :portal_comment\n  belongs_to :comment\n  belongs_to :inquiry\n  default_scope { where(hide: false, deleted: false).order(\"activities.source_created_at DESC NULLS LAST\") }\n  before_create :update_source_created_at\n  before_save :update_source_created_at\n  after_create :update_last_contact\n  after_save :update_last_contact\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\n\n  def estimate\n    Estimate.unscoped.where(tenant_id: tenant_id).where(id: estimate_id).try(:first) unless estimate_id.nil?\n  end\n\n  def invoice\n    Invoice.unscoped.where(tenant_id: tenant_id).where(id: invoice_id).try(:first) unless invoice_id.nil?\n  end\n\n  def email_message\n    msg = nil\n    if email_message_id\n      msg = EmailMessage.where(id: email_message_id).first\n      if msg.nil?\n        self.deleted = true\n        save\n      end\n    elsif !email.try(:message_id).blank?\n      msg = EmailMessage.where(internal_message_id: email.message_id).first\n    end\n    msg\n  end\n\n  def self.add_contextual_attribute(attribs, context)\n    if context\n      key = (context.class.superclass == Invoice) ? \"invoice\" : context.class.to_s.downcase.to_s\n      value = context\n      attribs[key] = value\n    end\n    attribs\n  end\n\n  def self.default_excluded_activities\n    %w[campaign_message campaign_opened]\n  end\n\n  def email_attachment_assets\n    Asset.where(tenant_id: tenant.id, category: \"Email Attachment\", context_type: \"Email\", context_id: email_id)\n  end\n\n  ",
          "private": "private\n\n  def update_source_created_at\n    self.source_created_at = created_at if source_created_at.nil?\n  end\n\n  def update_last_contact\n    if %w[email phone_call meeting_completed].include?(activity_for)\n      meeting = nil\n      target_contact = contact\n      target_company = company\n\n      if activity_for == \"meeting_completed\"\n        meeting = Meeting.where(id: meeting_id).first\n        if meeting\n          if meeting.context.class == Contact\n            target_contact = meeting.context\n          elsif meeting.context.class == Company\n            target_company = meeting.context\n          else\n            target_contact = meeting.context.try(:contact)\n          end\n        end\n      end\n\n\n      if !target_contact.nil?\n        did_update = false\n        if activity_for == \"email\"\n          if !email_id.nil?\n            if target_contact.last_email_sent.nil? || (!target_contact.last_email_sent.nil? && source_created_at > target_contact.last_email_sent)\n              target_contact.update(last_email_sent: source_created_at)\n              did_update = true\n            end\n          else\n            if target_contact.last_email_received.nil? || (!target_contact.last_email_received.nil? && source_created_at > target_contact.last_email_received)\n              target_contact.update(last_email_received: source_created_at)\n              did_update = true\n            end\n          end\n        elsif activity_for == \"phone_call\"\n          if !phone_call_id.nil? && (target_contact.last_phone_call.nil? || (!target_contact.last_phone_call.nil? && source_created_at > target_contact.last_phone_call))\n            target_contact.update(last_phone_call: source_created_at)\n            did_update = true\n          end\n        elsif activity_for == \"meeting_completed\"\n          if !meeting_id.nil? && (target_contact.last_meeting.nil? || (!target_contact.last_meeting.nil? && source_created_at > target_contact.last_meeting))\n            target_contact.update(last_meeting: source_created_at)\n            did_update = true\n          end\n        end\n        target_contact.update(last_contact: source_created_at) if did_update && (target_contact.last_contact.nil? || source_created_at > target_contact.last_contact)\n      end\n\n      target_company = target_contact.company if target_company.nil? && !target_contact.nil?\n      if !target_company.nil?\n        did_update = false\n        if activity_for == \"email\"\n          if !email_id.nil?\n            if target_company.last_email_sent.nil? || (!target_company.last_email_sent.nil? && source_created_at > target_company.last_email_sent)\n              company.update(last_email_sent: source_created_at)\n              did_update = true\n            end\n          else\n            if target_company.last_email_received.nil? || (!company.last_email_received.nil? && source_created_at > target_company.last_email_received)\n              target_company.update(last_email_received: source_created_at)\n              did_update = true\n            end\n          end\n        elsif activity_for == \"phone_call\"\n          if !phone_call_id.nil? && (target_company.last_phone_call.nil? || (!target_company.last_phone_call.nil? && source_created_at > target_company.last_phone_call))\n            target_company.update(last_phone_call: source_created_at)\n            did_update = true\n          end\n        elsif activity_for == \"meeting_completed\"\n          if !meeting_id.nil? && (target_company.last_meeting.nil? || (!target_company.last_meeting.nil? && source_created_at > target_company.last_meeting))\n            target_company.update(last_meeting: source_created_at)\n            did_update = true\n          end\n        end\n        target_company.update(last_contact: source_created_at) if did_update && (target_company.last_contact.nil? || source_created_at > target_company.last_contact)\n      end\n    end\n  end\nend",
          "all_methods": {
            "klass": [
              {
                "name": "add_contextual_attribute",
                "scope": "public",
                "class_method": true,
                "arguments": "(attribs, context)"
              },
              {
                "name": "default_excluded_activities",
                "scope": "public",
                "class_method": true,
                "arguments": ""
              }
            ],
            "instance": [
              {
                "name": "user",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_message",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_attachment_assets",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_source_created_at",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_last_contact",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "user",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_message",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_attachment_assets",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_private": [
              {
                "name": "update_source_created_at",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_last_contact",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(hide: false, deleted: false).order(\"activities.source_created_at DESC NULLS LAST\") }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "estimate",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "invoice",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "order",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "sale",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "phone_call",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "task",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "email",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "comment",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tracker",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "note",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "shipment",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaign",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaign_message",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "portal_comment",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "comment",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "inquiry",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "address",
        "name_plural": "addresses",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/address.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Address < ActiveRecord::Base\n  default_scope { where(deleted: false) }\n  belongs_to :tenant\n  belongs_to :company\n\n  # geocoded_by :full_street_address\n  # after_validation :geocode\n\n  def full_street_address\n    address = \"\"\n    address += \"#{street1.strip} \" if street1.present?\n    address += \"#{street2.strip} \" if street2.present?\n    address += \"#{street3.strip} \" if street3.present?\n    address += \"#{city.strip} \" if city.present?\n    address += \"#{state.strip} \" if state.present?\n    address += \"#{zip.strip} \" if zip.present?\n    address += country if country.present?\n\n    address\n  end\n\n  def full_street_address_display\n    address = \"\"\n    address += \"#{street1.strip}, \" if street1.present?\n    address += \"#{street2.strip}, \" if street2.present?\n    address += \"#{city.strip}, \" if city.present?\n    address += \"#{state.strip}, \" if state.present?\n    address += zip.strip if zip.present?\n\n    address\n  end\n\n  def update_geo\n    geocoder_coord = Geocoder.coordinates(full_street_address)\n    if geocoder_coord.present? && !(geocoder_coord[0] == latitude && geocoder_coord[1] == longitude)\n      self.latitude = geocoder_coord[0]\n      self.longitude = geocoder_coord[1]\n      save\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "adjustment",
        "name_plural": "adjustments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/adjustment.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Adjustment < ActiveRecord::Base\n  default_scope { where(affect_sales: true, deleted: false, voided: false) }\n\n  scope :for_dates, ->(start_date, end_date) { where(posted_date: start_date..end_date) }\n  scope :non_closed_out, -> { where(accounting_month: nil) }\n\n  belongs_to :invoice\n  belongs_to :company\n  belongs_to :tenant\n  belongs_to :user, class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\"\n  belongs_to :location, class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\"\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(affect_sales: true, deleted: false, voided: false) }",
          "scopes": [
            {
              "name": "for_dates",
              "scope": "->(start_date, end_date) { where(posted_date: start_date..end_date) }"
            },
            {
              "name": "non_closed_out",
              "scope": "-> { where(accounting_month: nil) }"
            }
          ],
          "belongs_to": [
            {
              "name": "invoice",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "sales_rep_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\""
            },
            {
              "name": "location",
              "options": {
                "class_name": "Location",
                "foreign_key": "id",
                "primary_key": "location_user_id"
              },
              "raw_options": "class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "affiliation",
        "name_plural": "affiliations",
        "dsl_file": ""
      },
      {
        "name": "api_log",
        "name_plural": "api_logs",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/api_log.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ApiLog < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :context, polymorphic: true\n  belongs_to :user\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "asset",
        "name_plural": "assets",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/asset.rb",
        "source": {
          "ruby": "class Asset < ActiveRecord::Base\n  attr_accessor :file\n  attr_accessor :new_file_contents\n  attr_accessor :new_file_name\n\n  before_save :upload_to_s3\n  after_destroy :remove_from_s3\n\n  belongs_to :enterprise\n  belongs_to :tenant\n\n\n\n  default_scope { where.not(file_hash: nil) }\n  scope :by_tenant, -> (tenant) { where(\"assets.tenant_id = ? OR assets.global = true\", tenant.id) }\n  scope :by_enterprise, -> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }\n\n  def url\n    asset_prefix = RegionConfig.require_value(\"asset_url\")\n    URI.escape(\"#{asset_prefix}#{file_hash}_#{file_name}\")\n  end\n\n  def size\n    FastImage.size(url)\n  end\n\n  def tracked_url\n    tracker = Tracker.where(id: tracker_id).first\n    if tracker.nil?\n     tracker = Tracker.new_tracker(url, :asset)\n     self.tracker_id = tracker.id\n     save\n    end\n    tracker.generated_url\n  end\n\n  def presigned_url(inline = true, expires_in = 86400)\n    filename = URI.encode(file_name, \"[]\")\n    disposition = \"inline;filename=\\\"#{filename}\\\"\"\n    disposition = \"attachment;filename=\\\"#{filename}\\\"\" unless inline\n    signer = Aws::S3::Presigner.new(client: s3_client)\n    bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('asset_bucket')}/#{file_hash}_#{file_name}\")\n    url = signer.presigned_url(:get_object, bucket: bucket_info[:bucket], key: bucket_info[:key], response_content_disposition: disposition, expires_in: expires_in)\n    url\n  end\n\n  def meta_link(target_tenant = nil)\n    result = nil\n\n    if !meta_data[\"link\"].blank?\n      if target_tenant\n        template_merger = TemplateMerger.new(target_tenant)\n        link_url = template_merger.translated_body(meta_data[\"link\"])\n        begin\n          uri = URI.parse(link_url)\n          link_url = \"http://#{link_url}\" if uri.scheme.blank?\n          uri = URI.parse(link_url)\n          result = link_url\n        rescue URI::InvalidURIError\n        end\n      else\n        result = meta_data[\"link\"]\n      end\n    end\n\n    result\n  end\n\n  def self.split_bucket_info(full_bucket_path)\n    split_bucket = full_bucket_path.split(\"/\")\n    {\n      bucket: split_bucket.first,\n      key: split_bucket.drop(1).join(\"/\")\n    }\n  end\n\n  private\n\n  def s3_client\n    credentials = Aws::Credentials.new(Rails.application.secrets.aws_access_key_id, Rails.application.secrets.aws_secret_access_key)\n    Aws::S3::Client.new(credentials: credentials, region: RegionConfig.require_value(\"bucket_region\"))\n  end\n\n  def upload_to_s3\n    begin\n      if new_file_contents\n        remove_from_s3\n        self.file_hash = Digest::MD5.hexdigest(new_file_contents)\n        self.file_name = new_file_name\n        self.content_type = MIME::Types.type_for(new_file_name).try(:first).try(:content_type)\n        duplicate_assets = Asset.where(file_hash: file_hash, file_name: file_name)\n        if duplicate_assets.count == 0\n          bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('asset_bucket')}/#{file_hash}_#{file_name}\")\n          resp = s3_client.put_object(\n            content_disposition: \"inline; filename=#{file_name}\",\n            acl: \"public-read\",\n            bucket: bucket_info[:bucket],\n            key: bucket_info[:key],\n            body: new_file_contents\n          )\n          if resp.successful?\n            self.new_file_contents = nil\n            self.new_file_name = nil\n            true\n          else\n            false\n          end\n        end\n      else\n        return false if file_hash.blank?\n      end\n    rescue StandardError\n      false\n    end\n  end\n\n  def remove_from_s3\n    if file_hash\n      duplicate_assets = Asset.where(file_hash: file_hash, file_name: file_name).where.not(id: id)\n      if duplicate_assets.count == 0\n        client = s3_client\n        bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('asset_bucket')}/#{file_hash}_#{file_name}\")\n        client.delete_object(bucket_info)\n      end\n    end\n  end\nend\n",
          "public": "class Asset < ActiveRecord::Base\n  attr_accessor :file\n  attr_accessor :new_file_contents\n  attr_accessor :new_file_name\n\n  before_save :upload_to_s3\n  after_destroy :remove_from_s3\n\n  belongs_to :enterprise\n  belongs_to :tenant\n\n\n\n  default_scope { where.not(file_hash: nil) }\n  scope :by_tenant, -> (tenant) { where(\"assets.tenant_id = ? OR assets.global = true\", tenant.id) }\n  scope :by_enterprise, -> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }\n\n  def url\n    asset_prefix = RegionConfig.require_value(\"asset_url\")\n    URI.escape(\"#{asset_prefix}#{file_hash}_#{file_name}\")\n  end\n\n  def size\n    FastImage.size(url)\n  end\n\n  def tracked_url\n    tracker = Tracker.where(id: tracker_id).first\n    if tracker.nil?\n     tracker = Tracker.new_tracker(url, :asset)\n     self.tracker_id = tracker.id\n     save\n    end\n    tracker.generated_url\n  end\n\n  def presigned_url(inline = true, expires_in = 86400)\n    filename = URI.encode(file_name, \"[]\")\n    disposition = \"inline;filename=\\\"#{filename}\\\"\"\n    disposition = \"attachment;filename=\\\"#{filename}\\\"\" unless inline\n    signer = Aws::S3::Presigner.new(client: s3_client)\n    bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('asset_bucket')}/#{file_hash}_#{file_name}\")\n    url = signer.presigned_url(:get_object, bucket: bucket_info[:bucket], key: bucket_info[:key], response_content_disposition: disposition, expires_in: expires_in)\n    url\n  end\n\n  def meta_link(target_tenant = nil)\n    result = nil\n\n    if !meta_data[\"link\"].blank?\n      if target_tenant\n        template_merger = TemplateMerger.new(target_tenant)\n        link_url = template_merger.translated_body(meta_data[\"link\"])\n        begin\n          uri = URI.parse(link_url)\n          link_url = \"http://#{link_url}\" if uri.scheme.blank?\n          uri = URI.parse(link_url)\n          result = link_url\n        rescue URI::InvalidURIError\n        end\n      else\n        result = meta_data[\"link\"]\n      end\n    end\n\n    result\n  end\n\n  def self.split_bucket_info(full_bucket_path)\n    split_bucket = full_bucket_path.split(\"/\")\n    {\n      bucket: split_bucket.first,\n      key: split_bucket.drop(1).join(\"/\")\n    }\n  end\n\n  ",
          "private": "private\n\n  def s3_client\n    credentials = Aws::Credentials.new(Rails.application.secrets.aws_access_key_id, Rails.application.secrets.aws_secret_access_key)\n    Aws::S3::Client.new(credentials: credentials, region: RegionConfig.require_value(\"bucket_region\"))\n  end\n\n  def upload_to_s3\n    begin\n      if new_file_contents\n        remove_from_s3\n        self.file_hash = Digest::MD5.hexdigest(new_file_contents)\n        self.file_name = new_file_name\n        self.content_type = MIME::Types.type_for(new_file_name).try(:first).try(:content_type)\n        duplicate_assets = Asset.where(file_hash: file_hash, file_name: file_name)\n        if duplicate_assets.count == 0\n          bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('asset_bucket')}/#{file_hash}_#{file_name}\")\n          resp = s3_client.put_object(\n            content_disposition: \"inline; filename=#{file_name}\",\n            acl: \"public-read\",\n            bucket: bucket_info[:bucket],\n            key: bucket_info[:key],\n            body: new_file_contents\n          )\n          if resp.successful?\n            self.new_file_contents = nil\n            self.new_file_name = nil\n            true\n          else\n            false\n          end\n        end\n      else\n        return false if file_hash.blank?\n      end\n    rescue StandardError\n      false\n    end\n  end\n\n  def remove_from_s3\n    if file_hash\n      duplicate_assets = Asset.where(file_hash: file_hash, file_name: file_name).where.not(id: id)\n      if duplicate_assets.count == 0\n        client = s3_client\n        bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('asset_bucket')}/#{file_hash}_#{file_name}\")\n        client.delete_object(bucket_info)\n      end\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "split_bucket_info",
                "scope": "public",
                "class_method": true,
                "arguments": "(full_bucket_path)"
              }
            ],
            "instance": [
              {
                "name": "url",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "size",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tracked_url",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "presigned_url",
                "scope": "public",
                "class_method": false,
                "arguments": "(inline = true, expires_in = 86400)"
              },
              {
                "name": "meta_link",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "s3_client",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "upload_to_s3",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "remove_from_s3",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "url",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "size",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tracked_url",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "presigned_url",
                "scope": "public",
                "class_method": false,
                "arguments": "(inline = true, expires_in = 86400)"
              },
              {
                "name": "meta_link",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              }
            ],
            "instance_private": [
              {
                "name": "s3_client",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "upload_to_s3",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "remove_from_s3",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ where.not(file_hash: nil) }",
          "scopes": [
            {
              "name": "by_tenant",
              "scope": "-> (tenant) { where(\"assets.tenant_id = ? OR assets.global = true\", tenant.id) }"
            },
            {
              "name": "by_enterprise",
              "scope": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "background_job_result",
        "name_plural": "background_job_results",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/background_job_result.rb",
        "source": {
          "ruby": "class BackgroundJobResult < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n\n  def complete\n    true\n  end\n\n  def self.clean_expired\n    jobs_to_cleanup = BackgroundJobResult.where(\"expires_at IS NOT NULL AND expires_at < ?\", Time.now).limit(10)\n    jobs_to_cleanup.each do |job|\n      BackgroundJob.cleanup(job)\n      job.destroy\n    end\n\n    duplicate_results_query = %Q{\n      SELECT *\n      FROM background_job_results\n      WHERE id IN (\n        SELECT N.id\n        FROM (\n          SELECT id, ROW_NUMBER() OVER(PARTITION BY job_type, job_hash ORDER BY created_at DESC) AS row_num\n          FROM background_job_results\n        ) N\n        WHERE N.row_num > 1\n      )\n    }\n\n    duplicate_jobs = BackgroundJobResult.find_by_sql(duplicate_results_query)\n    duplicate_jobs.each do |job|\n      BackgroundJob.cleanup(job)\n      job.destroy\n    end\n  end\nend",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "background_job",
        "name_plural": "background_jobs",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/background_job.rb",
        "source": {
          "ruby": "class BackgroundJob < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n\n\n\n  def process\n    lifespan = 1.day\n    job_result = @@job_funcs[job_type].call(self)\n    if job_result && !job_result[:lifespan].blank?\n      lifespan = job_result[:lifespan]\n    end\n\n    BackgroundJobResult.create(\n      tenant_id: tenant_id,\n      user_id: user_id,\n      job_hash: job_hash,\n      job_type: job_type,\n      name: name,\n      description: description,\n      status_view: status_view,\n      completed_view: completed_view,\n      data: data,\n      result: job_result,\n      expires_at: Time.now + lifespan\n    )\n    destroy\n  end\n\n  def position_in_queue\n    result = 0\n\n    if status == \"queued\"\n      result = BackgroundJob.where(status: \"queued\").where(\"created_at < ?\", created_at).count\n    end\n\n    result\n  end\n\n  def self.lookup(tenant, job_type, hash)\n    job = BackgroundJob.where(\n      tenant: tenant,\n      job_type: job_type,\n      job_hash: hash,\n    ).order(created_at: :desc).first\n\n    if !job\n      job = BackgroundJobResult.where(\n        tenant: tenant,\n        job_type: job_type,\n        job_hash: hash,\n      ).order(created_at: :desc).first\n    end\n\n    job\n  end\n\n  def self.queue(tenant: nil, user: nil, job_type: \"\", hash: \"\", name: \"\", description: \"\", data: {}, status_view: \"\", completed_view: \"\")\n    if tenant.blank? || user.blank? || job_type.blank?\n      raise \"Attempted to queue a background job with insufficient information.\"\n    end\n\n    if hash.blank?\n      hash = Digest::MD5.hexdigest(data.to_json)\n    end\n\n    job = BackgroundJob.lookup(tenant, job_type, hash)\n\n    if !job\n      name = job_type.titleize if name.blank?\n      description = \"#{name} Job\" if description.blank?\n      job = BackgroundJob.create(\n        tenant: tenant,\n        user: user,\n        job_type: job_type,\n        job_hash: hash,\n        name: name,\n        description: description,\n        status: \"queued\",\n        status_view: status_view,\n        completed_view: completed_view,\n        data: data\n      )\n    end\n\n    job\n  end\n\n  def self.register(job_type, job_func, cleanup_func=nil)\n    @@job_funcs ||= {}\n    @@job_cleanup_func ||= {}\n\n    if @@job_funcs.key?(\"job_type\")\n      raise \"Attempted to register the same job key twice\"\n    end\n\n    @@job_funcs[job_type] = job_func\n    @@job_cleanup_func[job_type] = cleanup_func\n  end\n\n  def self.cleanup(job)\n    if @@job_cleanup_func && @@job_cleanup_func[job.job_type]\n      @@job_cleanup_func[job.job_type].call(job)\n    end\n  end\n\n  def self.process_pending_job\n    queue_job_query = %Q{\n      UPDATE background_jobs\n      SET status = 'running'\n      WHERE id = (\n        SELECT id\n        FROM background_jobs\n        WHERE status = 'queued'\n        ORDER BY created_at ASC\n        LIMIT 1\n        FOR UPDATE SKIP LOCKED\n      )\n      RETURNING id;\n    }\n    background_job_id = ActiveRecord::Base.connection.execute(queue_job_query).first.try(:[], \"id\")\n    background_job = nil\n    background_job = BackgroundJob.where(id: background_job_id).first if !background_job_id.nil?\n    if background_job\n      background_job.process\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "backup",
        "name_plural": "backups",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/backup.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Backup < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, inverse_of: :backups, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "inverse_of: :backups, **belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "badges_sash",
        "name_plural": "badges_sashes",
        "dsl_file": ""
      },
      {
        "name": "bookmark",
        "name_plural": "bookmarks",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/bookmark.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Bookmark < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :context, polymorphic: true\n  validates_uniqueness_of :user_id, scope: %i[context_type context_id]\n\n  scope :for_user, -> (user) { where(user_id: user.id) }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "for_user",
              "scope": "-> (user) { where(user_id: user.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "budget_month",
        "name_plural": "budget_months",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/budget_month.rb",
        "source": {
          "ruby": "class BudgetMonth < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :budget, **belongs_to_required\n  validates :budget, presence: { message: \"must exist\" } if rails4?\n\n  def dom_id(prefix = nil)\n    prefix ||= \"new\" unless id\n    [ prefix, self.class.name.underscore.gsub(\"/\", \"_\"), id ].compact * \"_\"\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "budget",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "budget",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "budget",
        "name_plural": "budgets",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/budget.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Budget < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  has_many :budget_months, dependent: :destroy\n\n  validate :ensure_valid_financial_year, on: :create\n\n  def find_budget_month(month_number)\n    if budget_months.present?\n      month_date = \"#{tenant.financial_year_of(month_number, financial_year)}-#{month_number}-01\"\n      budget_months.where(month_date: month_date).first\n    end\n  end\n\n  def remaining_yearly_budget(current_month = Time.now.month)\n    months = tenant.financial_months\n    months = months[months.find_index(current_month)..-1]\n    total = 0\n    months.each do |month|\n      month_date = \"#{tenant.financial_year_of(month, financial_year)}-#{month}-01\".to_date\n      budget_month = budget_months.find_by(month_date: month_date)\n      total += budget_month.nil? || budget_month.total.nil? ? 0 : budget_month.total\n    end\n    total\n  end\n\n  class << self\n    def current_financial_year\n      if Time.now.month < 7\n        Time.now.year\n      else\n        Time.now.year + 1\n      end\n    end\n  end\n\n  private\n\n  def ensure_valid_financial_year\n    existing_budget_for_year = Budget.where(tenant_id: tenant_id, financial_year: financial_year).first\n    if existing_budget_for_year\n      errors.add(:base, \"Budget for #{financial_year} already exists.\")\n    end\n  end\nend\n",
          "public": "# frozen_string_literal: true\n\nclass Budget < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  has_many :budget_months, dependent: :destroy\n\n  validate :ensure_valid_financial_year, on: :create\n\n  def find_budget_month(month_number)\n    if budget_months.present?\n      month_date = \"#{tenant.financial_year_of(month_number, financial_year)}-#{month_number}-01\"\n      budget_months.where(month_date: month_date).first\n    end\n  end\n\n  def remaining_yearly_budget(current_month = Time.now.month)\n    months = tenant.financial_months\n    months = months[months.find_index(current_month)..-1]\n    total = 0\n    months.each do |month|\n      month_date = \"#{tenant.financial_year_of(month, financial_year)}-#{month}-01\".to_date\n      budget_month = budget_months.find_by(month_date: month_date)\n      total += budget_month.nil? || budget_month.total.nil? ? 0 : budget_month.total\n    end\n    total\n  end\n\n  class << self\n    def current_financial_year\n      if Time.now.month < 7\n        Time.now.year\n      else\n        Time.now.year + 1\n      end\n    end\n  end\n\n  ",
          "private": "private\n\n  def ensure_valid_financial_year\n    existing_budget_for_year = Budget.where(tenant_id: tenant_id, financial_year: financial_year).first\n    if existing_budget_for_year\n      errors.add(:base, \"Budget for #{financial_year} already exists.\")\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [

            ],
            "instance": [
              {
                "name": "find_budget_month",
                "scope": "public",
                "class_method": false,
                "arguments": "(month_number)"
              },
              {
                "name": "remaining_yearly_budget",
                "scope": "public",
                "class_method": false,
                "arguments": "(current_month = Time.now.month)"
              },
              {
                "name": "current_financial_year",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "ensure_valid_financial_year",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "find_budget_month",
                "scope": "public",
                "class_method": false,
                "arguments": "(month_number)"
              },
              {
                "name": "remaining_yearly_budget",
                "scope": "public",
                "class_method": false,
                "arguments": "(current_month = Time.now.month)"
              },
              {
                "name": "current_financial_year",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_private": [
              {
                "name": "ensure_valid_financial_year",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "budget_months",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [
            {
              "line": ":ensure_valid_financial_year, on: :create"
            }
          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "build",
        "name_plural": "builds",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/build.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Build < ActiveRecord::Base\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "business_plan_marketing_activity",
        "name_plural": "business_plan_marketing_activities",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/business_plan_marketing_activity.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\nclass BusinessPlanMarketingActivity < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :business_plan\n  belongs_to :enterprise\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "business_plan",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "business_plan_sales_investment",
        "name_plural": "business_plan_sales_investments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/business_plan_sales_investment.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\nclass BusinessPlanSalesInvestment < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  belongs_to :business_plan\n  belongs_to :user\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "business_plan",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "business_plan",
        "name_plural": "business_plans",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/business_plan.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass BusinessPlan < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  has_many :business_plan_sales_investments\n  has_many :business_plan_marketing_activities\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "business_plan_sales_investments",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "business_plan_marketing_activities",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "calendar_entry",
        "name_plural": "calendar_entries",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/calendar_entry.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CalendarEntry < ActiveRecord::Base\n  belongs_to :calendar, required: true\n  validates :calendar, presence: { message: \"must exist\" }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "calendar",
              "options": {
                "required": true
              },
              "raw_options": "required: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "calendar",
              "raw_options": "presence: { message: \"must exist\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "calendar_entry_deletion",
        "name_plural": "calendar_entry_deletions",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/calendar_entry_deletion.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CalendarEntryDeletion < ActiveRecord::Base\n  belongs_to :user, required: true\n  validates :user, presence: { message: \"must exist\" }\n  has_many :tokens, through: :user\n\n  def retry_delete\n    if user.delete_calendar_event(calendar_ident, entry_ident, send_updates: send_updates)\n      destroy\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
                "required": true
              },
              "raw_options": "required: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "tokens",
              "options": {
                "through": "user"
              },
              "raw_options": "through: :user"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "user",
              "raw_options": "presence: { message: \"must exist\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "calendar",
        "name_plural": "calendars",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/calendar.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Calendar < ActiveRecord::Base\n  belongs_to :user, required: true\n  validates :user, presence: { message: \"must exist\" }\n\n  has_many :calendar_entries\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
                "required": true
              },
              "raw_options": "required: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "calendar_entries",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "user",
              "raw_options": "presence: { message: \"must exist\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "campaign_calendar_entry",
        "name_plural": "campaign_calendar_entries",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_calendar_entry.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CampaignCalendarEntry < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :campaign\n  belongs_to :calendar_entry\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaign",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "calendar_entry",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "campaign_count",
        "name_plural": "campaign_counts",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_count.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CampaignCount < ActiveRecord::Base\n  belongs_to :campaign\n  belongs_to :tenant\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "campaign",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "campaign_exclusion",
        "name_plural": "campaign_exclusions",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_exclusion.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CampaignExclusion < ActiveRecord::Base\n  belongs_to :contact\n  belongs_to :campaign\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaign",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "campaign_group",
        "name_plural": "campaign_groups",
        "dsl_file": ""
      },
      {
        "name": "campaign_message",
        "name_plural": "campaign_messages",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign_message.rb",
        "source": {
          "ruby": "class CampaignMessage < ActiveRecord::Base\n  belongs_to :campaign\n  belongs_to :contact\n  has_and_belongs_to_many :trackers, -> { uniq }\n  has_many :hits, through: :trackers\n\n  scope :has_clicks, -> { where(\"EXISTS (SELECT null FROM campaign_messages_trackers INNER JOIN trackers ON trackers.id = campaign_messages_trackers.tracker_id INNER JOIN tracker_hits ON tracker_hits.tracker_id = trackers.id WHERE trackers.method != 0 AND trackers.path NOT LIKE '%unsubscribe%' AND campaign_messages_trackers.campaign_message_id = campaign_messages.id)\") }\n\n  def new_tracker(path, type = :url)\n    tracker = Tracker.new_tracker(path, type)\n    trackers << tracker\n    tracker\n  end\n\n  def total_clicks\n    ids = trackers.no_unsub_links.where.not(method: 0).pluck(:id)\n    result = 0\n    result = TrackerHit.where(tracker_id: ids).count if ids.count > 0\n    result\n  end\n\n  def total_opens\n    ids = trackers.where(method: 0).pluck(:id)\n    result = 0\n    result = TrackerHit.where(tracker_id: ids).count if ids.count > 0\n    result\n  end\n\n  def generate_failed_activity\n    if campaign.test != true\n      aggregated_activity_attrs = {\n        tenant_id: campaign.tenant_id,\n        campaign_id: campaign.id,\n        activity_for: \"campaign_failed_aggregated\",\n      }\n      aggregated_activity = Activity.find_or_initialize_by(aggregated_activity_attrs)\n      aggregated_activity.source_created_at = Time.now\n      aggregated_activity.save\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "has_clicks",
              "scope": "-> { where(\"EXISTS (SELECT null FROM campaign_messages_trackers INNER JOIN trackers ON trackers.id = campaign_messages_trackers.tracker_id INNER JOIN tracker_hits ON tracker_hits.tracker_id = trackers.id WHERE trackers.method != 0 AND trackers.path NOT LIKE \\'%unsubscribe%\\' AND campaign_messages_trackers.campaign_message_id = campaign_messages.id)\") }"
            }
          ],
          "belongs_to": [
            {
              "name": "campaign",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "hits",
              "options": {
                "through": "trackers"
              },
              "raw_options": "through: :trackers"
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "trackers",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "campaign_messages_tracker",
        "name_plural": "campaign_messages_trackers",
        "dsl_file": ""
      },
      {
        "name": "campaign",
        "name_plural": "campaigns",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/campaign.rb",
        "source": {
          "ruby": "class Campaign < ActiveRecord::Base\n  include Categorizable\n\n  enum status: %i[unsent sent sending complete]\n  enum method: %i[email sms print phone]\n  enum schedule_week: {first_week: 1, second_week: 2, third_week: 3, last_week: -1}\n\n  validates :name, length: { minimum: 4 }\n\n  has_and_belongs_to_many :contact_lists, -> { uniq }, autosave: true\n  has_many :messages, class_name: \"CampaignMessage\", dependent: :destroy\n  has_many :exclusions, class_name: \"CampaignExclusion\", dependent: :destroy\n  has_many :counts, class_name: \"CampaignCount\", dependent: :destroy\n  has_many :trackers, through: :messages\n  has_many :hits, through: :trackers\n  has_many :email_template_values, as: :element\n  has_many :campaign_calendar_entries\n  belongs_to :tenant\n  belongs_to :enterprise\n  belongs_to :email_template\n  belongs_to :user\n  belongs_to :identity\n\n  before_save :change_schedule\n  before_save :update_scheduled_at\n  before_save :make_global_if_enterprise\n\n  scope :scheduled, -> (tenant) { where(parent_id: nil, scheduled: true).where(\"campaigns.schedule_interval_type <> 'none' OR (campaigns.schedule_interval_type = 'none' AND (NOW() - (campaigns.schedule_date[1] - interval '#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second') <= interval '3 days') AND NOT EXISTS(SELECT null FROM campaigns c1 WHERE c1.tenant_id = #{tenant.id} AND c1.parent_id = campaigns.id AND c1.test = FALSE AND c1.created_at >= ((campaigns.schedule_date[1] - interval '#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second') - interval '2 days' )))\") }\n  scope :without_hidden, -> (tenant) { where(\"(campaigns.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE AND campaigns.global_hide IS DISTINCT FROM TRUE\") }\n  scope :require_selected_enterprise, -> (tenant) { where(\"campaigns.enterprise_campaign = FALSE OR (campaigns.enterprise_campaign = TRUE AND ? = ANY(campaigns.selected_tenants))\", tenant.id) }\n\n  attr_accessor :new_schedule_date\n\n  validate :name_must_be_unique, :name_must_not_be_in_global\n\n  def name_must_be_unique\n    if parent_id.nil?\n      found_template = tenant.campaigns.where(global: false).where(name: name, parent_id: nil)\n      found_template = found_template.where.not(id: id) if id.present?\n      if found_template.first.present?\n        errors.add(:name, \"This name has already been taken by a local campaign!\")\n      end\n    end\n  end\n\n  def name_must_not_be_in_global\n    if parent_id.nil?\n      found_template = tenant.enterprise.campaigns.where(global: true).where(name: name, parent_id: nil)\n      found_template = found_template.where.not(id: id) if id.present?\n      if found_template.first.present?\n        errors.add(:name, \"This name has already been taken by a global campaign!\")\n      end\n    end\n  end\n\n  def contacts(target_tenant, page = nil, per = nil, location = nil, exclude_oversend = nil, only_oversend = false, search = nil, sort = nil, direction = nil, background = false)\n    result = Kaminari.paginate_array(Contact.none, total_count: 0).page(page).per(per)\n\n    exclude_oversend = default_override? if exclude_oversend.nil?\n\n    list = contact_lists.first\n    result = list.all_contacts(target_tenant, page, per, false, self, location, exclude_oversend, only_oversend, search, sort, direction, background) if list\n\n    if location.nil? && exclude_oversend == default_override? && only_oversend == false\n      count = counts.find_or_initialize_by(tenant_id: target_tenant.id)\n      count.assign_attributes(total_count: result.total_count)\n      count.save\n    end\n\n    result\n  end\n\n  def default_override?\n    !(scheduled && schedule_auto_send && auto_send_throttle_override)\n  end\n\n  def tenant_count(target_tenant)\n    counts.find_by(tenant_id: target_tenant.id).try(:total_count) || 0\n  end\n\n  def enterprise_count\n    result = 0\n    campaign_counts = CampaignCount.where(tenant_id: selected_tenants, campaign_id: id)\n    if campaign_counts.where(\"total_count < 0\").count > 0\n      result = -1\n    else\n      result = campaign_counts.sum(:total_count)\n    end\n    result\n  end\n\n  def active_contacts\n    Contact.joins(:campaign_messages).where(campaign_messages: { campaign_id: id })\n  end\n\n  def new_contexts(klass, range: 30.days, sales_rep_user_id: 0, mbe: false)\n    contact_ids = active_contacts.pluck(:id)\n    if contact_ids.count > 0\n      attribution_start = created_at\n      campaign_attribution_offset = RegionConfig.get_value(\"campaign_attribution_offset\", 0).to_i\n      if campaign_attribution_offset > 0\n        attribution_start = created_at + campaign_attribution_offset.days\n      end\n\n      if mbe.present?\n        object = klass.where(status: %w[CREATED DRAFT_WAYBILL INVOICED], tenant_id: tenant_id, contact_id: contact_ids,  shipment_date: attribution_start..(created_at + range)) if klass == Shipment\n        object = klass.for_tenant(tenant_id).for_dates(attribution_start, (created_at + range)).invoiced(true).where(contact_id: contact_ids) if klass == Sale\n      else\n        object = klass.where(tenant_id: tenant_id, contact_id: contact_ids,  ordered_date: attribution_start..(created_at + range))\n      end\n\n      if sales_rep_user_id != 0\n        if sales_rep_user_id == -1\n          if tenant.sales_rep_for_locations\n            object.where(location_user_id: nil)\n          else\n            object.where(sales_rep_user_id: nil)\n          end\n        else\n          if tenant.sales_rep_for_locations\n            object.where(location_user_id: sales_rep_user_id)\n          else\n            object.where(sales_rep_user_id: sales_rep_user_id)\n          end\n        end\n      end\n\n      object\n    else\n      klass.none\n    end\n  end\n\n  def local_hide(tenant, hidden_state = true)\n    hidden_tenants[tenant.id] = hidden_state\n    save\n  end\n\n  def set_approval(target_tenant, desired_state)\n    now = nil\n    now = Time.now if desired_state\n    if enterprise_campaign\n      approvals[\"-1\"] = now\n    else\n      approvals[\"#{target_tenant.id}\"] = now\n    end\n    save\n  end\n\n   def set_skip(target_tenant, skip_time = Time.now)\n    if enterprise_campaign\n      skips[\"-1\"] = skip_time\n    else\n      skips[\"#{target_tenant.id}\"] = skip_time\n    end\n    save\n  end\n\n  def can_approve(target_tenant, target_user)\n    result = false\n    if target_user.is_enterprise_user?\n      result = true\n    elsif !enterprise_campaign && scheduled && target_user.is_admin?\n      result = true\n    end\n\n    result\n  end\n\n  def can_cancel(target_tenant, target_user)\n    result = false\n\n    if enterprise_campaign && modifiable(target_tenant, target_user)\n      result = true\n    elsif global && (target_user.is_admin? || target_user.is_enterprise_user?) && !auto_send_tenants.nil? && auto_send_tenants.include?(target_tenant.id)\n      result = true\n    elsif !global && (target_user.is_admin? || target_user.is_enterprise_user?)\n      result = true\n    end\n\n    result\n  end\n\n  def awaiting_approval(target_tenant)\n    result = false\n    result = true if scheduled && schedule_auto_send && needs_approval(target_tenant) && ((Time.now - next_schedule(target_tenant)).abs <= 2.days)\n    if result && global && !enterprise_campaign && !auto_send_tenants.include?(target_tenant.id)\n      result = false\n    end\n    result\n  end\n\n  def needs_approval(target_tenant)\n    result = true\n\n    if enterprise_campaign && valid_approval?(approvals[\"-1\"])\n      result = false\n    elsif !enterprise_campaign && valid_approval?(approvals[\"#{target_tenant.id}\"])\n      result = false\n    end\n\n    result\n  end\n\n  def valid_approval?(approval_value)\n    result = false\n\n    if auto_approve == true\n      result = true\n    elsif !approval_value.nil? && Time.now <= (approval_value.to_datetime + 2.days)\n      result = true\n    end\n\n    result\n  end\n\n  def tracker_stats\n    stats = Hash.new\n    trackers.each do |tracker|\n      if stats[tracker.path]\n        stats[tracker.path] += tracker.hits\n      else\n        stats[tracker.path] = tracker.hits\n      end\n    end\n    stats\n  end\n\n  def steps\n    %w[new details contact_lists test confirm]\n  end\n\n  def send_campaign(user, target_tenant, identity, test, override_throttle = false, target_test_emails = [])\n    parent = Campaign.find(parent_id) if parent_id\n    if parent\n      exclude_oversend = !allow_override\n      exclude_oversend = false if self.test\n\n      target_contacts = []\n\n      if test\n        if target_tenant.sales_rep_for_locations\n          target_tenant.locations.each do |location|\n            location_contact = parent.contacts(target_tenant, 1, 1, location, exclude_oversend).first(1)\n            target_contacts = target_contacts + location_contact if !location_contact.nil?\n          end\n        else\n          target_contacts = parent.contacts(target_tenant, 1, 3, nil, exclude_oversend).first(enterprise_campaign ? 1 : 3)\n        end\n      else\n        target_contacts = parent.contacts(target_tenant, -1, nil, nil, exclude_oversend)\n      end\n\n      ActiveRecord::Base.transaction do\n        target_contacts.each do |contact|\n          next if contact.tenant_id != target_tenant.id\n          parent_message = CampaignMessage.joins(:campaign, :contact).where(campaigns: {id: id}, parent_message_id: nil).where(\"LOWER(BTRIM(contacts.email)) = ?\", Email.clean_email(contact.email)).first\n          message = CampaignMessage.find_or_initialize_by(tenant_id: tenant_id, campaign_id: id, contact_id: contact.id)\n          if parent_message\n            message.parent_message_id = parent_message.id\n            message.sent = parent_message.sent\n            message.opened = parent_message.opened\n            message.failed = parent_message.failed\n            message.failed_reason = parent_message.failed_reason\n          else\n            message.sent = false\n            message.opened = false\n          end\n          message.save\n          Activity.create!(tenant_id: tenant_id, contact_id: contact.id, company_id: contact.company.try(:id), campaign_id: id, campaign_message_id: message.id, activity_for: \"campaign_message\") unless test\n        end\n      end\n      self.status = :sent\n      save\n      unless test\n        Activity.find_or_create_by(user_id: user_id, tenant_id: tenant_id, campaign_id: id, activity_for: \"campaign_sent\")\n        CampaignExclusion.joins(:contact).where(campaign_id: parent.id, contacts: {tenant_id: target_tenant}).destroy_all if parent.clear_exclusions\n        count = counts.find_or_initialize_by(tenant_id: target_tenant.id)\n        count.assign_attributes(total_count: 0)\n        count.save\n\n        parent.categories.each do |tag_category|\n          tag_category.tag_context(self, user_id: user_id)\n        end\n      end\n      self\n    else\n      child = dup\n      child.test = test\n      child.test_emails = target_test_emails\n      child.parent_id = id\n      child.tenant_id = target_tenant.id\n      child.user_id = user.id\n      child.identity_id = identity.try(:id)\n      child.allow_override = can_override_throttle(user) ? override_throttle : false\n      child.allow_override = true if test\n      child.status = :sending\n      child.save\n\n      if email_template\n        email_template.email_template_fields.each do |field|\n          EmailTemplateValue.where(email_template_field_id: field.id, element_type: \"Campaign\", element_id: id).where(\"tenant_id IS NULL OR tenant_id = ?\", target_tenant.id).each do |field_value|\n            new_value = field_value.dup\n            new_value.element_id = child.id\n            new_value.save\n          end\n        end\n      end\n\n      child.send_campaign(user, target_tenant, identity, test)\n    end\n  end\n\n  def last_enterprise_run\n    return nil if !enterprise_campaign || selected_tenants.count == 0\n    last_run_date = nil\n    target_tenants = Tenant.where(id: selected_tenants)\n    target_tenants.each do |target_tenant|\n      last_run_date = last_run(target_tenant)\n      if !last_run_date.nil?\n        break\n      end\n    end\n    last_run_date\n  end\n\n  def next_enterprise_schedule(current_tenant)\n    return nil if !enterprise_campaign || selected_tenants.count == 0\n    next_date = nil\n    target_tenants = Tenant.where(id: selected_tenants)\n    target_tenants.each do |target_tenant|\n      next_date = next_schedule_utc(target_tenant)\n      if !next_date.nil?\n        next_date = current_tenant.change_to_time_zone(next_date)\n        break\n      end\n    end\n    next_date\n  end\n\n  def next_schedule(target_tenant, latest_child = nil)\n    return nil if enterprise_campaign && !selected_tenants.include?(target_tenant.id)\n    next_date = next_schedule_utc(target_tenant, latest_child)\n    if !next_date.nil?\n      next_date = target_tenant.change_to_time_zone(next_date)\n    end\n    next_date\n  end\n\n  def next_schedule_utc(target_tenant, latest_child = nil)\n    if scheduled && schedule_date.count < 1\n      self.new_schedule_date = old_next_schedule(tenant)\n      self.schedule_interval_type = \"month\"\n      self.schedule_day_lock = \"weekday\"\n      save\n    end\n    return nil if !scheduled || schedule_date.count < 1\n    now = DateTime.now\n    expiration_duration = 7.days\n    expiration_duration = 3.days if schedule_interval_type == \"week\"\n    latest_child = last_run(target_tenant) if latest_child.nil?\n    latest_child_time = DateTime.new\n    latest_child_time = latest_child.created_at if !latest_child.nil?\n\n    skip_date = skips[enterprise_campaign ? \"-1\" : \"#{target_tenant.id}\"]\n\n\n    if schedule_interval_type == \"none\"\n      first_schedule_date = target_tenant.change_to_time_zone(schedule_date.first)\n      if (!latest_child.nil? && latest_child.created_at >= (first_schedule_date - 2.days)) || (now.to_i - first_schedule_date.to_i) > 3.days\n        return nil\n      else\n        return schedule_date.first\n      end\n    end\n\n    next_date = nil\n    last_date = nil\n    schedule_date.each_with_index do |date, index|\n      next if latest_child_time.between?(date - expiration_duration, date + expiration_duration) || (!skip_date.nil? && (skip_date.to_datetime + 2.days) >= date)\n      if (last_date.nil? && now < (date + expiration_duration)) || (!last_date.nil? && now.between?(last_date + expiration_duration, date + expiration_duration))\n        next_date = date\n        break\n      end\n\n      last_date = date\n    end\n\n    if next_date.nil?\n      new_date = generate_new_schedule_date(schedule_date.first, schedule_date.last, 1)\n      if !new_date.nil? && !new_date.first.nil? && new_date.first > schedule_date.last\n        self.schedule_date = schedule_date + new_date\n        save\n        next_date = next_schedule(target_tenant, latest_child)\n      end\n    end\n    next_date\n  end\n\n  def generate_new_schedule_date(base_datetime, last_datetime, new_count = 1)\n    return nil if !scheduled || schedule_date.count < 1 || schedule_interval_type == \"none\"\n\n    new_datetime = nil\n    case schedule_interval_type\n    when \"week\"\n      new_datetime = last_datetime + (schedule_interval.weeks)\n    when \"month\"\n      new_datetime = last_datetime + (schedule_interval.months) + (base_datetime.day - last_datetime.day).days\n    when \"quarter\"\n      new_datetime = last_datetime\n      time_since_quarter_start = base_datetime - base_datetime.beginning_of_quarter\n      quarters_to_advance = schedule_interval\n      while quarters_to_advance > 0\n        new_datetime = new_datetime.end_of_quarter + 1.second + time_since_quarter_start\n        quarters_to_advance = quarters_to_advance - 1\n      end\n    when \"year\"\n      new_datetime = last_datetime + (schedule_interval.years)\n    end\n\n    forward_search_datetime = nil\n    reverse_search_datetime = nil\n    reverse_span = nil\n    forward_span = nil\n\n    case schedule_day_lock\n    when \"none\"\n      if schedule_interval_type == \"month\" || schedule_interval_type == \"year\"\n        forward_search_datetime = new_datetime\n        best_forward_search_datetime = forward_search_datetime\n        search_days = 0\n        while forward_search_datetime.day != base_datetime.day && search_days < 7\n          best_forward_search_datetime = forward_search_datetime if (best_forward_search_datetime.day - base_datetime.day).abs > (forward_search_datetime.day - base_datetime.day).abs\n          forward_search_datetime = forward_search_datetime + 1.day\n          search_days += 1\n        end\n\n        if search_days >= 7\n          forward_search_datetime = best_forward_search_datetime\n        end\n\n        reverse_search_datetime = new_datetime\n        best_reverse_search_datetime = reverse_search_datetime\n        search_days = 0\n        while reverse_search_datetime.day != base_datetime.day && search_days < 7\n          best_reverse_search_datetime = reverse_search_datetime if (best_reverse_search_datetime.day - base_datetime.day).abs > (reverse_search_datetime.day - base_datetime.day).abs\n          reverse_search_datetime = reverse_search_datetime - 1.day\n          search_days += 1\n        end\n\n        if search_days >= 7\n          reverse_search_datetime = best_reverse_search_datetime\n        end\n      else\n        forward_search_datetime = new_datetime\n        reverse_search_datetime = new_datetime\n      end\n\n      reverse_span = new_datetime - reverse_search_datetime\n      forward_span = forward_search_datetime - new_datetime\n    when \"weekday\"\n      forward_search_datetime = new_datetime\n      forward_search_datetime = forward_search_datetime + 1.day while forward_search_datetime.wday != base_datetime.wday\n\n      reverse_search_datetime = new_datetime\n      reverse_search_datetime = reverse_search_datetime - 1.day while reverse_search_datetime.wday != base_datetime.wday\n\n      reverse_span = new_datetime - reverse_search_datetime\n      forward_span = forward_search_datetime - new_datetime\n    when \"business\"\n      forward_search_datetime = new_datetime\n      forward_search_datetime = forward_search_datetime + 1.day while [0, 6].include?(forward_search_datetime.wday)\n\n      reverse_search_datetime = new_datetime\n      reverse_search_datetime = reverse_search_datetime - 1.day while [0, 6].include?(reverse_search_datetime.wday)\n\n      reverse_span = new_datetime - reverse_search_datetime\n      forward_span = forward_search_datetime - new_datetime\n    end\n\n    case schedule_interval_type\n    when \"week\"\n      if reverse_span >= forward_span\n        new_datetime = forward_search_datetime\n      else\n        new_datetime = reverse_search_datetime\n      end\n    when \"month\"\n      target_month = (last_datetime.month + schedule_interval)\n      target_month = target_month - 12 while target_month > 12\n      if reverse_span >= forward_span && (forward_search_datetime.month == target_month)\n        new_datetime = forward_search_datetime\n      else\n        if reverse_search_datetime.month == target_month\n          new_datetime = reverse_search_datetime\n        elsif reverse_search_datetime.month > target_month\n          new_datetime = reverse_search_datetime - 7.days\n        elsif reverse_search_datetime.month < target_month\n          new_datetime = reverse_search_datetime + 7.days\n        end\n      end\n\n      if new_datetime.month != target_month\n        if forward_search_datetime.month == target_month\n          new_datetime = forward_search_datetime\n        elsif reverse_search_datetime.month == target_month\n          new_datetime = reverse_search_datetime\n        else\n          raise \"Schedule could not reach target month. Campaign: #{id}\"\n        end\n      end\n    when \"quarter\"\n      raw_quarter = (((last_datetime.month - 1) / 3) + schedule_interval)\n      target_quarter = (raw_quarter % 4) + ((last_datetime.year + (raw_quarter / 4).floor) * 10)\n      forward_quarter = ((forward_search_datetime.month - 1) / 3) + (forward_search_datetime.year * 10)\n      reverse_quarter = ((reverse_search_datetime.month - 1) / 3) + (reverse_search_datetime.year * 10)\n      if reverse_span >= forward_span && (forward_quarter == target_quarter)\n        new_datetime = forward_search_datetime\n      else\n        if reverse_quarter == target_quarter\n          new_datetime = reverse_search_datetime\n        elsif reverse_quarter > target_quarter\n          new_datetime = reverse_search_datetime - 7.days\n        elsif reverse_quarter < target_quarter\n          new_datetime = reverse_search_datetime + 7.days\n        end\n      end\n    when \"year\"\n      if reverse_span >= forward_span && (forward_search_datetime.year == last_datetime.year + schedule_interval)\n        new_datetime = forward_search_datetime\n      else\n        new_datetime = reverse_search_datetime\n      end\n    end\n\n    result = []\n    result << new_datetime\n    if new_count > 1\n      result = result + generate_new_schedule_date(base_datetime, new_datetime, new_count - 1)\n    end\n\n    result.compact\n  end\n\n  def old_next_schedule(target_tenant)\n    time = Time.now.in_time_zone(target_tenant.time_zone)\n    result = time\n    if (old_schedule < created_at || (old_schedule + 7.days) < time) || (!scheduled_at.nil? && old_schedule < scheduled_at)\n      result = old_schedule(old_schedule.end_of_month + 1.day)\n    else\n      latest_child = last_run(target_tenant)\n      if latest_child && (old_schedule < latest_child.created_at || latest_child.created_at.beginning_of_day >= 30.days.ago)\n        result = old_schedule(latest_child.created_at.end_of_month + 1.day)\n      elsif (old_schedule + 7.days) < time\n        result = old_schedule(old_schedule.end_of_month + 1.day)\n      else\n        result = old_schedule(time)\n      end\n    end\n    result = result.beginning_of_day + schedule_hour.hours\n\n    result\n  end\n\n  def old_schedule(date = Time.now)\n    ApplicationController.helpers.weekday_of_month(Campaign.schedule_weeks[schedule_week], schedule_weekday, date)\n  end\n\n  def self.merger(campaign: nil, contact: nil, tenant: nil, identity: nil)\n    raise \"Campaign object required for campaign merger.\" if campaign.nil?\n    raise \"Tenant object required for campaign merger.\" if tenant.nil?\n    raise \"Identity object required for campaign merger.\" if identity.nil?\n    TemplateMerger.new(campaign, contact, tenant, identity)\n  end\n\n  def due(target_tenant)\n    return false if next_schedule(target_tenant).nil?\n    next_schedule(target_tenant) < Time.now.in_time_zone(target_tenant.time_zone)\n  end\n\n  def due_today(target_tenant)\n    return false if next_schedule(target_tenant).nil?\n    next_schedule(target_tenant).to_date <= Time.now.in_time_zone(target_tenant.time_zone).to_date\n  end\n\n  def update_calendars(target_tenant = nil)\n    target_tenant = tenant if target_tenant.nil?\n    next_date = next_schedule_utc(target_tenant)\n\n    if scheduled && !next_date.nil? && (!enterprise_campaign || (enterprise_campaign && selected_tenants.include?(target_tenant.id)))\n      require \"google/apis/calendar_v3\"\n      summary = \"Print Speak Campaign: #{name}\"\n      start_time = next_date.asctime.in_time_zone(target_tenant.time_zone).to_datetime\n      event_start = Google::Apis::CalendarV3::EventDateTime.new(date_time: start_time.rfc3339)\n      event_end = Google::Apis::CalendarV3::EventDateTime.new(date_time: (start_time + 15.minutes).rfc3339)\n      event = Google::Apis::CalendarV3::Event.new(summary: summary, start: event_start, end: event_end)\n\n      user_ids = target_tenant.visible_users.where(marketing_calendar_events: true).pluck(:id)\n      entries = CampaignCalendarEntry.where(campaign_id: id, tenant_id: target_tenant.id)\n      entries.each do |entry|\n        user_ids.delete(entry.user_id)\n        user = entry.user\n        if !user.nil?\n          if !user.marketing_calendar_events\n            user.delete_calendar_event(\"primary\", entry.calendar_entry_id)\n            entry.destroy\n          elsif entry.date != next_date\n            result_id = user.update_calendar_event(\"primary\", entry.calendar_entry_id, event)\n            if result_id == \"not_found\"\n              entry.destroy\n            else\n              entry.update_attributes(calendar_entry_id: result_id, date: next_date) if !result_id.nil? && result_id != \"failed\"\n            end\n          end\n        else\n          entry.destroy\n        end\n      end\n      user_ids.each do |user_id|\n        user = User.find(user_id)\n        result_id = user.create_calendar_event(\"primary\", event)\n        CampaignCalendarEntry.create(campaign_id: id, tenant_id: target_tenant.id, user_id: user.id, calendar_entry_id: result_id, date: next_date) if !result_id.nil? && result_id != \"failed\"\n      end\n    else\n      entries = CampaignCalendarEntry.where(campaign_id: id, tenant_id: target_tenant.id)\n      entries.each do |entry|\n        user = entry.user\n        if !user.nil?\n          user.delete_calendar_event(\"primary\", entry.calendar_entry_id)\n        end\n        entry.destroy\n      end\n    end\n  end\n\n  def total_clicks\n    ids = trackers.where.not(method: 0).pluck(:id)\n    TrackerHit.where(tracker_id: ids).count()\n  end\n\n  def clicks\n    ids = trackers.where.not(method: 0).pluck(:id)\n    @trackers = TrackerHit.where(tracker_id: ids).where.not(method: 0)\n  end\n\n  def modifiable(target_tenant, user)\n    (!global && !enterprise_campaign && target_tenant.id == tenant_id) || (user.is_enterprise_user? && user.enterprise_id == enterprise_id)\n  end\n\n  def sendable(target_tenant, user, is_test_send = false)\n    result = false\n    result = true if user.is_admin? && (global || target_tenant.id == tenant_id) && !enterprise_campaign\n\n    result = true if user.is_enterprise_user? && user.enterprise_id == enterprise_id\n\n    result = false if schedule_auto_send && !is_test_send\n\n    result\n  end\n\n  def last_run(target_tenant)\n    target_tenant.campaigns.where(parent_id: id).where.not(test: true).order(created_at: :desc).first\n  end\n\n  def can_override_throttle(user)\n    (global && allow_override) || (!global && user.is_admin?)\n  end\n\n  def has_inline_images?\n    /src=[\"']data:[a-zA-Z]+\\/[a-zA-Z]+;.+[\"']/ =~ body\n  end\n\n  def needs_test_send?\n    enterprise_campaign ? tenants_missing_test_send.count > 0 : Campaign.where(parent_id: id, test: true).where(\"MD5(body) = ?\", Digest::MD5.hexdigest(body || \"\")).count == 0\n  end\n\n  def tenants_missing_test_send\n    result = []\n\n    if enterprise_campaign\n      test_sends = Campaign.where(parent_id: id, test: true).where(\"MD5(body) = ?\", Digest::MD5.hexdigest(body || \"\")).pluck(:tenant_id)\n      selected_tenants.each do |selected_tenant|\n        result << selected_tenant unless test_sends.include?(selected_tenant)\n      end\n    end\n\n    result\n  end\n\n  def needs_unsubscribe?\n    result = true\n    if !body.blank?\n      template_merger = TemplateMerger.new(self)\n      untranslated_body = template_merger.untranslated_merge(body)\n      result = !(untranslated_body.include?(\"{{unsubscribe}}\") || untranslated_body.include?(\"{{unsubscribe_template}}\"))\n    end\n    result\n  end\n\n  def pass_checklist?\n    result = true\n    result = false if needs_test_send?\n    result = false if needs_unsubscribe?\n    result = false if has_inline_images?\n    result\n  end\n\n  def views_for_date(date)\n    subquery = CampaignMessage.select(\"campaign_messages.id, MIN(tracker_hits.created_at) AS latest_hit\").where(campaign_id: id).joins(:hits).group(\"campaign_messages.id\").to_sql\n    CampaignMessage.all.from(\"(#{subquery}) messages\").where(\"messages.latest_hit BETWEEN ? AND ?\", date.beginning_of_day, date.end_of_day).count\n  end\n\n  def check_bounce_rate\n    return if paused\n    sent_messages = messages.where(\"sent = TRUE OR failed = TRUE\").count\n    if sent_messages >= 100\n      bounced_messages = messages.where(failed: true).count\n      bounce_rate = bounced_messages.to_f / sent_messages.to_f\n      max_bounce_rate = RegionConfig.get_value(\"campaign_max_bounce_rate_percent\", 5).to_f / 100\n      if bounce_rate > max_bounce_rate\n        self.paused = true\n        save\n\n        addresses = RegionConfig.get_value(\"campaign_paused_alert\", \"\").split(\",\").map { |s| \"#{s.squish.downcase}\" }\n        enterprise_address = tenant.enterprise.campaign_test_address\n        addresses << enterprise_address if !enterprise_address.blank?\n\n        Thread.new do\n          Email.ses_send(addresses, \"Print Speak: Campaign Paused: #{tenant.name} - #{tenant.number} (#{name})\", %Q{\n            <p>\n              A campaign was paused for #{tenant.name} (#{name}).\n            </p>\n          })\n          ActiveRecord::Base.clear_active_connections!\n        end\n\n\n      end\n    end\n  end\n\n  def has_required_custom_fields?(selected_tenant)\n    result = true\n    !email_template.nil? && email_template.email_template_fields.where(required: true).each do |field|\n      result = false if field.get_value(self, selected_tenant.id).blank?\n    end\n    result\n  end\n\n  def all_have_required_custom_fields?(tenants)\n    result = true\n    tenants.each do |tenant|\n      result = false if !has_required_custom_fields?(tenant)\n    end\n    result\n  end\n\n  def self.valid_datetime?(datetime)\n    valid = false\n    begin\n      datetime.to_datetime\n      valid = true\n    rescue StandardError\n    end\n    valid\n  end\n\n  def ready_to_send?(bypass_checklist = false)\n    result = false\n\n    if !global && !enterprise_campaign\n      result = true if check_campaign_send?(tenant, bypass_checklist)\n    elsif global && !enterprise_campaign\n      target_tenants = Tenant.where(id: auto_send_tenants, enterprise_id: tenant.enterprise.id)\n      target_tenants.each do |target_tenant|\n        result = true if check_campaign_send?(target_tenant, bypass_checklist)\n      end\n    elsif global && enterprise_campaign\n      target_tenants = Tenant.where(id: selected_tenants, enterprise_id: tenant.enterprise.id)\n      target_tenants.each do |target_tenant|\n        result = true if check_campaign_send?(target_tenant, bypass_checklist)\n      end\n    end\n\n    result\n  end\n\n  def check_campaign_send?(target_tenant, bypass_checklist = false)\n    result = false\n\n    now = Time.current\n\n    next_send = id.nil? ? target_tenant.change_to_time_zone(schedule_date.first) : next_schedule(target_tenant)\n    if next_send\n      if now >= next_send && !needs_approval(target_tenant) && ((now - next_send) <= 3.days)\n        result = true if bypass_checklist || (pass_checklist? && has_required_custom_fields?(target_tenant))\n      end\n    end\n\n    result\n  end\n\n  def in_lockout_period?(target_tenant)\n    result = false\n    recent_send = Campaign.where(parent_id: id, tenant_id: target_tenant.id, test: false).where(\"created_at > ?\", 1.day.ago).first\n    result = true if recent_send\n    result\n  end\n\n  def most_recent_send(target_tenant)\n    result = nil\n    Campaign.uncached do\n      result = Campaign.where(parent_id: id, tenant_id: target_tenant.id).order(created_at: :desc).first\n    end\n    result\n  end\n\n  def self.click_stats(campaign_ids, start_date, end_date)\n    result = {\n      total_trackers: 0,\n      unique_clicks: 0\n    }\n    query = %Q{\n      SELECT\n        COUNT(tracker_hits.tracker_id) AS total_trackers,\n        COUNT(DISTINCT tracker_hits.tracker_id) AS unique_clicks\n      FROM trackers\n      INNER JOIN campaign_messages_trackers ON campaign_messages_trackers.tracker_id = trackers.id\n      INNER JOIN campaign_messages ON campaign_messages.id = campaign_messages_trackers.campaign_message_id\n      LEFT OUTER JOIN tracker_hits ON tracker_hits.tracker_id = trackers.id\n      WHERE trackers.method != 0\n      AND trackers.path NOT LIKE '%unsubscribe%'\n      AND campaign_messages.campaign_id IN (#{campaign_ids.to_csv})\n      AND tracker_hits.created_at BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n    }\n    if campaign_ids.count > 0\n      query_result = ActiveRecord::Base.connection.execute(query).first\n      if query_result\n        result = {\n          total_trackers: query_result[\"total_trackers\"].try(:to_i) || 0,\n          unique_clicks: query_result[\"unique_clicks\"].try(:to_i) || 0,\n        }\n      end\n    end\n    result\n  end\n\n  def self.categorized_click_stats(campaign_ids)\n    categories = {}\n    query = %Q{\n      SELECT\n        campaigns.tenant_id,\n        trackers.path,\n        COUNT(trackers.id) AS total_trackers,\n        (\n          SELECT COUNT(DISTINCT tracker_hits.tracker_id)\n          FROM tracker_hits\n          WHERE tracker_hits.tracker_id = ANY (ARRAY_AGG(trackers.id))\n        ) AS unique_clicks\n      FROM trackers\n      INNER JOIN campaign_messages_trackers ON campaign_messages_trackers.tracker_id = trackers.id\n      INNER JOIN campaign_messages ON campaign_messages.id = campaign_messages_trackers.campaign_message_id\n      INNER JOIN campaigns ON campaigns.id = campaign_messages.campaign_id\n      WHERE trackers.method != 0\n      AND trackers.path NOT LIKE '%unsubscribe%'\n      AND campaign_messages.campaign_id IN (#{campaign_ids.to_csv})\n      GROUP BY campaigns.tenant_id, trackers.path\n    }\n    if campaign_ids.count > 0\n      query_result = ActiveRecord::Base.connection.execute(query)\n      if query_result\n        url_data = []\n        query_result.each do |stats|\n          url = Campaign.url_data(stats[\"path\"])\n          url_data << {\n            tenant_id: stats[\"tenant_id\"].to_i,\n            total_trackers: stats[\"total_trackers\"].try(:to_i) || 0,\n            unique_clicks: stats[\"unique_clicks\"].try(:to_i) || 0,\n            url: stats[\"path\"],\n            domain: url[:domain],\n            base_domain: url[:base_domain],\n            path: url[:path],\n            clean_url: url[:clean_url]\n          }\n        end\n\n        identities = Identity.all.as_json\n\n        url_data.each do |data|\n          category = nil\n          title = nil\n          sub_title = nil\n          base_domain = data[:base_domain].try(:downcase)\n          clean_url = data[:clean_url].try(:downcase)\n          if base_domain == \"facebook.com\"\n            category = \"facebook\"\n            title = \"Facebook\"\n          elsif base_domain == \"twitter.com\"\n            category = \"twitter\"\n            title = \"Twitter\"\n          elsif base_domain == \"printspeak.com\" && clean_url.include?(\"email_view\")\n            category = \"email_view\"\n            title = \"Email View\"\n          else\n            target_identities = identities.select { |t| t[\"tenant_id\"] == data[:tenant_id] }\n            if target_identities.count > 0\n              target_identities.each do |identity|\n                break if !category.blank?\n                identity[\"request_quote_url_data\"] ||= Campaign.url_data(identity[\"request_quote_url\"])\n                if !identity[\"request_quote_url_data\"].nil? && !identity[\"request_quote_url_data\"][:clean_url].blank?\n                  request_quote_url = identity[\"request_quote_url_data\"][:clean_url]\n                  if request_quote_url == clean_url\n                    category = \"request_a_quote\"\n                    title = \"Request A Quote\"\n                  end\n                end\n\n                identity[\"website_url_data\"] ||= Campaign.url_data(identity[\"website_url\"])\n                if category.blank? && !identity[\"website_url_data\"].nil? && !identity[\"website_url_data\"][:clean_url].blank?\n                  website_url = identity[\"website_url_data\"][:clean_url]\n                  if website_url == clean_url\n                    category = \"website\"\n                    title = \"Website\"\n                  else\n                    if clean_url.start_with?(website_url)\n                      website_path = clean_url.split(website_url).try(:[], 1)\n                      if !website_path.blank?\n                          website_path = website_path[1..-1] if website_path[0] == \"/\"\n                          category = \"website/#{website_path}\"\n                          title = \"Website\"\n                          sub_title = website_path\n                      end\n                    end\n                  end\n                end\n              end\n            end\n\n            if category.blank?\n              if data[:path].blank? || data[:path] == \"/\"\n                category = base_domain\n                title = base_domain\n              else\n                slash = \"/\" if data[:path][0] != \"/\"\n                path = data[:path][1..-1] if data[:path][0] == \"/\"\n                category = \"#{base_domain}/#{path}\"\n                title = base_domain\n                sub_title = URI.decode(path)\n              end\n            end\n          end\n\n          if !category.blank?\n            title = category if title.blank?\n            if categories.has_key?(category)\n              categories[category][:total_trackers] += data[:total_trackers]\n              categories[category][:unique_clicks] += data[:unique_clicks]\n              categories[category][:urls] << data\n            else\n              categories[category] = {\n                title: title,\n                sub_title: sub_title,\n                total_trackers: data[:total_trackers],\n                unique_clicks: data[:unique_clicks],\n                urls: [data]\n              }\n            end\n          end\n        end\n      end\n    end\n    categories\n  end\n\n  def self.url_data(url)\n    result = nil\n    begin\n      url = url.gsub(/https?:\\/\\//, \"\")\n      uri = URI.parse(\"http://#{url}\")\n      host = PublicSuffix.domain(uri.host)\n      result = {\n        domain: uri.host,\n        base_domain: host,\n        path: uri.path,\n        clean_url: \"#{host}#{uri.path}\".try(:downcase).try(:chomp, \"/\")\n      }\n    rescue StandardError\n    end\n    result\n  end\n\n  def self.enterprise_report_job(job)\n    total_stats = {\n      estimate_count: 0,\n      estimate_total: 0,\n      invoice_count: 0,\n      invoice_total: 0,\n      messages_count: 0,\n      messages_sent: 0,\n      messages_opened: 0,\n      messages_failed: 0,\n      messages_unsubscribed: 0\n    }\n\n    attribution_start = \"campaigns.created_at\"\n    campaign_attribution_offset = RegionConfig.get_value(\"campaign_attribution_offset\", 0).to_i\n    if campaign_attribution_offset > 0\n      attribution_start = \"campaigns.created_at + interval '#{campaign_attribution_offset} days'\"\n    end\n\n    sent_campaign_ids = job.data[\"sent_campaign_ids\"]\n    start_date = job.data[\"start_date\"].to_datetime\n    end_date = job.data[\"end_date\"].to_datetime\n    click_stats = Campaign.click_stats(sent_campaign_ids, start_date, end_date)\n\n    campaign_stats_query = %Q{\n      SELECT\n        campaign_stats.tenant_id,\n        ARRAY_AGG(campaign_stats.id) AS campaign_ids,\n        SUM(campaign_stats.estimate_info[1]) AS estimate_count,\n        SUM(campaign_stats.estimate_info[2]) AS estimate_total,\n        SUM(campaign_stats.invoice_info[1]) AS invoice_count,\n        SUM(campaign_stats.invoice_info[2]) AS invoice_total,\n        SUM(campaign_stats.campaign_info[1]) AS messages_count,\n        SUM(campaign_stats.campaign_info[2]) AS messages_sent,\n        SUM(campaign_stats.campaign_info[3]) AS messages_opened,\n        SUM(campaign_stats.campaign_info[4]) AS messages_failed,\n        SUM(campaign_stats.campaign_info[5]) AS messages_unsubscribed,\n        MAX(campaign_stats.created_at) AS latest_send_date\n      FROM (\n        SELECT\n          campaigns.id,\n          campaigns.tenant_id,\n          campaigns.created_at,\n          (\n            SELECT ARRAY[\n              COALESCE(COUNT(estimates.id), 0),\n              COALESCE(SUM(estimates.grand_total), 0)\n            ]\n            FROM estimates\n            WHERE estimates.tenant_id = campaigns.tenant_id\n            AND estimates.voided = FALSE\n            AND estimates.deleted = FALSE\n            AND estimates.ordered_date BETWEEN #{attribution_start} AND campaigns.created_at + interval '30 days'\n            AND estimates.ordered_date BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n            AND EXISTS (\n              SELECT null\n              FROM campaign_messages\n              WHERE campaign_messages.tenant_id = campaigns.tenant_id\n              AND campaign_messages.contact_id = estimates.contact_id\n              AND campaign_messages.campaign_id = campaigns.id\n            )\n          ) AS estimate_info,\n          (\n            SELECT ARRAY[\n              COALESCE(COUNT(invoices.id), 0),\n              COALESCE(SUM(invoices.grand_total), 0)\n            ]\n            FROM invoices\n            WHERE invoices.tenant_id = campaigns.tenant_id\n            AND invoices.voided = FALSE\n            AND invoices.deleted = FALSE\n            AND invoices.ordered_date BETWEEN #{attribution_start} AND campaigns.created_at + interval '30 days'\n            AND invoices.ordered_date BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n            AND EXISTS (\n              SELECT null\n              FROM campaign_messages\n              WHERE campaign_messages.tenant_id = campaigns.tenant_id\n              AND campaign_messages.contact_id = invoices.contact_id\n              AND campaign_messages.campaign_id = campaigns.id\n            )\n          ) AS invoice_info,\n          (\n            SELECT ARRAY[\n              COALESCE(COUNT(campaign_messages.id), 0),\n              COUNT(CASE WHEN campaign_messages.sent = TRUE THEN 1 END),\n              COUNT(CASE WHEN campaign_messages.opened = TRUE THEN 1 END),\n              COUNT(CASE WHEN campaign_messages.failed = TRUE THEN 1 END),\n              COUNT(CASE WHEN campaign_messages.unsubscribed = TRUE THEN 1 END)\n            ]\n            FROM campaign_messages\n            WHERE campaign_messages.tenant_id = campaigns.tenant_id\n            AND campaign_messages.campaign_id = campaigns.id\n            AND campaign_messages.created_at BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n          ) AS campaign_info\n        FROM campaigns\n        WHERE campaigns.test = FALSE\n        AND campaigns.id IN (#{sent_campaign_ids.to_csv})\n      ) campaign_stats\n      GROUP BY campaign_stats.tenant_id\n    }\n\n    if sent_campaign_ids.count > 0\n      campaign_stats = ActiveRecord::Base.connection.execute(campaign_stats_query).to_a\n      campaign_stats.each do |campaign_stat|\n        total_stats[:estimate_count] += campaign_stat[\"estimate_count\"].try(:to_i) || 0\n        total_stats[:estimate_total] += campaign_stat[\"estimate_total\"].try(:to_f) || 0.0\n        total_stats[:invoice_count] += campaign_stat[\"invoice_count\"].try(:to_i) || 0\n        total_stats[:invoice_total] += campaign_stat[\"invoice_total\"].try(:to_f) || 0.0\n        total_stats[:messages_count] += campaign_stat[\"messages_count\"].try(:to_i) || 0\n        total_stats[:messages_sent] += campaign_stat[\"messages_sent\"].try(:to_i) || 0\n        total_stats[:messages_opened] += campaign_stat[\"messages_opened\"].try(:to_i) || 0\n        total_stats[:messages_failed] += campaign_stat[\"messages_failed\"].try(:to_i) || 0\n        total_stats[:messages_unsubscribed] += campaign_stat[\"messages_unsubscribed\"].try(:to_i) || 0\n      end\n    else\n      campaign_stats = {}\n    end\n\n    csv_result = CSV.generate(col_sep: job.tenant.enterprise.csv_col_sep) do |csv|\n      fields = [\n        \"date\",\n        \"tenants\",\n        \"total_contacts\",\n        \"new_estimates\",\n        \"new_invoices\",\n        \"emails_sent\",\n        \"opened\",\n        \"total clicks\",\n        \"bounced\",\n        \"unsubscribes\"\n      ]\n      csv << fields\n\n      open_rate = 0\n\n      if total_stats[\"messages_count\"].to_f > 0 && total_stats[\"messages_opened\"].to_f > 0\n        open_rate = ((total_stats[\"messages_opened\"].to_f / total_stats[\"messages_count\"].to_f) * 100.0).round\n      end\n\n      values = [\n        job.tenant.local_strftime(job.data[\"start_date\"]),\n        campaign_stats.count,\n        total_stats[\"messages_count\"],\n        total_stats[\"estimate_total\"],\n        total_stats[\"invoice_total\"],\n        total_stats[\"messages_sent\"],\n        total_stats[\"messages_opened\"],\n        open_rate,\n        click_stats[\"unique_clicks\"],\n        total_stats[\"messages_failed\"],\n        total_stats[\"messages_unsubscribed\"]\n      ]\n      csv << values\n    end\n\n    lifespan = 5.minutes\n    if end_date < Date.yesterday\n      lifespan = 1.year\n    end\n\n    {\n      total_stats: total_stats,\n      campaign_stats: campaign_stats,\n      click_stats: click_stats,\n      csv: Base64.encode64(csv_result),\n      csv_filename: \"#{job.name}_#{job.job_hash}\".parameterize.underscore,\n      lifespan: lifespan\n    }\n  end\n\n  private\n\n  def change_schedule\n    if new_schedule_date && Campaign.valid_datetime?(new_schedule_date)\n      self.schedule_date = [new_schedule_date]\n    end\n  end\n\n  def update_scheduled_at\n    self.scheduled_at = Time.now if scheduled_changed? || schedule_week_changed? || schedule_weekday_changed? || scheduled_at.nil?\n  end\n\n  def make_global_if_enterprise\n    self.global = true if enterprise_campaign\n  end\nend\n",
          "public": "class Campaign < ActiveRecord::Base\n  include Categorizable\n\n  enum status: %i[unsent sent sending complete]\n  enum method: %i[email sms print phone]\n  enum schedule_week: {first_week: 1, second_week: 2, third_week: 3, last_week: -1}\n\n  validates :name, length: { minimum: 4 }\n\n  has_and_belongs_to_many :contact_lists, -> { uniq }, autosave: true\n  has_many :messages, class_name: \"CampaignMessage\", dependent: :destroy\n  has_many :exclusions, class_name: \"CampaignExclusion\", dependent: :destroy\n  has_many :counts, class_name: \"CampaignCount\", dependent: :destroy\n  has_many :trackers, through: :messages\n  has_many :hits, through: :trackers\n  has_many :email_template_values, as: :element\n  has_many :campaign_calendar_entries\n  belongs_to :tenant\n  belongs_to :enterprise\n  belongs_to :email_template\n  belongs_to :user\n  belongs_to :identity\n\n  before_save :change_schedule\n  before_save :update_scheduled_at\n  before_save :make_global_if_enterprise\n\n  scope :scheduled, -> (tenant) { where(parent_id: nil, scheduled: true).where(\"campaigns.schedule_interval_type <> 'none' OR (campaigns.schedule_interval_type = 'none' AND (NOW() - (campaigns.schedule_date[1] - interval '#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second') <= interval '3 days') AND NOT EXISTS(SELECT null FROM campaigns c1 WHERE c1.tenant_id = #{tenant.id} AND c1.parent_id = campaigns.id AND c1.test = FALSE AND c1.created_at >= ((campaigns.schedule_date[1] - interval '#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second') - interval '2 days' )))\") }\n  scope :without_hidden, -> (tenant) { where(\"(campaigns.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE AND campaigns.global_hide IS DISTINCT FROM TRUE\") }\n  scope :require_selected_enterprise, -> (tenant) { where(\"campaigns.enterprise_campaign = FALSE OR (campaigns.enterprise_campaign = TRUE AND ? = ANY(campaigns.selected_tenants))\", tenant.id) }\n\n  attr_accessor :new_schedule_date\n\n  validate :name_must_be_unique, :name_must_not_be_in_global\n\n  def name_must_be_unique\n    if parent_id.nil?\n      found_template = tenant.campaigns.where(global: false).where(name: name, parent_id: nil)\n      found_template = found_template.where.not(id: id) if id.present?\n      if found_template.first.present?\n        errors.add(:name, \"This name has already been taken by a local campaign!\")\n      end\n    end\n  end\n\n  def name_must_not_be_in_global\n    if parent_id.nil?\n      found_template = tenant.enterprise.campaigns.where(global: true).where(name: name, parent_id: nil)\n      found_template = found_template.where.not(id: id) if id.present?\n      if found_template.first.present?\n        errors.add(:name, \"This name has already been taken by a global campaign!\")\n      end\n    end\n  end\n\n  def contacts(target_tenant, page = nil, per = nil, location = nil, exclude_oversend = nil, only_oversend = false, search = nil, sort = nil, direction = nil, background = false)\n    result = Kaminari.paginate_array(Contact.none, total_count: 0).page(page).per(per)\n\n    exclude_oversend = default_override? if exclude_oversend.nil?\n\n    list = contact_lists.first\n    result = list.all_contacts(target_tenant, page, per, false, self, location, exclude_oversend, only_oversend, search, sort, direction, background) if list\n\n    if location.nil? && exclude_oversend == default_override? && only_oversend == false\n      count = counts.find_or_initialize_by(tenant_id: target_tenant.id)\n      count.assign_attributes(total_count: result.total_count)\n      count.save\n    end\n\n    result\n  end\n\n  def default_override?\n    !(scheduled && schedule_auto_send && auto_send_throttle_override)\n  end\n\n  def tenant_count(target_tenant)\n    counts.find_by(tenant_id: target_tenant.id).try(:total_count) || 0\n  end\n\n  def enterprise_count\n    result = 0\n    campaign_counts = CampaignCount.where(tenant_id: selected_tenants, campaign_id: id)\n    if campaign_counts.where(\"total_count < 0\").count > 0\n      result = -1\n    else\n      result = campaign_counts.sum(:total_count)\n    end\n    result\n  end\n\n  def active_contacts\n    Contact.joins(:campaign_messages).where(campaign_messages: { campaign_id: id })\n  end\n\n  def new_contexts(klass, range: 30.days, sales_rep_user_id: 0, mbe: false)\n    contact_ids = active_contacts.pluck(:id)\n    if contact_ids.count > 0\n      attribution_start = created_at\n      campaign_attribution_offset = RegionConfig.get_value(\"campaign_attribution_offset\", 0).to_i\n      if campaign_attribution_offset > 0\n        attribution_start = created_at + campaign_attribution_offset.days\n      end\n\n      if mbe.present?\n        object = klass.where(status: %w[CREATED DRAFT_WAYBILL INVOICED], tenant_id: tenant_id, contact_id: contact_ids,  shipment_date: attribution_start..(created_at + range)) if klass == Shipment\n        object = klass.for_tenant(tenant_id).for_dates(attribution_start, (created_at + range)).invoiced(true).where(contact_id: contact_ids) if klass == Sale\n      else\n        object = klass.where(tenant_id: tenant_id, contact_id: contact_ids,  ordered_date: attribution_start..(created_at + range))\n      end\n\n      if sales_rep_user_id != 0\n        if sales_rep_user_id == -1\n          if tenant.sales_rep_for_locations\n            object.where(location_user_id: nil)\n          else\n            object.where(sales_rep_user_id: nil)\n          end\n        else\n          if tenant.sales_rep_for_locations\n            object.where(location_user_id: sales_rep_user_id)\n          else\n            object.where(sales_rep_user_id: sales_rep_user_id)\n          end\n        end\n      end\n\n      object\n    else\n      klass.none\n    end\n  end\n\n  def local_hide(tenant, hidden_state = true)\n    hidden_tenants[tenant.id] = hidden_state\n    save\n  end\n\n  def set_approval(target_tenant, desired_state)\n    now = nil\n    now = Time.now if desired_state\n    if enterprise_campaign\n      approvals[\"-1\"] = now\n    else\n      approvals[\"#{target_tenant.id}\"] = now\n    end\n    save\n  end\n\n   def set_skip(target_tenant, skip_time = Time.now)\n    if enterprise_campaign\n      skips[\"-1\"] = skip_time\n    else\n      skips[\"#{target_tenant.id}\"] = skip_time\n    end\n    save\n  end\n\n  def can_approve(target_tenant, target_user)\n    result = false\n    if target_user.is_enterprise_user?\n      result = true\n    elsif !enterprise_campaign && scheduled && target_user.is_admin?\n      result = true\n    end\n\n    result\n  end\n\n  def can_cancel(target_tenant, target_user)\n    result = false\n\n    if enterprise_campaign && modifiable(target_tenant, target_user)\n      result = true\n    elsif global && (target_user.is_admin? || target_user.is_enterprise_user?) && !auto_send_tenants.nil? && auto_send_tenants.include?(target_tenant.id)\n      result = true\n    elsif !global && (target_user.is_admin? || target_user.is_enterprise_user?)\n      result = true\n    end\n\n    result\n  end\n\n  def awaiting_approval(target_tenant)\n    result = false\n    result = true if scheduled && schedule_auto_send && needs_approval(target_tenant) && ((Time.now - next_schedule(target_tenant)).abs <= 2.days)\n    if result && global && !enterprise_campaign && !auto_send_tenants.include?(target_tenant.id)\n      result = false\n    end\n    result\n  end\n\n  def needs_approval(target_tenant)\n    result = true\n\n    if enterprise_campaign && valid_approval?(approvals[\"-1\"])\n      result = false\n    elsif !enterprise_campaign && valid_approval?(approvals[\"#{target_tenant.id}\"])\n      result = false\n    end\n\n    result\n  end\n\n  def valid_approval?(approval_value)\n    result = false\n\n    if auto_approve == true\n      result = true\n    elsif !approval_value.nil? && Time.now <= (approval_value.to_datetime + 2.days)\n      result = true\n    end\n\n    result\n  end\n\n  def tracker_stats\n    stats = Hash.new\n    trackers.each do |tracker|\n      if stats[tracker.path]\n        stats[tracker.path] += tracker.hits\n      else\n        stats[tracker.path] = tracker.hits\n      end\n    end\n    stats\n  end\n\n  def steps\n    %w[new details contact_lists test confirm]\n  end\n\n  def send_campaign(user, target_tenant, identity, test, override_throttle = false, target_test_emails = [])\n    parent = Campaign.find(parent_id) if parent_id\n    if parent\n      exclude_oversend = !allow_override\n      exclude_oversend = false if self.test\n\n      target_contacts = []\n\n      if test\n        if target_tenant.sales_rep_for_locations\n          target_tenant.locations.each do |location|\n            location_contact = parent.contacts(target_tenant, 1, 1, location, exclude_oversend).first(1)\n            target_contacts = target_contacts + location_contact if !location_contact.nil?\n          end\n        else\n          target_contacts = parent.contacts(target_tenant, 1, 3, nil, exclude_oversend).first(enterprise_campaign ? 1 : 3)\n        end\n      else\n        target_contacts = parent.contacts(target_tenant, -1, nil, nil, exclude_oversend)\n      end\n\n      ActiveRecord::Base.transaction do\n        target_contacts.each do |contact|\n          next if contact.tenant_id != target_tenant.id\n          parent_message = CampaignMessage.joins(:campaign, :contact).where(campaigns: {id: id}, parent_message_id: nil).where(\"LOWER(BTRIM(contacts.email)) = ?\", Email.clean_email(contact.email)).first\n          message = CampaignMessage.find_or_initialize_by(tenant_id: tenant_id, campaign_id: id, contact_id: contact.id)\n          if parent_message\n            message.parent_message_id = parent_message.id\n            message.sent = parent_message.sent\n            message.opened = parent_message.opened\n            message.failed = parent_message.failed\n            message.failed_reason = parent_message.failed_reason\n          else\n            message.sent = false\n            message.opened = false\n          end\n          message.save\n          Activity.create!(tenant_id: tenant_id, contact_id: contact.id, company_id: contact.company.try(:id), campaign_id: id, campaign_message_id: message.id, activity_for: \"campaign_message\") unless test\n        end\n      end\n      self.status = :sent\n      save\n      unless test\n        Activity.find_or_create_by(user_id: user_id, tenant_id: tenant_id, campaign_id: id, activity_for: \"campaign_sent\")\n        CampaignExclusion.joins(:contact).where(campaign_id: parent.id, contacts: {tenant_id: target_tenant}).destroy_all if parent.clear_exclusions\n        count = counts.find_or_initialize_by(tenant_id: target_tenant.id)\n        count.assign_attributes(total_count: 0)\n        count.save\n\n        parent.categories.each do |tag_category|\n          tag_category.tag_context(self, user_id: user_id)\n        end\n      end\n      self\n    else\n      child = dup\n      child.test = test\n      child.test_emails = target_test_emails\n      child.parent_id = id\n      child.tenant_id = target_tenant.id\n      child.user_id = user.id\n      child.identity_id = identity.try(:id)\n      child.allow_override = can_override_throttle(user) ? override_throttle : false\n      child.allow_override = true if test\n      child.status = :sending\n      child.save\n\n      if email_template\n        email_template.email_template_fields.each do |field|\n          EmailTemplateValue.where(email_template_field_id: field.id, element_type: \"Campaign\", element_id: id).where(\"tenant_id IS NULL OR tenant_id = ?\", target_tenant.id).each do |field_value|\n            new_value = field_value.dup\n            new_value.element_id = child.id\n            new_value.save\n          end\n        end\n      end\n\n      child.send_campaign(user, target_tenant, identity, test)\n    end\n  end\n\n  def last_enterprise_run\n    return nil if !enterprise_campaign || selected_tenants.count == 0\n    last_run_date = nil\n    target_tenants = Tenant.where(id: selected_tenants)\n    target_tenants.each do |target_tenant|\n      last_run_date = last_run(target_tenant)\n      if !last_run_date.nil?\n        break\n      end\n    end\n    last_run_date\n  end\n\n  def next_enterprise_schedule(current_tenant)\n    return nil if !enterprise_campaign || selected_tenants.count == 0\n    next_date = nil\n    target_tenants = Tenant.where(id: selected_tenants)\n    target_tenants.each do |target_tenant|\n      next_date = next_schedule_utc(target_tenant)\n      if !next_date.nil?\n        next_date = current_tenant.change_to_time_zone(next_date)\n        break\n      end\n    end\n    next_date\n  end\n\n  def next_schedule(target_tenant, latest_child = nil)\n    return nil if enterprise_campaign && !selected_tenants.include?(target_tenant.id)\n    next_date = next_schedule_utc(target_tenant, latest_child)\n    if !next_date.nil?\n      next_date = target_tenant.change_to_time_zone(next_date)\n    end\n    next_date\n  end\n\n  def next_schedule_utc(target_tenant, latest_child = nil)\n    if scheduled && schedule_date.count < 1\n      self.new_schedule_date = old_next_schedule(tenant)\n      self.schedule_interval_type = \"month\"\n      self.schedule_day_lock = \"weekday\"\n      save\n    end\n    return nil if !scheduled || schedule_date.count < 1\n    now = DateTime.now\n    expiration_duration = 7.days\n    expiration_duration = 3.days if schedule_interval_type == \"week\"\n    latest_child = last_run(target_tenant) if latest_child.nil?\n    latest_child_time = DateTime.new\n    latest_child_time = latest_child.created_at if !latest_child.nil?\n\n    skip_date = skips[enterprise_campaign ? \"-1\" : \"#{target_tenant.id}\"]\n\n\n    if schedule_interval_type == \"none\"\n      first_schedule_date = target_tenant.change_to_time_zone(schedule_date.first)\n      if (!latest_child.nil? && latest_child.created_at >= (first_schedule_date - 2.days)) || (now.to_i - first_schedule_date.to_i) > 3.days\n        return nil\n      else\n        return schedule_date.first\n      end\n    end\n\n    next_date = nil\n    last_date = nil\n    schedule_date.each_with_index do |date, index|\n      next if latest_child_time.between?(date - expiration_duration, date + expiration_duration) || (!skip_date.nil? && (skip_date.to_datetime + 2.days) >= date)\n      if (last_date.nil? && now < (date + expiration_duration)) || (!last_date.nil? && now.between?(last_date + expiration_duration, date + expiration_duration))\n        next_date = date\n        break\n      end\n\n      last_date = date\n    end\n\n    if next_date.nil?\n      new_date = generate_new_schedule_date(schedule_date.first, schedule_date.last, 1)\n      if !new_date.nil? && !new_date.first.nil? && new_date.first > schedule_date.last\n        self.schedule_date = schedule_date + new_date\n        save\n        next_date = next_schedule(target_tenant, latest_child)\n      end\n    end\n    next_date\n  end\n\n  def generate_new_schedule_date(base_datetime, last_datetime, new_count = 1)\n    return nil if !scheduled || schedule_date.count < 1 || schedule_interval_type == \"none\"\n\n    new_datetime = nil\n    case schedule_interval_type\n    when \"week\"\n      new_datetime = last_datetime + (schedule_interval.weeks)\n    when \"month\"\n      new_datetime = last_datetime + (schedule_interval.months) + (base_datetime.day - last_datetime.day).days\n    when \"quarter\"\n      new_datetime = last_datetime\n      time_since_quarter_start = base_datetime - base_datetime.beginning_of_quarter\n      quarters_to_advance = schedule_interval\n      while quarters_to_advance > 0\n        new_datetime = new_datetime.end_of_quarter + 1.second + time_since_quarter_start\n        quarters_to_advance = quarters_to_advance - 1\n      end\n    when \"year\"\n      new_datetime = last_datetime + (schedule_interval.years)\n    end\n\n    forward_search_datetime = nil\n    reverse_search_datetime = nil\n    reverse_span = nil\n    forward_span = nil\n\n    case schedule_day_lock\n    when \"none\"\n      if schedule_interval_type == \"month\" || schedule_interval_type == \"year\"\n        forward_search_datetime = new_datetime\n        best_forward_search_datetime = forward_search_datetime\n        search_days = 0\n        while forward_search_datetime.day != base_datetime.day && search_days < 7\n          best_forward_search_datetime = forward_search_datetime if (best_forward_search_datetime.day - base_datetime.day).abs > (forward_search_datetime.day - base_datetime.day).abs\n          forward_search_datetime = forward_search_datetime + 1.day\n          search_days += 1\n        end\n\n        if search_days >= 7\n          forward_search_datetime = best_forward_search_datetime\n        end\n\n        reverse_search_datetime = new_datetime\n        best_reverse_search_datetime = reverse_search_datetime\n        search_days = 0\n        while reverse_search_datetime.day != base_datetime.day && search_days < 7\n          best_reverse_search_datetime = reverse_search_datetime if (best_reverse_search_datetime.day - base_datetime.day).abs > (reverse_search_datetime.day - base_datetime.day).abs\n          reverse_search_datetime = reverse_search_datetime - 1.day\n          search_days += 1\n        end\n\n        if search_days >= 7\n          reverse_search_datetime = best_reverse_search_datetime\n        end\n      else\n        forward_search_datetime = new_datetime\n        reverse_search_datetime = new_datetime\n      end\n\n      reverse_span = new_datetime - reverse_search_datetime\n      forward_span = forward_search_datetime - new_datetime\n    when \"weekday\"\n      forward_search_datetime = new_datetime\n      forward_search_datetime = forward_search_datetime + 1.day while forward_search_datetime.wday != base_datetime.wday\n\n      reverse_search_datetime = new_datetime\n      reverse_search_datetime = reverse_search_datetime - 1.day while reverse_search_datetime.wday != base_datetime.wday\n\n      reverse_span = new_datetime - reverse_search_datetime\n      forward_span = forward_search_datetime - new_datetime\n    when \"business\"\n      forward_search_datetime = new_datetime\n      forward_search_datetime = forward_search_datetime + 1.day while [0, 6].include?(forward_search_datetime.wday)\n\n      reverse_search_datetime = new_datetime\n      reverse_search_datetime = reverse_search_datetime - 1.day while [0, 6].include?(reverse_search_datetime.wday)\n\n      reverse_span = new_datetime - reverse_search_datetime\n      forward_span = forward_search_datetime - new_datetime\n    end\n\n    case schedule_interval_type\n    when \"week\"\n      if reverse_span >= forward_span\n        new_datetime = forward_search_datetime\n      else\n        new_datetime = reverse_search_datetime\n      end\n    when \"month\"\n      target_month = (last_datetime.month + schedule_interval)\n      target_month = target_month - 12 while target_month > 12\n      if reverse_span >= forward_span && (forward_search_datetime.month == target_month)\n        new_datetime = forward_search_datetime\n      else\n        if reverse_search_datetime.month == target_month\n          new_datetime = reverse_search_datetime\n        elsif reverse_search_datetime.month > target_month\n          new_datetime = reverse_search_datetime - 7.days\n        elsif reverse_search_datetime.month < target_month\n          new_datetime = reverse_search_datetime + 7.days\n        end\n      end\n\n      if new_datetime.month != target_month\n        if forward_search_datetime.month == target_month\n          new_datetime = forward_search_datetime\n        elsif reverse_search_datetime.month == target_month\n          new_datetime = reverse_search_datetime\n        else\n          raise \"Schedule could not reach target month. Campaign: #{id}\"\n        end\n      end\n    when \"quarter\"\n      raw_quarter = (((last_datetime.month - 1) / 3) + schedule_interval)\n      target_quarter = (raw_quarter % 4) + ((last_datetime.year + (raw_quarter / 4).floor) * 10)\n      forward_quarter = ((forward_search_datetime.month - 1) / 3) + (forward_search_datetime.year * 10)\n      reverse_quarter = ((reverse_search_datetime.month - 1) / 3) + (reverse_search_datetime.year * 10)\n      if reverse_span >= forward_span && (forward_quarter == target_quarter)\n        new_datetime = forward_search_datetime\n      else\n        if reverse_quarter == target_quarter\n          new_datetime = reverse_search_datetime\n        elsif reverse_quarter > target_quarter\n          new_datetime = reverse_search_datetime - 7.days\n        elsif reverse_quarter < target_quarter\n          new_datetime = reverse_search_datetime + 7.days\n        end\n      end\n    when \"year\"\n      if reverse_span >= forward_span && (forward_search_datetime.year == last_datetime.year + schedule_interval)\n        new_datetime = forward_search_datetime\n      else\n        new_datetime = reverse_search_datetime\n      end\n    end\n\n    result = []\n    result << new_datetime\n    if new_count > 1\n      result = result + generate_new_schedule_date(base_datetime, new_datetime, new_count - 1)\n    end\n\n    result.compact\n  end\n\n  def old_next_schedule(target_tenant)\n    time = Time.now.in_time_zone(target_tenant.time_zone)\n    result = time\n    if (old_schedule < created_at || (old_schedule + 7.days) < time) || (!scheduled_at.nil? && old_schedule < scheduled_at)\n      result = old_schedule(old_schedule.end_of_month + 1.day)\n    else\n      latest_child = last_run(target_tenant)\n      if latest_child && (old_schedule < latest_child.created_at || latest_child.created_at.beginning_of_day >= 30.days.ago)\n        result = old_schedule(latest_child.created_at.end_of_month + 1.day)\n      elsif (old_schedule + 7.days) < time\n        result = old_schedule(old_schedule.end_of_month + 1.day)\n      else\n        result = old_schedule(time)\n      end\n    end\n    result = result.beginning_of_day + schedule_hour.hours\n\n    result\n  end\n\n  def old_schedule(date = Time.now)\n    ApplicationController.helpers.weekday_of_month(Campaign.schedule_weeks[schedule_week], schedule_weekday, date)\n  end\n\n  def self.merger(campaign: nil, contact: nil, tenant: nil, identity: nil)\n    raise \"Campaign object required for campaign merger.\" if campaign.nil?\n    raise \"Tenant object required for campaign merger.\" if tenant.nil?\n    raise \"Identity object required for campaign merger.\" if identity.nil?\n    TemplateMerger.new(campaign, contact, tenant, identity)\n  end\n\n  def due(target_tenant)\n    return false if next_schedule(target_tenant).nil?\n    next_schedule(target_tenant) < Time.now.in_time_zone(target_tenant.time_zone)\n  end\n\n  def due_today(target_tenant)\n    return false if next_schedule(target_tenant).nil?\n    next_schedule(target_tenant).to_date <= Time.now.in_time_zone(target_tenant.time_zone).to_date\n  end\n\n  def update_calendars(target_tenant = nil)\n    target_tenant = tenant if target_tenant.nil?\n    next_date = next_schedule_utc(target_tenant)\n\n    if scheduled && !next_date.nil? && (!enterprise_campaign || (enterprise_campaign && selected_tenants.include?(target_tenant.id)))\n      require \"google/apis/calendar_v3\"\n      summary = \"Print Speak Campaign: #{name}\"\n      start_time = next_date.asctime.in_time_zone(target_tenant.time_zone).to_datetime\n      event_start = Google::Apis::CalendarV3::EventDateTime.new(date_time: start_time.rfc3339)\n      event_end = Google::Apis::CalendarV3::EventDateTime.new(date_time: (start_time + 15.minutes).rfc3339)\n      event = Google::Apis::CalendarV3::Event.new(summary: summary, start: event_start, end: event_end)\n\n      user_ids = target_tenant.visible_users.where(marketing_calendar_events: true).pluck(:id)\n      entries = CampaignCalendarEntry.where(campaign_id: id, tenant_id: target_tenant.id)\n      entries.each do |entry|\n        user_ids.delete(entry.user_id)\n        user = entry.user\n        if !user.nil?\n          if !user.marketing_calendar_events\n            user.delete_calendar_event(\"primary\", entry.calendar_entry_id)\n            entry.destroy\n          elsif entry.date != next_date\n            result_id = user.update_calendar_event(\"primary\", entry.calendar_entry_id, event)\n            if result_id == \"not_found\"\n              entry.destroy\n            else\n              entry.update_attributes(calendar_entry_id: result_id, date: next_date) if !result_id.nil? && result_id != \"failed\"\n            end\n          end\n        else\n          entry.destroy\n        end\n      end\n      user_ids.each do |user_id|\n        user = User.find(user_id)\n        result_id = user.create_calendar_event(\"primary\", event)\n        CampaignCalendarEntry.create(campaign_id: id, tenant_id: target_tenant.id, user_id: user.id, calendar_entry_id: result_id, date: next_date) if !result_id.nil? && result_id != \"failed\"\n      end\n    else\n      entries = CampaignCalendarEntry.where(campaign_id: id, tenant_id: target_tenant.id)\n      entries.each do |entry|\n        user = entry.user\n        if !user.nil?\n          user.delete_calendar_event(\"primary\", entry.calendar_entry_id)\n        end\n        entry.destroy\n      end\n    end\n  end\n\n  def total_clicks\n    ids = trackers.where.not(method: 0).pluck(:id)\n    TrackerHit.where(tracker_id: ids).count()\n  end\n\n  def clicks\n    ids = trackers.where.not(method: 0).pluck(:id)\n    @trackers = TrackerHit.where(tracker_id: ids).where.not(method: 0)\n  end\n\n  def modifiable(target_tenant, user)\n    (!global && !enterprise_campaign && target_tenant.id == tenant_id) || (user.is_enterprise_user? && user.enterprise_id == enterprise_id)\n  end\n\n  def sendable(target_tenant, user, is_test_send = false)\n    result = false\n    result = true if user.is_admin? && (global || target_tenant.id == tenant_id) && !enterprise_campaign\n\n    result = true if user.is_enterprise_user? && user.enterprise_id == enterprise_id\n\n    result = false if schedule_auto_send && !is_test_send\n\n    result\n  end\n\n  def last_run(target_tenant)\n    target_tenant.campaigns.where(parent_id: id).where.not(test: true).order(created_at: :desc).first\n  end\n\n  def can_override_throttle(user)\n    (global && allow_override) || (!global && user.is_admin?)\n  end\n\n  def has_inline_images?\n    /src=[\"']data:[a-zA-Z]+\\/[a-zA-Z]+;.+[\"']/ =~ body\n  end\n\n  def needs_test_send?\n    enterprise_campaign ? tenants_missing_test_send.count > 0 : Campaign.where(parent_id: id, test: true).where(\"MD5(body) = ?\", Digest::MD5.hexdigest(body || \"\")).count == 0\n  end\n\n  def tenants_missing_test_send\n    result = []\n\n    if enterprise_campaign\n      test_sends = Campaign.where(parent_id: id, test: true).where(\"MD5(body) = ?\", Digest::MD5.hexdigest(body || \"\")).pluck(:tenant_id)\n      selected_tenants.each do |selected_tenant|\n        result << selected_tenant unless test_sends.include?(selected_tenant)\n      end\n    end\n\n    result\n  end\n\n  def needs_unsubscribe?\n    result = true\n    if !body.blank?\n      template_merger = TemplateMerger.new(self)\n      untranslated_body = template_merger.untranslated_merge(body)\n      result = !(untranslated_body.include?(\"{{unsubscribe}}\") || untranslated_body.include?(\"{{unsubscribe_template}}\"))\n    end\n    result\n  end\n\n  def pass_checklist?\n    result = true\n    result = false if needs_test_send?\n    result = false if needs_unsubscribe?\n    result = false if has_inline_images?\n    result\n  end\n\n  def views_for_date(date)\n    subquery = CampaignMessage.select(\"campaign_messages.id, MIN(tracker_hits.created_at) AS latest_hit\").where(campaign_id: id).joins(:hits).group(\"campaign_messages.id\").to_sql\n    CampaignMessage.all.from(\"(#{subquery}) messages\").where(\"messages.latest_hit BETWEEN ? AND ?\", date.beginning_of_day, date.end_of_day).count\n  end\n\n  def check_bounce_rate\n    return if paused\n    sent_messages = messages.where(\"sent = TRUE OR failed = TRUE\").count\n    if sent_messages >= 100\n      bounced_messages = messages.where(failed: true).count\n      bounce_rate = bounced_messages.to_f / sent_messages.to_f\n      max_bounce_rate = RegionConfig.get_value(\"campaign_max_bounce_rate_percent\", 5).to_f / 100\n      if bounce_rate > max_bounce_rate\n        self.paused = true\n        save\n\n        addresses = RegionConfig.get_value(\"campaign_paused_alert\", \"\").split(\",\").map { |s| \"#{s.squish.downcase}\" }\n        enterprise_address = tenant.enterprise.campaign_test_address\n        addresses << enterprise_address if !enterprise_address.blank?\n\n        Thread.new do\n          Email.ses_send(addresses, \"Print Speak: Campaign Paused: #{tenant.name} - #{tenant.number} (#{name})\", %Q{\n            <p>\n              A campaign was paused for #{tenant.name} (#{name}).\n            </p>\n          })\n          ActiveRecord::Base.clear_active_connections!\n        end\n\n\n      end\n    end\n  end\n\n  def has_required_custom_fields?(selected_tenant)\n    result = true\n    !email_template.nil? && email_template.email_template_fields.where(required: true).each do |field|\n      result = false if field.get_value(self, selected_tenant.id).blank?\n    end\n    result\n  end\n\n  def all_have_required_custom_fields?(tenants)\n    result = true\n    tenants.each do |tenant|\n      result = false if !has_required_custom_fields?(tenant)\n    end\n    result\n  end\n\n  def self.valid_datetime?(datetime)\n    valid = false\n    begin\n      datetime.to_datetime\n      valid = true\n    rescue StandardError\n    end\n    valid\n  end\n\n  def ready_to_send?(bypass_checklist = false)\n    result = false\n\n    if !global && !enterprise_campaign\n      result = true if check_campaign_send?(tenant, bypass_checklist)\n    elsif global && !enterprise_campaign\n      target_tenants = Tenant.where(id: auto_send_tenants, enterprise_id: tenant.enterprise.id)\n      target_tenants.each do |target_tenant|\n        result = true if check_campaign_send?(target_tenant, bypass_checklist)\n      end\n    elsif global && enterprise_campaign\n      target_tenants = Tenant.where(id: selected_tenants, enterprise_id: tenant.enterprise.id)\n      target_tenants.each do |target_tenant|\n        result = true if check_campaign_send?(target_tenant, bypass_checklist)\n      end\n    end\n\n    result\n  end\n\n  def check_campaign_send?(target_tenant, bypass_checklist = false)\n    result = false\n\n    now = Time.current\n\n    next_send = id.nil? ? target_tenant.change_to_time_zone(schedule_date.first) : next_schedule(target_tenant)\n    if next_send\n      if now >= next_send && !needs_approval(target_tenant) && ((now - next_send) <= 3.days)\n        result = true if bypass_checklist || (pass_checklist? && has_required_custom_fields?(target_tenant))\n      end\n    end\n\n    result\n  end\n\n  def in_lockout_period?(target_tenant)\n    result = false\n    recent_send = Campaign.where(parent_id: id, tenant_id: target_tenant.id, test: false).where(\"created_at > ?\", 1.day.ago).first\n    result = true if recent_send\n    result\n  end\n\n  def most_recent_send(target_tenant)\n    result = nil\n    Campaign.uncached do\n      result = Campaign.where(parent_id: id, tenant_id: target_tenant.id).order(created_at: :desc).first\n    end\n    result\n  end\n\n  def self.click_stats(campaign_ids, start_date, end_date)\n    result = {\n      total_trackers: 0,\n      unique_clicks: 0\n    }\n    query = %Q{\n      SELECT\n        COUNT(tracker_hits.tracker_id) AS total_trackers,\n        COUNT(DISTINCT tracker_hits.tracker_id) AS unique_clicks\n      FROM trackers\n      INNER JOIN campaign_messages_trackers ON campaign_messages_trackers.tracker_id = trackers.id\n      INNER JOIN campaign_messages ON campaign_messages.id = campaign_messages_trackers.campaign_message_id\n      LEFT OUTER JOIN tracker_hits ON tracker_hits.tracker_id = trackers.id\n      WHERE trackers.method != 0\n      AND trackers.path NOT LIKE '%unsubscribe%'\n      AND campaign_messages.campaign_id IN (#{campaign_ids.to_csv})\n      AND tracker_hits.created_at BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n    }\n    if campaign_ids.count > 0\n      query_result = ActiveRecord::Base.connection.execute(query).first\n      if query_result\n        result = {\n          total_trackers: query_result[\"total_trackers\"].try(:to_i) || 0,\n          unique_clicks: query_result[\"unique_clicks\"].try(:to_i) || 0,\n        }\n      end\n    end\n    result\n  end\n\n  def self.categorized_click_stats(campaign_ids)\n    categories = {}\n    query = %Q{\n      SELECT\n        campaigns.tenant_id,\n        trackers.path,\n        COUNT(trackers.id) AS total_trackers,\n        (\n          SELECT COUNT(DISTINCT tracker_hits.tracker_id)\n          FROM tracker_hits\n          WHERE tracker_hits.tracker_id = ANY (ARRAY_AGG(trackers.id))\n        ) AS unique_clicks\n      FROM trackers\n      INNER JOIN campaign_messages_trackers ON campaign_messages_trackers.tracker_id = trackers.id\n      INNER JOIN campaign_messages ON campaign_messages.id = campaign_messages_trackers.campaign_message_id\n      INNER JOIN campaigns ON campaigns.id = campaign_messages.campaign_id\n      WHERE trackers.method != 0\n      AND trackers.path NOT LIKE '%unsubscribe%'\n      AND campaign_messages.campaign_id IN (#{campaign_ids.to_csv})\n      GROUP BY campaigns.tenant_id, trackers.path\n    }\n    if campaign_ids.count > 0\n      query_result = ActiveRecord::Base.connection.execute(query)\n      if query_result\n        url_data = []\n        query_result.each do |stats|\n          url = Campaign.url_data(stats[\"path\"])\n          url_data << {\n            tenant_id: stats[\"tenant_id\"].to_i,\n            total_trackers: stats[\"total_trackers\"].try(:to_i) || 0,\n            unique_clicks: stats[\"unique_clicks\"].try(:to_i) || 0,\n            url: stats[\"path\"],\n            domain: url[:domain],\n            base_domain: url[:base_domain],\n            path: url[:path],\n            clean_url: url[:clean_url]\n          }\n        end\n\n        identities = Identity.all.as_json\n\n        url_data.each do |data|\n          category = nil\n          title = nil\n          sub_title = nil\n          base_domain = data[:base_domain].try(:downcase)\n          clean_url = data[:clean_url].try(:downcase)\n          if base_domain == \"facebook.com\"\n            category = \"facebook\"\n            title = \"Facebook\"\n          elsif base_domain == \"twitter.com\"\n            category = \"twitter\"\n            title = \"Twitter\"\n          elsif base_domain == \"printspeak.com\" && clean_url.include?(\"email_view\")\n            category = \"email_view\"\n            title = \"Email View\"\n          else\n            target_identities = identities.select { |t| t[\"tenant_id\"] == data[:tenant_id] }\n            if target_identities.count > 0\n              target_identities.each do |identity|\n                break if !category.blank?\n                identity[\"request_quote_url_data\"] ||= Campaign.url_data(identity[\"request_quote_url\"])\n                if !identity[\"request_quote_url_data\"].nil? && !identity[\"request_quote_url_data\"][:clean_url].blank?\n                  request_quote_url = identity[\"request_quote_url_data\"][:clean_url]\n                  if request_quote_url == clean_url\n                    category = \"request_a_quote\"\n                    title = \"Request A Quote\"\n                  end\n                end\n\n                identity[\"website_url_data\"] ||= Campaign.url_data(identity[\"website_url\"])\n                if category.blank? && !identity[\"website_url_data\"].nil? && !identity[\"website_url_data\"][:clean_url].blank?\n                  website_url = identity[\"website_url_data\"][:clean_url]\n                  if website_url == clean_url\n                    category = \"website\"\n                    title = \"Website\"\n                  else\n                    if clean_url.start_with?(website_url)\n                      website_path = clean_url.split(website_url).try(:[], 1)\n                      if !website_path.blank?\n                          website_path = website_path[1..-1] if website_path[0] == \"/\"\n                          category = \"website/#{website_path}\"\n                          title = \"Website\"\n                          sub_title = website_path\n                      end\n                    end\n                  end\n                end\n              end\n            end\n\n            if category.blank?\n              if data[:path].blank? || data[:path] == \"/\"\n                category = base_domain\n                title = base_domain\n              else\n                slash = \"/\" if data[:path][0] != \"/\"\n                path = data[:path][1..-1] if data[:path][0] == \"/\"\n                category = \"#{base_domain}/#{path}\"\n                title = base_domain\n                sub_title = URI.decode(path)\n              end\n            end\n          end\n\n          if !category.blank?\n            title = category if title.blank?\n            if categories.has_key?(category)\n              categories[category][:total_trackers] += data[:total_trackers]\n              categories[category][:unique_clicks] += data[:unique_clicks]\n              categories[category][:urls] << data\n            else\n              categories[category] = {\n                title: title,\n                sub_title: sub_title,\n                total_trackers: data[:total_trackers],\n                unique_clicks: data[:unique_clicks],\n                urls: [data]\n              }\n            end\n          end\n        end\n      end\n    end\n    categories\n  end\n\n  def self.url_data(url)\n    result = nil\n    begin\n      url = url.gsub(/https?:\\/\\//, \"\")\n      uri = URI.parse(\"http://#{url}\")\n      host = PublicSuffix.domain(uri.host)\n      result = {\n        domain: uri.host,\n        base_domain: host,\n        path: uri.path,\n        clean_url: \"#{host}#{uri.path}\".try(:downcase).try(:chomp, \"/\")\n      }\n    rescue StandardError\n    end\n    result\n  end\n\n  def self.enterprise_report_job(job)\n    total_stats = {\n      estimate_count: 0,\n      estimate_total: 0,\n      invoice_count: 0,\n      invoice_total: 0,\n      messages_count: 0,\n      messages_sent: 0,\n      messages_opened: 0,\n      messages_failed: 0,\n      messages_unsubscribed: 0\n    }\n\n    attribution_start = \"campaigns.created_at\"\n    campaign_attribution_offset = RegionConfig.get_value(\"campaign_attribution_offset\", 0).to_i\n    if campaign_attribution_offset > 0\n      attribution_start = \"campaigns.created_at + interval '#{campaign_attribution_offset} days'\"\n    end\n\n    sent_campaign_ids = job.data[\"sent_campaign_ids\"]\n    start_date = job.data[\"start_date\"].to_datetime\n    end_date = job.data[\"end_date\"].to_datetime\n    click_stats = Campaign.click_stats(sent_campaign_ids, start_date, end_date)\n\n    campaign_stats_query = %Q{\n      SELECT\n        campaign_stats.tenant_id,\n        ARRAY_AGG(campaign_stats.id) AS campaign_ids,\n        SUM(campaign_stats.estimate_info[1]) AS estimate_count,\n        SUM(campaign_stats.estimate_info[2]) AS estimate_total,\n        SUM(campaign_stats.invoice_info[1]) AS invoice_count,\n        SUM(campaign_stats.invoice_info[2]) AS invoice_total,\n        SUM(campaign_stats.campaign_info[1]) AS messages_count,\n        SUM(campaign_stats.campaign_info[2]) AS messages_sent,\n        SUM(campaign_stats.campaign_info[3]) AS messages_opened,\n        SUM(campaign_stats.campaign_info[4]) AS messages_failed,\n        SUM(campaign_stats.campaign_info[5]) AS messages_unsubscribed,\n        MAX(campaign_stats.created_at) AS latest_send_date\n      FROM (\n        SELECT\n          campaigns.id,\n          campaigns.tenant_id,\n          campaigns.created_at,\n          (\n            SELECT ARRAY[\n              COALESCE(COUNT(estimates.id), 0),\n              COALESCE(SUM(estimates.grand_total), 0)\n            ]\n            FROM estimates\n            WHERE estimates.tenant_id = campaigns.tenant_id\n            AND estimates.voided = FALSE\n            AND estimates.deleted = FALSE\n            AND estimates.ordered_date BETWEEN #{attribution_start} AND campaigns.created_at + interval '30 days'\n            AND estimates.ordered_date BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n            AND EXISTS (\n              SELECT null\n              FROM campaign_messages\n              WHERE campaign_messages.tenant_id = campaigns.tenant_id\n              AND campaign_messages.contact_id = estimates.contact_id\n              AND campaign_messages.campaign_id = campaigns.id\n            )\n          ) AS estimate_info,\n          (\n            SELECT ARRAY[\n              COALESCE(COUNT(invoices.id), 0),\n              COALESCE(SUM(invoices.grand_total), 0)\n            ]\n            FROM invoices\n            WHERE invoices.tenant_id = campaigns.tenant_id\n            AND invoices.voided = FALSE\n            AND invoices.deleted = FALSE\n            AND invoices.ordered_date BETWEEN #{attribution_start} AND campaigns.created_at + interval '30 days'\n            AND invoices.ordered_date BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n            AND EXISTS (\n              SELECT null\n              FROM campaign_messages\n              WHERE campaign_messages.tenant_id = campaigns.tenant_id\n              AND campaign_messages.contact_id = invoices.contact_id\n              AND campaign_messages.campaign_id = campaigns.id\n            )\n          ) AS invoice_info,\n          (\n            SELECT ARRAY[\n              COALESCE(COUNT(campaign_messages.id), 0),\n              COUNT(CASE WHEN campaign_messages.sent = TRUE THEN 1 END),\n              COUNT(CASE WHEN campaign_messages.opened = TRUE THEN 1 END),\n              COUNT(CASE WHEN campaign_messages.failed = TRUE THEN 1 END),\n              COUNT(CASE WHEN campaign_messages.unsubscribed = TRUE THEN 1 END)\n            ]\n            FROM campaign_messages\n            WHERE campaign_messages.tenant_id = campaigns.tenant_id\n            AND campaign_messages.campaign_id = campaigns.id\n            AND campaign_messages.created_at BETWEEN '#{start_date}'::timestamp AND '#{end_date}'::timestamp\n          ) AS campaign_info\n        FROM campaigns\n        WHERE campaigns.test = FALSE\n        AND campaigns.id IN (#{sent_campaign_ids.to_csv})\n      ) campaign_stats\n      GROUP BY campaign_stats.tenant_id\n    }\n\n    if sent_campaign_ids.count > 0\n      campaign_stats = ActiveRecord::Base.connection.execute(campaign_stats_query).to_a\n      campaign_stats.each do |campaign_stat|\n        total_stats[:estimate_count] += campaign_stat[\"estimate_count\"].try(:to_i) || 0\n        total_stats[:estimate_total] += campaign_stat[\"estimate_total\"].try(:to_f) || 0.0\n        total_stats[:invoice_count] += campaign_stat[\"invoice_count\"].try(:to_i) || 0\n        total_stats[:invoice_total] += campaign_stat[\"invoice_total\"].try(:to_f) || 0.0\n        total_stats[:messages_count] += campaign_stat[\"messages_count\"].try(:to_i) || 0\n        total_stats[:messages_sent] += campaign_stat[\"messages_sent\"].try(:to_i) || 0\n        total_stats[:messages_opened] += campaign_stat[\"messages_opened\"].try(:to_i) || 0\n        total_stats[:messages_failed] += campaign_stat[\"messages_failed\"].try(:to_i) || 0\n        total_stats[:messages_unsubscribed] += campaign_stat[\"messages_unsubscribed\"].try(:to_i) || 0\n      end\n    else\n      campaign_stats = {}\n    end\n\n    csv_result = CSV.generate(col_sep: job.tenant.enterprise.csv_col_sep) do |csv|\n      fields = [\n        \"date\",\n        \"tenants\",\n        \"total_contacts\",\n        \"new_estimates\",\n        \"new_invoices\",\n        \"emails_sent\",\n        \"opened\",\n        \"total clicks\",\n        \"bounced\",\n        \"unsubscribes\"\n      ]\n      csv << fields\n\n      open_rate = 0\n\n      if total_stats[\"messages_count\"].to_f > 0 && total_stats[\"messages_opened\"].to_f > 0\n        open_rate = ((total_stats[\"messages_opened\"].to_f / total_stats[\"messages_count\"].to_f) * 100.0).round\n      end\n\n      values = [\n        job.tenant.local_strftime(job.data[\"start_date\"]),\n        campaign_stats.count,\n        total_stats[\"messages_count\"],\n        total_stats[\"estimate_total\"],\n        total_stats[\"invoice_total\"],\n        total_stats[\"messages_sent\"],\n        total_stats[\"messages_opened\"],\n        open_rate,\n        click_stats[\"unique_clicks\"],\n        total_stats[\"messages_failed\"],\n        total_stats[\"messages_unsubscribed\"]\n      ]\n      csv << values\n    end\n\n    lifespan = 5.minutes\n    if end_date < Date.yesterday\n      lifespan = 1.year\n    end\n\n    {\n      total_stats: total_stats,\n      campaign_stats: campaign_stats,\n      click_stats: click_stats,\n      csv: Base64.encode64(csv_result),\n      csv_filename: \"#{job.name}_#{job.job_hash}\".parameterize.underscore,\n      lifespan: lifespan\n    }\n  end\n\n  ",
          "private": "private\n\n  def change_schedule\n    if new_schedule_date && Campaign.valid_datetime?(new_schedule_date)\n      self.schedule_date = [new_schedule_date]\n    end\n  end\n\n  def update_scheduled_at\n    self.scheduled_at = Time.now if scheduled_changed? || schedule_week_changed? || schedule_weekday_changed? || scheduled_at.nil?\n  end\n\n  def make_global_if_enterprise\n    self.global = true if enterprise_campaign\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "merger",
                "scope": "public",
                "class_method": true,
                "arguments": "(campaign: nil, contact: nil, tenant: nil, identity: nil)"
              },
              {
                "name": "valid_datetime?",
                "scope": "public",
                "class_method": true,
                "arguments": "(datetime)"
              },
              {
                "name": "click_stats",
                "scope": "public",
                "class_method": true,
                "arguments": "(campaign_ids, start_date, end_date)"
              },
              {
                "name": "categorized_click_stats",
                "scope": "public",
                "class_method": true,
                "arguments": "(campaign_ids)"
              },
              {
                "name": "url_data",
                "scope": "public",
                "class_method": true,
                "arguments": "(url)"
              },
              {
                "name": "enterprise_report_job",
                "scope": "public",
                "class_method": true,
                "arguments": "(job)"
              }
            ],
            "instance": [
              {
                "name": "name_must_be_unique",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "name_must_not_be_in_global",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "contacts",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, page = nil, per = nil, location = nil, exclude_oversend = nil, only_oversend = false, search = nil, sort = nil, direction = nil, background = false)"
              },
              {
                "name": "default_override?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tenant_count",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "enterprise_count",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "active_contacts",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "new_contexts",
                "scope": "public",
                "class_method": false,
                "arguments": "(klass, range: 30.days, sales_rep_user_id: 0, mbe: false)"
              },
              {
                "name": "local_hide",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenant, hidden_state = true)"
              },
              {
                "name": "set_approval",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, desired_state)"
              },
              {
                "name": "set_skip",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, skip_time = Time.now)"
              },
              {
                "name": "can_approve",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, target_user)"
              },
              {
                "name": "can_cancel",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, target_user)"
              },
              {
                "name": "awaiting_approval",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "needs_approval",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "valid_approval?",
                "scope": "public",
                "class_method": false,
                "arguments": "(approval_value)"
              },
              {
                "name": "tracker_stats",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "steps",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_campaign",
                "scope": "public",
                "class_method": false,
                "arguments": "(user, target_tenant, identity, test, override_throttle = false, target_test_emails = [])"
              },
              {
                "name": "last_enterprise_run",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "next_enterprise_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(current_tenant)"
              },
              {
                "name": "next_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, latest_child = nil)"
              },
              {
                "name": "next_schedule_utc",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, latest_child = nil)"
              },
              {
                "name": "generate_new_schedule_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(base_datetime, last_datetime, new_count = 1)"
              },
              {
                "name": "old_next_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "old_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(date = Time.now)"
              },
              {
                "name": "due",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "due_today",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "update_calendars",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "total_clicks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "clicks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "modifiable",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, user)"
              },
              {
                "name": "sendable",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, user, is_test_send = false)"
              },
              {
                "name": "last_run",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "can_override_throttle",
                "scope": "public",
                "class_method": false,
                "arguments": "(user)"
              },
              {
                "name": "has_inline_images?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "needs_test_send?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tenants_missing_test_send",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "needs_unsubscribe?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "pass_checklist?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "views_for_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(date)"
              },
              {
                "name": "check_bounce_rate",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "has_required_custom_fields?",
                "scope": "public",
                "class_method": false,
                "arguments": "(selected_tenant)"
              },
              {
                "name": "all_have_required_custom_fields?",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenants)"
              },
              {
                "name": "ready_to_send?",
                "scope": "public",
                "class_method": false,
                "arguments": "(bypass_checklist = false)"
              },
              {
                "name": "check_campaign_send?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, bypass_checklist = false)"
              },
              {
                "name": "in_lockout_period?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "most_recent_send",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "change_schedule",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_scheduled_at",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "make_global_if_enterprise",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "name_must_be_unique",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "name_must_not_be_in_global",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "contacts",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, page = nil, per = nil, location = nil, exclude_oversend = nil, only_oversend = false, search = nil, sort = nil, direction = nil, background = false)"
              },
              {
                "name": "default_override?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tenant_count",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "enterprise_count",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "active_contacts",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "new_contexts",
                "scope": "public",
                "class_method": false,
                "arguments": "(klass, range: 30.days, sales_rep_user_id: 0, mbe: false)"
              },
              {
                "name": "local_hide",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenant, hidden_state = true)"
              },
              {
                "name": "set_approval",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, desired_state)"
              },
              {
                "name": "set_skip",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, skip_time = Time.now)"
              },
              {
                "name": "can_approve",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, target_user)"
              },
              {
                "name": "can_cancel",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, target_user)"
              },
              {
                "name": "awaiting_approval",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "needs_approval",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "valid_approval?",
                "scope": "public",
                "class_method": false,
                "arguments": "(approval_value)"
              },
              {
                "name": "tracker_stats",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "steps",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_campaign",
                "scope": "public",
                "class_method": false,
                "arguments": "(user, target_tenant, identity, test, override_throttle = false, target_test_emails = [])"
              },
              {
                "name": "last_enterprise_run",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "next_enterprise_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(current_tenant)"
              },
              {
                "name": "next_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, latest_child = nil)"
              },
              {
                "name": "next_schedule_utc",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, latest_child = nil)"
              },
              {
                "name": "generate_new_schedule_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(base_datetime, last_datetime, new_count = 1)"
              },
              {
                "name": "old_next_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "old_schedule",
                "scope": "public",
                "class_method": false,
                "arguments": "(date = Time.now)"
              },
              {
                "name": "due",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "due_today",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "update_calendars",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "total_clicks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "clicks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "modifiable",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, user)"
              },
              {
                "name": "sendable",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, user, is_test_send = false)"
              },
              {
                "name": "last_run",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "can_override_throttle",
                "scope": "public",
                "class_method": false,
                "arguments": "(user)"
              },
              {
                "name": "has_inline_images?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "needs_test_send?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tenants_missing_test_send",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "needs_unsubscribe?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "pass_checklist?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "views_for_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(date)"
              },
              {
                "name": "check_bounce_rate",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "has_required_custom_fields?",
                "scope": "public",
                "class_method": false,
                "arguments": "(selected_tenant)"
              },
              {
                "name": "all_have_required_custom_fields?",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenants)"
              },
              {
                "name": "ready_to_send?",
                "scope": "public",
                "class_method": false,
                "arguments": "(bypass_checklist = false)"
              },
              {
                "name": "check_campaign_send?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant, bypass_checklist = false)"
              },
              {
                "name": "in_lockout_period?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "most_recent_send",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              }
            ],
            "instance_private": [
              {
                "name": "change_schedule",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_scheduled_at",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "make_global_if_enterprise",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "scheduled",
              "scope": "-> (tenant) { where(parent_id: nil, scheduled: true).where(\"campaigns.schedule_interval_type <> \\'none\\' OR (campaigns.schedule_interval_type = \\'none\\' AND (NOW() - (campaigns.schedule_date[1] - interval \\'#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second\\') <= interval \\'3 days\\') AND NOT EXISTS(SELECT null FROM campaigns c1 WHERE c1.tenant_id = #{tenant.id} AND c1.parent_id = campaigns.id AND c1.test = FALSE AND c1.created_at >= ((campaigns.schedule_date[1] - interval \\'#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second\\') - interval \\'2 days\\' )))\") }"
            },
            {
              "name": "without_hidden",
              "scope": "-> (tenant) { where(\"(campaigns.hidden_tenants->>\\'#{tenant.id}\\')::BOOLEAN IS DISTINCT FROM TRUE AND campaigns.global_hide IS DISTINCT FROM TRUE\") }"
            },
            {
              "name": "require_selected_enterprise",
              "scope": "-> (tenant) { where(\"campaigns.enterprise_campaign = FALSE OR (campaigns.enterprise_campaign = TRUE AND ? = ANY(campaigns.selected_tenants))\", tenant.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "email_template",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "identity",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "messages",
              "options": {
                "class_name": "CampaignMessage",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"CampaignMessage\", dependent: :destroy"
            },
            {
              "name": "exclusions",
              "options": {
                "class_name": "CampaignExclusion",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"CampaignExclusion\", dependent: :destroy"
            },
            {
              "name": "counts",
              "options": {
                "class_name": "CampaignCount",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"CampaignCount\", dependent: :destroy"
            },
            {
              "name": "trackers",
              "options": {
                "through": "messages"
              },
              "raw_options": "through: :messages"
            },
            {
              "name": "hits",
              "options": {
                "through": "trackers"
              },
              "raw_options": "through: :trackers"
            },
            {
              "name": "email_template_values",
              "options": {
                "as": "element"
              },
              "raw_options": "as: :element"
            },
            {
              "name": "campaign_calendar_entries",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "contact_lists",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }',  autosave: true"
            }
          ],
          "validate_on": [
            {
              "line": ":name_must_be_unique, :name_must_not_be_in_global"
            }
          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "length: { minimum: 4 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "campaigns_contact_list",
        "name_plural": "campaigns_contact_lists",
        "dsl_file": ""
      },
      {
        "name": "cash_drawer",
        "name_plural": "cash_drawers",
        "dsl_file": ""
      },
      {
        "name": "clearbit_quotum",
        "name_plural": "clearbit_quota",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/clearbit_quota.rb",
        "source": {
          "ruby": "class ClearbitQuota < ActiveRecord::Base\n  def increment\n    self.used += 1\n    save\n  end\n\n  def remaining\n    max - self.used\n  end\n\n  def reset(force = false)\n    needs_reset = (Time.now > end_date) || force\n    if needs_reset\n      self.used = 0\n      self.start_date = end_date\n      self.end_date = end_date + 1.month\n      save\n    end\n    needs_reset\n  end\n\n  def self.get_quota(klass)\n    result = ClearbitQuota.where(klass: klass.to_s).first\n    if result.nil?\n      result = ClearbitQuota.create(klass: klass.to_s, start_date: Time.now, end_date: Time.now + 1.month)\n    end\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "comment",
        "name_plural": "comments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/comment.rb",
        "source": {
          "ruby": "class Comment < ActiveRecord::Base\n  include ActsAsCommentable::Comment\n\n  belongs_to :commentable, polymorphic: true\n\n  default_scope { order(created_at: :asc) }\n\n  # NOTE: install the acts_as_votable plugin if you\n  # want user to vote on the quality of comments.\n  #acts_as_voteable\n\n  # NOTE: Comments belong to a user\n  belongs_to :user\n  belongs_to :tenant\n\n\n\n  def send_new_comment_email(host, selected_users)\n    # SEND EMAILS TO EACH SELECTED_USER\n    to_addrs = []\n\n    selected_users.each do |user|\n      to_addrs << test_mode_if_required(user.email) unless user.email.blank?\n    end\n\n    return unless to_addrs.count > 0\n\n    send_mail(host, to_addrs, \"Print Speak: New Comment on #{commentable.class }: #{commentable.name}\")\n  end\n\n  def send_mail(host, addresses, email_subject, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(addresses, email_subject, Emails::Comment.new.new_comment(self, user, host), source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(created_at: :asc) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "commentable",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "company",
        "name_plural": "companies",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/company.rb",
        "source": {
          "ruby": "class Company < ActiveRecord::Base\n  include EstimateConvertable\n  include ApiLoggable\n  include Excludable\n  include Bookmarkable\n  include Categorizable\n\n  # geocoded_by :address_lookup\n\n  enum prospect_sentiment: { bad: 0, normal: 1, great: 2 }\n\n  has_one :location, class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\"\n  belongs_to :sales_rep_user, class_name: \"User\"\n  belongs_to :primary_contact, ->  (company) {\n    if Platform.is_mbe?(company)\n      unscope(:where).where.not(deleted: true).where(id: company.primary_contact_id)\n    else\n      unscope(:where).where(\"id = ? OR (platform_id = ? AND platform_id IS NOT NULL)\", company.primary_contact_id, company.source_contact_id).where.not(deleted: true).where.not(temp: true)\n    end\n  }, class_name: \"Contact\"\n\n  has_many :account_history_data, class_name: \"AccountHistoryData\"\n  has_many :estimates, inverse_of: :company\n  has_many :invoices, inverse_of: :company\n  has_many :sales, inverse_of: :company\n  has_many :orders, inverse_of: :company\n  has_many :statistics\n  has_many :contacts\n  has_many :tasks, as: :taskable\n  has_many :phone_calls, as: :phoneable\n  has_many :activities\n  has_many :notes, as: :context\n  belongs_to :tenant, inverse_of: :companies\n  belongs_to :statement_address, class_name: \"Address\"\n  belongs_to :invoice_address, class_name: \"Address\"\n  belongs_to :prospect_status\n  belongs_to :lead_type\n  has_many :inquiries\n\n  include Scopes::CompanyScopes\n\n  attr_accessor :new_tag_category_id\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def sales_rep_name\n    sales_rep.try(:name)\n  end\n\n  def self.to_csv(options = {})\n    CSV.generate(options, col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      csv << column_names\n      all.each do |invoice|\n        csv << invoice.attributes.values_at(*column_names)\n      end\n    end\n  end\n\n  def self.to_csv_filtered(columns, tenant)\n    bom = \"\\xEF\\xBB\\xBF\"  # Defines UTF-8 ByteOrderMark to csv so Excel is happy\n    CSV.generate(csv = bom, col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      column_titles = columns.map { |c| I18n.t_prefix(c, tenant) }\n      csv << column_titles\n      all.each do |result|\n        csv << columns.map {\n          |c| case c\n              when \"sales_rep\"\n                result.sales_rep_name\n              when \"sales_rep_PS\"\n                result.sales_rep_user.try(:full_name)\n              when \"rolling_12_month_sales\"\n                \"$\" + result[c].to_f.to_s\n              when \"rolling_12_month_sales_ly\"\n                \"$\" + result[c].to_f.to_s\n              when \"street1\"\n                result.invoice_address.street1.to_s if result.invoice_address.try(:street1).present?\n              when \"street2\"\n                result.invoice_address.street2.to_s if result.invoice_address.try(:street2).present?\n              when \"street3\"\n                result.invoice_address.street3.to_s if result.invoice_address.try(:street3).present?\n              when \"city\"\n                result.invoice_address.city.to_s if result.invoice_address.try(:city).present?\n              when \"state\"\n                result.invoice_address.state.to_s if result.invoice_address.try(:state).present?\n              when \"zip\"\n                result.invoice_address.zip.to_s if result.invoice_address.try(:zip).present?\n              when \"balance\"\n                \"$\" + result[c].to_f.to_s\n              when \"last_order\"\n                result.tenant.local_strftime(result.last_order_date, \"%%DM/%%DM/%y\") if result.last_order_date.present?\n              when \"last_contact\"\n                result.tenant.local_strftime(result[c], \"%%DM/%%DM/%y\") if result[c].present?\n              else\n                result[c]\n              end\n        }\n      end\n    end\n  end\n\n  def self.web_to_csv(data, tenant)\n    CSV.generate(col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Name\", \"First Web\", \"Last Web\", \"Orders\", \"Sales\", \"Total Sales\", \"Orders LY\", \"Sales LY\", \"AVG Order\"]\n      csv << desired_columns\n      data.map do |company|\n        csv << [\n          \"#{ company['company_name'] }\",\n          \"#{ tenant.local_strftime(company['first_invoice_date'], '%%DM/%%DM/%y') if company['first_invoice_date'] }\",\n          \"#{ tenant.local_strftime(company['last_invoice_date'], '%%DM/%%DM/%y') if company['last_invoice_date'] }\",\n          \"#{ company['invoice_count'] }\",\n          \"$ #{ company['invoice_value'] }\",\n          \"$ #{ company['invoice_total_value'] }\",\n          \"#{ company['invoice_count_ly'] }\",\n          \"$ #{ company['invoice_value_ly'].to_f }\",\n          \"$ #{ company['invoice_value'].to_f / company['invoice_count'].to_f || 0 }\"\n        ]\n      end\n    end\n  end\n\n  def self.sales_tag_to_csv(data, tenant)\n    CSV.generate(col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Name\", \"# of Invoices\", \"Tagged Sales\", \"Total Sales\", \"# of Invoices LY\", \"Tagged Sales LY\", \"AVG Order\"]\n      csv << desired_columns\n      data.map do |company|\n        csv << [\n          \"#{ company['company_name'] }\",\n          \"#{ company['invoice_count'] }\",\n          \"$ #{ company['invoice_value'] }\",\n          \"$ #{ company['invoice_total_value'] }\",\n          \"#{ company['invoice_count_ly'] }\",\n          \"$ #{ company['invoice_value_ly'].to_f }\",\n          \"$ #{ company['invoice_value'].to_f / company['invoice_count'].to_f || 0 }\"\n        ]\n      end\n    end\n  end\n\n  def fy_count(start_date = (Time.zone.now - 1.years) , end_date = (Time.zone.now))\n    count = estimates.where(ordered_date: start_date..end_date).count\n    # estimates.where(\"status = ''\").count if count == 0 || 0\n  end\n\n  def get_avg_estimate_conversion_fy\n    end_date = Date.today\n    start_date = end_date - 1.year\n\n    if won_estimates(start_date, end_date) > 0\n      won_estimates = won_estimates(start_date, end_date).to_f\n      total = won_estimates(start_date, end_date).to_f + lost_estimates(start_date, end_date).to_f + pending_estimates(start_date, end_date).to_f\n\n      if won_estimates > 0 && total > 0\n        (won_estimates / total * 100).round(2)\n      else\n        0\n      end\n    else\n      0\n    end\n  end\n\n  def self.average_estimate_conversion_by_company_id(company_ids)\n    company_status_counts = Estimate.group(:company_id, :status).where(company_id: company_ids).pluck(\"company_id, status, count(*)\").each_with_object({}) do |(company_id, status, count), result|\n      result[company_id] ||= Hash.new { 0 }\n      result[company_id][status] = count\n    end\n\n    company_status_counts.each_with_object({}) do |(company_id, status_counts), result|\n      result[company_id] = status_counts[\"Won\"].to_f / (status_counts[\"Won\"] + status_counts[\"Lost\"] + status_counts[\"\"]) if company_id\n    end\n  end\n\n  def display_name\n    name.blank? ? \"<not entered>\" : name\n  end\n\n  def self.account_types\n    %w[charge_acct cash_only cash_check_credit full_deposit credit_card_on_file]\n  end\n\n  def display_account_type\n    I18n.dict(\"models.company.account_types\", account_type, keys: self.class.account_types)\n  end\n\n  def self.statuses\n    %w[CustomerStatusCurrent CustomerStatusNew CustomerStatusFrozen CustomerStatusPastDue CustomerStatusInactive CustomerStatusDelinquent]\n  end\n\n  def display_status\n    I18n.dict(\"models.company.statuses\", status, keys: self.class.statuses)\n  end\n\n  def most_common_domain_name\n    domains = contacts.where(temp: false, deleted: false).where.not(email: nil).where.not(email: \"\").map { |contact| contact.email.try(:split, \"@\").try(:last) }\n    domains.group_by(&:itself).values.max_by(&:size).try(:first)\n  end\n\n  def website_most_common_domain_name\n    domain = \"\"\n\n    if custom_data.present? && custom_data[\"domain\"].present?\n      url = custom_data[\"domain\"].strip\n\n      if !(url.match(/^http:\\/\\//) || url.match(/^https:\\/\\//))\n        url = \"http://\" + url\n      end\n\n      begin\n        domain = URI.parse(url).host.gsub(\"www.\", \"\").gsub(\" \", \"\")\n      rescue StandardError\n      end\n    end\n\n    domain = most_common_domain_name if domain.blank?\n    domain.gsub!(/\\s+/, \"\") if domain.present? # return domain whitout white spaces\n    domain\n  end\n\n  def allowed_clearbit_search?\n    domain = website_most_common_domain_name\n\n    return true if !has_clearbit_data.present? && domain.present? && !Printsmith::Integration::Clearbit.common_shared_domains.include?(domain)\n  end\n\n  def aggregated_tasks\n    Task.joins(\"LEFT OUTER JOIN contacts ON contacts.id = tasks.taskable_id\").\n         joins(\"LEFT OUTER JOIN estimates ON estimates.id = tasks.taskable_id\").\n         joins(\"LEFT OUTER JOIN invoices ON invoices.id = tasks.taskable_id\").\n         joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = tasks.taskable_id\").\n         where(tenant: tenant).\n         where(%Q{\n          (\n            (tasks.taskable_type = 'Inquiry' AND inquiries.company_id = #{id})\n            OR (tasks.taskable_type = 'Contact' AND contacts.company_id = #{id})\n            OR (tasks.taskable_type = 'Estimate' AND estimates.company_id = #{id})\n            OR (tasks.taskable_type IN ('Invoice', 'Sale', 'Order') AND invoices.company_id = #{id})\n          )\n          OR (tasks.taskable_type = 'Company' AND tasks.taskable_id = #{id})\n         }).\n         order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    PhoneCall.joins(\"LEFT OUTER JOIN contacts ON contacts.id = phone_calls.phoneable_id\").\n         joins(\"LEFT OUTER JOIN estimates ON estimates.id = phone_calls.phoneable_id\").\n         joins(\"LEFT OUTER JOIN invoices ON invoices.id = phone_calls.phoneable_id\").\n         joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = phone_calls.phoneable_id\").\n         where(tenant: tenant).\n         where(%Q{\n          (\n            (phone_calls.phoneable_type = 'Inquiry' AND inquiries.company_id = #{id})\n            OR (phone_calls.phoneable_type = 'Contact' AND contacts.company_id = #{id})\n            OR (phone_calls.phoneable_type = 'Estimate' AND estimates.company_id = #{id})\n            OR (phone_calls.phoneable_type IN ('Invoice', 'Sale', 'Order') AND invoices.company_id = #{id})\n          )\n          OR (phone_calls.phoneable_type = 'Company' AND phone_calls.phoneable_id = #{id})\n         }).\n         order(created_at: :desc)\n  end\n\n  def aggregated_notes\n    Note.joins(\"LEFT OUTER JOIN contacts ON contacts.id = notes.context_id\").\n         joins(\"LEFT OUTER JOIN estimates ON estimates.id = notes.context_id\").\n         joins(\"LEFT OUTER JOIN invoices ON invoices.id = notes.context_id\").\n         joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = notes.context_id\").\n         where(tenant: tenant).\n         where(%Q{\n          (\n            (notes.context_type = 'Inquiry' AND inquiries.company_id = #{id})\n            OR (notes.context_type = 'Contact' AND contacts.company_id = #{id})\n            OR (notes.context_type = 'Estimate' AND estimates.company_id = #{id})\n            OR (notes.context_type IN ('Invoice', 'Sale', 'Order') AND invoices.company_id = #{id})\n          )\n          OR (notes.context_type = 'Company' AND notes.context_id = #{id})\n         }).\n         order(\"created_at DESC, id DESC\")\n  end\n\n  def aggregated_meetings\n    Meeting.joins(\"LEFT OUTER JOIN contacts ON contacts.id = meetings.context_id\").\n            joins(\"LEFT OUTER JOIN estimates ON estimates.id = meetings.context_id\").\n            joins(\"LEFT OUTER JOIN invoices ON invoices.id = meetings.context_id\").\n            joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = meetings.context_id\").\n            where(tenant: tenant).\n            where(%Q{\n              (\n                (meetings.context_type = 'Inquiry' AND inquiries.company_id = #{id})\n                OR (meetings.context_type = 'Contact' AND contacts.company_id = #{id})\n                OR (meetings.context_type = 'Estimate' AND estimates.company_id = #{id})\n                OR (meetings.context_type IN ('Invoice', 'Sale', 'Order') AND invoices.company_id = #{id})\n              )\n              OR (meetings.context_type = 'Company' AND meetings.context_id = #{id})\n             }).\n            order(created_at: :desc)\n  end\n\n  def campaigns\n    Campaign.joins(:messages).joins(\"JOIN contacts ON contacts.id = campaign_messages.contact_id\").where(tenant_id: tenant_id, contacts: {company_id: id}).where.not(parent_id: nil).group(\"campaigns.id\")\n  end\n\n  def find_oldest_interaction(mbe_invoiced = false)\n    if !mbe_invoiced\n      oldest_invoice = Invoice.where(tenant_id: tenant.id, company_id: id).order(source_created_at: :asc).first.try(:source_created_at)\n    else\n      oldest_invoice = Sale.where(tenant_id: tenant.id, company_id: id).order(pickup_date: :asc).invoiced(mbe_invoiced).first.try(:pickup_date)\n    end\n\n    oldest_estimate = Estimate.where(tenant_id: tenant.id, company_id: id).order(source_created_at: :asc).first.try(:source_created_at) if mbe_invoiced.present?\n    oldest_shipment = Shipment.where(tenant_id: tenant.id, company_id: id).order(shipment_date: :asc).first.try(:shipment_date)\n\n    oldest_interaction = source_created_at\n\n    if !oldest_invoice.nil?\n      oldest_interaction = oldest_invoice if oldest_interaction.nil? || (!oldest_interaction.nil? && oldest_invoice < oldest_interaction)\n    end\n\n    if !oldest_estimate.nil?\n      oldest_interaction = oldest_estimate if oldest_interaction.nil? || (!oldest_interaction.nil? && oldest_estimate < oldest_interaction)\n    end\n\n    if !oldest_shipment.nil?\n      oldest_interaction = oldest_shipment if oldest_interaction.nil? || (!oldest_interaction.nil? && oldest_shipment < oldest_interaction)\n    end\n\n    oldest_interaction\n  end\n\n  def generate_sales_stats\n    #TODO: eventually move Common::Statistics::CompanyRanking into this somehow\n    invoiced = Platform.is_mbe?(tenant)\n\n    calculated_company = Company.select(\"id, deleted, rolling_12_month_sales, rolling_12_month_sales_ly, last_order_date, last_pickup_date, rolling_12_month_cogs, growth_percentage, order_count, balance, last_sale_order_date, last_sale_pickup_date, last_shipment_date, oldest_interaction\").\n                                 calculated_order_count.\n                                 calculated_last_order_date.\n                                 calculated_last_pickup_date.\n                                 calculated_last_sale_pickup_date(invoiced).\n                                 calculated_last_sale_order_date(invoiced).\n                                 calculated_last_shipment_date.\n                                 calculated_first_sale_date(invoiced).\n                                 calculated_balance(invoiced).\n                                 where(id: id, tenant_id: tenant.id).\n                                 first\n\n    if calculated_company\n      # growth_percentage = PrintSpeak::Application.calculate_growth(calculated_company.rolling_12_month_sales, calculated_company.rolling_12_month_sales_ly) * 100\n\n      self.last_order_date = calculated_company.calculated_last_order_date\n      self.last_pickup_date = calculated_company.calculated_last_pickup_date\n      self.first_sale_at = calculated_company.calculated_first_sale_date\n\n      self.last_sale_order_date = calculated_company.calculated_last_sale_order_date\n      self.last_sale_pickup_date = calculated_company.calculated_last_sale_pickup_date\n      self.last_shipment_date = calculated_company.calculated_last_shipment_date\n\n      # self.growth_percentage = growth_percentage.try(:round, 2).try(:to_f) || 0\n      self.order_count = calculated_company.calculated_order_count\n      self.balance = calculated_company.calculated_balance if Platform.is_mbe?(tenant)\n      self.oldest_interaction = find_oldest_interaction(invoiced)\n\n      self.last_order_date = last_sale_pickup_date if invoiced\n      self.last_order_date = last_shipment_date if !last_order_date || last_shipment_date.present? && last_shipment_date > last_order_date\n\n      save\n    end\n\n    nil\n  end\n\n  def info(*args)\n    result = nil\n\n    custom = custom_data\n    clearbit = clearbit_data\n    args.each do |arg|\n      custom = custom.try(:[], arg)\n      clearbit = clearbit.try(:[], arg)\n    end\n    if custom.present?\n      result = custom\n    else\n      result = clearbit if clearbit.present?\n    end\n\n    result\n  end\n\n  def bulk_send_contact\n    result = nil\n    ap_contact = Contact.where(tenant: tenant, id: account_payable_id).first\n\n    statement_contact = primary_contact\n    statement_contact = Contact.where(tenant: tenant, company_id: id).order(source_created_at: :asc).first unless statement_contact.present?\n    statement_contact = Contact.where(tenant: tenant, platform_id: source_billtocontact_id).first if !source_billtocontact_id.nil?\n    result = statement_contact\n    result = ap_contact if statement_contact.try(:email).blank? || (send_invoice_ap_contact && !ap_contact.try(:email).blank?)\n    result\n  end\n\n  def is_unsubscribed?\n    marketing_do_not_mail\n  end\n\n  def unsubscribe_reasons\n    result = []\n    result << Unsubscribe.definitions[\"company_vision\"].try(:[], :desc) || \"Unknown\"\n    result\n  end\n\n  def self.sectors_hash\n    sector = Array.new\n\n    CSV.parse(Company.csv_categories, col_sep: \",\", headers: true) do |row|\n      sector << { \"name\" => row[0] }\n    end\n\n    sector.uniq\n  end\n\n  def self.industry_group_hash\n    industry_groups = Array.new\n\n    CSV.parse(Company.csv_categories, col_sep: \",\", headers: true) do |row|\n      industry_groups << {  \"name\" => row[1],  \"sector\" => row[0] }\n    end\n\n    industry_groups.uniq\n  end\n\n  def self.industry_hash\n    industry = Array.new\n\n    CSV.parse(Company.csv_categories, col_sep: \",\", headers: true) do |row|\n      industry << {\n        \"name\" => row[2],\n        \"industry_group\" => row[1],\n        \"sector\" => row[0]\n       }\n    end\n\n    industry.uniq\n  end\n\n  def self.sub_industries_hash\n    sub_industry = Array.new\n\n    CSV.parse(Company.csv_categories, col_sep: \",\", headers: true) do |row|\n      sub_industry << {\n        \"name\" => row[3],\n        \"industry\" => row[2],\n        \"industry_group\" => row[1],\n        \"sector\" => row[0]\n      }\n    end\n\n    sub_industry.uniq\n  end\n\n  def self.csv_categories\n    'Associations,Associations,Associations,Associations\nSector,Industry Group,Industry,Sub Industry\nConsumer Discretionary,Automobiles & Components,Automotive,Automotive\nConsumer Discretionary,Consumer Discretionary,Consumer Discretionary,Consumer Discretionary\nConsumer Discretionary,Consumer Durables & Apparel,Consumer Goods,Consumer Goods\nConsumer Discretionary,Consumer Durables & Apparel,Household Durables,Consumer Electronics\nConsumer Discretionary,Consumer Durables & Apparel,Household Durables,Household Appliances\nConsumer Discretionary,Consumer Durables & Apparel,Household Durables,Photography\nConsumer Discretionary,Consumer Durables & Apparel,Leisure Products,Leisure Facilities\nConsumer Discretionary,Consumer Durables & Apparel,Leisure Products,Sporting Goods\nConsumer Discretionary,Consumer Durables & Apparel,\"Textiles, Apparel & Luxury Goods\",\"Apparel, Accessories & Luxury Goods\"\nConsumer Discretionary,Consumer Durables & Apparel,\"Textiles, Apparel & Luxury Goods\",Textiles\nConsumer Discretionary,Consumer Durables & Apparel,\"Textiles, Apparel & Luxury Goods\",\"Textiles, Apparel & Luxury Goods\"\nConsumer Discretionary,Consumer Services,Consumer Services,Consumer Services\nConsumer Discretionary,Consumer Services,Diversified Consumer Services,Education Services\nConsumer Discretionary,Consumer Services,Diversified Consumer Services,Specialized Consumer Services\nConsumer Discretionary,Consumer Services,\"Hotels, Restaurants & Leisure\",Casinos & Gaming\nConsumer Discretionary,Consumer Services,\"Hotels, Restaurants & Leisure\",\"Hotels, Restaurants & Leisure\"\nConsumer Discretionary,Consumer Services,\"Hotels, Restaurants & Leisure\",Leisure Facilities\nConsumer Discretionary,Consumer Services,\"Hotels, Restaurants & Leisure\",Restaurants\nConsumer Discretionary,Diversified Consumer Services,Education Services,Education\nConsumer Discretionary,Diversified Consumer Services,Family Services,Family Services\nConsumer Discretionary,Diversified Consumer Services,Specialized Consumer Services,Legal Services\nConsumer Discretionary,Media,Media,Advertising\nConsumer Discretionary,Media,Media,Broadcasting\nConsumer Discretionary,Media,Media,Media\nConsumer Discretionary,Media,Media,Movies & Entertainment\nConsumer Discretionary,Media,Media,Public Relations\nConsumer Discretionary,Media,Media,Publishing\nConsumer Discretionary,Retailing,Distributors,Distributors\nConsumer Discretionary,Retailing,Retailing,Retailing\nConsumer Discretionary,Retailing,Specialty Retail,Home Improvement Retail\nConsumer Discretionary,Retailing,Specialty Retail,Homefurnishing Retail\nConsumer Discretionary,Retailing,Specialty Retail,Specialty Retail\nConsumer Staples,Consumer Staples,Consumer Staples,Consumer Staples\nConsumer Staples,Food & Staples Retailing,Food & Staples Retailing,Food Retail\nConsumer Staples,\"Food, Beverage & Tobacco\",Beverages,Beverages\nConsumer Staples,\"Food, Beverage & Tobacco\",Food Products,Agricultural Products\nConsumer Staples,\"Food, Beverage & Tobacco\",Food Products,Food\nConsumer Staples,\"Food, Beverage & Tobacco\",Food Products,Food Production\nConsumer Staples,\"Food, Beverage & Tobacco\",Food Products,Packaged Foods & Meats\nConsumer Staples,\"Food, Beverage & Tobacco\",Tobacco,Tobacco\nConsumer Staples,Household & Personal Products,Personal Products,Cosmetics\nEnergy,Energy Equipment & Services,Gas Utilities,Oil & Gas\nFinancials,Banks,Banks,Banking & Mortgages\nFinancials,Diversified Financial Services,Diversified Financial Services,Accounting\nFinancials,Diversified Financial Services,Diversified Financial Services,Finance\nFinancials,Diversified Financial Services,Diversified Financial Services,Financial Services\nFinancials,Diversified Financials,Capital Markets,Asset Management & Custody Banks\nFinancials,Diversified Financials,Capital Markets,Diversified Capital Markets\nFinancials,Diversified Financials,Capital Markets,Fundraising\nFinancials,Diversified Financials,Capital Markets,Investment Banking & Brokerage\nFinancials,Diversified Financials,Diversified Financial Services,Payments\nFinancials,Insurance,Insurance,Insurance\nFinancials,Real Estate,Real Estate,Real Estate\nHealth Care,Health Care Equipment & Services,Health Care Equipment & Supplies,Eyewear\nHealth Care,Health Care Equipment & Services,Health Care Providers & Services,Health & Wellness\nHealth Care,Health Care Equipment & Services,Health Care Providers & Services,Health Care\nHealth Care,Health Care Equipment & Services,Health Care Providers & Services,Health Care Services\nHealth Care,\"Pharmaceuticals, Biotechnology & Life Sciences\",Biotechnology,Biotechnology\nHealth Care,\"Pharmaceuticals, Biotechnology & Life Sciences\",Life Sciences Tools & Services,Life Sciences Tools & Services\nHealth Care,\"Pharmaceuticals, Biotechnology & Life Sciences\",Pharmaceuticals,Pharmaceuticals\nIndustrials,Capital Goods,Aerospace & Defense,Aerospace & Defense\nIndustrials,Capital Goods,Capital Goods,Capital Goods\nIndustrials,Capital Goods,Commercial Services & Supplies,Commercial Printing\nIndustrials,Capital Goods,Construction & Engineering,Civil Engineering\nIndustrials,Capital Goods,Construction & Engineering,Construction\nIndustrials,Capital Goods,Construction & Engineering,Construction & Engineering\nIndustrials,Capital Goods,Construction & Engineering,Mechanical Engineering\nIndustrials,Capital Goods,Electrical Equipment,Electrical\nIndustrials,Capital Goods,Electrical Equipment,Electrical Equipment\nIndustrials,Capital Goods,Industrial Conglomerates,Industrials & Manufacturing\nIndustrials,Capital Goods,Machinery,Industrial Machinery\nIndustrials,Capital Goods,Machinery,Machinery\nIndustrials,Capital Goods,Trading Companies & Distributors,Trading Companies & Distributors\nIndustrials,Commercial & Professional Services,Commercial Services & Supplies,Business Supplies\nIndustrials,Commercial & Professional Services,Commercial Services & Supplies,Commercial Printing\nIndustrials,Commercial & Professional Services,Commercial Services & Supplies,Corporate & Business\nIndustrials,Commercial & Professional Services,Professional Services,Architecture\nIndustrials,Commercial & Professional Services,Professional Services,Automation\nIndustrials,Commercial & Professional Services,Professional Services,Consulting\nIndustrials,Commercial & Professional Services,Professional Services,Design\nIndustrials,Commercial & Professional Services,Professional Services,Human Resource & Employment Services\nIndustrials,Commercial & Professional Services,Professional Services,Professional Services\nIndustrials,Commercial & Professional Services,Professional Services,Research & Consulting Services\nIndustrials,Industrials,Industrials,Industrials\nIndustrials,Transportation,Air Freight & Logistics,Shipping & Logistics\nIndustrials,Transportation,Airlines,Airlines\nIndustrials,Transportation,Marine,Marine\nIndustrials,Transportation,Road & Rail,Ground Transportation\nIndustrials,Transportation,Transportation,Transportation\nInformation Technology,Semiconductors & Semiconductor Equipment,Semiconductors & Semiconductor Equipment,Semiconductors\nInformation Technology,Software & Services,Internet Software & Services,Cloud Services\nInformation Technology,Software & Services,Internet Software & Services,Internet\nInformation Technology,Software & Services,Internet Software & Services,Internet Software & Services\nInformation Technology,Software & Services,IT Services,Data Processing & Outsourced Services\nInformation Technology,Software & Services,Software,Graphic Design\nInformation Technology,Technology Hardware & Equipment,Communications Equipment,Communications\nInformation Technology,Technology Hardware & Equipment,Communications Equipment,Computer Networking\nInformation Technology,Technology Hardware & Equipment,\"Electronic Equipment, Instruments & Components\",Nanotechnology\nInformation Technology,Technology Hardware & Equipment,\"Technology Hardware, Storage & Peripherals\",Computer Hardware\nInformation Technology,Technology Hardware & Equipment,\"Technology Hardware, Storage & Peripherals\",\"Technology Hardware, Storage & Peripherals\"\nMaterials,Construction Materials,Building Materials,Building Materials\nMaterials,Materials,Chemicals,Chemicals\nMaterials,Materials,Chemicals,Commodity Chemicals\nMaterials,Materials,Containers & Packaging,Containers & Packaging\nMaterials,Materials,Metals & Mining,Gold\nMaterials,Materials,Metals & Mining,Metals & Mining\nMaterials,Materials,Paper & Forest Products,Paper Products\nNon for Profit,Non for Profit,Non for Profit,Non for Profit\nReligious Organisations,Religious Organisations,Religious Organisations,Religious Organisations\nTelecommunication Services,Telecommunication Services,Diversified Telecommunication Services,Integrated Telecommunication Services\nTelecommunication Services,Telecommunication Services,Wireless Telecommunication Services,Wireless Telecommunication Services\nUtilities,Independent Power and Renewable Electricity Producers,Renewable Electricity,Renewable Energy\nUtilities,Utilities,Electric Utilities,Energy\nUtilities,Utilities,Utilities,Utilities'\n  end\n\n  # includes keys for all sectors, industry groups and sub industries so can extract keys from company information and use same key for translation\n  def self.industries\n  {\n    accounting: \"Accounting\",\n    advertising: \"Advertising\",\n    aerospace_defense: \"Aerospace & Defense\",\n    agricultural_products: \"Agricultural Products\",\n    air_freight_logistics: \"Air Freight & Logistics\",\n    airlines: \"Airlines\",\n    apparel_accessories_luxury_goods: \"Apparel, Accessories & Luxury Goods\",\n    architecture: \"Architecture\",\n    asset_management_custody_banks: \"Asset Management & Custody Banks\",\n    automation: \"Automation\",\n    automobiles_components: \"Automobiles & Components\",\n    automotive: \"Automotive\",\n    banking_mortgages: \"Banking & Mortgages\",\n    banks: \"Banks\",\n    beverages: \"Beverages\",\n    biotechnology: \"Biotechnology\",\n    broadcasting: \"Broadcasting\",\n    building_materials: \"Building Materials\",\n    business_supplies: \"Business Supplies\",\n    capital_goods: \"Capital Goods\",\n    casinos_gaming: \"Casinos & Gaming\",\n    chemicals: \"Chemicals\",\n    civil_engineering: \"Civil Engineering\",\n    cloud_services: \"Cloud Services\",\n    commercial_professional_services: \"Commercial & Professional Services\",\n    commercial_printing: \"Commercial Printing\",\n    commercial_services_supplies: \"Commercial Services & Supplies\",\n    commodity_chemicals: \"Commodity Chemicals\",\n    communications: \"Communications\",\n    communications_equipment: \"Communications Equipment\",\n    computer_hardware: \"Computer Hardware\",\n    computer_networking: \"Computer Networking\",\n    construction: \"Construction\",\n    construction_engineering: \"Construction & Engineering\",\n    construction_materials: \"Construction Materials\",\n    consulting: \"Consulting\",\n    consumer_discretionary: \"Consumer Discretionary\",\n    consumer_durables_apparel: \"Consumer Durables & Apparel\",\n    consumer_electronics: \"Consumer Electronics\",\n    consumer_goods: \"Consumer Goods\",\n    consumer_services: \"Consumer Services\",\n    consumer_staples: \"Consumer Staples\",\n    containers_packaging: \"Containers & Packaging\",\n    corporate_business: \"Corporate & Business\",\n    cosmetics: \"Cosmetics\",\n    data_processing_outsourced_services: \"Data Processing & Outsourced Services\",\n    design: \"Design\",\n    distributors: \"Distributors\",\n    diversified_capital_markets: \"Diversified Capital Markets\",\n    diversified_consumer_services: \"Diversified Consumer Services\",\n    diversified_financial_services: \"Diversified Financial Services\",\n    diversified_financials: \"Diversified Financials\",\n    diversified_support_services: \"Diversified Support Services\",\n    diversified_telecommunication_services: \"Diversified Telecommunication Services\",\n    education: \"Education\",\n    education_services: \"Education Services\",\n    electrical: \"Electrical\",\n    electrical_equipment: \"Electrical Equipment\",\n    electronic_equipment_instruments_components: \"Electrionic Equipment Instruments & Components\",\n    electric_utilities: \"Electric Utilities\",\n    energy: \"Energy\",\n    energy_equipment_services: \"Energy Equipment & Services\",\n    eyewear: \"Eyewear\",\n    family_services: \"Family Services\",\n    finance: \"Finance\",\n    financial_services: \"Financial Services\",\n    financials: \"Financials\",\n    food: \"Food\",\n    food_beverage_tobacco: \"Food Beverage & Tobacco\",\n    food_staples_retailing: \"Food & Staples Retailing\",\n    food_production: \"Food Production\",\n    food_products: \"Food Products\",\n    food_retail: \"Food Retail\",\n    fundraising: \"Fundraising\",\n    gas_utilities: \"Gas Utilites\",\n    gold: \"Gold\",\n    graphic_design: \"Graphic Design\",\n    ground_transportation: \"Ground Transportation\",\n    health_wellness: \"Health & Wellness\",\n    health_care: \"Health Care\",\n    health_care_equipment_services: \"Health Care Equipment & Services\",\n    health_care_equipment_supplies: \"Health Care Equipment & Supplies\",\n    health_care_providers_services: \"Heath Care Providers & Services\",\n    health_care_services: \"Health Care Services\",\n    home_improvement_retail: \"Home Improvement Retail\",\n    homefurnishing_retail: \"Homefurnishing Retail\",\n    hotels_restaurants_leisure: \"Hotels, Restaurants & Leisure\",\n    household_personal_products: \"Household & Personal Products\",\n    household_appliances: \"Household Appliances\",\n    household_durables: \"Household Durables\",\n    human_resource_employment_services: \"Human Resource & Employment Services\",\n    independent_power_and_renewable_electricity_producers: \"Independant Power & Renewable Electricity Producers\",\n    industrial_conglomerates: \"Industrial Conglomerates\",\n    industrial_machinery: \"Industrial Machinery\",\n    industrials: \"Industrials\",\n    industrials_manufacturing: \"Industrials & Manufacturing\",\n    information_technology: \"Information Technology\",\n    insurance: \"Insurance\",\n    integrated_telecommunication_services: \"Integrated Telecommunication Services\",\n    internet: \"Internet\",\n    internet_software_services: \"Internet Software & Services\",\n    investment_banking_brokerage: \"Investment Banking & Brokerage\",\n    it_services: \"IT Services\",\n    legal_services: \"Legal Services\",\n    leisure_facilities: \"Leisure Facilities\",\n    leisure_products: \"Leisure Prodcuts\",\n    life_sciences_tools_services: \"Life Sciences Tools & Services\",\n    machinery: \"Machinery\",\n    marine: \"Marine\",\n    materials: \"Materials\",\n    mechanical_engineering: \"Mechanical Engineering\",\n    media: \"Media\",\n    metals_mining: \"Metals & Mining\",\n    movies_entertainment: \"Movies & Entertainment\",\n    nanotechnology: \"Nanotechnology\",\n    non_for_profit: \"Non for Profit\",\n    oil_gas: \"Oil & Gas\",\n    packaged_foods_meats: \"Packaged Foods & Meats\",\n    paper_forest_products: \"Paper & Forest Products\",\n    paper_products: \"Paper Products\",\n    payments: \"Payments\",\n    personal_products: \"Personal Products\",\n    pharmaceuticals: \"Pharmaceuticals\",\n    pharmaceuticals_biotechnology_life_sciences: \"Pharmaceuticals Biotechnology & Life Sciences\",\n    photography: \"Photography\",\n    professional_services: \"Professional Services\",\n    public_relations: \"Public Relations\",\n    publishing: \"Publishing\",\n    real_estate: \"Real Estate\",\n    religious_organisations: \"Religious Organisations\",\n    renewable_electricity: \"Rewnewable Electricity\",\n    renewable_energy: \"Renewable Energy\",\n    research_consulting_services: \"Research & Consulting Services\",\n    restaurants: \"Restaurants\",\n    retailing: \"Retailing\",\n    road_rail: \"Road & Rail\",\n    semiconductors: \"Semiconductors\",\n    semiconductors_semiconductor_equipment: \"Semiconductors & Semiconductor Equipment\",\n    shipping_logistics: \"Shipping & Logistics\",\n    software: \"Software\",\n    software_services: \"Software & Services\",\n    specialized_consumer_services: \"Specialized Consumer Services\",\n    specialty_retail: \"Specialty Retail\",\n    sporting_goods: \"Sporting Goods\",\n    technology_hardware_storage_peripherals: \"Technology Hardware, Storage & Peripherals\",\n    technology_hardware_equipment: \"Technology Hardware & Equipment\",\n    telecommunication_services: \"Telecommunication Services\",\n    textiles: \"Textiles\",\n    textiles_apparel_luxury_goods: \"Textiles, Apparel & Luxury Goods\",\n    tobacco: \"Tobacco\",\n    trading_companies_distributors: \"Trading Companies & Distributors\",\n    transportation: \"Transportation\",\n    utilities: \"Utilities\",\n    wireless_telecommunication_services: \"Wireless Telecommunication Services\"\n  }\n  end\n\n  def cogs_percentage\n    if rolling_12_month_cogs.to_f != 0.0\n      rolling_12_month_cogs * 100\n    else\n      0\n    end\n  end\n\n  def primary_contact\n    contacts.where(\"id = ? OR (platform_id = ? AND platform_id IS NOT NULL)\", primary_contact_id, source_contact_id.to_s).where.not(deleted: true).where.not(temp: true).first\n  end\n\n  #TODO @command\n  def do_propagate_sales_reps\n    if propagate_sales_reps\n      Contact.unscoped.where(company_id: id).where(\"sales_rep_platform_id IS DISTINCT FROM ?\", sales_rep.try(:platform_id)).update_all(sales_rep_platform_id: sales_rep.try(:platform_id), sales_rep_user_id: sales_rep.try(:user_id))\n      if Platform.is_mbe?(self)\n        Invoice.unscoped.where(company_id: id).where(\"sales_rep_platform_id IS DISTINCT FROM ?\", sales_rep.try(:platform_id)).update_all(sales_rep_platform_id: sales_rep.try(:platform_id), sales_rep_user_id: sales_rep.try(:user_id))\n        Shipment.unscoped.where(company_id: id).where(\"sales_rep_platform_id IS DISTINCT FROM ?\", sales_rep.try(:platform_id)).update_all(sales_rep_platform_id: sales_rep.try(:platform_id), sales_rep_user_id: sales_rep.try(:user_id))\n      end\n    end\n  end\n\n  def has_sub_account?(target_company)\n    target_company.present? && !account_display_id.blank? && account_display_id != \"0\" && target_company.master_account == account_display_id\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "sales_rep_user",
              "options": {
                "class_name": "User"
              },
              "raw_options": "class_name: \"User\""
            },
            {
              "name": "primary_contact",
              "options": {
                "a_lambda": "->  (company) {"
              },
              "raw_options": "a_lambda: '->  (company) {'"
            },
            {
              "name": "tenant",
              "options": {
                "inverse_of": "companies"
              },
              "raw_options": "inverse_of: :companies"
            },
            {
              "name": "statement_address",
              "options": {
                "class_name": "Address"
              },
              "raw_options": "class_name: \"Address\""
            },
            {
              "name": "invoice_address",
              "options": {
                "class_name": "Address"
              },
              "raw_options": "class_name: \"Address\""
            },
            {
              "name": "prospect_status",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "location",
              "options": {
                "class_name": "Location",
                "foreign_key": "id",
                "primary_key": "location_user_id"
              },
              "raw_options": "class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\""
            }
          ],
          "has_many": [
            {
              "name": "account_history_data",
              "options": {
                "class_name": "AccountHistoryData"
              },
              "raw_options": "class_name: \"AccountHistoryData\""
            },
            {
              "name": "estimates",
              "options": {
                "inverse_of": "company"
              },
              "raw_options": "inverse_of: :company"
            },
            {
              "name": "invoices",
              "options": {
                "inverse_of": "company"
              },
              "raw_options": "inverse_of: :company"
            },
            {
              "name": "sales",
              "options": {
                "inverse_of": "company"
              },
              "raw_options": "inverse_of: :company"
            },
            {
              "name": "orders",
              "options": {
                "inverse_of": "company"
              },
              "raw_options": "inverse_of: :company"
            },
            {
              "name": "statistics",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contacts",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tasks",
              "options": {
                "as": "taskable"
              },
              "raw_options": "as: :taskable"
            },
            {
              "name": "phone_calls",
              "options": {
                "as": "phoneable"
              },
              "raw_options": "as: :phoneable"
            },
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "notes",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "inquiries",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "company_metric",
        "name_plural": "company_metrics",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/company_metric.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CompanyMetric < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :company\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "contact_group",
        "name_plural": "contact_groups",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_group.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ContactGroup < ActiveRecord::Base\n  has_and_belongs_to_many :contacts\n  belongs_to :tenant\n  belongs_to :company\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [
            {
              "name": "contacts",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "contact_groups_contact",
        "name_plural": "contact_groups_contacts",
        "dsl_file": ""
      },
      {
        "name": "contact_list_count",
        "name_plural": "contact_list_counts",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list_count.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ContactListCount < ActiveRecord::Base\n  belongs_to :contact_list\n  belongs_to :tenant\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "contact_list",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "contact_list_exclusion",
        "name_plural": "contact_list_exclusions",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list_exclusion.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ContactListExclusion < ActiveRecord::Base\n  belongs_to :contact\n  belongs_to :contact_list\n  belongs_to :tenant\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact_list",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "contact_list_rule",
        "name_plural": "contact_list_rules",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list_rule.rb",
        "source": {
          "ruby": "class ContactListRule < ActiveRecord::Base\n  belongs_to :contact_list\n  belongs_to :taken_by\n  # belongs_to :sales_rep # conflict with private method\n\n  attr_accessor :date_format\n\n  validate do |rule|\n    if rule.contact_list.global\n      rule.sales_rep_id = nil\n      rule.taken_by_id = nil\n    end\n\n    if ContactListRule.get_type(rule.category).nil? && ContactListRule.get_modifiers(rule.category).nil?\n      rule.errors[:base] << \"Invalid Category.\"\n    else\n\n      if ContactListRule.exists?(contact_list_id: rule.contact_list.id, category: rule.category, operand: rule.operand, value: rule.value, value2: rule.value2, modifier: rule.modifier, modifier_operand: rule.modifier_operand, modifier_value: rule.modifier_value, modifier_value2: rule.modifier_value2, modifier2: rule.modifier2, modifier2_operand: rule.modifier2_operand, modifier2_value: rule.modifier2_value, modifier2_value2: rule.modifier2_value2, negate: rule.negate, sales_rep_id: rule.sales_rep_id, taken_by_id: rule.taken_by_id)\n        rule.errors[:base] << \"This rule already exists.\"\n      end\n\n      if !ContactListRule.get_type(rule.category).nil?\n        if rule.logical_operand == \"unknown\"\n          rule.errors[:base] << \"Invalid Operand.\"\n        else\n          case ContactListRule.get_type(rule.category)\n          when \"numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"inverted_numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"inverted_integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"existence\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"boolean\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"value\"\n            case rule.category\n            when \"company_status\"\n              rule.errors[:base] << \"Invalid value.\" unless ContactListRule.company_status.any? { |possible_value| possible_value[1] == value }\n            when \"lead_stage\"\n              if value != \"any\"\n                lead_stage = ProspectStatus.where(id: value).first\n                rule.errors[:base] << \"Invalid lead stage.\" unless lead_stage\n              end\n            when \"lead_type\"\n              lead_type = LeadType.where(id: value).first\n              rule.errors[:base] << \"Invalid lead type.\" unless lead_type\n            when \"privacy\"\n              if !rule.contact_list.enterprise.privacy_types.include?(value)\n                rule.errors[:base] << \"Invalid privacy option.\"\n              end\n            else\n              rule.errors[:base] << \"Unhandled value validation.\"\n            end\n          when \"match\"\n            rule.errors[:base] << \"Invalid value.\" if rule.value.blank?\n            rule.value2 = \"\"\n          when \"tag\"\n            tag_category = TagCategory.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Tag.\" if tag_category.nil?\n            rule.value2 = \"\"\n          when \"campaign\"\n            campaign = Campaign.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Campaign.\" if campaign.nil?\n            if rule.value2.blank?\n              rule.value2 = \"\"\n            elsif %w[opened not_opened].include?(rule.value2)\n              # Do nothing\n            else\n              rule.errors[:base] << \"Invalid Campaign send status.\" if campaign.nil?\n            end\n\n          when \"date\"\n            rule.errors[:base] << \"Date is invalid.\" unless date_validate?(rule.value, rule.date_format)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date is invalid.\" unless date_validate?(rule.value2, rule.date_format)\n            end\n          when \"relative_date\"\n            rule.errors[:base] << \"Date must be a relative date. (Such as '3 days ago')\" unless date_relative_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a relative date. (Such as '3 days ago').\" unless date_relative_validate?(rule.value2)\n            end\n          when \"quarter\"\n            rule.errors[:base] << \"Date must be a quarter.\" unless quarter_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a quarter.\" unless quarter_validate?(rule.value2)\n            end\n          when \"sales_rep\"\n            if contact_list.tenant.sales_rep_for_locations\n              location = Location.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Location.\" if location.nil?\n            else\n              sales_rep = User.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Sales Rep.\" if sales_rep.nil?\n            end\n          when \"estimates_status\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"industry\"\n            valid = false\n            industries = rule.value.try(:split, \",\") || []\n            if industries.count > 0\n              valid = (industries - Company.sub_industries_hash.map { |item| item[\"name\"] }).empty?\n            end\n            rule.value2 = \"\"\n            rule.errors[:base] << \"Invalid Industry\" if !valid\n          else\n            rule.errors[:base] << \"Unhandled validation.\"\n          end\n        end\n      end\n\n      if !rule.modifier.blank?\n        errors = rule.valid_modifier?(1)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n      if !rule.modifier2.blank?\n        errors = rule.valid_modifier?(2)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n    end\n  end\n\n  def valid_modifier?(use_modifier = 1)\n    errors = []\n    current_modifier = modifier\n    current_modifier_operand = modifier_operand\n    current_modifier_value = modifier_value\n    current_modifier_value2 = modifier_value2\n    if use_modifier == 2\n      current_modifier = modifier2\n      current_modifier_operand = modifier2_operand\n      current_modifier_value = modifier2_value\n      current_modifier_value2 = modifier2_value2\n    end\n    if !ContactListRule.get_modifiers(category, use_modifier).include?(current_modifier)\n      errors << \"Invalid Modifier.\"\n    else\n      if logical_operand(use_modifier) == \"unknown\"\n        errors << \"Invalid Modifier Operand.\"\n      else\n        case current_modifier\n        when \"date\"\n          errors << \"Date is invalid.\" unless date_validate?(current_modifier_value, date_format)\n          if current_modifier_operand == \"between\"\n            errors << \"Second date is invalid.\" unless date_validate?(current_modifier_value2, date_format)\n          end\n        when \"relative_date\"\n          errors << \"Date must be a relative date. (Such as '3 days ago')\" unless date_relative_validate?(current_modifier_value)\n          if current_modifier_operand == \"between\"\n            errors << \"Second date must be a relative date. (Such as '3 days ago').\" unless date_relative_validate?(current_modifier_value2)\n          end\n        when \"quarter\"\n          errors << \"Date must be a quarter.\" unless quarter_validate?(current_modifier_value)\n          if current_modifier_operand == \"between\"\n            errors << \"Second date must be a quarter.\" unless quarter_validate?(current_modifier_value2)\n          end\n        when \"estimates_status\"\n        else\n          errors << \"Unhandled validation.\"\n        end\n      end\n    end\n    errors\n  end\n\n  def self.categories_for_dropdown(target_tenant, list)\n    result = []\n\n    ContactListRule.categories.each do |category, data|\n      next if list.global && data[:hide_when_global]\n      next if !data[:platform].nil? && !data[:platform].include?(target_tenant.enterprise.platform_type)\n\n      name = I18n.t_prefix(category, target_tenant)\n      if target_tenant.sales_rep_for_locations && category == \"sales_rep\"\n        name = I18n.t(\"location\")\n      end\n      result << [name, category]\n    end\n    result\n  end\n\n  def self.categories\n    {\n      \"total_sales\" => {primary: \"numeric\", modifiers: %w[date relative_date quarter]},\n      \"web_sales\" => {primary: \"numeric\", modifiers: %w[date relative_date quarter]},\n      \"single_sale\" => {primary: \"numeric\", modifiers: %w[date relative_date quarter]},\n      \"single_estimate\" => {primary: \"numeric\", platform: [\"printsmith\"], modifiers: %w[date relative_date quarter], modifiers2: [\"estimates_status\"]},\n      \"sales_per_month\" => {primary: \"integer\", modifiers: %w[date relative_date quarter]},\n      \"sales_per_month_by_company\" => {primary: \"integer\", modifiers: %w[date relative_date quarter]},\n      \"contact_created_date\" => {modifiers: %w[date relative_date quarter]},\n      \"company_created_date\" => {modifiers: %w[date relative_date quarter]},\n      \"last_pickup_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"last_order_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"first_order_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"first_sale_date\" => {modifiers: %w[date relative_date quarter]},\n      \"first_estimate_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"last_estimate_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"email_address\" => {direct: true, primary: \"existence\"},\n      \"phone_number\" => {direct: true, primary: \"existence\"},\n      \"walk_in\" => {direct: true, primary: \"boolean\"},\n      \"prospect\" => {direct: true, primary: \"boolean\"},\n      \"statement_contact\" => {direct: true, primary: \"boolean\", platform: [\"printsmith\"]},\n      \"invoice_contact\" => {direct: true, primary: \"boolean\"},\n      \"company_status\" => {direct: true, platform: [\"printsmith\"], primary: \"value\"},\n      \"buy_frequency\" => {direct: true, primary: \"numeric\"},\n      \"orders_in_progress\" => {platform: [\"printsmith\"] , primary: \"boolean\"},\n      \"address\" => {direct: true, primary: \"existence\"},\n      \"company_ranking\" => {direct: true, primary: \"numeric\"},\n      \"contact_ranking\" => {direct: true, primary: \"inverted_numeric\"},\n      \"tag_match\" => {direct: true, primary: \"tag\"},\n      \"sent_campaign\" => {primary: \"campaign\", modifiers: %w[date relative_date quarter]},\n      \"first_name\" => {direct: true, primary: \"existence\"},\n      \"estimates_in_progress\" => {primary: \"boolean\", platform: [\"printsmith\"]},\n      \"estimates_status\" => {primary: \"estimates_status\", platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"contact_growth\" => {direct: true, primary: \"numeric\"},\n      \"company_growth\" => {direct: true, primary: \"numeric\"},\n      \"average_invoice\" => {direct: true, primary: \"numeric\"},\n      \"sales_rep\" => {direct: true, hide_when_global: true, primary: \"sales_rep\"},\n      \"days_since_single_sale\" => {primary: \"numeric\"},\n      \"industry\" => {primary: \"industry\"},\n      \"estimate_ordered_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"invoice_ordered_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"lead_stage\" => {primary: \"value\"},\n      \"lead_type\" => {direct: true, primary: \"value\"},\n      \"days_since_last_pickup_date\" => {primary: \"numeric\", platform: [\"printsmith\"]},\n      \"days_since_last_sale_date\" => {platform: [\"mbe\"], primary: \"numeric\"},\n      \"first_shipment_date\" => {platform: [\"mbe\"], modifiers: %w[date relative_date quarter]},\n      \"last_shipment_date\" => {platform: [\"mbe\"], modifiers: %w[date relative_date quarter]},\n      \"last_sale_date\" => {platform: [\"mbe\"], modifiers: %w[date relative_date quarter]},\n      \"privacy\" => {direct: true, primary: \"value\", platform: [\"mbe\"]}\n    }\n  end\n\n  def self.numeric_operands\n    {\n      \"greater_than\" => \">\",\n      \"equal_to_or_greater_than\" => \">=\",\n      \"less_than\" => \"<\",\n      \"equal_to_or_less_than\" => \"<=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.inverted_numeric_operands\n    {\n      \"greater_than\" => \"<\",\n      \"equal_to_or_greater_than\" => \"<=\",\n      \"less_than\" => \">\",\n      \"equal_to_or_less_than\" => \">=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.integer_operands\n    {\n      \"greater_than\" => \">\",\n      \"equal_to_or_greater_than\" => \">=\",\n      \"less_than\" => \"<\",\n      \"equal_to_or_less_than\" => \"<=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.inverted_integer_operands\n    {\n      \"greater_than\" => \"<\",\n      \"equal_to_or_greater_than\" => \"<=\",\n      \"less_than\" => \">\",\n      \"equal_to_or_less_than\" => \">=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.date_operands\n    {\n      \"before\" => \"<\",\n      \"after\" => \">\",\n      \"on\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.relative_date_operands\n    {\n      \"before\" => \"<\",\n      \"after\" => \">\",\n      \"on\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.quarter_operands\n    {\n      \"before\" => \"<\",\n      \"after\" => \">\",\n      \"during\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.existence_operands\n    {\n      \"exists\" => \"IS NOT NULL\",\n      \"not_exists\" => \"IS NULL\"\n    }\n  end\n\n  def self.boolean_operands\n    {\n      \"true\" => true,\n      \"false\" => false\n    }\n  end\n\n  def self.value_operands\n    {\n      \"is\" => \"=\",\n      \"is_not\" => \"!=\"\n    }\n  end\n\n  def self.match_operands\n    {\n      \"matches\" => \"ILIKE\",\n      \"does_not_match\" => \"NOT ILIKE\"\n    }\n  end\n\n  def self.tag_operands\n    {\n      \"matches\" => \"=\",\n      \"does_not_match\" => \"!=\"\n    }\n  end\n\n  def self.campaign_operands\n    {\n      \"sent\" => \"=\"\n    }\n  end\n\n  def self.sales_rep_operands\n    {\n      \"is\" => \"=\",\n      \"is_not\" => \"!=\"\n    }\n  end\n\n  def self.estimates_status_operands\n    {\n      \"won\" => \"Won\",\n      \"neutral\" => \"Neutral\",\n      \"lost\" => \"Lost\",\n      \"any\" => \"\"\n    }\n  end\n\n  def self.industry_operands\n    {\n      \"is\" => \"=\"\n    }\n  end\n\n  def self.quarters\n    [\n      [\"This Quarter\", \"this_quarter\"],\n      [\"Last Quarter\", \"last_quarter\"],\n      [\"First Quarter\", \"quarter_1\"],\n      [\"Second Quarter\", \"quarter_2\"],\n      [\"Third Quarter\", \"quarter_3\"],\n      [\"Fourth Quarter\", \"quarter_4\"],\n      [\"First Quarter Last Year\", \"quarter_1_last_year\"],\n      [\"Second Quarter Last Year\", \"quarter_2_last_year\"],\n      [\"Third Quarter Last Year\", \"quarter_3_last_year\"],\n      [\"Fourth Quarter Last Year\", \"quarter_4_last_year\"]\n    ]\n  end\n\n  def self.company_status\n    [\n      %w[Delinquent CustomerStatusDelinquent],\n      %w[Inactive CustomerStatusInactive],\n      [\"Past Due\", \"CustomerStatusPastDue\"],\n      %w[Frozen CustomerStatusFrozen],\n      %w[New CustomerStatusNew],\n      %w[Current CustomerStatusCurrent]\n    ]\n  end\n\n  def get_sql(tenant)\n    category_method = method(category.to_sym) if respond_to?(category.to_sym, true)\n    if category_method\n      # category_method.call(tenant).select(\"contacts.id\").marketing(tenant).group(\"contacts.id\").to_sql\n      sql = category_method.call(tenant)\n      return \"\" if sql.blank?\n      if ContactListRule.is_direct?(category)\n        expression = negate? ? \"NOT\" : \"\"\n        sql = \" AND #{expression} (#{sql})\"\n      else\n        expression = negate? ? \"NOT EXISTS\" : \"EXISTS\"\n        sql = \" AND #{expression}(#{sql})\"\n      end\n    end\n    sql\n  end\n\n  def get_rule_text(tenant)\n    result = \"unknown\"\n    method_name = \"#{category}_text\"\n    category_text_method = method(method_name.to_sym) if respond_to?(method_name.to_sym, true)\n    if category_text_method\n      result = category_text_method.call(tenant)\n    end\n    result.html_safe\n  end\n\n  def get_mbe_rule_text(tenant)\n    result = []\n    result << negate_text(I18n.t(\"exclude\").upcase) if negate\n\n    if !operand.blank?\n      op_text = I18n.t(\"#{operand}\")\n      value_t = resolve_value if %w[sent_campaign tag_match lead_stage lead_type privacy industry].include?(category) && !value.blank?\n      op_value_text = \": #{value_t ? value_t : value}\" if !value.blank?\n      op_value_text += \" & #{value2}\" if operand == \"between\"\n\n      result << \"<b>#{op_text}</b>#{op_value_text}\"\n    end\n\n    if !modifier.blank?\n      mod_text = modifier == \"date\" ? I18n.t(\"date.word\") : I18n.t(\"#{modifier}\")\n      if %w[sales_per_month sales_per_month_by_company].include?(category)\n        mod_op_text = I18n.t(\"between\")\n        mod_value_text = per_month_text(tenant)\n      else\n        mod_op_text = I18n.t(\"#{modifier_operand}\")\n        mod_value_text = modifier == \"quarter\" ? \" #{I18n.t(\"#{modifier_value}\")}\" : \" #{modifier_value}\"\n        mod_value_text += modifier == \"quarter\" ? \" & #{I18n.t(\"#{modifier_value2}\")}\" : \" & #{modifier_value2}\" if !modifier_value2.blank?\n      end\n\n      result << \"<b>#{mod_text}</b>: #{mod_op_text} #{mod_value_text}\"\n    end\n\n    if !sales_rep_id.blank?\n      rep_name = User.find_by(id: sales_rep_id).full_name\n      result << \"<b>#{I18n.t(\"platform.sales_rep\", mbe: true)}:</b> #{rep_name}\"\n    end\n\n    result.join(\", \").html_safe\n  end\n\n  def per_month_text(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n    start_month = I18n.l(start_date, format: \"%B %Y\")\n    end_month = I18n.l(end_date, format: \"%B %Y\")\n    \" #{start_month} & #{end_month}\"\n  end\n\n  def resolve_value\n    case category\n    when \"sent_campaign\"\n      result = Campaign.unscoped.where(id: value).first.try(:name)\n    when \"tag_match\"\n      result = TagCategory.unscoped.where(id: value).first.try(:name)\n    when \"lead_stage\"\n      result = value == \"any\" ? I18n.t(\"any\") : ProspectStatus.where(id: value).first.try(:name)\n    when \"lead_type\"\n      result = LeadType.where(id: value).first.try(:name)\n    when \"privacy\"\n      result = I18n.t(\"privacy.#{value}\")\n    when \"industry\"\n      result = []\n      industries = value.split(\",\")\n      industries.each do |industry|\n        result << I18n.t(\"industries.#{Company.industries.key(industry)}\")\n      end\n      result = result.join(\",\")\n    end\n    result\n  end\n\n  def set_month_range(date1, date2)\n    if date1.nil?\n      date1 = DateTime.now\n      date2 = DateTime.now - 1.year\n    end\n\n    if date2.nil?\n      if modifier_operand == \"on\"\n        date2 = date1\n      elsif modifier_operand == \"before\"\n        date2 = date1 - 1.year\n      else\n        date2 = DateTime.now\n      end\n    end\n\n    start_date = date1.beginning_of_month\n    end_date = date2.end_of_month\n    if start_date > end_date\n      start_date = date2.beginning_of_month\n      end_date = date1.end_of_month\n    end\n    [start_date, end_date]\n  end\n\n  def get_rule_contextuals(tenant, contacts)\n    result = {}\n    method_name = \"#{category}_contextuals\"\n    category_contextuals_method = method(method_name.to_sym) if respond_to?(method_name.to_sym, true)\n    if category_contextuals_method\n      result = category_contextuals_method.call(tenant, contacts)\n    end\n    result\n  end\n\n  def contacts(tenant, page = nil, per = nil)\n    query = contacts_query(tenant, page, per)\n    if query.blank?\n      result = Contact.none\n      total_count = 0\n    else\n      result = Contact.find_by_sql(query)\n      total_count = result.first.try(:total_count) || 0\n    end\n    Kaminari.paginate_array(result, total_count: total_count).page(page).per(per)\n  end\n\n  def contacts_query(tenant, page = nil, per = nil)\n    page ||= 1\n    per ||= 10\n    offset = (page.to_i - 1) * per\n\n    rule_condition = get_sql(tenant)\n\n    if !rule_condition.blank?\n      limit = \"LIMIT #{per} OFFSET #{offset}\" unless page.to_i <= 0\n      query = %Q{\n        SELECT contacts.*, (COUNT(*) OVER()) AS total_count\n        FROM contacts\n        LEFT OUTER JOIN companies ON companies.id = contacts.company_id\n        WHERE contacts.tenant_id = #{tenant.id}\n        #{contact_list.account_type_query}\n        AND contacts.deleted = false\n        AND contacts.unsubscribed = false\n        AND companies.marketing_do_not_mail = false\n        AND NOT EXISTS ( SELECT null FROM email_soft_bounces WHERE email_soft_bounces.tenant_id = #{tenant.id} AND LOWER(BTRIM(contacts.email)) = email_soft_bounces.email_address AND soft_bounce_count >= 3 )\n        #{rule_condition}\n        ORDER BY contacts.id DESC NULLS LAST\n        #{limit}\n      }\n    end\n\n    query\n  end\n\n  def self.is_direct?(category)\n    result = ContactListRule.categories[category.to_s][:direct] if ContactListRule.categories.has_key?(category.to_s)\n    result.nil? ? false : result\n  end\n\n  def self.get_type(category)\n    result = ContactListRule.categories[category.to_s][:primary] if ContactListRule.categories.has_key?(category.to_s)\n    result\n  end\n\n  def self.get_modifiers(category, use_modifier = 1)\n    result = ContactListRule.categories[category.to_s][:modifiers] if ContactListRule.categories.has_key?(category.to_s)\n    if use_modifier == 2\n      result = ContactListRule.categories[category.to_s][:modifiers2] if ContactListRule.categories.has_key?(category.to_s)\n    end\n    result = [] if result.nil?\n    result\n  end\n\n  def logical_operand(use_modifier = 0)\n    result = \"unknown\"\n    target = operand\n    type = ContactListRule.get_type(category)\n    case use_modifier\n    when 1\n      target = modifier_operand\n      type = modifier\n    when 2\n      target = modifier2_operand\n      type = modifier2\n    end\n    method_name = \"#{type}_operands\"\n    operands_method = ContactListRule.method(method_name) if ContactListRule.respond_to?(method_name, true)\n    if operands_method\n      operands = operands_method.call\n      result = operands[target.to_s] if operands.has_key?(target.to_s)\n    end\n    result\n  end\n\n  def logical_operand_name(use_modifier = 0)\n    result = \"unknown\"\n    target = operand\n    type = ContactListRule.get_type(category)\n    case use_modifier\n    when 1\n      target = modifier_operand\n      type = modifier\n    when 2\n      target = modifier2_operand\n      type = modifier2\n    end\n    method_name = \"#{type}_operands\"\n    operands_method = ContactListRule.method(method_name) if ContactListRule.respond_to?(method_name, true)\n    if operands_method\n      operands = operands_method.call\n      result = target.to_s if operands.has_key?(target.to_s)\n    end\n    result\n  end\n\n  private\n\n  def numeric_validate?(value)\n    begin\n      Float(value)\n      true\n    rescue StandardError\n      false\n    end\n  end\n\n  def integer_validate?(value)\n    begin\n      Integer(value)\n      true\n    rescue StandardError\n      false\n    end\n  end\n\n  def date_validate?(value, date_format)\n    result = false\n    begin\n      parsed_date = Date.strptime(value, date_format)\n      result = true if parsed_date.year >= 0 && parsed_date.year < 10000\n    rescue StandardError\n    end\n    result\n  end\n\n  def date_relative_validate?(value)\n    result = false\n    begin\n      parsed_date = Chronic.parse(value)\n      result = true if !parsed_date.nil? && parsed_date.year >= 0 && parsed_date.year < 10000\n    rescue StandardError\n    end\n    result\n  end\n\n  def quarter_validate?(value)\n    valid = false\n    ContactListRule.quarters.each do |quarter|\n      if quarter[1] == value\n        valid = true\n        break\n      end\n    end\n    valid\n  end\n\n  def parse_quarter(quarter)\n    case quarter\n    when \"this_quarter\"\n      {start_time: Time.now.beginning_of_quarter, end_time: Time.now.end_of_quarter}\n    when \"last_quarter\"\n      {start_time: 3.months.ago.beginning_of_quarter, end_time: 3.months.ago.end_of_quarter}\n    when \"quarter_1\"\n      {start_time: Time.parse(\"January 1\"), end_time: Time.parse(\"January 1\").end_of_quarter}\n    when \"quarter_2\"\n      {start_time: Time.parse(\"April 1\"), end_time: Time.parse(\"April 1\").end_of_quarter}\n    when \"quarter_3\"\n      {start_time: Time.parse(\"July 1\"), end_time: Time.parse(\"July 1\").end_of_quarter}\n    when \"quarter_4\"\n      {start_time: Time.parse(\"October 1\"), end_time: Time.parse(\"October 1\").end_of_quarter}\n    when \"quarter_1_last_year\"\n      {start_time: Time.parse(\"January 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"January 1 #{Time.now.year - 1}\").end_of_quarter}\n    when \"quarter_2_last_year\"\n      {start_time: Time.parse(\"April 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"April 1 #{Time.now.year - 1}\").end_of_quarter}\n    when \"quarter_3_last_year\"\n      {start_time: Time.parse(\"July 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"July 1 #{Time.now.year - 1}\").end_of_quarter}\n    when \"quarter_4_last_year\"\n      {start_time: Time.parse(\"October 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"October 1 #{Time.now.year - 1}\").end_of_quarter}\n    end\n  end\n\n  def get_modifier_dates(tenant, use_modifier = 1)\n    current_modifier = modifier\n    current_modifier_operand = modifier_operand\n    current_modifier_value = modifier_value\n    current_modifier_value2 = modifier_value2\n    if use_modifier == 2\n      current_modifier = modifier2\n      current_modifier_operand = modifier2_operand\n      current_modifier_value = modifier2_value\n      current_modifier_value2 = modifier2_value2\n    end\n\n    date1 = nil\n    date2 = nil\n    case current_modifier\n    when \"date\"\n      date1 = Date.strptime(current_modifier_value, contact_list.tenant.date_format).try(:in_time_zone, tenant.time_zone)\n      date2 = Date.strptime(current_modifier_value2, contact_list.tenant.date_format).try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"between\"\n    when \"relative_date\"\n      date1 = Chronic.parse(current_modifier_value).try(:in_time_zone, tenant.time_zone)\n      date2 = Chronic.parse(current_modifier_value2).try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"between\"\n    when \"quarter\"\n      date1 = parse_quarter(current_modifier_value)[:start_time].try(:in_time_zone, tenant.time_zone)\n      date2 = parse_quarter(current_modifier_value)[:end_time].try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"during\"\n      date2 = parse_quarter(current_modifier_value2)[:end_time].try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"between\"\n    end\n    [date1, date2]\n  end\n\n  def negate_text(text)\n    \"<span style=\\\"color:#ff0000\\\"><b>#{text}</b></span>\"\n  end\n\n  def total_sales(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING SUM(invoices.grand_total) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING SUM(invoices.grand_total) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND invoices.pickup_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND invoices.pickup_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR invoices.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (invoices.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      #{modifier_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def total_sales_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value}#{between_value} in sales\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def web_sales(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING SUM(invoices.grand_total) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING SUM(invoices.grand_total) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND invoices.pickup_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND invoices.pickup_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR invoices.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (invoices.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      AND invoices.web = true\n      #{modifier_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def web_sales_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value}#{between_value} in web sales\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def single_sale(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"AND invoices.grand_total BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"AND invoices.grand_total #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND invoices.pickup_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND invoices.pickup_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR invoices.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (invoices.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      AND invoices.pickup_date IS NOT NULL\n      #{modifier_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def single_sale_contextuals(tenant, contacts)\n    result = {}\n    sales = Sale.joins(:contact).where(contact_id: contacts.map { |contact| contact.id }).order(created_at: :asc)\n    if logical_operand_name == \"between\"\n      sales = sales.where(\"((invoices.grand_total >= ? AND invoices.grand_total <= ?) OR (invoices.grand_total <= ? AND invoices.grand_total >= ?))\", value, value2, value, value2)\n    else\n      sales = sales.where(\"invoices.grand_total #{logical_operand} ?\", value)\n    end\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        sales = sales.where(\"((invoices.pickup_date >= ? AND invoices.pickup_date <= ?) OR (invoices.pickup_date <= ? AND invoices.pickup_date >= ?))\", date1, date2, date1, date2)\n      elsif !date1.nil?\n        sales = sales.where(\"invoices.pickup_date #{logical_operand(1)} ?\", date1)\n      end\n    end\n    if !sales_rep_id.blank?\n      sales = sales.joins(\"INNER JOIN sales_reps ON sales_reps.platform_id = invoices.sales_rep_platform_id\").where(sales_reps: {user_id: sales_rep_id})\n    end\n    contacts.each do |contact|\n      invoice_numbers = []\n      invoice_totals = []\n      sales.each do |sale|\n        if sale.contact_id == contact.id\n          invoice_numbers << sale.invoice_number\n          invoice_totals << sale.grand_total\n        end\n      end\n      result[contact.id] = {invoice_numbers: invoice_numbers, invoice_totals: invoice_totals}\n    end\n    result\n  end\n\n  def single_sale_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have a \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{\"single\".humanize(capitalize: negate ? false : true)} sale #{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def single_estimate(tenant)\n    primary_condition = \"\"\n    if logical_operand_name == \"between\"\n      primary_condition = \"AND estimates.grand_total BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"AND estimates.grand_total #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    modifier_condition = \"\"\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND estimates.ordered_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND estimates.ordered_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    modifier2_condition = \"\"\n    if !modifier2.blank?\n      modifier2_condition = \"AND estimates.status = '#{logical_operand(2)}'\" if !logical_operand(2).blank?\n    end\n\n    sales_rep_condition = \"\"\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR estimates.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    taken_by_condition = \"\"\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (estimates.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n      #{modifier_condition}\n      #{modifier2_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def single_estimate_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have a \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{\"single\".humanize(capitalize: negate ? false : true)} estimate #{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !modifier2.blank?\n      result = \"#{result} with a status of #{logical_operand_name(2).humanize(capitalize: false)}\" if !logical_operand(2).blank?\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def sales_per_month(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING COUNT(invoices.id) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING COUNT(invoices.id) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n\n    if start_date.month == end_date.month && start_date.year == end_date.year\n      number_of_months = 1\n    else\n      number_of_months = (end_date.year * 12 + end_date.month) - (start_date.year * 12 + start_date.month) + 1\n    end\n    modifier_condition = \"AND invoices.pickup_date BETWEEN #{ActiveRecord::Base::sanitize(start_date)} AND #{ActiveRecord::Base::sanitize(end_date)}\"\n    modifier_condition2 = \"HAVING COUNT(*) = #{number_of_months}\"\n\n    %Q{\n      SELECT null\n      FROM (\n        SELECT null\n        FROM invoices\n        WHERE invoices.contact_id = contacts.id\n        #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n        AND invoices.voided = false\n        AND invoices.deleted = false\n        AND pickup_date IS NOT NULL\n        #{modifier_condition}\n        GROUP BY date_trunc('month', pickup_date)\n        #{primary_condition}\n      ) by_month\n      #{modifier_condition2}\n\n    }\n  end\n\n  def sales_per_month_text(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n\n    start_month = start_date.strftime(\"%B %Y\")\n    end_month = end_date.strftime(\"%B %Y\")\n\n    if negate\n      preamble = \"#{negate_text(\"Does not\")} have \"\n    else\n      preamble = \"Has \"\n    end\n\n    result = \"#{preamble}#{logical_operand_name.humanize(capitalize: false)} #{value} sales every month between #{start_month} and #{end_month}\"\n    result\n  end\n\n  def sales_per_month_by_company(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING COUNT(invoices.id) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING COUNT(invoices.id) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n\n    if start_date.month == end_date.month && start_date.year == end_date.year\n      number_of_months = 1\n    else\n      number_of_months = (end_date.year * 12 + end_date.month) - (start_date.year * 12 + start_date.month) + 1\n    end\n    modifier_condition = \"AND invoices.pickup_date BETWEEN #{ActiveRecord::Base::sanitize(start_date)} AND #{ActiveRecord::Base::sanitize(end_date)}\"\n    modifier_condition2 = \"HAVING COUNT(*) = #{number_of_months}\"\n\n    %Q{\n      SELECT null\n      FROM (\n        SELECT null\n        FROM invoices\n        WHERE invoices.company_id = contacts.company_id\n        #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n        AND invoices.voided = false\n        AND invoices.deleted = false\n        AND pickup_date IS NOT NULL\n        #{modifier_condition}\n        GROUP BY date_trunc('month', pickup_date)\n        #{primary_condition}\n      ) by_month\n      #{modifier_condition2}\n\n    }\n  end\n\n  def sales_per_month_by_company_text(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if date1.nil?\n      date1 = DateTime.now\n      date2 = DateTime.now - 1.year\n    end\n\n    if date2.nil?\n      if modifier_operand == \"on\"\n        date2 = date1\n      elsif modifier_operand == \"before\"\n        date2 = date1 - 1.year\n      else\n        date2 = DateTime.now\n      end\n    end\n\n    start_date = date1.beginning_of_month\n    end_date = date2.end_of_month\n    if start_date > end_date\n      start_date = date2.beginning_of_month\n      end_date = date1.end_of_month\n    end\n\n    start_month = start_date.strftime(\"%B %Y\")\n    end_month = end_date.strftime(\"%B %Y\")\n\n    if negate\n      preamble = \"#{negate_text(\"Does not\")} have \"\n    else\n      preamble = \"Has \"\n    end\n\n    result = \"#{preamble}#{logical_operand_name.humanize(capitalize: false)} #{value} sales by company every month between #{start_month} and #{end_month}\"\n    result\n  end\n\n  # CREATED DATE\n  def contact_created_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING i_contacts.source_created_at BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING i_contacts.source_created_at #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n\n    %Q{\n      SELECT null\n      FROM contacts i_contacts\n      WHERE i_contacts.id = contacts.id\n      GROUP BY id\n      #{primary_condition}\n    }\n  end\n\n  def contact_created_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Contact created date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def company_created_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING companies.company_created_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING companies.company_created_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM companies\n      WHERE companies.id = contacts.company_id\n      GROUP BY id\n      #{primary_condition}\n    }\n  end\n\n  def company_created_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Company created date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def industry(tenant)\n    industries = value.try(:split, \",\")\n    sanatized_csv = industries.map { |s| \"'#{s}'\" }.to_csv\n    %Q{\n      SELECT null\n      FROM companies\n      WHERE companies.id = contacts.company_id\n      AND (\n        companies.custom_data->'category'->>'subIndustry' IN (#{sanatized_csv})\n        OR (\n          (companies.custom_data->'category'->>'subIndustry' IS NULL OR companies.custom_data->'category'->>'subIndustry' = '')\n          AND\n          companies.clearbit_data->'category'->>'subIndustry' IN (#{sanatized_csv})\n        )\n      )\n      GROUP BY id\n    }\n  end\n\n  def industry_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Company industry is #{negate_text}#{value}\"\n    result\n  end\n\n  def last_order_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(invoices.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(invoices.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def last_order_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  # LAST ESTIMATE\n\n  def last_estimate_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(estimates.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(estimates.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def last_estimate_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last estimate date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_shipment_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(shipments.shipment_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(shipments.shipment_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM shipments\n      WHERE contact_id = contacts.id\n      AND shipments.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def first_shipment_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First shipment date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def last_shipment_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(shipments.shipment_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(shipments.shipment_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM shipments\n      WHERE contact_id = contacts.id\n      AND shipments.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def last_shipment_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last shipment date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_order_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(invoices.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(invoices.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def first_order_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_sale_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(invoices.pickup_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(invoices.pickup_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      AND invoices.pickup_date IS NOT NULL\n\n      #{primary_condition}\n    }\n  end\n\n  def first_sale_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First sale date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_estimate_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(estimates.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(estimates.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def first_estimate_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First estimate date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def estimate_ordered_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(estimates.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(estimates.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def estimate_ordered_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Estimate order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def invoice_ordered_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(invoices.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(invoices.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def invoice_ordered_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Invoice order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def days_since_single_sale(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value.to_i)} AND #{ActiveRecord::Base::sanitize(value2.to_i)}\"\n    else\n      primary_condition = \"#{logical_operand} #{ActiveRecord::Base::sanitize(value.to_i)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE invoices.contact_id = contacts.id\n      AND invoices.pickup_date IS NOT NULL\n      AND invoices.voided = FALSE\n      AND invoices.deleted = FALSE\n      HAVING COUNT(*) = 1\n      AND DATE_PART('day', NOW() - MIN(invoices.pickup_date)) #{primary_condition}\n    }\n  end\n\n  def days_since_single_sale_text(tenant)\n    negate_text = \"#{negate_text(\"no\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Contact has #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value} days since their first and only sale\"\n    result\n  end\n\n  def last_sale_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(invoices.pickup_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(invoices.pickup_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def last_sale_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last pickup date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def last_pickup_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(invoices.pickup_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(invoices.pickup_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def last_pickup_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last pickup date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def days_since_last_pickup_date(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) BETWEEN SYMMETRIC interval '#{value.to_i} day' AND interval '#{value2.to_i} day'\"\n    else\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) #{logical_operand} interval '#{value.to_i} day'\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def days_since_last_sale_date_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value} days since last pickup date.\"\n    result\n  end\n\n  def days_since_last_sale_date(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) BETWEEN SYMMETRIC interval '#{value.to_i} day' AND interval '#{value2.to_i} day'\"\n    else\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) #{logical_operand} interval '#{value.to_i} day'\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def days_since_last_pickup_date_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value} days since last pickup date.\"\n    result\n  end\n\n  def email_address(tenant)\n    if operand == \"exists\"\n      \"(contacts.email LIKE '%@%')\"\n    else\n      \"(contacts.email NOT LIKE '%@%')\"\n    end\n  end\n\n  def email_address_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"Email address #{negate_text(\"does not\")} exist\"\n    else\n      \"Email address exists\"\n    end\n  end\n\n  def phone_number(tenant)\n    if operand == \"exists\"\n      \"(length(contacts.phone) > 0 OR length(contacts.mobile) > 0)\"\n    else\n      \"((contacts.phone IS NULL OR length(contacts.phone) = 0) AND (contacts.mobile IS NULL OR length(contacts.mobile) = 0))\"\n    end\n  end\n\n  def phone_number_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"Phone number #{negate_text(\"does not\")} exist\"\n    else\n      \"Phone number exists\"\n    end\n  end\n\n  def prospect(tenant)\n    \"companies.prospect = #{logical_operand}\"\n  end\n\n  def prospect_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a prospect\"\n  end\n\n  def lead_stage(tenant)\n    primary_condition = \"\"\n    if value == \"any\"\n      primary_condition = \"c.prospect_status_id IS NOT NULL\"\n    else\n      # primary_condition = \"c.prospect_status_id = #{ActiveRecord::Base::sanitize(value)}\"\n      primary_condition = \"ps_old.id = #{ActiveRecord::Base::sanitize(value)}\"\n    end\n    %Q{\n      SELECT null\n      FROM contacts c\n      LEFT JOIN prospect_statuses ON prospect_statuses.id = c.prospect_status_id\n      LEFT JOIN prospect_statuses ps_old ON ps_old.name = prospect_statuses.name\n      WHERE c.id = contacts.id\n      AND #{primary_condition}\n    }\n  end\n\n  def lead_stage_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    if value == \"any\"\n      result = \"Contact is #{negate_text}a Lead\"\n    else\n      lead_stage = ProspectStatus.where(id: value).first\n      lead_stage_name = \"Unknown\"\n      lead_stage_name = lead_stage.name if lead_stage\n      result = \"Lead stage is #{negate_text}#{lead_stage_name}\"\n    end\n    result\n  end\n\n  def lead_type(tenant)\n    \"contacts.lead_type_id #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n  end\n\n  def lead_type_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    lead_type = LeadType.where(id: value).first\n    lead_type_name = \"Unknown\"\n    lead_type_name = lead_type.name if lead_type\n    result = \"Lead type is #{negate_text}#{lead_type_name}\"\n    result\n  end\n\n  def statement_contact(tenant)\n    \"companies.source_billtocontact_id::TEXT = contacts.platform_id\"\n  end\n\n  def statement_contact_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a statement contact\"\n  end\n\n  def invoice_contact(tenant)\n    \"companies.source_contact_id::TEXT = contacts.platform_id\"\n  end\n\n  def invoice_contact_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a invoice contact\"\n  end\n\n  def walk_in(tenant)\n    \"companies.walk_in = #{logical_operand}\"\n  end\n\n  def walk_in_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a walk in contact\"\n  end\n\n  def company_status(tenant)\n    \"companies.status #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n  end\n\n  def company_status_text(tenant)\n    status = ContactListRule.company_status.select { |possible_value| possible_value[1] == value }.try(:first).try(:first)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand == \"is_not\") || (negate && operand != \"is_not\")\n    \"Company status is #{negate_text}#{status}\".humanize\n  end\n\n  def buy_frequency(tenant)\n    if logical_operand_name == \"between\"\n      \"contacts.days_outside_buy_freq BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value.to_i)} AND #{ActiveRecord::Base::sanitize(value2.to_i)}\"\n    else\n      \"contacts.days_outside_buy_freq #{logical_operand} #{ActiveRecord::Base::sanitize(value.to_i)}\"\n    end\n  end\n\n  def buy_frequency_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Contact is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value} days outside of their buy frequency\"\n    result\n  end\n\n  def orders_in_progress(tenant)\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      HAVING BOOL_OR(invoices.on_pending_list) = #{logical_operand}\n    }\n  end\n\n  def orders_in_progress_text(tenant)\n    condidtion = (!negate && operand == \"true\") || (negate && operand != \"true\") ? \"has\" : \"#{negate_text(\"does not\")} have any\"\n    \"Contact #{condidtion} orders in progress\"\n  end\n\n  def address(tenant)\n    negate_query = \"\"\n    if operand != \"exists\"\n      negate_query = \"NOT \"\n    end\n\n    %Q{\n      (\n        #{negate_query}EXISTS (\n          SELECT null\n          FROM addresses\n          WHERE (addresses.id = contacts.address_id OR addresses.id = companies.invoice_address_id)\n          AND ((addresses.street1 IS NOT NULL AND addresses.street1 != '') OR (addresses.street2 IS NOT NULL AND addresses.street2 != ''))\n        )\n      )\n    }\n  end\n\n  def address_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"Address #{negate_text(\"does not\")} exist\"\n    else\n      \"Address exists\"\n    end\n  end\n\n  def company_ranking(tenant)\n    if logical_operand_name == \"between\"\n      \"companies.rolling_12_month_rank BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value.to_i)} AND #{ActiveRecord::Base::sanitize(value2.to_i)}\"\n    else\n      \"companies.rolling_12_month_rank #{logical_operand} #{ActiveRecord::Base::sanitize(value.to_i)}\"\n    end\n  end\n\n  def company_ranking_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Company rank is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def contact_ranking(tenant)\n    min_sales_offset = 0\n    min_sales_offset = value.to_i - 1 if value.to_i > 0\n    min_sales = Contact.where(tenant_id: tenant.id).order(\"contacts.rolling_12_month_sales DESC NULLS LAST\").offset(min_sales_offset).limit(1).pluck(:rolling_12_month_sales).first\n    if !min_sales.nil?\n      min_sales = 0.000001 if min_sales == 0\n      max_sales_offset = 0\n      max_sales_offset = value2.to_i - 1 if value2.to_i > 0\n      max_sales = Contact.where(tenant_id: tenant.id).order(\"contacts.rolling_12_month_sales DESC NULLS LAST\").offset(max_sales_offset).limit(1).pluck(:rolling_12_month_sales).first\n      if logical_operand_name == \"between\"\n        \"contacts.rolling_12_month_sales BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(min_sales)} AND #{ActiveRecord::Base::sanitize(max_sales)}\" if !min_sales.nil?\n      else\n        \"contacts.rolling_12_month_sales #{logical_operand} #{ActiveRecord::Base::sanitize(min_sales)}\"\n      end\n    end\n  end\n\n  def contact_ranking_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \"and #{value2} \" if logical_operand_name == \"between\"\n    result = \"Contact rank is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value} #{between_value}\"\n    result\n  end\n\n  def sale_name(tenant)\n    \"\"\n    # result = Contact.joins(:invoices)\n    # filters = value.split(',').map{|s| \"#{s.squish}\"}.join('|')\n    # filters = ActiveRecord::Base::sanitize(\"\\\\y(#{filters})\")\n    # result = result.where(\"invoices.name ~* #{filters}\")\n    # result\n  end\n\n  def sale_name_text(tenant)\n    \"NO LONGER VALID\"\n    # if negate\n    #   \"Sale name #{negate_text(\"does not\")} match #{value}\"\n    # else\n    #   \"Sale name matches #{value}\"\n    # end\n  end\n\n  def sale_name_contextuals(tenant, contacts)\n    result = {}\n    # filters = value.split(',').map{|s| \"#{s.squish}\"}.join('|')\n    # filters = ActiveRecord::Base::sanitize(\"\\\\y(#{filters})\")\n    # sales = Sale.joins(:contact).where(contact_id: contacts.map{|contact| contact.id}).where(\"invoices.name ~* #{filters}\").order(created_at: :asc)\n    #\n    # contacts.each do |contact|\n    #   invoice_numbers = []\n    #   invoice_name = []\n    #   sales.each do |sale|\n    #     if sale.contact_id == contact.id\n    #       invoice_numbers << sale.invoice_number\n    #       invoice_name << sale.name\n    #     end\n    #   end\n    #   result[contact.id] = {invoice_numbers: invoice_numbers, invoice_name: invoice_name}\n    # end\n    result\n  end\n\n  def tag_match(tenant)\n    negate_query = operand != \"matches\" ? \"NOT\" : \"\"\n    query = %Q{\n      #{negate_query} EXISTS (\n        SELECT null\n        FROM tag_categories\n        INNER JOIN tags ON tag_categories.id = tags.tag_category_id\n          AND tags.deleted = FALSE\n        WHERE\n          tag_categories.id = #{ActiveRecord::Base::sanitize(value.to_i)}\n          AND tag_categories.performing_cleanup = FALSE\n          AND tag_categories.deleted = FALSE\n          AND ( ( tag_categories.tenant_id = #{tenant.id} OR tag_categories.tenant_id IS NULL ) AND tag_categories.enterprise_id = #{tenant.enterprise_id} )\n          AND tags.tenant_id = #{tenant.id}\n          AND tags.taggable_type = 'Contact'\n          AND tags.taggable_id = contacts.id\n      )\n    }\n    query\n  end\n\n  def tag_match_text(tenant)\n    tag_category = TagCategory.unscoped.where(id: value).first.try(:name)\n    if (!negate && operand != \"matches\") || (negate && operand == \"matches\")\n      \"Tag #{negate_text(\"does not\")} match #{tag_category}\"\n    else\n      \"Tag matches #{tag_category}\"\n    end\n  end\n\n  # def tag_match_contextuals(tenant, contacts)\n  #   result = {}\n  #   invoices = Invoice.joins(:contact).joins(\"INNER JOIN tags ON tags.taggable_id = invoices.id AND tags.taggable_type = 'Invoice'\").where(contact_id: contacts.map{|contact| contact.id}).where(tags: {tag_category_id: value.to_i}).order(created_at: :asc)\n\n  #   contacts.each do |contact|\n  #     invoice_numbers = []\n  #     invoice_name = []\n  #     invoices.each do |invoice|\n  #       if invoice.contact_id == contact.id\n  #         invoice_numbers << invoice.invoice_number\n  #         invoice_name << invoice.name\n  #       end\n  #     end\n  #     result[contact.id] = {invoice_numbers: invoice_numbers, invoice_name: invoice_name}\n  #   end\n  #   result\n  # end\n\n  def sent_campaign(tenant)\n    primary_condition = \"\"\n    if !value2.blank?\n      if value2 == \"opened\"\n        primary_condition = \"AND campaign_messages.opened = true\"\n      elsif value2 == \"not_opened\"\n        primary_condition = \"AND campaign_messages.opened = false\"\n      end\n    end\n    modifier_condition = \"\"\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND campaigns.created_at BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        if logical_operand(1) == \"=\"\n          modifier_condition = \"AND campaigns.created_at BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1.beginning_of_day)} AND #{ActiveRecord::Base::sanitize(date1.end_of_day)}\"\n        else\n          modifier_condition = \"AND campaigns.created_at #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n        end\n      end\n    end\n    %Q{\n      SELECT null\n      FROM campaign_messages\n      INNER JOIN campaigns ON campaigns.id = campaign_messages.campaign_id\n      WHERE campaign_messages.contact_id = contacts.id\n      AND campaigns.parent_id = #{value}\n      AND campaigns.test = false\n      AND campaign_messages.sent = true\n      #{primary_condition}\n      #{modifier_condition}\n    }\n  end\n\n  def sent_campaign_text(tenant)\n    result = \"\"\n    campaign = Campaign.unscoped.where(id: value).first.try(:name)\n    if (!negate && operand != \"sent\") || (negate && operand == \"sent\")\n      result = \"Was #{negate_text(\"not\")} sent campaign: #{campaign}\"\n    else\n      result = \"Was sent campaign: #{campaign}\"\n    end\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n\n    result\n  end\n\n  def first_name(tenant)\n    \"contacts.first_name IS NOT NULL AND contacts.first_name != ''\"\n  end\n\n  def first_name_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"First name #{negate_text(\"does not\")} exist\"\n    else\n      \"First name exists\"\n    end\n  end\n\n  def estimates_in_progress(tenant)\n    condition = \"AND estimates.voided = false AND estimates.deleted = false HAVING BOOL_OR(estimates.on_pending_list) = true\"\n    if !logical_operand\n      condition = \"AND ((estimates.voided = false AND estimates.deleted = false) OR estimates.on_pending_list IS NULL) HAVING (BOOL_OR(estimates.on_pending_list) = false OR BOOL_OR(estimates.on_pending_list) IS NULL)\"\n    end\n    %Q{\n      SELECT null\n      FROM contacts i_contacts\n      LEFT OUTER JOIN estimates ON estimates.contact_id = i_contacts.id\n      WHERE i_contacts.id = contacts.id\n      #{condition}\n    }\n  end\n\n  def estimates_in_progress_text(tenant)\n    condidtion = (!negate && operand == \"true\") || (negate && operand != \"true\") ? \"has\" : \"#{negate_text(\"does not\")} have any\"\n    \"Contact #{condidtion} estimates in progress\"\n  end\n\n  def estimates_status(tenant)\n    modifier_condition = \"\"\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND estimates.ordered_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND estimates.ordered_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n      AND estimates.status = '#{logical_operand}'\n      #{modifier_condition}\n    }\n  end\n\n  def estimates_status_text(tenant)\n    modifier_text = \"\"\n    if !modifier.blank?\n      modifier_text = \" #{modifier_operand} #{modifier_value}\"\n      modifier_text = \"#{modifier_text} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    condidtion = !negate ? \"has\" : \"#{negate_text(\"does not\")} have any\"\n    \"Contact #{condidtion} estimates with a status of #{logical_operand}#{modifier_text}\"\n  end\n\n  def company_growth(tenant)\n    if logical_operand_name == \"between\"\n      \"companies.growth_percentage BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      \"companies.growth_percentage #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n  end\n\n  def company_growth_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Company growth is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def contact_growth(tenant)\n    if logical_operand_name == \"between\"\n      \"contacts.growth_percentage BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      \"contacts.growth_percentage #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n  end\n\n  def contact_growth_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Contact growth is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def average_invoice(tenant)\n    if logical_operand_name == \"between\"\n      \"contacts.average_invoice BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      \"contacts.average_invoice #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n  end\n\n  def average_invoice_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Average invoice is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def sales_rep(tenant)\n    if tenant.sales_rep_for_locations\n      if operand != \"is\"\n        \"contacts.location_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} AND companies.location_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      else\n        \"contacts.location_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} OR companies.location_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      end\n    else\n      if operand != \"is\"\n        \"contacts.sales_rep_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} AND companies.sales_rep_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      else\n        \"contacts.sales_rep_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} OR companies.sales_rep_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      end\n    end\n  end\n\n  def sales_rep_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"is\") || (negate && operand == \"is\")\n\n    if tenant.sales_rep_for_locations\n      location = Location.where(id: sales_rep_id).first\n      location_name = location.try(:name) || \"Unknown\"\n      result = \"Location is #{negate_text} #{location_name}\"\n      result\n    else\n      sales_rep = User.where(id: sales_rep_id).first\n      sales_rep_name = sales_rep.try(:full_name) || \"Unknown\"\n      result = \"Sales Rep is #{negate_text} #{sales_rep_name}\"\n      result\n    end\n  end\n\n  def privacy(tenant)\n    \"contacts.privacy_data->>#{ActiveRecord::Base::sanitize(value)} IS NOT NULL AND (contacts.privacy_data->#{ActiveRecord::Base::sanitize(value)}->'state') = '1'\"\n  end\n\n  def privacy_text(tenant)\n    negate_text = \"#{negate_text(\"No\")} \" if negate\n    privacy = \"Privacy\"\n    privacy.downcase! if negate\n    result = \"#{negate_text}#{privacy} for #{value.titleize}\"\n    result\n  end\nend\n",
          "public": "class ContactListRule < ActiveRecord::Base\n  belongs_to :contact_list\n  belongs_to :taken_by\n  # belongs_to :sales_rep # conflict with ",
          "private": "private method\n\n  attr_accessor :date_format\n\n  validate do |rule|\n    if rule.contact_list.global\n      rule.sales_rep_id = nil\n      rule.taken_by_id = nil\n    end\n\n    if ContactListRule.get_type(rule.category).nil? && ContactListRule.get_modifiers(rule.category).nil?\n      rule.errors[:base] << \"Invalid Category.\"\n    else\n\n      if ContactListRule.exists?(contact_list_id: rule.contact_list.id, category: rule.category, operand: rule.operand, value: rule.value, value2: rule.value2, modifier: rule.modifier, modifier_operand: rule.modifier_operand, modifier_value: rule.modifier_value, modifier_value2: rule.modifier_value2, modifier2: rule.modifier2, modifier2_operand: rule.modifier2_operand, modifier2_value: rule.modifier2_value, modifier2_value2: rule.modifier2_value2, negate: rule.negate, sales_rep_id: rule.sales_rep_id, taken_by_id: rule.taken_by_id)\n        rule.errors[:base] << \"This rule already exists.\"\n      end\n\n      if !ContactListRule.get_type(rule.category).nil?\n        if rule.logical_operand == \"unknown\"\n          rule.errors[:base] << \"Invalid Operand.\"\n        else\n          case ContactListRule.get_type(rule.category)\n          when \"numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"inverted_numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"inverted_integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"existence\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"boolean\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"value\"\n            case rule.category\n            when \"company_status\"\n              rule.errors[:base] << \"Invalid value.\" unless ContactListRule.company_status.any? { |possible_value| possible_value[1] == value }\n            when \"lead_stage\"\n              if value != \"any\"\n                lead_stage = ProspectStatus.where(id: value).first\n                rule.errors[:base] << \"Invalid lead stage.\" unless lead_stage\n              end\n            when \"lead_type\"\n              lead_type = LeadType.where(id: value).first\n              rule.errors[:base] << \"Invalid lead type.\" unless lead_type\n            when \"privacy\"\n              if !rule.contact_list.enterprise.privacy_types.include?(value)\n                rule.errors[:base] << \"Invalid privacy option.\"\n              end\n            else\n              rule.errors[:base] << \"Unhandled value validation.\"\n            end\n          when \"match\"\n            rule.errors[:base] << \"Invalid value.\" if rule.value.blank?\n            rule.value2 = \"\"\n          when \"tag\"\n            tag_category = TagCategory.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Tag.\" if tag_category.nil?\n            rule.value2 = \"\"\n          when \"campaign\"\n            campaign = Campaign.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Campaign.\" if campaign.nil?\n            if rule.value2.blank?\n              rule.value2 = \"\"\n            elsif %w[opened not_opened].include?(rule.value2)\n              # Do nothing\n            else\n              rule.errors[:base] << \"Invalid Campaign send status.\" if campaign.nil?\n            end\n\n          when \"date\"\n            rule.errors[:base] << \"Date is invalid.\" unless date_validate?(rule.value, rule.date_format)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date is invalid.\" unless date_validate?(rule.value2, rule.date_format)\n            end\n          when \"relative_date\"\n            rule.errors[:base] << \"Date must be a relative date. (Such as '3 days ago')\" unless date_relative_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a relative date. (Such as '3 days ago').\" unless date_relative_validate?(rule.value2)\n            end\n          when \"quarter\"\n            rule.errors[:base] << \"Date must be a quarter.\" unless quarter_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a quarter.\" unless quarter_validate?(rule.value2)\n            end\n          when \"sales_rep\"\n            if contact_list.tenant.sales_rep_for_locations\n              location = Location.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Location.\" if location.nil?\n            else\n              sales_rep = User.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Sales Rep.\" if sales_rep.nil?\n            end\n          when \"estimates_status\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"industry\"\n            valid = false\n            industries = rule.value.try(:split, \",\") || []\n            if industries.count > 0\n              valid = (industries - Company.sub_industries_hash.map { |item| item[\"name\"] }).empty?\n            end\n            rule.value2 = \"\"\n            rule.errors[:base] << \"Invalid Industry\" if !valid\n          else\n            rule.errors[:base] << \"Unhandled validation.\"\n          end\n        end\n      end\n\n      if !rule.modifier.blank?\n        errors = rule.valid_modifier?(1)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n      if !rule.modifier2.blank?\n        errors = rule.valid_modifier?(2)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n    end\n  end\n\n  def valid_modifier?(use_modifier = 1)\n    errors = []\n    current_modifier = modifier\n    current_modifier_operand = modifier_operand\n    current_modifier_value = modifier_value\n    current_modifier_value2 = modifier_value2\n    if use_modifier == 2\n      current_modifier = modifier2\n      current_modifier_operand = modifier2_operand\n      current_modifier_value = modifier2_value\n      current_modifier_value2 = modifier2_value2\n    end\n    if !ContactListRule.get_modifiers(category, use_modifier).include?(current_modifier)\n      errors << \"Invalid Modifier.\"\n    else\n      if logical_operand(use_modifier) == \"unknown\"\n        errors << \"Invalid Modifier Operand.\"\n      else\n        case current_modifier\n        when \"date\"\n          errors << \"Date is invalid.\" unless date_validate?(current_modifier_value, date_format)\n          if current_modifier_operand == \"between\"\n            errors << \"Second date is invalid.\" unless date_validate?(current_modifier_value2, date_format)\n          end\n        when \"relative_date\"\n          errors << \"Date must be a relative date. (Such as '3 days ago')\" unless date_relative_validate?(current_modifier_value)\n          if current_modifier_operand == \"between\"\n            errors << \"Second date must be a relative date. (Such as '3 days ago').\" unless date_relative_validate?(current_modifier_value2)\n          end\n        when \"quarter\"\n          errors << \"Date must be a quarter.\" unless quarter_validate?(current_modifier_value)\n          if current_modifier_operand == \"between\"\n            errors << \"Second date must be a quarter.\" unless quarter_validate?(current_modifier_value2)\n          end\n        when \"estimates_status\"\n        else\n          errors << \"Unhandled validation.\"\n        end\n      end\n    end\n    errors\n  end\n\n  def self.categories_for_dropdown(target_tenant, list)\n    result = []\n\n    ContactListRule.categories.each do |category, data|\n      next if list.global && data[:hide_when_global]\n      next if !data[:platform].nil? && !data[:platform].include?(target_tenant.enterprise.platform_type)\n\n      name = I18n.t_prefix(category, target_tenant)\n      if target_tenant.sales_rep_for_locations && category == \"sales_rep\"\n        name = I18n.t(\"location\")\n      end\n      result << [name, category]\n    end\n    result\n  end\n\n  def self.categories\n    {\n      \"total_sales\" => {primary: \"numeric\", modifiers: %w[date relative_date quarter]},\n      \"web_sales\" => {primary: \"numeric\", modifiers: %w[date relative_date quarter]},\n      \"single_sale\" => {primary: \"numeric\", modifiers: %w[date relative_date quarter]},\n      \"single_estimate\" => {primary: \"numeric\", platform: [\"printsmith\"], modifiers: %w[date relative_date quarter], modifiers2: [\"estimates_status\"]},\n      \"sales_per_month\" => {primary: \"integer\", modifiers: %w[date relative_date quarter]},\n      \"sales_per_month_by_company\" => {primary: \"integer\", modifiers: %w[date relative_date quarter]},\n      \"contact_created_date\" => {modifiers: %w[date relative_date quarter]},\n      \"company_created_date\" => {modifiers: %w[date relative_date quarter]},\n      \"last_pickup_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"last_order_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"first_order_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"first_sale_date\" => {modifiers: %w[date relative_date quarter]},\n      \"first_estimate_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"last_estimate_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"email_address\" => {direct: true, primary: \"existence\"},\n      \"phone_number\" => {direct: true, primary: \"existence\"},\n      \"walk_in\" => {direct: true, primary: \"boolean\"},\n      \"prospect\" => {direct: true, primary: \"boolean\"},\n      \"statement_contact\" => {direct: true, primary: \"boolean\", platform: [\"printsmith\"]},\n      \"invoice_contact\" => {direct: true, primary: \"boolean\"},\n      \"company_status\" => {direct: true, platform: [\"printsmith\"], primary: \"value\"},\n      \"buy_frequency\" => {direct: true, primary: \"numeric\"},\n      \"orders_in_progress\" => {platform: [\"printsmith\"] , primary: \"boolean\"},\n      \"address\" => {direct: true, primary: \"existence\"},\n      \"company_ranking\" => {direct: true, primary: \"numeric\"},\n      \"contact_ranking\" => {direct: true, primary: \"inverted_numeric\"},\n      \"tag_match\" => {direct: true, primary: \"tag\"},\n      \"sent_campaign\" => {primary: \"campaign\", modifiers: %w[date relative_date quarter]},\n      \"first_name\" => {direct: true, primary: \"existence\"},\n      \"estimates_in_progress\" => {primary: \"boolean\", platform: [\"printsmith\"]},\n      \"estimates_status\" => {primary: \"estimates_status\", platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"contact_growth\" => {direct: true, primary: \"numeric\"},\n      \"company_growth\" => {direct: true, primary: \"numeric\"},\n      \"average_invoice\" => {direct: true, primary: \"numeric\"},\n      \"sales_rep\" => {direct: true, hide_when_global: true, primary: \"sales_rep\"},\n      \"days_since_single_sale\" => {primary: \"numeric\"},\n      \"industry\" => {primary: \"industry\"},\n      \"estimate_ordered_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"invoice_ordered_date\" => {platform: [\"printsmith\"], modifiers: %w[date relative_date quarter]},\n      \"lead_stage\" => {primary: \"value\"},\n      \"lead_type\" => {direct: true, primary: \"value\"},\n      \"days_since_last_pickup_date\" => {primary: \"numeric\", platform: [\"printsmith\"]},\n      \"days_since_last_sale_date\" => {platform: [\"mbe\"], primary: \"numeric\"},\n      \"first_shipment_date\" => {platform: [\"mbe\"], modifiers: %w[date relative_date quarter]},\n      \"last_shipment_date\" => {platform: [\"mbe\"], modifiers: %w[date relative_date quarter]},\n      \"last_sale_date\" => {platform: [\"mbe\"], modifiers: %w[date relative_date quarter]},\n      \"privacy\" => {direct: true, primary: \"value\", platform: [\"mbe\"]}\n    }\n  end\n\n  def self.numeric_operands\n    {\n      \"greater_than\" => \">\",\n      \"equal_to_or_greater_than\" => \">=\",\n      \"less_than\" => \"<\",\n      \"equal_to_or_less_than\" => \"<=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.inverted_numeric_operands\n    {\n      \"greater_than\" => \"<\",\n      \"equal_to_or_greater_than\" => \"<=\",\n      \"less_than\" => \">\",\n      \"equal_to_or_less_than\" => \">=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.integer_operands\n    {\n      \"greater_than\" => \">\",\n      \"equal_to_or_greater_than\" => \">=\",\n      \"less_than\" => \"<\",\n      \"equal_to_or_less_than\" => \"<=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.inverted_integer_operands\n    {\n      \"greater_than\" => \"<\",\n      \"equal_to_or_greater_than\" => \"<=\",\n      \"less_than\" => \">\",\n      \"equal_to_or_less_than\" => \">=\",\n      \"equal_to\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.date_operands\n    {\n      \"before\" => \"<\",\n      \"after\" => \">\",\n      \"on\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.relative_date_operands\n    {\n      \"before\" => \"<\",\n      \"after\" => \">\",\n      \"on\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.quarter_operands\n    {\n      \"before\" => \"<\",\n      \"after\" => \">\",\n      \"during\" => \"=\",\n      \"between\" => \"..\"\n    }\n  end\n\n  def self.existence_operands\n    {\n      \"exists\" => \"IS NOT NULL\",\n      \"not_exists\" => \"IS NULL\"\n    }\n  end\n\n  def self.boolean_operands\n    {\n      \"true\" => true,\n      \"false\" => false\n    }\n  end\n\n  def self.value_operands\n    {\n      \"is\" => \"=\",\n      \"is_not\" => \"!=\"\n    }\n  end\n\n  def self.match_operands\n    {\n      \"matches\" => \"ILIKE\",\n      \"does_not_match\" => \"NOT ILIKE\"\n    }\n  end\n\n  def self.tag_operands\n    {\n      \"matches\" => \"=\",\n      \"does_not_match\" => \"!=\"\n    }\n  end\n\n  def self.campaign_operands\n    {\n      \"sent\" => \"=\"\n    }\n  end\n\n  def self.sales_rep_operands\n    {\n      \"is\" => \"=\",\n      \"is_not\" => \"!=\"\n    }\n  end\n\n  def self.estimates_status_operands\n    {\n      \"won\" => \"Won\",\n      \"neutral\" => \"Neutral\",\n      \"lost\" => \"Lost\",\n      \"any\" => \"\"\n    }\n  end\n\n  def self.industry_operands\n    {\n      \"is\" => \"=\"\n    }\n  end\n\n  def self.quarters\n    [\n      [\"This Quarter\", \"this_quarter\"],\n      [\"Last Quarter\", \"last_quarter\"],\n      [\"First Quarter\", \"quarter_1\"],\n      [\"Second Quarter\", \"quarter_2\"],\n      [\"Third Quarter\", \"quarter_3\"],\n      [\"Fourth Quarter\", \"quarter_4\"],\n      [\"First Quarter Last Year\", \"quarter_1_last_year\"],\n      [\"Second Quarter Last Year\", \"quarter_2_last_year\"],\n      [\"Third Quarter Last Year\", \"quarter_3_last_year\"],\n      [\"Fourth Quarter Last Year\", \"quarter_4_last_year\"]\n    ]\n  end\n\n  def self.company_status\n    [\n      %w[Delinquent CustomerStatusDelinquent],\n      %w[Inactive CustomerStatusInactive],\n      [\"Past Due\", \"CustomerStatusPastDue\"],\n      %w[Frozen CustomerStatusFrozen],\n      %w[New CustomerStatusNew],\n      %w[Current CustomerStatusCurrent]\n    ]\n  end\n\n  def get_sql(tenant)\n    category_method = method(category.to_sym) if respond_to?(category.to_sym, true)\n    if category_method\n      # category_method.call(tenant).select(\"contacts.id\").marketing(tenant).group(\"contacts.id\").to_sql\n      sql = category_method.call(tenant)\n      return \"\" if sql.blank?\n      if ContactListRule.is_direct?(category)\n        expression = negate? ? \"NOT\" : \"\"\n        sql = \" AND #{expression} (#{sql})\"\n      else\n        expression = negate? ? \"NOT EXISTS\" : \"EXISTS\"\n        sql = \" AND #{expression}(#{sql})\"\n      end\n    end\n    sql\n  end\n\n  def get_rule_text(tenant)\n    result = \"unknown\"\n    method_name = \"#{category}_text\"\n    category_text_method = method(method_name.to_sym) if respond_to?(method_name.to_sym, true)\n    if category_text_method\n      result = category_text_method.call(tenant)\n    end\n    result.html_safe\n  end\n\n  def get_mbe_rule_text(tenant)\n    result = []\n    result << negate_text(I18n.t(\"exclude\").upcase) if negate\n\n    if !operand.blank?\n      op_text = I18n.t(\"#{operand}\")\n      value_t = resolve_value if %w[sent_campaign tag_match lead_stage lead_type privacy industry].include?(category) && !value.blank?\n      op_value_text = \": #{value_t ? value_t : value}\" if !value.blank?\n      op_value_text += \" & #{value2}\" if operand == \"between\"\n\n      result << \"<b>#{op_text}</b>#{op_value_text}\"\n    end\n\n    if !modifier.blank?\n      mod_text = modifier == \"date\" ? I18n.t(\"date.word\") : I18n.t(\"#{modifier}\")\n      if %w[sales_per_month sales_per_month_by_company].include?(category)\n        mod_op_text = I18n.t(\"between\")\n        mod_value_text = per_month_text(tenant)\n      else\n        mod_op_text = I18n.t(\"#{modifier_operand}\")\n        mod_value_text = modifier == \"quarter\" ? \" #{I18n.t(\"#{modifier_value}\")}\" : \" #{modifier_value}\"\n        mod_value_text += modifier == \"quarter\" ? \" & #{I18n.t(\"#{modifier_value2}\")}\" : \" & #{modifier_value2}\" if !modifier_value2.blank?\n      end\n\n      result << \"<b>#{mod_text}</b>: #{mod_op_text} #{mod_value_text}\"\n    end\n\n    if !sales_rep_id.blank?\n      rep_name = User.find_by(id: sales_rep_id).full_name\n      result << \"<b>#{I18n.t(\"platform.sales_rep\", mbe: true)}:</b> #{rep_name}\"\n    end\n\n    result.join(\", \").html_safe\n  end\n\n  def per_month_text(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n    start_month = I18n.l(start_date, format: \"%B %Y\")\n    end_month = I18n.l(end_date, format: \"%B %Y\")\n    \" #{start_month} & #{end_month}\"\n  end\n\n  def resolve_value\n    case category\n    when \"sent_campaign\"\n      result = Campaign.unscoped.where(id: value).first.try(:name)\n    when \"tag_match\"\n      result = TagCategory.unscoped.where(id: value).first.try(:name)\n    when \"lead_stage\"\n      result = value == \"any\" ? I18n.t(\"any\") : ProspectStatus.where(id: value).first.try(:name)\n    when \"lead_type\"\n      result = LeadType.where(id: value).first.try(:name)\n    when \"privacy\"\n      result = I18n.t(\"privacy.#{value}\")\n    when \"industry\"\n      result = []\n      industries = value.split(\",\")\n      industries.each do |industry|\n        result << I18n.t(\"industries.#{Company.industries.key(industry)}\")\n      end\n      result = result.join(\",\")\n    end\n    result\n  end\n\n  def set_month_range(date1, date2)\n    if date1.nil?\n      date1 = DateTime.now\n      date2 = DateTime.now - 1.year\n    end\n\n    if date2.nil?\n      if modifier_operand == \"on\"\n        date2 = date1\n      elsif modifier_operand == \"before\"\n        date2 = date1 - 1.year\n      else\n        date2 = DateTime.now\n      end\n    end\n\n    start_date = date1.beginning_of_month\n    end_date = date2.end_of_month\n    if start_date > end_date\n      start_date = date2.beginning_of_month\n      end_date = date1.end_of_month\n    end\n    [start_date, end_date]\n  end\n\n  def get_rule_contextuals(tenant, contacts)\n    result = {}\n    method_name = \"#{category}_contextuals\"\n    category_contextuals_method = method(method_name.to_sym) if respond_to?(method_name.to_sym, true)\n    if category_contextuals_method\n      result = category_contextuals_method.call(tenant, contacts)\n    end\n    result\n  end\n\n  def contacts(tenant, page = nil, per = nil)\n    query = contacts_query(tenant, page, per)\n    if query.blank?\n      result = Contact.none\n      total_count = 0\n    else\n      result = Contact.find_by_sql(query)\n      total_count = result.first.try(:total_count) || 0\n    end\n    Kaminari.paginate_array(result, total_count: total_count).page(page).per(per)\n  end\n\n  def contacts_query(tenant, page = nil, per = nil)\n    page ||= 1\n    per ||= 10\n    offset = (page.to_i - 1) * per\n\n    rule_condition = get_sql(tenant)\n\n    if !rule_condition.blank?\n      limit = \"LIMIT #{per} OFFSET #{offset}\" unless page.to_i <= 0\n      query = %Q{\n        SELECT contacts.*, (COUNT(*) OVER()) AS total_count\n        FROM contacts\n        LEFT OUTER JOIN companies ON companies.id = contacts.company_id\n        WHERE contacts.tenant_id = #{tenant.id}\n        #{contact_list.account_type_query}\n        AND contacts.deleted = false\n        AND contacts.unsubscribed = false\n        AND companies.marketing_do_not_mail = false\n        AND NOT EXISTS ( SELECT null FROM email_soft_bounces WHERE email_soft_bounces.tenant_id = #{tenant.id} AND LOWER(BTRIM(contacts.email)) = email_soft_bounces.email_address AND soft_bounce_count >= 3 )\n        #{rule_condition}\n        ORDER BY contacts.id DESC NULLS LAST\n        #{limit}\n      }\n    end\n\n    query\n  end\n\n  def self.is_direct?(category)\n    result = ContactListRule.categories[category.to_s][:direct] if ContactListRule.categories.has_key?(category.to_s)\n    result.nil? ? false : result\n  end\n\n  def self.get_type(category)\n    result = ContactListRule.categories[category.to_s][:primary] if ContactListRule.categories.has_key?(category.to_s)\n    result\n  end\n\n  def self.get_modifiers(category, use_modifier = 1)\n    result = ContactListRule.categories[category.to_s][:modifiers] if ContactListRule.categories.has_key?(category.to_s)\n    if use_modifier == 2\n      result = ContactListRule.categories[category.to_s][:modifiers2] if ContactListRule.categories.has_key?(category.to_s)\n    end\n    result = [] if result.nil?\n    result\n  end\n\n  def logical_operand(use_modifier = 0)\n    result = \"unknown\"\n    target = operand\n    type = ContactListRule.get_type(category)\n    case use_modifier\n    when 1\n      target = modifier_operand\n      type = modifier\n    when 2\n      target = modifier2_operand\n      type = modifier2\n    end\n    method_name = \"#{type}_operands\"\n    operands_method = ContactListRule.method(method_name) if ContactListRule.respond_to?(method_name, true)\n    if operands_method\n      operands = operands_method.call\n      result = operands[target.to_s] if operands.has_key?(target.to_s)\n    end\n    result\n  end\n\n  def logical_operand_name(use_modifier = 0)\n    result = \"unknown\"\n    target = operand\n    type = ContactListRule.get_type(category)\n    case use_modifier\n    when 1\n      target = modifier_operand\n      type = modifier\n    when 2\n      target = modifier2_operand\n      type = modifier2\n    end\n    method_name = \"#{type}_operands\"\n    operands_method = ContactListRule.method(method_name) if ContactListRule.respond_to?(method_name, true)\n    if operands_method\n      operands = operands_method.call\n      result = target.to_s if operands.has_key?(target.to_s)\n    end\n    result\n  end\n\n  private\n\n  def numeric_validate?(value)\n    begin\n      Float(value)\n      true\n    rescue StandardError\n      false\n    end\n  end\n\n  def integer_validate?(value)\n    begin\n      Integer(value)\n      true\n    rescue StandardError\n      false\n    end\n  end\n\n  def date_validate?(value, date_format)\n    result = false\n    begin\n      parsed_date = Date.strptime(value, date_format)\n      result = true if parsed_date.year >= 0 && parsed_date.year < 10000\n    rescue StandardError\n    end\n    result\n  end\n\n  def date_relative_validate?(value)\n    result = false\n    begin\n      parsed_date = Chronic.parse(value)\n      result = true if !parsed_date.nil? && parsed_date.year >= 0 && parsed_date.year < 10000\n    rescue StandardError\n    end\n    result\n  end\n\n  def quarter_validate?(value)\n    valid = false\n    ContactListRule.quarters.each do |quarter|\n      if quarter[1] == value\n        valid = true\n        break\n      end\n    end\n    valid\n  end\n\n  def parse_quarter(quarter)\n    case quarter\n    when \"this_quarter\"\n      {start_time: Time.now.beginning_of_quarter, end_time: Time.now.end_of_quarter}\n    when \"last_quarter\"\n      {start_time: 3.months.ago.beginning_of_quarter, end_time: 3.months.ago.end_of_quarter}\n    when \"quarter_1\"\n      {start_time: Time.parse(\"January 1\"), end_time: Time.parse(\"January 1\").end_of_quarter}\n    when \"quarter_2\"\n      {start_time: Time.parse(\"April 1\"), end_time: Time.parse(\"April 1\").end_of_quarter}\n    when \"quarter_3\"\n      {start_time: Time.parse(\"July 1\"), end_time: Time.parse(\"July 1\").end_of_quarter}\n    when \"quarter_4\"\n      {start_time: Time.parse(\"October 1\"), end_time: Time.parse(\"October 1\").end_of_quarter}\n    when \"quarter_1_last_year\"\n      {start_time: Time.parse(\"January 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"January 1 #{Time.now.year - 1}\").end_of_quarter}\n    when \"quarter_2_last_year\"\n      {start_time: Time.parse(\"April 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"April 1 #{Time.now.year - 1}\").end_of_quarter}\n    when \"quarter_3_last_year\"\n      {start_time: Time.parse(\"July 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"July 1 #{Time.now.year - 1}\").end_of_quarter}\n    when \"quarter_4_last_year\"\n      {start_time: Time.parse(\"October 1 #{Time.now.year - 1}\"), end_time: Time.parse(\"October 1 #{Time.now.year - 1}\").end_of_quarter}\n    end\n  end\n\n  def get_modifier_dates(tenant, use_modifier = 1)\n    current_modifier = modifier\n    current_modifier_operand = modifier_operand\n    current_modifier_value = modifier_value\n    current_modifier_value2 = modifier_value2\n    if use_modifier == 2\n      current_modifier = modifier2\n      current_modifier_operand = modifier2_operand\n      current_modifier_value = modifier2_value\n      current_modifier_value2 = modifier2_value2\n    end\n\n    date1 = nil\n    date2 = nil\n    case current_modifier\n    when \"date\"\n      date1 = Date.strptime(current_modifier_value, contact_list.tenant.date_format).try(:in_time_zone, tenant.time_zone)\n      date2 = Date.strptime(current_modifier_value2, contact_list.tenant.date_format).try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"between\"\n    when \"relative_date\"\n      date1 = Chronic.parse(current_modifier_value).try(:in_time_zone, tenant.time_zone)\n      date2 = Chronic.parse(current_modifier_value2).try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"between\"\n    when \"quarter\"\n      date1 = parse_quarter(current_modifier_value)[:start_time].try(:in_time_zone, tenant.time_zone)\n      date2 = parse_quarter(current_modifier_value)[:end_time].try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"during\"\n      date2 = parse_quarter(current_modifier_value2)[:end_time].try(:in_time_zone, tenant.time_zone) if current_modifier_operand == \"between\"\n    end\n    [date1, date2]\n  end\n\n  def negate_text(text)\n    \"<span style=\\\"color:#ff0000\\\"><b>#{text}</b></span>\"\n  end\n\n  def total_sales(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING SUM(invoices.grand_total) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING SUM(invoices.grand_total) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND invoices.pickup_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND invoices.pickup_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR invoices.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (invoices.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      #{modifier_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def total_sales_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value}#{between_value} in sales\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def web_sales(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING SUM(invoices.grand_total) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING SUM(invoices.grand_total) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND invoices.pickup_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND invoices.pickup_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR invoices.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (invoices.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      AND invoices.web = true\n      #{modifier_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def web_sales_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value}#{between_value} in web sales\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def single_sale(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"AND invoices.grand_total BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"AND invoices.grand_total #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND invoices.pickup_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND invoices.pickup_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR invoices.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (invoices.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      AND invoices.pickup_date IS NOT NULL\n      #{modifier_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def single_sale_contextuals(tenant, contacts)\n    result = {}\n    sales = Sale.joins(:contact).where(contact_id: contacts.map { |contact| contact.id }).order(created_at: :asc)\n    if logical_operand_name == \"between\"\n      sales = sales.where(\"((invoices.grand_total >= ? AND invoices.grand_total <= ?) OR (invoices.grand_total <= ? AND invoices.grand_total >= ?))\", value, value2, value, value2)\n    else\n      sales = sales.where(\"invoices.grand_total #{logical_operand} ?\", value)\n    end\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        sales = sales.where(\"((invoices.pickup_date >= ? AND invoices.pickup_date <= ?) OR (invoices.pickup_date <= ? AND invoices.pickup_date >= ?))\", date1, date2, date1, date2)\n      elsif !date1.nil?\n        sales = sales.where(\"invoices.pickup_date #{logical_operand(1)} ?\", date1)\n      end\n    end\n    if !sales_rep_id.blank?\n      sales = sales.joins(\"INNER JOIN sales_reps ON sales_reps.platform_id = invoices.sales_rep_platform_id\").where(sales_reps: {user_id: sales_rep_id})\n    end\n    contacts.each do |contact|\n      invoice_numbers = []\n      invoice_totals = []\n      sales.each do |sale|\n        if sale.contact_id == contact.id\n          invoice_numbers << sale.invoice_number\n          invoice_totals << sale.grand_total\n        end\n      end\n      result[contact.id] = {invoice_numbers: invoice_numbers, invoice_totals: invoice_totals}\n    end\n    result\n  end\n\n  def single_sale_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have a \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{\"single\".humanize(capitalize: negate ? false : true)} sale #{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def single_estimate(tenant)\n    primary_condition = \"\"\n    if logical_operand_name == \"between\"\n      primary_condition = \"AND estimates.grand_total BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"AND estimates.grand_total #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    modifier_condition = \"\"\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND estimates.ordered_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND estimates.ordered_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    modifier2_condition = \"\"\n    if !modifier2.blank?\n      modifier2_condition = \"AND estimates.status = '#{logical_operand(2)}'\" if !logical_operand(2).blank?\n    end\n\n    sales_rep_condition = \"\"\n    if !sales_rep_id.blank?\n      sales_rep_condition = \"AND (contacts.sales_rep_user_id = #{sales_rep_id} OR companies.sales_rep_user_id = #{sales_rep_id} OR estimates.sales_rep_user_id = #{sales_rep_id})\"\n    end\n    taken_by_condition = \"\"\n    if !taken_by_id.blank?\n      taken_by_condition = \"AND (estimates.taken_by_user_id = #{taken_by_id})\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n      #{modifier_condition}\n      #{modifier2_condition}\n      #{sales_rep_condition}\n      #{taken_by_condition}\n      #{primary_condition}\n    }\n  end\n\n  def single_estimate_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have a \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"#{negate_text}#{\"single\".humanize(capitalize: negate ? false : true)} estimate #{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    if !modifier2.blank?\n      result = \"#{result} with a status of #{logical_operand_name(2).humanize(capitalize: false)}\" if !logical_operand(2).blank?\n    end\n    if !sales_rep_id.blank?\n      sales_rep = User.find(sales_rep_id)\n      result = \"#{result} - Sales Rep: #{sales_rep.full_name}\"\n    end\n    if !taken_by_id.blank?\n      taken_by = User.find(taken_by_id)\n      result = \"#{result} - Taken By: #{taken_by.full_name}\"\n    end\n    result\n  end\n\n  def sales_per_month(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING COUNT(invoices.id) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING COUNT(invoices.id) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n\n    if start_date.month == end_date.month && start_date.year == end_date.year\n      number_of_months = 1\n    else\n      number_of_months = (end_date.year * 12 + end_date.month) - (start_date.year * 12 + start_date.month) + 1\n    end\n    modifier_condition = \"AND invoices.pickup_date BETWEEN #{ActiveRecord::Base::sanitize(start_date)} AND #{ActiveRecord::Base::sanitize(end_date)}\"\n    modifier_condition2 = \"HAVING COUNT(*) = #{number_of_months}\"\n\n    %Q{\n      SELECT null\n      FROM (\n        SELECT null\n        FROM invoices\n        WHERE invoices.contact_id = contacts.id\n        #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n        AND invoices.voided = false\n        AND invoices.deleted = false\n        AND pickup_date IS NOT NULL\n        #{modifier_condition}\n        GROUP BY date_trunc('month', pickup_date)\n        #{primary_condition}\n      ) by_month\n      #{modifier_condition2}\n\n    }\n  end\n\n  def sales_per_month_text(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n\n    start_month = start_date.strftime(\"%B %Y\")\n    end_month = end_date.strftime(\"%B %Y\")\n\n    if negate\n      preamble = \"#{negate_text(\"Does not\")} have \"\n    else\n      preamble = \"Has \"\n    end\n\n    result = \"#{preamble}#{logical_operand_name.humanize(capitalize: false)} #{value} sales every month between #{start_month} and #{end_month}\"\n    result\n  end\n\n  def sales_per_month_by_company(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING COUNT(invoices.id) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      primary_condition = \"HAVING COUNT(invoices.id) #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n\n    date1, date2 = get_modifier_dates(tenant)\n    start_date, end_date = set_month_range(date1, date2)\n\n    if start_date.month == end_date.month && start_date.year == end_date.year\n      number_of_months = 1\n    else\n      number_of_months = (end_date.year * 12 + end_date.month) - (start_date.year * 12 + start_date.month) + 1\n    end\n    modifier_condition = \"AND invoices.pickup_date BETWEEN #{ActiveRecord::Base::sanitize(start_date)} AND #{ActiveRecord::Base::sanitize(end_date)}\"\n    modifier_condition2 = \"HAVING COUNT(*) = #{number_of_months}\"\n\n    %Q{\n      SELECT null\n      FROM (\n        SELECT null\n        FROM invoices\n        WHERE invoices.company_id = contacts.company_id\n        #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n        AND invoices.voided = false\n        AND invoices.deleted = false\n        AND pickup_date IS NOT NULL\n        #{modifier_condition}\n        GROUP BY date_trunc('month', pickup_date)\n        #{primary_condition}\n      ) by_month\n      #{modifier_condition2}\n\n    }\n  end\n\n  def sales_per_month_by_company_text(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if date1.nil?\n      date1 = DateTime.now\n      date2 = DateTime.now - 1.year\n    end\n\n    if date2.nil?\n      if modifier_operand == \"on\"\n        date2 = date1\n      elsif modifier_operand == \"before\"\n        date2 = date1 - 1.year\n      else\n        date2 = DateTime.now\n      end\n    end\n\n    start_date = date1.beginning_of_month\n    end_date = date2.end_of_month\n    if start_date > end_date\n      start_date = date2.beginning_of_month\n      end_date = date1.end_of_month\n    end\n\n    start_month = start_date.strftime(\"%B %Y\")\n    end_month = end_date.strftime(\"%B %Y\")\n\n    if negate\n      preamble = \"#{negate_text(\"Does not\")} have \"\n    else\n      preamble = \"Has \"\n    end\n\n    result = \"#{preamble}#{logical_operand_name.humanize(capitalize: false)} #{value} sales by company every month between #{start_month} and #{end_month}\"\n    result\n  end\n\n  # CREATED DATE\n  def contact_created_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING i_contacts.source_created_at BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING i_contacts.source_created_at #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n\n    %Q{\n      SELECT null\n      FROM contacts i_contacts\n      WHERE i_contacts.id = contacts.id\n      GROUP BY id\n      #{primary_condition}\n    }\n  end\n\n  def contact_created_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Contact created date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def company_created_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING companies.company_created_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING companies.company_created_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM companies\n      WHERE companies.id = contacts.company_id\n      GROUP BY id\n      #{primary_condition}\n    }\n  end\n\n  def company_created_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Company created date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def industry(tenant)\n    industries = value.try(:split, \",\")\n    sanatized_csv = industries.map { |s| \"'#{s}'\" }.to_csv\n    %Q{\n      SELECT null\n      FROM companies\n      WHERE companies.id = contacts.company_id\n      AND (\n        companies.custom_data->'category'->>'subIndustry' IN (#{sanatized_csv})\n        OR (\n          (companies.custom_data->'category'->>'subIndustry' IS NULL OR companies.custom_data->'category'->>'subIndustry' = '')\n          AND\n          companies.clearbit_data->'category'->>'subIndustry' IN (#{sanatized_csv})\n        )\n      )\n      GROUP BY id\n    }\n  end\n\n  def industry_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Company industry is #{negate_text}#{value}\"\n    result\n  end\n\n  def last_order_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(invoices.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(invoices.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def last_order_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  # LAST ESTIMATE\n\n  def last_estimate_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(estimates.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(estimates.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def last_estimate_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last estimate date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_shipment_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(shipments.shipment_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(shipments.shipment_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM shipments\n      WHERE contact_id = contacts.id\n      AND shipments.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def first_shipment_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First shipment date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def last_shipment_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(shipments.shipment_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(shipments.shipment_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM shipments\n      WHERE contact_id = contacts.id\n      AND shipments.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def last_shipment_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last shipment date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_order_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(invoices.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(invoices.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def first_order_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_sale_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(invoices.pickup_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(invoices.pickup_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      AND invoices.pickup_date IS NOT NULL\n\n      #{primary_condition}\n    }\n  end\n\n  def first_sale_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First sale date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def first_estimate_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(estimates.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(estimates.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def first_estimate_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"First estimate date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def estimate_ordered_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(estimates.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(estimates.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def estimate_ordered_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Estimate order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def invoice_ordered_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MIN(invoices.ordered_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MIN(invoices.ordered_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n\n      #{primary_condition}\n    }\n  end\n\n  def invoice_ordered_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Invoice order date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def days_since_single_sale(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value.to_i)} AND #{ActiveRecord::Base::sanitize(value2.to_i)}\"\n    else\n      primary_condition = \"#{logical_operand} #{ActiveRecord::Base::sanitize(value.to_i)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE invoices.contact_id = contacts.id\n      AND invoices.pickup_date IS NOT NULL\n      AND invoices.voided = FALSE\n      AND invoices.deleted = FALSE\n      HAVING COUNT(*) = 1\n      AND DATE_PART('day', NOW() - MIN(invoices.pickup_date)) #{primary_condition}\n    }\n  end\n\n  def days_since_single_sale_text(tenant)\n    negate_text = \"#{negate_text(\"no\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Contact has #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value} days since their first and only sale\"\n    result\n  end\n\n  def last_sale_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(invoices.pickup_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(invoices.pickup_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def last_sale_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last pickup date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def last_pickup_date(tenant)\n    date1, date2 = get_modifier_dates(tenant)\n    if !date1.nil? && !date2.nil?\n      primary_condition = \"HAVING MAX(invoices.pickup_date) BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n    else\n      primary_condition = \"HAVING MAX(invoices.pickup_date) #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def last_pickup_date_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    result = \"Last pickup date was #{negate_text}#{modifier_operand} #{modifier_value}\"\n    result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    result\n  end\n\n  def days_since_last_pickup_date(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) BETWEEN SYMMETRIC interval '#{value.to_i} day' AND interval '#{value2.to_i} day'\"\n    else\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) #{logical_operand} interval '#{value.to_i} day'\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def days_since_last_sale_date_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value} days since last pickup date.\"\n    result\n  end\n\n  def days_since_last_sale_date(tenant)\n    if logical_operand_name == \"between\"\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) BETWEEN SYMMETRIC interval '#{value.to_i} day' AND interval '#{value2.to_i} day'\"\n    else\n      primary_condition = \"HAVING (NOW() - MAX(invoices.pickup_date)) #{logical_operand} interval '#{value.to_i} day'\"\n    end\n\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      #{\"AND #{Invoice.INVOICED}\" if Platform.is_mbe?(tenant)}\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      #{primary_condition}\n    }\n  end\n\n  def days_since_last_pickup_date_text(tenant)\n    negate_text = \"#{negate_text(\"Does not\")} have \" if negate\n    result = \"#{negate_text}#{logical_operand_name.humanize(capitalize: negate ? false : true)} #{value} days since last pickup date.\"\n    result\n  end\n\n  def email_address(tenant)\n    if operand == \"exists\"\n      \"(contacts.email LIKE '%@%')\"\n    else\n      \"(contacts.email NOT LIKE '%@%')\"\n    end\n  end\n\n  def email_address_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"Email address #{negate_text(\"does not\")} exist\"\n    else\n      \"Email address exists\"\n    end\n  end\n\n  def phone_number(tenant)\n    if operand == \"exists\"\n      \"(length(contacts.phone) > 0 OR length(contacts.mobile) > 0)\"\n    else\n      \"((contacts.phone IS NULL OR length(contacts.phone) = 0) AND (contacts.mobile IS NULL OR length(contacts.mobile) = 0))\"\n    end\n  end\n\n  def phone_number_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"Phone number #{negate_text(\"does not\")} exist\"\n    else\n      \"Phone number exists\"\n    end\n  end\n\n  def prospect(tenant)\n    \"companies.prospect = #{logical_operand}\"\n  end\n\n  def prospect_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a prospect\"\n  end\n\n  def lead_stage(tenant)\n    primary_condition = \"\"\n    if value == \"any\"\n      primary_condition = \"c.prospect_status_id IS NOT NULL\"\n    else\n      # primary_condition = \"c.prospect_status_id = #{ActiveRecord::Base::sanitize(value)}\"\n      primary_condition = \"ps_old.id = #{ActiveRecord::Base::sanitize(value)}\"\n    end\n    %Q{\n      SELECT null\n      FROM contacts c\n      LEFT JOIN prospect_statuses ON prospect_statuses.id = c.prospect_status_id\n      LEFT JOIN prospect_statuses ps_old ON ps_old.name = prospect_statuses.name\n      WHERE c.id = contacts.id\n      AND #{primary_condition}\n    }\n  end\n\n  def lead_stage_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    if value == \"any\"\n      result = \"Contact is #{negate_text}a Lead\"\n    else\n      lead_stage = ProspectStatus.where(id: value).first\n      lead_stage_name = \"Unknown\"\n      lead_stage_name = lead_stage.name if lead_stage\n      result = \"Lead stage is #{negate_text}#{lead_stage_name}\"\n    end\n    result\n  end\n\n  def lead_type(tenant)\n    \"contacts.lead_type_id #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n  end\n\n  def lead_type_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    lead_type = LeadType.where(id: value).first\n    lead_type_name = \"Unknown\"\n    lead_type_name = lead_type.name if lead_type\n    result = \"Lead type is #{negate_text}#{lead_type_name}\"\n    result\n  end\n\n  def statement_contact(tenant)\n    \"companies.source_billtocontact_id::TEXT = contacts.platform_id\"\n  end\n\n  def statement_contact_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a statement contact\"\n  end\n\n  def invoice_contact(tenant)\n    \"companies.source_contact_id::TEXT = contacts.platform_id\"\n  end\n\n  def invoice_contact_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a invoice contact\"\n  end\n\n  def walk_in(tenant)\n    \"companies.walk_in = #{logical_operand}\"\n  end\n\n  def walk_in_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"true\") || (negate && operand == \"true\")\n    \"Is #{negate_text}a walk in contact\"\n  end\n\n  def company_status(tenant)\n    \"companies.status #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n  end\n\n  def company_status_text(tenant)\n    status = ContactListRule.company_status.select { |possible_value| possible_value[1] == value }.try(:first).try(:first)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand == \"is_not\") || (negate && operand != \"is_not\")\n    \"Company status is #{negate_text}#{status}\".humanize\n  end\n\n  def buy_frequency(tenant)\n    if logical_operand_name == \"between\"\n      \"contacts.days_outside_buy_freq BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value.to_i)} AND #{ActiveRecord::Base::sanitize(value2.to_i)}\"\n    else\n      \"contacts.days_outside_buy_freq #{logical_operand} #{ActiveRecord::Base::sanitize(value.to_i)}\"\n    end\n  end\n\n  def buy_frequency_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Contact is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value} days outside of their buy frequency\"\n    result\n  end\n\n  def orders_in_progress(tenant)\n    %Q{\n      SELECT null\n      FROM invoices\n      WHERE contact_id = contacts.id\n      AND invoices.voided = false\n      AND invoices.deleted = false\n      HAVING BOOL_OR(invoices.on_pending_list) = #{logical_operand}\n    }\n  end\n\n  def orders_in_progress_text(tenant)\n    condidtion = (!negate && operand == \"true\") || (negate && operand != \"true\") ? \"has\" : \"#{negate_text(\"does not\")} have any\"\n    \"Contact #{condidtion} orders in progress\"\n  end\n\n  def address(tenant)\n    negate_query = \"\"\n    if operand != \"exists\"\n      negate_query = \"NOT \"\n    end\n\n    %Q{\n      (\n        #{negate_query}EXISTS (\n          SELECT null\n          FROM addresses\n          WHERE (addresses.id = contacts.address_id OR addresses.id = companies.invoice_address_id)\n          AND ((addresses.street1 IS NOT NULL AND addresses.street1 != '') OR (addresses.street2 IS NOT NULL AND addresses.street2 != ''))\n        )\n      )\n    }\n  end\n\n  def address_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"Address #{negate_text(\"does not\")} exist\"\n    else\n      \"Address exists\"\n    end\n  end\n\n  def company_ranking(tenant)\n    if logical_operand_name == \"between\"\n      \"companies.rolling_12_month_rank BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value.to_i)} AND #{ActiveRecord::Base::sanitize(value2.to_i)}\"\n    else\n      \"companies.rolling_12_month_rank #{logical_operand} #{ActiveRecord::Base::sanitize(value.to_i)}\"\n    end\n  end\n\n  def company_ranking_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Company rank is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def contact_ranking(tenant)\n    min_sales_offset = 0\n    min_sales_offset = value.to_i - 1 if value.to_i > 0\n    min_sales = Contact.where(tenant_id: tenant.id).order(\"contacts.rolling_12_month_sales DESC NULLS LAST\").offset(min_sales_offset).limit(1).pluck(:rolling_12_month_sales).first\n    if !min_sales.nil?\n      min_sales = 0.000001 if min_sales == 0\n      max_sales_offset = 0\n      max_sales_offset = value2.to_i - 1 if value2.to_i > 0\n      max_sales = Contact.where(tenant_id: tenant.id).order(\"contacts.rolling_12_month_sales DESC NULLS LAST\").offset(max_sales_offset).limit(1).pluck(:rolling_12_month_sales).first\n      if logical_operand_name == \"between\"\n        \"contacts.rolling_12_month_sales BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(min_sales)} AND #{ActiveRecord::Base::sanitize(max_sales)}\" if !min_sales.nil?\n      else\n        \"contacts.rolling_12_month_sales #{logical_operand} #{ActiveRecord::Base::sanitize(min_sales)}\"\n      end\n    end\n  end\n\n  def contact_ranking_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \"and #{value2} \" if logical_operand_name == \"between\"\n    result = \"Contact rank is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value} #{between_value}\"\n    result\n  end\n\n  def sale_name(tenant)\n    \"\"\n    # result = Contact.joins(:invoices)\n    # filters = value.split(',').map{|s| \"#{s.squish}\"}.join('|')\n    # filters = ActiveRecord::Base::sanitize(\"\\\\y(#{filters})\")\n    # result = result.where(\"invoices.name ~* #{filters}\")\n    # result\n  end\n\n  def sale_name_text(tenant)\n    \"NO LONGER VALID\"\n    # if negate\n    #   \"Sale name #{negate_text(\"does not\")} match #{value}\"\n    # else\n    #   \"Sale name matches #{value}\"\n    # end\n  end\n\n  def sale_name_contextuals(tenant, contacts)\n    result = {}\n    # filters = value.split(',').map{|s| \"#{s.squish}\"}.join('|')\n    # filters = ActiveRecord::Base::sanitize(\"\\\\y(#{filters})\")\n    # sales = Sale.joins(:contact).where(contact_id: contacts.map{|contact| contact.id}).where(\"invoices.name ~* #{filters}\").order(created_at: :asc)\n    #\n    # contacts.each do |contact|\n    #   invoice_numbers = []\n    #   invoice_name = []\n    #   sales.each do |sale|\n    #     if sale.contact_id == contact.id\n    #       invoice_numbers << sale.invoice_number\n    #       invoice_name << sale.name\n    #     end\n    #   end\n    #   result[contact.id] = {invoice_numbers: invoice_numbers, invoice_name: invoice_name}\n    # end\n    result\n  end\n\n  def tag_match(tenant)\n    negate_query = operand != \"matches\" ? \"NOT\" : \"\"\n    query = %Q{\n      #{negate_query} EXISTS (\n        SELECT null\n        FROM tag_categories\n        INNER JOIN tags ON tag_categories.id = tags.tag_category_id\n          AND tags.deleted = FALSE\n        WHERE\n          tag_categories.id = #{ActiveRecord::Base::sanitize(value.to_i)}\n          AND tag_categories.performing_cleanup = FALSE\n          AND tag_categories.deleted = FALSE\n          AND ( ( tag_categories.tenant_id = #{tenant.id} OR tag_categories.tenant_id IS NULL ) AND tag_categories.enterprise_id = #{tenant.enterprise_id} )\n          AND tags.tenant_id = #{tenant.id}\n          AND tags.taggable_type = 'Contact'\n          AND tags.taggable_id = contacts.id\n      )\n    }\n    query\n  end\n\n  def tag_match_text(tenant)\n    tag_category = TagCategory.unscoped.where(id: value).first.try(:name)\n    if (!negate && operand != \"matches\") || (negate && operand == \"matches\")\n      \"Tag #{negate_text(\"does not\")} match #{tag_category}\"\n    else\n      \"Tag matches #{tag_category}\"\n    end\n  end\n\n  # def tag_match_contextuals(tenant, contacts)\n  #   result = {}\n  #   invoices = Invoice.joins(:contact).joins(\"INNER JOIN tags ON tags.taggable_id = invoices.id AND tags.taggable_type = 'Invoice'\").where(contact_id: contacts.map{|contact| contact.id}).where(tags: {tag_category_id: value.to_i}).order(created_at: :asc)\n\n  #   contacts.each do |contact|\n  #     invoice_numbers = []\n  #     invoice_name = []\n  #     invoices.each do |invoice|\n  #       if invoice.contact_id == contact.id\n  #         invoice_numbers << invoice.invoice_number\n  #         invoice_name << invoice.name\n  #       end\n  #     end\n  #     result[contact.id] = {invoice_numbers: invoice_numbers, invoice_name: invoice_name}\n  #   end\n  #   result\n  # end\n\n  def sent_campaign(tenant)\n    primary_condition = \"\"\n    if !value2.blank?\n      if value2 == \"opened\"\n        primary_condition = \"AND campaign_messages.opened = true\"\n      elsif value2 == \"not_opened\"\n        primary_condition = \"AND campaign_messages.opened = false\"\n      end\n    end\n    modifier_condition = \"\"\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND campaigns.created_at BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        if logical_operand(1) == \"=\"\n          modifier_condition = \"AND campaigns.created_at BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1.beginning_of_day)} AND #{ActiveRecord::Base::sanitize(date1.end_of_day)}\"\n        else\n          modifier_condition = \"AND campaigns.created_at #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n        end\n      end\n    end\n    %Q{\n      SELECT null\n      FROM campaign_messages\n      INNER JOIN campaigns ON campaigns.id = campaign_messages.campaign_id\n      WHERE campaign_messages.contact_id = contacts.id\n      AND campaigns.parent_id = #{value}\n      AND campaigns.test = false\n      AND campaign_messages.sent = true\n      #{primary_condition}\n      #{modifier_condition}\n    }\n  end\n\n  def sent_campaign_text(tenant)\n    result = \"\"\n    campaign = Campaign.unscoped.where(id: value).first.try(:name)\n    if (!negate && operand != \"sent\") || (negate && operand == \"sent\")\n      result = \"Was #{negate_text(\"not\")} sent campaign: #{campaign}\"\n    else\n      result = \"Was sent campaign: #{campaign}\"\n    end\n    if !modifier.blank?\n      result = \"#{result} #{modifier_operand} #{modifier_value}\"\n      result = \"#{result} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n\n    result\n  end\n\n  def first_name(tenant)\n    \"contacts.first_name IS NOT NULL AND contacts.first_name != ''\"\n  end\n\n  def first_name_text(tenant)\n    if (!negate && operand != \"exists\") || (negate && operand == \"exists\")\n      \"First name #{negate_text(\"does not\")} exist\"\n    else\n      \"First name exists\"\n    end\n  end\n\n  def estimates_in_progress(tenant)\n    condition = \"AND estimates.voided = false AND estimates.deleted = false HAVING BOOL_OR(estimates.on_pending_list) = true\"\n    if !logical_operand\n      condition = \"AND ((estimates.voided = false AND estimates.deleted = false) OR estimates.on_pending_list IS NULL) HAVING (BOOL_OR(estimates.on_pending_list) = false OR BOOL_OR(estimates.on_pending_list) IS NULL)\"\n    end\n    %Q{\n      SELECT null\n      FROM contacts i_contacts\n      LEFT OUTER JOIN estimates ON estimates.contact_id = i_contacts.id\n      WHERE i_contacts.id = contacts.id\n      #{condition}\n    }\n  end\n\n  def estimates_in_progress_text(tenant)\n    condidtion = (!negate && operand == \"true\") || (negate && operand != \"true\") ? \"has\" : \"#{negate_text(\"does not\")} have any\"\n    \"Contact #{condidtion} estimates in progress\"\n  end\n\n  def estimates_status(tenant)\n    modifier_condition = \"\"\n    if !modifier.blank?\n      date1, date2 = get_modifier_dates(tenant)\n      if !date1.nil? && !date2.nil?\n        modifier_condition = \"AND estimates.ordered_date BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(date1)} AND #{ActiveRecord::Base::sanitize(date2)}\"\n      elsif !date1.nil?\n        modifier_condition = \"AND estimates.ordered_date #{logical_operand(1)} #{ActiveRecord::Base::sanitize(date1)}\"\n      end\n    end\n\n    %Q{\n      SELECT null\n      FROM estimates\n      WHERE contact_id = contacts.id\n      AND estimates.voided = false\n      AND estimates.deleted = false\n      AND estimates.status = '#{logical_operand}'\n      #{modifier_condition}\n    }\n  end\n\n  def estimates_status_text(tenant)\n    modifier_text = \"\"\n    if !modifier.blank?\n      modifier_text = \" #{modifier_operand} #{modifier_value}\"\n      modifier_text = \"#{modifier_text} and #{modifier_value2}\" if modifier_operand == \"between\"\n    end\n    condidtion = !negate ? \"has\" : \"#{negate_text(\"does not\")} have any\"\n    \"Contact #{condidtion} estimates with a status of #{logical_operand}#{modifier_text}\"\n  end\n\n  def company_growth(tenant)\n    if logical_operand_name == \"between\"\n      \"companies.growth_percentage BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      \"companies.growth_percentage #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n  end\n\n  def company_growth_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Company growth is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def contact_growth(tenant)\n    if logical_operand_name == \"between\"\n      \"contacts.growth_percentage BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      \"contacts.growth_percentage #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n  end\n\n  def contact_growth_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Contact growth is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def average_invoice(tenant)\n    if logical_operand_name == \"between\"\n      \"contacts.average_invoice BETWEEN SYMMETRIC #{ActiveRecord::Base::sanitize(value)} AND #{ActiveRecord::Base::sanitize(value2)}\"\n    else\n      \"contacts.average_invoice #{logical_operand} #{ActiveRecord::Base::sanitize(value)}\"\n    end\n  end\n\n  def average_invoice_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if negate\n    between_value = \" and #{value2}\" if logical_operand_name == \"between\"\n    result = \"Average invoice is #{negate_text}#{logical_operand_name.humanize(capitalize: false)} #{value}#{between_value}\"\n    result\n  end\n\n  def sales_rep(tenant)\n    if tenant.sales_rep_for_locations\n      if operand != \"is\"\n        \"contacts.location_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} AND companies.location_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      else\n        \"contacts.location_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} OR companies.location_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      end\n    else\n      if operand != \"is\"\n        \"contacts.sales_rep_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} AND companies.sales_rep_user_id IS DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      else\n        \"contacts.sales_rep_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)} OR companies.sales_rep_user_id IS NOT DISTINCT FROM #{ActiveRecord::Base::sanitize(sales_rep_id)}\"\n      end\n    end\n  end\n\n  def sales_rep_text(tenant)\n    negate_text = \"#{negate_text(\"not\")} \" if (!negate && operand != \"is\") || (negate && operand == \"is\")\n\n    if tenant.sales_rep_for_locations\n      location = Location.where(id: sales_rep_id).first\n      location_name = location.try(:name) || \"Unknown\"\n      result = \"Location is #{negate_text} #{location_name}\"\n      result\n    else\n      sales_rep = User.where(id: sales_rep_id).first\n      sales_rep_name = sales_rep.try(:full_name) || \"Unknown\"\n      result = \"Sales Rep is #{negate_text} #{sales_rep_name}\"\n      result\n    end\n  end\n\n  def privacy(tenant)\n    \"contacts.privacy_data->>#{ActiveRecord::Base::sanitize(value)} IS NOT NULL AND (contacts.privacy_data->#{ActiveRecord::Base::sanitize(value)}->'state') = '1'\"\n  end\n\n  def privacy_text(tenant)\n    negate_text = \"#{negate_text(\"No\")} \" if negate\n    privacy = \"Privacy\"\n    privacy.downcase! if negate\n    result = \"#{negate_text}#{privacy} for #{value.titleize}\"\n    result\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "categories_for_dropdown",
                "scope": "private",
                "class_method": true,
                "arguments": "(target_tenant, list)"
              },
              {
                "name": "categories",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "numeric_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "inverted_numeric_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "integer_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "inverted_integer_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "date_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "relative_date_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "quarter_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "existence_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "boolean_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "value_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "match_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "tag_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "campaign_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "sales_rep_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "estimates_status_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "industry_operands",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "quarters",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "company_status",
                "scope": "private",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "is_direct?",
                "scope": "private",
                "class_method": true,
                "arguments": "(category)"
              },
              {
                "name": "get_type",
                "scope": "private",
                "class_method": true,
                "arguments": "(category)"
              },
              {
                "name": "get_modifiers",
                "scope": "private",
                "class_method": true,
                "arguments": "(category, use_modifier = 1)"
              }
            ],
            "instance": [
              {
                "name": "valid_modifier?",
                "scope": "private",
                "class_method": false,
                "arguments": "(use_modifier = 1)"
              },
              {
                "name": "get_sql",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "get_rule_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "get_mbe_rule_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "per_month_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "resolve_value",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "set_month_range",
                "scope": "private",
                "class_method": false,
                "arguments": "(date1, date2)"
              },
              {
                "name": "get_rule_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "contacts",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, page = nil, per = nil)"
              },
              {
                "name": "contacts_query",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, page = nil, per = nil)"
              },
              {
                "name": "logical_operand",
                "scope": "private",
                "class_method": false,
                "arguments": "(use_modifier = 0)"
              },
              {
                "name": "logical_operand_name",
                "scope": "private",
                "class_method": false,
                "arguments": "(use_modifier = 0)"
              },
              {
                "name": "numeric_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "integer_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "date_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value, date_format)"
              },
              {
                "name": "date_relative_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "quarter_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "parse_quarter",
                "scope": "private",
                "class_method": false,
                "arguments": "(quarter)"
              },
              {
                "name": "get_modifier_dates",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, use_modifier = 1)"
              },
              {
                "name": "negate_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(text)"
              },
              {
                "name": "total_sales",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "total_sales_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "web_sales",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "web_sales_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_sale",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_sale_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "single_sale_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_estimate",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_estimate_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month_by_company",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month_by_company_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_created_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_created_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_created_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_created_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "industry",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "industry_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_order_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_order_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_estimate_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_estimate_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_shipment_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_shipment_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_shipment_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_shipment_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_order_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_order_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_sale_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_sale_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_estimate_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_estimate_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimate_ordered_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimate_ordered_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_ordered_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_ordered_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_single_sale",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_single_sale_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_sale_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_sale_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_pickup_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_pickup_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_pickup_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_sale_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_sale_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_pickup_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "email_address",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "email_address_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "phone_number",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "phone_number_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "prospect",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "prospect_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_stage",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_stage_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_type",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_type_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "statement_contact",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "statement_contact_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_contact",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_contact_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "walk_in",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "walk_in_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_status",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_status_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "buy_frequency",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "buy_frequency_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "orders_in_progress",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "orders_in_progress_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "address",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "address_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_ranking",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_ranking_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_ranking",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_ranking_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sale_name",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sale_name_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sale_name_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "tag_match",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "tag_match_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "tag_match_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "sent_campaign",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sent_campaign_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_name",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_name_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_in_progress",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_in_progress_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_status",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_status_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_growth",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_growth_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_growth",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_growth_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "average_invoice",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "average_invoice_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_rep",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_rep_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "privacy",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "privacy_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              }
            ],
            "instance_public": [

            ],
            "instance_private": [
              {
                "name": "valid_modifier?",
                "scope": "private",
                "class_method": false,
                "arguments": "(use_modifier = 1)"
              },
              {
                "name": "get_sql",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "get_rule_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "get_mbe_rule_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "per_month_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "resolve_value",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "set_month_range",
                "scope": "private",
                "class_method": false,
                "arguments": "(date1, date2)"
              },
              {
                "name": "get_rule_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "contacts",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, page = nil, per = nil)"
              },
              {
                "name": "contacts_query",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, page = nil, per = nil)"
              },
              {
                "name": "logical_operand",
                "scope": "private",
                "class_method": false,
                "arguments": "(use_modifier = 0)"
              },
              {
                "name": "logical_operand_name",
                "scope": "private",
                "class_method": false,
                "arguments": "(use_modifier = 0)"
              },
              {
                "name": "numeric_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "integer_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "date_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value, date_format)"
              },
              {
                "name": "date_relative_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "quarter_validate?",
                "scope": "private",
                "class_method": false,
                "arguments": "(value)"
              },
              {
                "name": "parse_quarter",
                "scope": "private",
                "class_method": false,
                "arguments": "(quarter)"
              },
              {
                "name": "get_modifier_dates",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, use_modifier = 1)"
              },
              {
                "name": "negate_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(text)"
              },
              {
                "name": "total_sales",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "total_sales_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "web_sales",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "web_sales_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_sale",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_sale_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "single_sale_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_estimate",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "single_estimate_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month_by_company",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_per_month_by_company_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_created_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_created_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_created_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_created_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "industry",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "industry_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_order_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_order_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_estimate_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_estimate_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_shipment_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_shipment_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_shipment_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_shipment_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_order_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_order_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_sale_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_sale_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_estimate_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_estimate_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimate_ordered_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimate_ordered_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_ordered_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_ordered_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_single_sale",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_single_sale_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_sale_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_sale_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_pickup_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "last_pickup_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_pickup_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_sale_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_sale_date",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "days_since_last_pickup_date_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "email_address",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "email_address_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "phone_number",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "phone_number_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "prospect",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "prospect_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_stage",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_stage_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_type",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "lead_type_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "statement_contact",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "statement_contact_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_contact",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "invoice_contact_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "walk_in",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "walk_in_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_status",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_status_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "buy_frequency",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "buy_frequency_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "orders_in_progress",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "orders_in_progress_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "address",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "address_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_ranking",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_ranking_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_ranking",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_ranking_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sale_name",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sale_name_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sale_name_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "tag_match",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "tag_match_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "tag_match_contextuals",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant, contacts)"
              },
              {
                "name": "sent_campaign",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sent_campaign_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_name",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "first_name_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_in_progress",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_in_progress_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_status",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "estimates_status_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_growth",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "company_growth_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_growth",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "contact_growth_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "average_invoice",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "average_invoice_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_rep",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "sales_rep_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "privacy",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "privacy_text",
                "scope": "private",
                "class_method": false,
                "arguments": "(tenant)"
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "contact_list",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "taken_by",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "contact_list",
        "name_plural": "contact_lists",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact_list.rb",
        "source": {
          "ruby": "class ContactList < ActiveRecord::Base\n  validates :name, length: { minimum: 4 }\n\n  belongs_to :tenant\n  belongs_to :enterprise\n  has_many :rules, class_name: \"ContactListRule\", dependent: :destroy\n  has_many :exclusions, class_name: \"ContactListExclusion\", dependent: :destroy\n  has_many :counts, class_name: \"ContactListCount\", dependent: :destroy\n  has_and_belongs_to_many :campaigns, -> { uniq }\n  has_and_belongs_to_many :contacts, -> { uniq }\n\n\n\n  scope :tenant_scope, lambda { |tenant_id| where(\"contact_lists.tenant_id = ? OR contact_lists.global = ?\", tenant_id, true) }\n  scope :user_scope, lambda { |user_id| joins(\"INNER JOIN users ON users.id = '#{user_id}'\").where(\"contact_lists.hide_from_tenant = 'false' OR users.role = 'Super User' OR users.role = 'Enterprise User'\", user_id) }\n\n  def all_contacts(tenant, page = nil, per = nil, rule_based_only = false, campaign = nil, location = nil, exclude_oversend = false, only_oversend = false, search = nil, sort = nil, direction = nil, background = false)\n    page ||= 1\n    query = all_contacts_query(tenant, page, per, rule_based_only, campaign, location, exclude_oversend, only_oversend, search, sort, direction, background)\n    if query.blank?\n      result = Contact.none\n      total_count = 0\n    else\n      start_time = Time.now\n      result = Contact.find_by_sql(query)\n      total_count = result.first.try(:total_count) || 0\n      end_time = Time.now\n\n      if !rule_based_only && campaign.nil? && location.nil? && exclude_oversend == false && only_oversend == false\n        count = counts.find_or_initialize_by(tenant_id: tenant.id)\n        count.assign_attributes(total_count: total_count, generate_duration: end_time - start_time)\n        count.save\n      end\n    end\n    if page.to_i <= 0\n      Kaminari.paginate_array(result, total_count: total_count).page(0).per(total_count)\n    else\n      Kaminari.paginate_array(result, total_count: total_count).page(page).per(per)\n    end\n  end\n\n  def all_contacts_query(tenant, page = nil, per = nil, rule_based_only = false, campaign = nil, location = nil, exclude_oversend = false, only_oversend = false, search = nil, sort = nil, direction = nil, background = false)\n    page ||= 1\n    per ||= 10\n    offset = (page.to_i - 1) * per\n\n\n    rule_conditions = \"\"\n    rules.order(id: :asc).each do |rule|\n      rule_sql = rule.get_sql(tenant)\n      rule_conditions << rule_sql unless rule_sql.blank?\n    end\n\n    if !rule_conditions.blank?\n      if !location.nil?\n        if location.id.nil?\n          location_condition = \"AND (contacts.location_user_id IS NULL AND companies.location_user_id IS NULL)\"\n        else\n          default_location = \" OR (contacts.location_user_id IS NULL AND companies.location_user_id IS NULL)\" if location.default\n          location_condition = \"AND (contacts.location_user_id = #{location.id}#{default_location} OR (contacts.location_user_id IS NULL AND companies.location_user_id = #{location.id}))\"\n        end\n      end\n\n      unless rule_based_only && !only_oversend\n        exclude_ids = exclusions.where(tenant_id: tenant.id).pluck(:contact_id)\n        exclusions_query = \"AND contacts.id NOT IN (#{exclude_ids.to_csv})\" if exclude_ids.any?\n\n        include_ids = contacts.where(tenant_id: tenant.id).pluck(:id)\n        inclusions_query = \"OR (contacts.id IN (#{include_ids.to_csv})#{location_condition})\" if include_ids.any? && only_oversend == false\n      end\n\n      if !campaign.nil? && !only_oversend\n        campaign_exclude_ids = campaign.exclusions.pluck(:contact_id)\n        campaign_exclusions_query = \"AND contacts.id NOT IN (#{campaign_exclude_ids.to_csv})\" if campaign_exclude_ids.any?\n      end\n\n      if exclude_oversend || only_oversend\n        min_resend = tenant.try(:campaign_min_resend_days).try(:days)\n        min_resend = 25.days if min_resend.nil?\n        min_resend_time = (Time.now - min_resend).to_formatted_s(:db)\n        oversend_exclusions_query = \"\"\n        # oversend_exclusions_query = %Q{\n        #   SELECT null\n        #   FROM campaign_messages\n        #   JOIN campaigns ON campaigns.id = campaign_messages.campaign_id\n        #   JOIN contacts AS message_contacts ON message_contacts.id = campaign_messages.contact_id\n        #   WHERE campaigns.test = FALSE\n        #   AND campaigns.tenant_id = #{tenant.id}\n        #   AND (\n        #     (campaign_messages.sent = TRUE AND campaign_messages.sent_date > '#{min_resend_time}')\n        #     OR (campaigns.paused = FALSE AND campaign_messages.sent != TRUE AND campaign_messages.failed != TRUE AND campaign_messages.created_at > '#{min_resend_time}')\n        #   )\n        #   AND LOWER(TRIM(message_contacts.email)) = LOWER(BTRIM(contacts.email))\n        # }\n        oversend_query = %Q{\n          SELECT ic.id\n          FROM contacts ic\n          WHERE ic.tenant_id = #{tenant.id}\n          AND EXISTS(\n            SELECT null\n            FROM campaign_messages\n            INNER JOIN campaigns ON campaigns.id = campaign_messages.campaign_id\n            INNER JOIN contacts AS message_contacts ON message_contacts.tenant_id = #{tenant.id} AND message_contacts.id = campaign_messages.contact_id\n            WHERE campaigns.test = FALSE\n            AND campaigns.tenant_id = #{tenant.id}\n            AND (\n              (campaign_messages.sent = TRUE AND campaign_messages.sent_date > '#{min_resend_time}')\n              OR (campaigns.paused = FALSE AND campaign_messages.sent != TRUE AND campaign_messages.failed != TRUE AND campaign_messages.created_at > '#{min_resend_time}')\n            )\n            AND LOWER(TRIM(message_contacts.email)) = LOWER(BTRIM(ic.email))\n          )\n        }\n        oversend_ids = Contact.find_by_sql(oversend_query).to_a.map { |s| s.id }\n        if oversend_ids.count > 0\n          if only_oversend\n            oversend_exclusions_query = \"AND contacts.id IN (#{oversend_ids.to_csv})\"\n          else\n            oversend_exclusions_query = \"AND contacts.id NOT IN(#{oversend_ids.to_csv})\"\n          end\n        else\n          if only_oversend\n            oversend_exclusions_query = \"AND false\"\n          end\n        end\n      end\n\n      if !search.nil?\n        search = \"%#{search}%\"\n        search_query = \"AND ((trim(regexp_replace(COALESCE(contacts.first_name, '') || ' ' || COALESCE(contacts.last_name, ''), '\\s+', ' ', 'g')) ILIKE #{ActiveRecord::Base::sanitize(search)}) OR companies.name ILIKE #{ActiveRecord::Base::sanitize(search)})\"\n      end\n\n      case sort\n      when \"name\"\n        sort_query = \"contacts.first_name #{direction ? direction : 'ASC' } NULLS LAST\"\n      when \"company\"\n        sort_query = \"MIN(companies.name) #{direction ? direction : 'ASC' } NULLS LAST, contacts.first_name ASC NULLS LAST\"\n      when \"rolling12ly\"\n        sort_query = \"contacts.rolling_12_month_sales_ly #{direction ? direction : 'DESC' } NULLS LAST, contacts.first_name ASC NULLS LAST\"\n      when \"growth\"\n        sort_query = \"contacts.growth_percentage #{direction ? direction : 'DESC' } NULLS LAST, contacts.first_name ASC NULLS LAST\"\n      when \"status\"\n        sort_query = \"MIN(companies.status) #{direction ? direction : 'ASC  ' } NULLS LAST, contacts.first_name ASC NULLS LAST\"\n      when \"lastorder\"\n        sort_query = \"contacts.latest_order_date #{direction ? direction : 'DESC' } NULLS LAST, contacts.first_name ASC NULLS LAST\"\n      else\n        sort_query = \"contacts.rolling_12_month_sales #{direction ? direction : 'DESC' } NULLS LAST, contacts.first_name ASC NULLS LAST\"\n      end\n\n      limit = \"LIMIT #{per} OFFSET #{offset}\" unless page.to_i <= 0\n\n      selector = \"contacts.*\"\n      selector = \"contacts.id\" if background\n\n      query = %Q{\n        SELECT #{selector}, (COUNT(*) OVER()) AS total_count\n        FROM contacts\n        LEFT OUTER JOIN companies ON companies.id = contacts.company_id\n        WHERE contacts.tenant_id = #{tenant.id}\n        #{account_type_query}\n        AND contacts.deleted = false\n        AND contacts.unsubscribed = false\n        AND companies.marketing_do_not_mail = false\n        AND NOT EXISTS ( SELECT null FROM email_soft_bounces WHERE email_soft_bounces.tenant_id = #{tenant.id} AND LOWER(BTRIM(contacts.email)) = email_soft_bounces.email_address AND soft_bounce_count >= 3 )\n        AND (\n          (\n            true\n            #{location_condition}\n            #{rule_conditions}\n            #{exclusions_query}\n            #{campaign_exclusions_query}\n            #{oversend_exclusions_query}\n          )\n          #{inclusions_query}\n        )\n        #{search_query}\n        GROUP BY contacts.id\n        ORDER BY #{sort_query}\n        #{limit}\n      }\n    end\n\n    query\n  end\n\n  def account_type_query\n    result = \"\"\n    case account_type\n    when \"account\"\n      result = \"AND contacts.temp = FALSE\"\n    when \"temp\"\n      result = \"AND contacts.temp = TRUE\"\n    end\n    result\n  end\n\n  def tenant_count(tenant)\n    counts.find_by(tenant_id: tenant.id).try(:total_count) || 0\n  end\n\n  def enterprise_count(selected_tenants)\n    ContactListCount.where(tenant_id: selected_tenants, contact_list_id: id).sum(:total_count)\n  end\n\n  def contextuals(tenant, contacts = nil)\n    contacts ||= all_contacts(tenant, -1)\n    result = {}\n    rules.order(id: :asc).each do |rule|\n      contextuals = rule.get_rule_contextuals(tenant, contacts)\n      contextuals.each do |contact_id, value|\n        result[contact_id] = {} unless result[contact_id]\n        result[contact_id].merge!(value) { |key, first, second| (first << second) }\n      end\n    end\n    result\n  end\n\n  def exported_csv(tenant, with_headers = true)\n    current_locale = I18n.locale\n    I18n.locale = tenant.enterprise.locale\n    contacts = all_contacts(tenant, -1)\n    contextuals = contextuals(tenant, contacts)\n    result = CSV.generate(col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      fields = %w[\n        first_name\n        last_name\n        email\n        phone\n        mobile\n        sales_rep_name\n        sales_rep_email\n        company_name\n        printspeak_contact_url\n        printspeak_company_url\n        tenant_name\n        tenant_phone\n        tenant_contact_name\n        tenant_number\n        tenant_address_1\n        tenant_address_2\n        tenant_city\n        tenant_state\n        tenant_zip\n        address_name\n        street1\n        street2\n        city\n        zip\n        state\n        company_address_name\n        company_street1\n        company_street2\n        company_city\n        company_zip\n        company_state\n      ]\n      fields << \"location\" if tenant.sales_rep_for_locations\n      fields = fields + contextuals.first[1].keys if contextuals.count > 0\n      csv << fields.map { |f| I18n.t_prefix(f, tenant) } if with_headers\n\n\n      company_ids = contacts.map do |contact|\n        contact.company_id if !contact.company_id.nil?\n      end\n      company_ids = company_ids.try(:compact).try(:uniq)\n\n      contact_companies = {}\n      if company_ids && company_ids.count > 0\n        Company.where(id: company_ids).each do |company|\n          contact_companies.store(company.id, company)\n        end\n      end\n\n      contact_url = Rails.application.routes.url_helpers.contact_url(\"\")\n      company_url = Rails.application.routes.url_helpers.company_url(\"\")\n\n      contacts.each do |contact|\n        company = contact_companies[contact.company_id] if contact.company_id\n        sales_rep = contact.sales_rep\n        sales_rep = SalesRep.where(tenant: tenant).where(platform_id: company.sales_rep_platform_id).first if sales_rep.nil? && !company.nil?\n        sales_rep_name = sales_rep.try(:user).try(:full_name)\n        sales_rep_email = sales_rep.try(:user).try(:email)\n        contact_address = contact.try(:address)\n        company_address = contact.try(:company).try(:invoice_address)\n        values = [\n          contact.first_name.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact.first_name.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact.last_name.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact.last_name.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact.email.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact.email.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact.phone.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact.phone.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact.mobile.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact.mobile.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          sales_rep_name.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : sales_rep_name.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          sales_rep_email.try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : sales_rep_email.try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company.try(:name).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          \"#{contact_url}#{contact.id}\",\n          company.nil? ? nil : \"#{company_url}#{company.id}\",\n          tenant.name,\n          tenant.phone,\n          tenant.contact_name,\n          tenant.number,\n          tenant.address_1,\n          tenant.address_2,\n          tenant.suburb,\n          tenant.state,\n          tenant.postcode,\n          contact_address.try(:name).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact_address.try(:name).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact_address.try(:street1).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact_address.try(:street1).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact_address.try(:street2).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact_address.try(:street2).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact_address.try(:city).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact_address.try(:city).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact_address.try(:zip).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact_address.try(:zip).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          contact_address.try(:state).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : contact_address.try(:state).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company_address.try(:name).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : company_address.try(:name).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company_address.try(:street1).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : company_address.try(:street1).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company_address.try(:street2).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : company_address.try(:street2).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company_address.try(:city).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : company_address.try(:city).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company_address.try(:zip).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : company_address.try(:zip).try(:strip).try(:gsub, /[\\r|\\n]/, \"\"),\n          company_address.try(:state).try(:strip).try(:gsub, /[\\r|\\n]/, \"\").blank? ? nil : company_address.try(:state).try(:strip).try(:gsub, /[\\r|\\n]/, \"\")\n        ]\n        values << (contact.location.nil? ? \"No Location\" : contact.location.name) if tenant.sales_rep_for_locations\n        if contextuals.count > 0\n          contextuals[contact.id].each do |key, value|\n            values << value.join(\" \")\n          end\n        end\n        csv << values\n      end\n    end\n    I18n.locale = current_locale\n    result\n  end\n\n  def create_export_job(target_tenant, target_user, target_ids, combined = false)\n    filename = \"#{name.squish.tr(' ' , '_')}\"\n    if target_ids.count == 1\n      first_tenant = Tenant.enabled.where(id: target_ids, enterprise_id: target_tenant.enterprise_id).first\n      if first_tenant\n        filename = \"#{PrintSpeak::Application.to_file_system_name(first_tenant.name)}_#{PrintSpeak::Application.to_file_system_name(name)}\"\n        filename = \"#{PrintSpeak::Application.to_file_system_name(first_tenant.number)}_#{filename}\" if RegionConfig.require_value(\"region\") == \"us\"\n      end\n    end\n    job = BackgroundJob.queue(\n      tenant: target_tenant,\n      user: target_user,\n      job_type: \"contact_list_export\",\n      name: \"Contact List Export Status\",\n      description: \"Exporting contact list\",\n      status_view: \"contact_lists/export_status\",\n      completed_view: \"contact_lists/export_status\",\n      data: {\n        selected_ids: target_ids,\n        combined: combined,\n        contact_list_id: id,\n        filename: filename,\n      }\n    )\n    job\n  end\n\n  def self.do_export_job(job)\n    require \"zip\"\n    bom = \"\\xEF\\xBB\\xBF\"  # Defines UTF-8 ByteOrderMark to csv so Excel is happy\n    data = job.data\n    out_data = String.new\n    error = String.new\n    filename = data[\"filename\"]\n\n    contact_list = ContactList.where(id: data[\"contact_list_id\"]).first\n    selected_ids = data[\"selected_ids\"] || []\n    mime_type = \"text/csv\"\n    if contact_list && selected_ids.count > 0\n      target_tenants = Tenant.enabled.where(id: selected_ids, enterprise_id: job.tenant.enterprise_id).order(name: :asc)\n      if target_tenants.count > 1 && !data[\"combined\"]\n        mime_type = \"application/zip\"\n        filename << \".zip\"\n        out_data = Zip::OutputStream.write_buffer do |out|\n          target_tenants.each do |tenant|\n            tenant_filename = \"#{tenant.name.squish.tr(' ' , '_')}_#{name.squish.tr(' ' , '_')}.csv\"\n            tenant_filename = \"#{tenant.number.squish.tr(' ' , '_')}_#{tenant_filename}\" if RegionConfig.require_value(\"region\") == \"us\"\n            out.put_next_entry(tenant_filename.tr(\"/\" , \"_\").tr(\"\\\\\" , \"_\"))\n            out.write(bom)\n            out.write(contact_list.exported_csv(tenant))\n          end\n        end.string\n      else\n        filename << \".csv\"\n        out_data << bom\n        first = true\n        target_tenants.each do |tenant|\n          out_data << contact_list.exported_csv(tenant, first)\n          first = false\n        end\n      end\n    else\n      error = \"Tenant not found!\" if selected_ids.count == 0\n      error = \"Contact list not found!\" if !contact_list\n    end\n\n    fresh_job = BackgroundJob.where(id: job.id).first\n    if fresh_job && !fresh_job.data[\"send_email\"].blank?\n      begin\n        if error.blank?\n          target_user = User.where(id: data[\"user_id\"]).first\n          if target_user\n            attachment = Asset.new(tenant_id: fresh_job.tenant.id,\n                                   enterprise_id: fresh_job.tenant.enterprise_id,\n                                   category: \"ContactListExport\",\n                                   new_file_contents: out_data,\n                                   new_file_name: filename,\n                                   context_type: \"ContactList\",\n                                   context_id: contact_list.id)\n\n            attachment.save\n\n            Email.ses_send([fresh_job.data[\"send_email\"]],\n                          \"Print Speak - Contact List Export - #{contact_list.name}\",\n                          Emails::Task.new.new_contact_list_export(contact_list, target_user, attachment.presigned_url(false, 259200)))\n          end\n        end\n      rescue StandardError => e\n        Honeybadger.notify(\n          error_class: \"Contact List Export Send Fail\",\n          error_message: e.message,\n          backtrace: e.backtrace\n        )\n      end\n    end\n\n    {\n      error: error,\n      mime: mime_type,\n      data: Base64.encode64(out_data),\n      lifespan: 1.hour\n    }\n  end\n\n  def modifiable(target_tenant, user)\n    (!global && target_tenant.id == tenant_id) || (user.is_enterprise_user? && user.enterprise_id == enterprise_id)\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "tenant_scope",
              "scope": "lambda { |tenant_id| where(\"contact_lists.tenant_id = ? OR contact_lists.global = ?\", tenant_id, true) }"
            },
            {
              "name": "user_scope",
              "scope": "lambda { |user_id| joins(\"INNER JOIN users ON users.id = \\'#{user_id}\\'\").where(\"contact_lists.hide_from_tenant = \\'false\\' OR users.role = \\'Super User\\' OR users.role = \\'Enterprise User\\'\", user_id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "rules",
              "options": {
                "class_name": "ContactListRule",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"ContactListRule\", dependent: :destroy"
            },
            {
              "name": "exclusions",
              "options": {
                "class_name": "ContactListExclusion",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"ContactListExclusion\", dependent: :destroy"
            },
            {
              "name": "counts",
              "options": {
                "class_name": "ContactListCount",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"ContactListCount\", dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "campaigns",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            },
            {
              "name": "contacts",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            }
          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "length: { minimum: 4 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "contact_lists_contact",
        "name_plural": "contact_lists_contacts",
        "dsl_file": ""
      },
      {
        "name": "contact",
        "name_plural": "contacts",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/contact.rb",
        "source": {
          "ruby": "class Contact < ActiveRecord::Base\n  enum potential: {cold: 1, warm: 2, hot: 3}\n\n  include PgSearch\n  include EstimateConvertable\n  include ApiLoggable\n  include Excludable\n  include Bookmarkable\n  include Categorizable\n\n  belongs_to :tenant\n  belongs_to :company\n  belongs_to :prospect_status\n  belongs_to :parent_contact, class_name: \"Contact\", foreign_key: \"parent_contact_id\"\n  has_many :invoices\n  has_many :sales\n  has_many :estimates\n  has_many :orders\n  has_many :tasks, as: :taskable\n  has_many :phone_calls, as: :phoneable\n  has_many :activities\n  has_many :campaign_messages\n  has_many :emails, as: :context\n  has_many :notes, as: :context\n  has_one :location, class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\"\n  has_one :sales_rep_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\"\n  has_many :next_activities\n\n  belongs_to :address\n  has_and_belongs_to_many :contact_lists, -> { uniq }\n  has_many :interest_contexts, as: :context\n  has_one :inquiry\n  has_many :inquiries\n  belongs_to :lead_type\n\n  before_save :check_email_changed\n  has_many :prospect_status_item_contacts\n\n  pg_search_scope :search_by_text, against: %i[first_name last_name], using: {tsearch: {prefix: true}}\n  scope :marketing, -> (tenant) { joins(\"LEFT OUTER JOIN companies ON companies.id = contacts.company_id\").where(tenant_id: tenant.id, deleted: false, temp: false, unsubscribed: false, companies: {marketing_do_not_mail: false}) }\n  scope :no_pending_estimates, -> { where(\"NOT EXISTS(SELECT null FROM estimates WHERE estimates.contact_id = contacts.id AND estimates.on_pending_list = true)\") }\n  scope :no_pending_invoices, -> { where(\"NOT EXISTS(SELECT null FROM invoices WHERE invoices.contact_id = contacts.id AND invoices.on_pending_list = true)\") }\n\n  scope :rolling_1_month_sales, -> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0)').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.month)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as rolling_1_month_sales\") }\n  scope :calculated_rolling_1_month_sales, -> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 1.month)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_1_month_sales\") }\n  scope :calculated_rolling_12_month_sales, -> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_sales\") }\n  scope :calculated_rolling_12_month_sales_ly, -> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 2.years)..(Date.tomorrow - 1.year)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_sales_ly\") }\n  scope :calculated_rolling_12_month_sales_ly_ly, -> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 3.years)..(Date.tomorrow - 2.years)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_sales_ly_ly\") }\n  scope :calculated_rolling_12_month_cogs, -> (invoiced_only=false) { select(\"(#{Sale.select('ROUND(CASE COALESCE(SUM(invoices.grand_total_inc_tax), 0) WHEN 0 THEN 0 ELSE COALESCE(SUM(invoices.total_cost), 0) / SUM(invoices.grand_total_inc_tax) END, 2)').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_cogs\") }\n\n  scope :calculated_financial_year_sales, -> (tenant, invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: FinancialYear.new(tenant).start_date..FinancialYear.new(tenant).end_date).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_sales\") }\n  scope :calculated_financial_year_sales_ly, -> (tenant, invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (FinancialYear.new(tenant).start_date - 1.year)..(FinancialYear.new(tenant).end_date - 1.year)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_sales_ly\") }\n  scope :calculated_financial_year_sales_ly_ly, -> (tenant, invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (FinancialYear.new(tenant).start_date - 2.years)..(FinancialYear.new(tenant).end_date - 2.years)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_sales_ly_ly\") }\n  scope :calculated_financial_year_cogs, -> (tenant, invoiced_only=false) { select(\"(#{Sale.select('ROUND(CASE COALESCE(SUM(invoices.grand_total_inc_tax), 0) WHEN 0 THEN 0 ELSE COALESCE(SUM(invoices.total_cost), 0) / SUM(invoices.grand_total_inc_tax) END, 2)').invoiced(invoiced_only).where(pickup_date: FinancialYear.new(tenant).start_date..FinancialYear.new(tenant).end_date).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_cogs\") }\n\n  scope :calculated_average_invoice, -> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(ROUND(AVG(invoices.grand_total), 2), 0)').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_average_invoice\") }\n  scope :calculated_oldest_rolling_1_invoice, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 1.month)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_1_invoice\") }\n  scope :calculated_oldest_rolling_12_invoice, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 1.year)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_invoice\") }\n  scope :calculated_oldest_rolling_12_ly_invoice, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 2.years)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_ly_invoice\") }\n  scope :calculated_oldest_rolling_12_ly_ly_invoice, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 3.years)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_ly_ly_invoice\") }\n  scope :calculated_first_sale_date, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.contact_id = contacts.id').order(pickup_date: :asc).limit(1).to_sql}) as calculated_first_sale_date\") }\n  scope :calculated_last_pickup_date, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').order(pickup_date: :desc).limit(1).to_sql}) as calculated_last_pickup_date\") }\n\n  scope :calculated_last_sale_order_date, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.ordered_date').where.not(ordered_date: nil).where('invoices.contact_id = contacts.id').invoiced(invoiced_only).order(ordered_date: :desc).limit(1).to_sql}) as calculated_last_sale_order_date\") }\n  scope :calculated_last_sale_pickup_date, -> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').where.not(pickup_date: nil).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').invoiced(invoiced_only).order(pickup_date: :desc).limit(1).to_sql}) as calculated_last_sale_pickup_date\") }\n  scope :calculated_last_shipment_date, -> { select(\"(#{Shipment.select('shipments.shipment_date').where.not(shipment_date: nil).where('shipments.tenant_id = contacts.tenant_id AND shipments.shipment_date IS NOT NULL AND shipments.contact_id = contacts.id').order(shipment_date: :desc).limit(1).to_sql}) as calculated_last_shipment_date\") }\n\n  scope :order_count, -> { select(\"(#{Order.select('COUNT(*)').where(on_pending_list: true).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as order_count\") }\n  scope :with_ranks, -> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales DESC NULLS LAST) AS calculated_rank\") }\n  scope :with_ranks_ly, -> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales_ly DESC NULLS LAST) AS calculated_rank_ly\") }\n  scope :with_ranks_ly_ly, -> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales_ly_ly DESC NULLS LAST) AS calculated_rank_ly_ly\") }\n\n  scope :with_ranks_financial_year, -> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales DESC NULLS LAST) AS calculated_rank_financial_year\") }\n  scope :with_ranks_financial_year_ly, -> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales_ly DESC NULLS LAST) AS calculated_rank_financial_year_ly\") }\n  scope :with_ranks_financial_year_ly_ly, -> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales_ly_ly DESC NULLS LAST) AS calculated_rank_financial_year_ly_ly\") }\n\n  scope :calculated_last_email_sent, -> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = 'email' AND activities.email_id IS NOT NULL\").order('activities.source_created_at DESC NULLS LAST').limit(1).to_sql}) AS calculated_last_email_sent\") }\n  scope :calculated_last_email_received, -> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = 'email' AND activities.email_id IS NULL\").order('activities.source_created_at DESC NULLS LAST').limit(1).to_sql}) AS calculated_last_email_received\") }\n  scope :calculated_last_phone_call, -> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = 'phone_call' AND activities.phone_call_id IS NOT NULL\").order('activities.source_created_at DESC NULLS LAST').limit(1).to_sql}) AS calculated_last_phone_call\") }\n  scope :calculated_last_order_date, -> { select(\"(#{Order.select('invoices.ordered_date').where.not(ordered_date: nil).where('invoices.contact_id = contacts.id').order(ordered_date: :desc).limit(1).to_sql}) as calculated_last_order_date\") }\n  scope :calculated_order_count, -> { select(\"(#{Order.select('COUNT(*)').where(on_pending_list: true).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_order_count\") }\n\n  scope :by_parents, ->  { where(\"contacts.parent_contact_id = contacts.id\") }\n  scope :by_parents_with_unmapped, -> { where(\"contacts.parent_contact_id = contacts.id OR parent_contact_id = ?\", -1) }\n\n  scope :single_purchase, -> { where.not(single_sale_only_at: nil) }\n  scope :first_sale, -> { where.not(first_sale_at: nil) }\n\n  attr_accessor :score\n\n  # validate :name_must_be_unique\n  # validates :first_name, presence: { message: 'First Name is required.' }, on: :create\n  # validates :last_name, presence: { message: 'Last Name is required.' }, on: :create\n  # validates :email, presence: { message: 'Email is required.' }\n\n  # phony_normalize :phone, default_country_code: 'AU'\n  # validates :phone, :phony_plausible => true\n  # validates :email, format: /\\A[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}\\z/i\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def name_must_be_unique\n    first_name_string = try(:first_name) || \"\"\n    last_name_string = try(:last_name) || \"\"\n    string = (first_name_string + \" \" + last_name_string)\n\n    contact = company.contacts.where(\"trim(regexp_replace(COALESCE(contacts.first_name, '') || ' ' || COALESCE(contacts.last_name, ''), '\\s+', ' ', 'g')) ILIKE (?)\", string).first if company.present? and string.present?\n\n    if contact.present?\n      errors.add(:name, \"This contact exists. Please choose a different name.\")\n    end\n  end\n\n  def check_email_changed\n    if email_changed?\n      self.needs_email_validation = true\n      self.email_validation_attempts = -1\n    end\n  end\n\n  def sales_lly\n    sales.where(ordered_date: \"2014-07-01\"..\"2015-06-30\").sum(:grand_total)\n  end\n\n  def sales_ly\n    sales.where(ordered_date: \"2015-07-01\"..\"2016-06-30\").sum(:grand_total)\n  end\n\n  def sales_ty\n    sales.where(ordered_date: \"2016-07-01\"..\"2016-07-30\").sum(:grand_total)\n  end\n\n  def yoy_growth\n    percentage = 0\n\n    if sales_lly > 0\n      percentage = (sales_ly/sales_lly) * 100\n    end\n\n\n    if percentage < 100 && percentage != 0\n      percentage = (percentage - 100)\n    end\n\n    percentage\n  end\n\n  def fy_count(start_date = (Time.zone.now - 1.years) , end_date = (Time.zone.now))\n    count = estimates.where(ordered_date: start_date..end_date).count\n    # estimates.where(\"status = ''\").count if count == 0 || 0\n  end\n\n  def get_avg_estimate_conversion_fy\n    end_date = Date.today\n    start_date = end_date - 1.year\n\n    if won_estimates(start_date, end_date) > 0\n      ((won_estimates(start_date, end_date).to_f / (won_estimates(start_date, end_date) + lost_estimates(start_date, end_date) + pending_estimates(start_date, end_date))) * 100).round(2) || 0\n    else\n      0\n    end\n  end\n\n  def month_sales\n    start_date  = Date.today.beginning_of_month\n    end_date    = Date.today.end_of_month\n\n    sales.where(ordered_date: start_date..end_date).sum(:grand_total)\n  end\n\n  def full_name\n    if Platform.is_mbe?(tenant) && first_name.blank? && last_name.blank?\n      \"Account Contact\"\n    else\n      \"#{first_name} #{last_name}\".squish\n    end\n  end\n\n  def rolling_12_month_rank\n    result = nil\n    if !rolling_12_month_sales.nil? && rolling_12_month_sales > 0\n      if self[\"calculated_rank\"]\n        result = self[\"calculated_rank\"]\n      else\n        result = Contact.where(tenant_id: tenant.id).where(\"rolling_12_month_sales > ?\", rolling_12_month_sales).order(\"rolling_12_month_sales DESC NULLS LAST\").count + 1\n      end\n    end\n    result\n  end\n\n  def rolling_12_month_rank_ly\n    result = nil\n    if !rolling_12_month_sales_ly.nil? && rolling_12_month_sales_ly > 0\n      if self[\"calculated_rank_ly\"]\n        result = self[\"calculated_rank_ly\"]\n      else\n        result = Contact.where(tenant_id: tenant.id).where(\"rolling_12_month_sales_ly > ?\", rolling_12_month_sales_ly).order(\"rolling_12_month_sales_ly DESC NULLS LAST\").count + 1\n      end\n    end\n    result\n  end\n\n  def rolling_12_month_rank_ly_ly\n    result = nil\n    if !rolling_12_month_sales_ly_ly.nil? && rolling_12_month_sales_ly_ly > 0\n      if self[\"calculated_rank_ly_ly\"]\n        result = self[\"calculated_rank_ly_ly\"]\n      else\n        result = Contact.where(tenant_id: tenant.id).where(\"rolling_12_month_sales_ly_ly > ?\", rolling_12_month_sales_ly_ly).order(\"rolling_12_month_sales_ly_ly DESC NULLS LAST\").count + 1\n      end\n    end\n    result\n  end\n\n  def financial_year_rank\n    result = nil\n    if !financial_year_sales.nil? && financial_year_sales > 0\n      if self[\"calculated_rank\"]\n        result = self[\"calculated_rank\"]\n      else\n        result = Contact.where(tenant_id: tenant.id).where(\"financial_year_sales > ?\", financial_year_sales).order(\"financial_year_sales DESC NULLS LAST\").count + 1\n      end\n    end\n    result\n  end\n\n  def financial_year_rank_ly\n    result = nil\n    if !financial_year_sales_ly.nil? && financial_year_sales_ly > 0\n      if self[\"calculated_rank_ly\"]\n        result = self[\"calculated_rank_ly\"]\n      else\n        result = Contact.where(tenant_id: tenant.id).where(\"financial_year_sales_ly > ?\", financial_year_sales_ly).order(\"financial_year_sales_ly DESC NULLS LAST\").count + 1\n      end\n    end\n    result\n  end\n\n  def financial_year_rank_ly_ly\n    result = nil\n    if !financial_year_sales_ly_ly.nil? && financial_year_sales_ly_ly > 0\n      if self[\"calculated_rank_ly_ly\"]\n        result = self[\"calculated_rank_ly_ly\"]\n      else\n        result = Contact.where(tenant_id: tenant.id).where(\"financial_year_sales_ly_ly > ?\", financial_year_sales_ly_ly).order(\"financial_year_sales_ly_ly DESC NULLS LAST\").count + 1\n      end\n    end\n    result\n  end\n\n  alias name full_name\n\n  def prospect?\n    Company.unscoped.where(tenant_id: tenant_id, id: company_id).first.try(:prospect) if company_id.present? && temp == false\n  end\n\n  def campaigns\n    Campaign.joins(:messages).joins(\"JOIN contacts ON contacts.id = campaign_messages.contact_id\").where(tenant_id: tenant_id, campaign_messages: {contact_id: id}).where.not(parent_id: nil).group(\"campaigns.id\")\n  end\n\n  def info(*args)\n    result = nil\n\n    custom = custom_data\n    clearbit = clearbit_data\n    args.each do |arg|\n      custom = custom.try(:[], arg)\n      clearbit = clearbit.try(:[], arg)\n    end\n    result = custom unless custom.nil?\n    result = clearbit if custom.nil? && !clearbit.nil?\n\n    result\n  end\n\n  def parent\n    result = nil\n    if parent_contact_id == id\n      result = self\n    elsif parent_contact_id > 0\n      result = Contact.where(id: parent_contact_id).first\n    end\n    result\n  end\n\n  def potential_matches(page = 1, per = 10)\n    local_email = Email.clean_email(email)\n    local_first_name = first_name.try(:strip).try(:downcase)\n    local_last_name = last_name.try(:strip).try(:downcase)\n\n    conditions = local_email.blank? ? \"\" : \"(LOWER(TRIM(email)) = #{ActiveRecord::Base::sanitize(local_email)})\"\n\n    if !local_first_name.blank?\n      conditions << \" OR\" unless conditions.blank?\n      conditions << \"(LOWER(TRIM(first_name)) = #{ActiveRecord::Base::sanitize(local_first_name)})\"\n    end\n\n    if !local_last_name.blank?\n      conditions << \" OR\" unless conditions.blank?\n      conditions << \"(LOWER(TRIM(last_name)) = #{ActiveRecord::Base::sanitize(local_last_name)})\"\n    end\n\n    self.score = 200\n    matched_contacts = [self]\n\n    if !conditions.blank?\n      potential_matches = Contact.where(tenant_id: tenant_id).where(conditions).where.not(id: id, company_id: nil)\n      potential_matches.each do |potential_match|\n        score = Contact.compare_contacts(self, potential_match)\n        if score > 0\n          potential_match.score = score\n          matched_contacts << potential_match\n        end\n      end\n    end\n\n    matched_contacts.sort! do |a, b|\n      result = -1 if a.temp == true\n      result = 1 if b.temp == true\n      result = 0 if a.temp == b.temp\n      result.nil? || result == 0 ? (a.score <=> b.score) : result\n    end\n    matched_contacts.reverse!\n\n    if page.to_i > 0\n      Kaminari.paginate_array(matched_contacts).page(page).per(per)\n    else\n      Kaminari.paginate_array(matched_contacts).page(1).per(matched_contacts.count)\n    end\n  end\n\n  def self.compare_contacts(a, b)\n    result = 0\n    return 0 if a.company_id.nil? || b.company_id.nil? || a.company_id != b.company_id\n\n    weights = {\n      first_name: 40,\n      last_name: 40,\n      email: 10,\n      phone: 10,\n      mobile: 10\n    }\n\n    weights.each do |key, value|\n      next if a[key].blank? || b[key].blank?\n      a_value = a[key]\n      b_value = b[key]\n\n      a_value = a_value.to_s.downcase.strip\n      b_value = b_value.to_s.downcase.strip\n\n      if a_value == b_value\n        result += value\n      else\n        result -= value\n      end\n    end\n\n    result\n  end\n\n  def location\n    result = Location.where(id: location_user_id).first if !location_user_id.nil?\n    result = Location.where(id: company.location_user_id).first if result.nil? && !company.nil? && !company.location_user_id.nil?\n    result\n  end\n\n  def aggregated_tasks\n    Task.joins(\"LEFT OUTER JOIN estimates ON estimates.id = tasks.taskable_id\").\n         joins(\"LEFT OUTER JOIN invoices ON invoices.id = tasks.taskable_id\").\n         joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = tasks.taskable_id\").\n         where(tenant: tenant).\n         where(%Q{\n          (\n            (tasks.taskable_type = 'Inquiry' AND inquiries.contact_id = #{id})\n            OR (tasks.taskable_type = 'Estimate' AND estimates.contact_id = #{id})\n            OR (tasks.taskable_type IN ('Invoice', 'Sale', 'Order') AND invoices.contact_id = #{id})\n          )\n          OR (tasks.taskable_type = 'Contact' AND tasks.taskable_id = #{id})\n         }).\n         order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    PhoneCall.joins(\"LEFT OUTER JOIN estimates ON estimates.id = phone_calls.phoneable_id\").\n              joins(\"LEFT OUTER JOIN invoices ON invoices.id = phone_calls.phoneable_id\").\n              joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = phone_calls.phoneable_id\").\n              where(tenant: tenant).\n              where(%Q{\n                (\n                  (phone_calls.phoneable_type = 'Inquiry' AND inquiries.contact_id = #{id})\n                  OR (phone_calls.phoneable_type = 'Estimate' AND estimates.contact_id = #{id})\n                  OR (phone_calls.phoneable_type IN ('Invoice', 'Sale', 'Order') AND invoices.contact_id = #{id})\n                )\n                OR (phone_calls.phoneable_type = 'Contact' AND phone_calls.phoneable_id = #{id})\n                OR (phone_calls.contact_id = #{id})\n              }).\n              order(created_at: :desc)\n  end\n\n  def aggregated_notes\n    Note.joins(\"LEFT OUTER JOIN estimates ON estimates.id = notes.context_id\").\n         joins(\"LEFT OUTER JOIN invoices ON invoices.id = notes.context_id\").\n         joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = notes.context_id\").\n         where(tenant: tenant).\n         where(%Q{\n           (\n             (notes.context_type = 'Inquiry' AND inquiries.contact_id = #{id})\n             OR (notes.context_type = 'Estimate' AND estimates.contact_id = #{id})\n             OR (notes.context_type IN ('Invoice', 'Sale', 'Order') AND invoices.contact_id = #{id})\n           )\n           OR (notes.context_type = 'Contact' AND notes.context_id = #{id})\n         }).\n         order(\"notes.created_at DESC, notes.id DESC\")\n  end\n\n  def aggregated_meetings\n    Meeting.joins(\"LEFT OUTER JOIN estimates ON estimates.id = meetings.context_id\").\n            joins(\"LEFT OUTER JOIN invoices ON invoices.id = meetings.context_id\").\n            joins(\"LEFT OUTER JOIN inquiries ON inquiries.id = meetings.context_id\").\n            where(tenant: tenant).\n            where(%Q{\n              (\n                (meetings.context_type = 'Inquiry' AND inquiries.contact_id = #{id})\n                OR (meetings.context_type = 'Estimate' AND estimates.contact_id = #{id})\n                OR (meetings.context_type IN ('Invoice', 'Sale', 'Order') AND invoices.contact_id = #{id})\n              )\n              OR (meetings.context_type = 'Contact' AND meetings.context_id = #{id})\n            }).\n            order(created_at: :desc)\n  end\n\n  def find_oldest_interaction(mbe_invoiced = false)\n    if !mbe_invoiced\n      oldest_invoice = Invoice.where(tenant_id: tenant.id, contact_id: id).order(source_created_at: :asc).first.try(:source_created_at)\n    else\n      oldest_invoice = Sale.where(tenant_id: tenant.id, contact_id: id).order(pickup_date: :asc).invoiced(mbe_invoiced).first.try(:pickup_date)\n    end\n\n    oldest_estimate = Estimate.where(tenant_id: tenant.id, contact_id: id).order(source_created_at: :asc).first.try(:source_created_at) if mbe_invoiced.present?\n    oldest_shipment = Shipment.where(tenant_id: tenant.id, contact_id: id).order(shipment_date: :asc).first.try(:shipment_date)\n\n    oldest_interaction = source_created_at\n\n    if !oldest_invoice.nil?\n      oldest_interaction = oldest_invoice if oldest_interaction.nil? || (!oldest_interaction.nil? && oldest_invoice < oldest_interaction)\n    end\n\n    if !oldest_estimate.nil?\n      oldest_interaction = oldest_estimate if oldest_interaction.nil? || (!oldest_interaction.nil? && oldest_estimate < oldest_interaction)\n    end\n\n    if !oldest_shipment.nil?\n      oldest_interaction = oldest_shipment if oldest_interaction.nil? || (!oldest_interaction.nil? && oldest_shipment < oldest_interaction)\n    end\n\n    oldest_interaction\n  end\n\n  def generate_sales_stats\n    invoiced = Platform.is_mbe?(tenant)\n\n    calculated_contact = Contact.calculated_order_count.\n                                 calculated_last_order_date.\n                                 calculated_last_pickup_date(invoiced).\n                                 calculated_rolling_12_month_sales(invoiced).\n                                 calculated_financial_year_sales(tenant, invoiced).\n                                 calculated_financial_year_sales_ly(tenant, invoiced).\n                                 calculated_financial_year_sales_ly_ly(tenant, invoiced).\n                                 calculated_financial_year_cogs(tenant, invoiced).\n                                 calculated_rolling_12_month_sales_ly(invoiced).\n                                 calculated_rolling_12_month_sales_ly_ly(invoiced).\n                                 calculated_oldest_rolling_1_invoice(invoiced).\n                                 calculated_oldest_rolling_12_invoice(invoiced).\n                                 calculated_oldest_rolling_12_ly_invoice(invoiced).\n                                 calculated_oldest_rolling_12_ly_ly_invoice(invoiced).\n                                 calculated_rolling_12_month_cogs(invoiced).\n                                 calculated_average_invoice(invoiced).\n                                 calculated_rolling_1_month_sales(invoiced).\n                                 calculated_last_sale_pickup_date(invoiced).\n                                 calculated_last_sale_order_date(invoiced).\n                                 calculated_last_shipment_date.\n                                 where(id: id, tenant_id: tenant.id).\n                                 first\n    if calculated_contact\n      growth_percentage = PrintSpeak::Application.calculate_growth(calculated_contact.calculated_rolling_12_month_sales, calculated_contact.calculated_rolling_12_month_sales_ly) * 100\n      growth_percentage_financial_year = PrintSpeak::Application.calculate_growth(calculated_contact.calculated_financial_year_sales, calculated_contact.calculated_financial_year_sales_ly) * 100\n\n      self.rolling_1_month_sales = calculated_contact.calculated_rolling_1_month_sales\n      self.rolling_12_month_sales = calculated_contact.calculated_rolling_12_month_sales\n      self.rolling_12_month_sales_ly = calculated_contact.calculated_rolling_12_month_sales_ly\n      self.rolling_12_month_sales_ly_ly = calculated_contact.calculated_rolling_12_month_sales_ly_ly\n      self.latest_order_date = calculated_contact.calculated_last_order_date\n      self.last_pickup_date = calculated_contact.calculated_last_pickup_date\n\n      self.financial_year_sales = calculated_contact.calculated_financial_year_sales\n      self.financial_year_sales_ly = calculated_contact.calculated_financial_year_sales_ly\n      self.financial_year_sales_ly_ly = calculated_contact.calculated_financial_year_sales_ly_ly\n      self.financial_year_cogs = calculated_contact.calculated_financial_year_cogs\n      self.growth_percentage_financial_year = growth_percentage_financial_year.try(:round, 2).try(:to_f) || 0.0\n\n\n      self.rolling_12_month_cogs = calculated_contact.calculated_rolling_12_month_cogs\n      self.growth_percentage = growth_percentage.try(:round, 2).try(:to_f) || 0.0\n      self.order_count = calculated_contact.calculated_order_count\n      self.average_invoice = calculated_contact.calculated_average_invoice\n      self.oldest_rolling_1_invoice = calculated_contact.calculated_oldest_rolling_1_invoice\n      self.oldest_rolling_12_invoice = calculated_contact.calculated_oldest_rolling_12_invoice\n      self.oldest_rolling_12_ly_invoice = calculated_contact.calculated_oldest_rolling_12_ly_invoice\n      self.oldest_rolling_12_ly_ly_invoice = calculated_contact.calculated_oldest_rolling_12_ly_ly_invoice\n\n      self.last_sale_order_date = calculated_contact.calculated_last_sale_order_date\n      self.last_sale_pickup_date = calculated_contact.calculated_last_sale_pickup_date\n      self.last_shipment_date = calculated_contact.calculated_last_shipment_date\n\n      self.oldest_interaction = find_oldest_interaction(invoiced)\n\n      self.last_lapsed_date = last_pickup_date\n      self.last_lapsed_date = last_shipment_date if  !last_pickup_date || last_shipment_date.present? && last_shipment_date > last_pickup_date\n\n      self.latest_order_date = last_sale_pickup_date if invoiced\n      self.latest_order_date = last_shipment_date if !latest_order_date || last_shipment_date.present? && last_shipment_date > latest_order_date\n\n\n      save\n    end\n\n    nil\n  end\n\n  def cogs_percentage\n    if rolling_12_month_cogs.to_f != 0.0\n      rolling_12_month_cogs * 100\n    else\n      0\n    end\n  end\n\n  def lookup_address\n    result = address\n    if (result.nil? || (!result.nil? && result.street1.blank?)) && !try(:use_contact_address).present?\n      if !company.nil? && !company.invoice_address.nil?\n        result = company.invoice_address\n      end\n    end\n\n    if result.nil? || (!result.nil? && result.street1.blank?)\n      result = address\n    end\n\n    result\n  end\n\n  def full_address\n    lookup_address.try(:full_street_address)\n  end\n\n  def is_primary?\n    return false unless company.present?\n    return true if company.try(:primary_contact_id) == id\n    # return false if (self.deleted || self.temp).present?\n    # return true if company.try(:primary_contact_id) == self.id && !self.platform_id.present?\n    return true if company.try(:source_contact_id) == platform_id && platform_id.present? && !company.try(:primary_contact_id)\n  end\n\n  def self.to_csv_filtered(columns, tenant)\n    bom = \"\\xEF\\xBB\\xBF\"  # Defines UTF-8 ByteOrderMark to csv so Excel is happy\n    CSV.generate(csv = bom, col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      column_titles = columns.map { |c| I18n.t_prefix(c, tenant) }\n      csv << column_titles\n      all.each do |result|\n        csv << columns.map {\n          |c| case c\n              when \"first_name\"\n                result.first_name\n              when \"last_name\"\n                result.last_name\n              when \"email\"\n                result.try(:email)\n              when \"company_name\"\n                result.try(:company).try(:name)\n              when \"phone\"\n                result.try(:phone)\n              when \"mobile\"\n                result.try(:mobile)\n              when \"company_phone\"\n                result.try(:company).try(:phone)\n              when \"contact_street1\"\n                result.try(:address).try(:street1)\n              when \"contact_street2\"\n                result.try(:address).try(:street2)\n              when \"contact_street3\"\n                result.try(:address).try(:street3)\n              when \"contact_city\"\n                result.try(:address).try(:city)\n              when \"contact_state\"\n                result.try(:address).try(:state)\n              when \"contact_zip\"\n                result.try(:address).try(:zip)\n              when \"company_street1\"\n                result.try(:company).try(:invoice_address).try(:street1)\n              when \"company_street2\"\n                result.try(:company).try(:invoice_address).try(:street2)\n              when \"company_street3\"\n                result.try(:company).try(:invoice_address).try(:street3)\n              when \"company_city\"\n                result.try(:company).try(:invoice_address).try(:city)\n              when \"company_state\"\n                result.try(:company).try(:invoice_address).try(:state)\n              when \"company_zip\"\n                result.try(:company).try(:invoice_address).try(:zip)\n              when \"sales_rep\"\n                result.sales_rep.try(:name)\n              when \"sales_rep_PS\"\n                if result.sales_rep_user.present?\n                  result.sales_rep_user.try(:full_name)\n                else\n                  result.try(:company).try(:sales_rep_user).try(:full_name)\n                end\n              when \"rolling_12_month_sales\"\n                \"$\" + result[c].to_f.to_s\n              when \"rolling_12_month_sales_ly\"\n                \"$\" + result[c].to_f.to_s\n              when \"latest_order_date\"\n                result.tenant.local_strftime(result.latest_order_date, \"%%DM/%%DM/%y\") if result.latest_order_date.present?\n              when \"last_contact\"\n                result.tenant.local_strftime(result[c], \"%%DM/%%DM/%y\") if result[c].present?\n              else\n                result[c]\n              end\n        }\n      end\n    end\n  end\n\n  def is_unsubscribed?\n    unsubscribed || company.try(:marketing_do_not_mail)\n  end\n\n  def unsubscribes\n    result = Unsubscribe.where(tenant_id: tenant_id, contact_id: id, fixed: false)\n\n    if company.try(:marketing_do_not_mail)\n      result << Unsubscribe.new(\n        tenant_id: tenant_id,\n        contact_id: id,\n        unsub_type: \"company_vision\",\n        email: email,\n        data: {},\n        fixed: false\n      )\n    end\n\n    result\n  end\n\n  def unsubscribe_reasons\n    result = []\n\n    unsubscribes.each do |unsubscribe|\n      if unsubscribe.unsub_type == \"soft_bounce\"\n        bounce_count = unsubscribe.data[\"count\"] || 0\n        next if bounce_count < 3\n      end\n      result << Unsubscribe.definitions[unsubscribe.unsub_type].try(:[], :desc) || \"Unknown\"\n    end\n\n    if result.count == 0\n      result << \"Unknown\"\n    end\n\n    result.uniq\n  end\n\n  def bad_email_type(new_email)\n    result = \"\"\n\n    clean_new_email = Email.clean_email(new_email)\n\n    bad_emails = []\n    new_email_definitions = Unsubscribe.definitions.select { |k, v| v[:fixable] == :new_email }.map { |k, v| k }\n    if new_email_definitions.count > 0\n      bad_emails = Unsubscribe.where(contact_id: id, unsub_type: new_email_definitions).pluck(:email)\n    end\n\n    bad_emails = bad_emails.map { |email| Email.clean_email(email) }\n\n    if bad_emails.include?(clean_new_email)\n      result = \"bad_email\"\n    end\n\n    if !result\n      if Unsubscribe.on_suppression_list?(tenant, clean_new_email)\n        result = \"suppression_list\"\n      end\n    end\n\n    result\n  end\n\n  def check_fix(new_email)\n    result = []\n\n    result << \"Email is blank\" if new_email.blank?\n\n    unsubscribes.each do |unsubscribe|\n      definition = Unsubscribe.definitions[unsubscribe.unsub_type]\n      next if definition.nil?\n      case definition[:fixable]\n      when :reverify\n      when :any_email\n      when :new_email\n      when :company\n        result << \"Company is marked as Do Not Mail in Vision.\"\n      when :none\n        result << \"This contact is permanently unsubscribed for '#{definition[:desc]}'.\"\n      end\n    end\n\n    if Unsubscribe.on_suppression_list?(tenant, new_email)\n      result << \"Email is on suppression list.\"\n    elsif !bad_email_type(new_email).blank?\n      result << \"Email matches a previously bad email address.\"\n    end\n\n    result\n  end\n\n  def fix_email(new_email, current_user)\n    result = check_fix(new_email)\n    if result.count == 0\n      current_user_id = 0\n      current_user_id = current_user.id if current_user\n      found = false\n      unsubscribes.each do |unsub|\n        found = true\n        unsub.fix(new_email, current_user)\n      end\n      if !found\n        self.unsubscribed = false\n        save\n      end\n    end\n    result\n  end\n\n  def unsubscribe(type, data: {}, propagate: nil)\n    mark_unsubbed = true\n    unsub = Unsubscribe.find_or_initialize_by(\n      tenant_id: tenant_id,\n      contact_id: id,\n      unsub_type: type,\n      email: email,\n      fixed: false\n    )\n    unsub.data = {} if unsub.data.nil?\n    unsub.data.merge!(data.stringify_keys) { |key, v1, v2| v1.is_a?(Array) ? (v1 + v2).uniq : v2 }\n    if type == \"soft_bounce\"\n      if unsub.data[\"count\"].blank?\n        unsub.data[\"count\"] = 1\n        mark_unsubbed = false\n      else\n        unsub.data[\"count\"] += 1\n        if unsub.data[\"count\"] < 3\n          mark_unsubbed = false\n        end\n      end\n    end\n    unsub.save\n    self.unsubscribed = true if mark_unsubbed\n    save\n    if propagate != false && Unsubscribe.definitions[type][:propagates] == true\n      unsub.propagate(data)\n    end\n  end\n\n  def self.lead_to_csv_filtered(columns, lead_assigned_items, tenant)\n    bom = \"\\xEF\\xBB\\xBF\" # Defines UTF-8 ByteOrderMark to csv so Excel is happy\n    CSV.generate(csv = bom, col_sep: tenant.enterprise.csv_col_sep) do |csv|\n      desired_columns = columns.map { |c| I18n.t_prefix(c, tenant) }\n      csv << desired_columns\n      all.each do |result|\n\n        lead_assigned_item = lead_assigned_items.map { |item| item if item[\"id\"] == \"#{result.id}\" }.compact[0] if lead_assigned_items.present?\n\n        csv << columns.map {\n          |c| case c\n              when \"first_name\"\n                result.first_name\n              when \"last_name\"\n                result.last_name\n              when \"email\"\n                result.try(:email)\n              when \"mobile\"\n                result.try(:mobile)\n              when \"sales_rep\"\n                result.try(:sales_rep).try(:name)\n              when \"company_name\"\n                result.try(:company).try(:name)\n              when \"lead_street1\"\n                result.try(:address).try(:street1)\n              when \"lead_street2\"\n                result.try(:address).try(:street2)\n              when \"lead_street3\"\n                result.try(:address).try(:street3)\n              when \"lead_city\"\n                result.try(:address).try(:city)\n              when \"lead_state\"\n                result.try(:address).try(:state)\n              when \"lead_zip\"\n                result.try(:address).try(:zip)\n              when \"company_street1\"\n                result.try(:company).try(:invoice_address).try(:street1)\n              when \"company_street2\"\n                result.try(:company).try(:invoice_address).try(:street2)\n              when \"company_street3\"\n                result.try(:company).try(:invoice_address).try(:street3)\n              when \"company_city\"\n                result.try(:company).try(:invoice_address).try(:city)\n              when \"company_state\"\n                result.try(:company).try(:invoice_address).try(:state)\n              when \"company_zip\"\n                result.try(:company).try(:invoice_address).try(:zip)\n              when \"lead_type\"\n                result.try(:lead_type).try(:name)\n              when \"lead_status\"\n                result.try(:prospect_status).try(:name)\n              when \"estimates\"\n                \"$\" + lead_assigned_item[\"estimates_grand_total\"].to_f.to_s\n              when \"orders\"\n                \"$\" + lead_assigned_item[\"orders_grand_total\"].to_f.to_s\n              when \"next_activity\"\n                result.next_activity_due[\"type\"].try(:camelcase).to_s\n              when \"due_date\"\n                result.next_activity_due[\"due\"].to_s\n              else\n                result[c]\n              end\n        }\n      end\n    end\n  end\n\n  def self.update_rolling_sales(tenant)\n    # UPDATE contacts\n    # SET oldest_rolling_1_invoice = calculated_contacts.calculated_oldest_rolling_1_invoice,\n    #     oldest_rolling_12_invoice = calculated_contacts.calculated_oldest_rolling_12_invoice,\n    #     oldest_rolling_12_ly_invoice = calculated_contacts.calculated_oldest_rolling_12_ly_invoice,\n    #     oldest_rolling_12_ly_ly_invoice = calculated_contacts.calculated_oldest_rolling_12_ly_ly_invoice\n    # FROM (\n    #   SELECT contacts.id,\n    #   (\n    #     SELECT\n    #       invoices.pickup_date\n    #     FROM\n    #       \"invoices\"\n    #     WHERE\n    #       ( voided = FALSE OR voided IS NULL )\n    #       AND \"invoices\".\"deleted\" = 'f'\n    #       AND ( \"invoices\".\"pickup_date\" IS NOT NULL )\n    #       AND ( invoices.contact_id = contacts.ID )\n    #       AND ( invoices.pickup_date >= (NOW()::DATE + interval '1 day') - interval '1 month' )\n    #     ORDER BY\n    #       \"invoices\".\"pickup_date\" ASC\n    #       LIMIT 1\n    #   ) AS calculated_oldest_rolling_1_invoice,\n    #   (\n    #     SELECT\n    #       invoices.pickup_date\n    #     FROM\n    #       \"invoices\"\n    #     WHERE\n    #       ( voided = FALSE OR voided IS NULL )\n    #       AND \"invoices\".\"deleted\" = 'f'\n    #       AND ( \"invoices\".\"pickup_date\" IS NOT NULL )\n    #       AND ( invoices.contact_id = contacts.ID )\n    #       AND ( invoices.pickup_date >= (NOW()::DATE + interval '1 day') - interval '1 year' )\n    #     ORDER BY\n    #       \"invoices\".\"pickup_date\" ASC\n    #       LIMIT 1\n    #   ) AS calculated_oldest_rolling_12_invoice,\n    #   (\n    #     SELECT\n    #       invoices.pickup_date\n    #     FROM\n    #       \"invoices\"\n    #     WHERE\n    #       ( voided = FALSE OR voided IS NULL )\n    #       AND \"invoices\".\"deleted\" = 'f'\n    #       AND ( \"invoices\".\"pickup_date\" IS NOT NULL )\n    #       AND ( invoices.contact_id = contacts.ID )\n    #       AND ( invoices.pickup_date >= (NOW()::DATE + interval '1 day') - interval '2 years' )\n    #     ORDER BY\n    #       \"invoices\".\"pickup_date\" ASC\n    #       LIMIT 1\n    #   ) AS calculated_oldest_rolling_12_ly_invoice,\n    #   (\n    #     SELECT\n    #       invoices.pickup_date\n    #     FROM\n    #       \"invoices\"\n    #     WHERE\n    #       ( voided = FALSE OR voided IS NULL )\n    #       AND \"invoices\".\"deleted\" = 'f'\n    #       AND ( \"invoices\".\"pickup_date\" IS NOT NULL )\n    #       AND ( invoices.contact_id = contacts.ID )\n    #       AND ( invoices.pickup_date >= (NOW()::DATE + interval '1 day') - interval '3 years' )\n    #     ORDER BY\n    #       \"invoices\".\"pickup_date\" ASC\n    #       LIMIT 1\n    #   ) AS calculated_oldest_rolling_12_ly_ly_invoice\n    #   FROM contacts\n    #   ORDER BY contacts.id ASC\n    #   LIMIT 1000000\n    #   OFFSET 0\n    # ) AS calculated_contacts\n    # WHERE contacts.id = calculated_contacts.id\n    # AND (\n    #   contacts.oldest_rolling_1_invoice IS DISTINCT FROM calculated_contacts.calculated_oldest_rolling_1_invoice\n    #   OR contacts.oldest_rolling_12_invoice IS DISTINCT FROM calculated_contacts.calculated_oldest_rolling_12_invoice\n    #   OR contacts.oldest_rolling_12_ly_invoice IS DISTINCT FROM calculated_contacts.calculated_oldest_rolling_12_ly_invoice\n    #   OR contacts.oldest_rolling_12_ly_ly_invoice IS DISTINCT FROM calculated_contacts.calculated_oldest_rolling_12_ly_ly_invoice\n    # );\n\n    # CREATE INDEX CONCURRENTLY index_contacts_tenant_oldest_rolling ON contacts (tenant_id, oldest_rolling_1_invoice, oldest_rolling_12_invoice, oldest_rolling_12_ly_invoice, oldest_rolling_12_ly_ly_invoice, id) WHERE oldest_rolling_1_invoice IS NOT NULL OR oldest_rolling_12_invoice IS NOT NULL OR oldest_rolling_12_ly_invoice IS NOT NULL OR oldest_rolling_12_ly_ly_invoice IS NOT NULL\n\n    rolling_1_falloff = (Date.tomorrow - 1.month)\n    rolling_12_falloff = (Date.tomorrow - 1.year)\n    rolling_12_ly_falloff = (Date.tomorrow - 2.years)\n    rolling_12_ly_ly_falloff = (Date.tomorrow - 3.years)\n\n    rolling_1_falloff_next_day = rolling_1_falloff + 1.day\n    rolling_12_falloff_next_day = rolling_12_falloff + 1.day\n    rolling_12_ly_falloff_next_day = rolling_12_ly_falloff + 1.day\n    rolling_12_ly_ly_falloff_next_day = rolling_12_ly_ly_falloff + 1.day\n\n    contacts_query = %Q{\n      SELECT contacts.id, contacts.oldest_rolling_1_invoice, contacts.oldest_rolling_12_invoice, contacts.oldest_rolling_12_ly_invoice, contacts.oldest_rolling_12_ly_ly_invoice\n      FROM contacts\n      WHERE contacts.tenant_id = #{tenant.id}\n      AND (\n        (contacts.oldest_rolling_1_invoice IS NOT NULL AND contacts.oldest_rolling_1_invoice < #{ActiveRecord::Base::sanitize(rolling_1_falloff_next_day)})\n        OR (contacts.oldest_rolling_12_invoice IS NOT NULL AND contacts.oldest_rolling_12_invoice < #{ActiveRecord::Base::sanitize(rolling_12_falloff_next_day)})\n        OR (contacts.oldest_rolling_12_ly_invoice IS NOT NULL AND contacts.oldest_rolling_12_ly_invoice < #{ActiveRecord::Base::sanitize(rolling_12_ly_falloff_next_day)})\n        OR (contacts.oldest_rolling_12_ly_ly_invoice IS NOT NULL AND contacts.oldest_rolling_12_ly_ly_invoice < #{ActiveRecord::Base::sanitize(rolling_12_ly_ly_falloff_next_day)})\n      )\n    }\n\n    next_schedule = nil\n    contacts = Contact.find_by_sql(contacts_query)\n\n    contacts.each do |contact|\n      if (!contact.oldest_rolling_1_invoice.nil? && contact.oldest_rolling_1_invoice < rolling_1_falloff) ||\n         (!contact.oldest_rolling_12_invoice.nil? && contact.oldest_rolling_12_invoice < rolling_12_falloff) ||\n         (!contact.oldest_rolling_12_ly_invoice.nil? && contact.oldest_rolling_12_ly_invoice < rolling_12_ly_falloff) ||\n         (!contact.oldest_rolling_12_ly_ly_invoice.nil? && contact.oldest_rolling_12_ly_ly_invoice < rolling_12_ly_ly_falloff)\n        Event.queue(tenant, \"contact_sales\", data: {contact_id: contact.id})\n      end\n\n      if !contact.oldest_rolling_1_invoice.nil? && contact.oldest_rolling_1_invoice >= rolling_1_falloff && contact.oldest_rolling_1_invoice < (rolling_1_falloff_next_day)\n        if next_schedule.nil?\n          next_schedule = contact.oldest_rolling_1_invoice + 1.month\n        else\n          next_schedule = contact.oldest_rolling_1_invoice + 1.month if (contact.oldest_rolling_1_invoice + 1.month) < next_schedule\n        end\n      end\n\n      if !contact.oldest_rolling_12_invoice.nil? && contact.oldest_rolling_12_invoice >= rolling_12_falloff && contact.oldest_rolling_12_invoice < (rolling_12_falloff_next_day)\n        if next_schedule.nil?\n          next_schedule = contact.oldest_rolling_12_invoice + 1.year\n        else\n          next_schedule = contact.oldest_rolling_12_invoice + 1.year if (contact.oldest_rolling_12_invoice + 1.year) < next_schedule\n        end\n      end\n\n      if !contact.oldest_rolling_12_ly_invoice.nil? && contact.oldest_rolling_12_ly_invoice >= rolling_12_ly_falloff && contact.oldest_rolling_12_ly_invoice < (rolling_12_ly_falloff_next_day)\n        if next_schedule.nil?\n          next_schedule = contact.oldest_rolling_12_ly_invoice + 2.years\n        else\n          next_schedule = contact.oldest_rolling_12_ly_invoice + 2.years if (contact.oldest_rolling_12_ly_invoice + 2.years) < next_schedule\n        end\n      end\n\n      if !contact.oldest_rolling_12_ly_ly_invoice.nil? && contact.oldest_rolling_12_ly_ly_invoice >= rolling_12_ly_ly_falloff && contact.oldest_rolling_12_ly_ly_invoice < (rolling_12_ly_ly_falloff_next_day)\n        if next_schedule.nil?\n          next_schedule = contact.oldest_rolling_12_ly_ly_invoice + 3.years\n        else\n          next_schedule = contact.oldest_rolling_12_ly_ly_invoice + 3.years if (contact.oldest_rolling_12_ly_ly_invoice + 3.years) < next_schedule\n        end\n      end\n    end\n\n    if !next_schedule.nil?\n      Event.queue(tenant, \"contact_rolling_sales\", schedule_date: next_schedule + 1.minute, unique_for: [\"scheduled\"])\n    end\n  end\n\n  def create_next_activity\n    next_activity_task\n    next_activity_meeting\n    next_activity_nextactivities\n\n    compute_next_date\n  end\n\n  def compute_next_date\n    next_activity[\"next_date\"] = nil\n    next_activity[\"next_type\"] = nil\n    next_activity[\"next_id\"] = nil\n\n    next_activity.each do |item|\n      next unless item[1].present?\n      next unless %w[task_date meeting_date call_date email_date].include? item[0]\n\n      if !next_activity[\"next_date\"].present? || next_activity[\"next_date\"] > item[1]\n        next_activity[\"next_date\"] = item[1]\n        next_activity[\"next_type\"] = item[0].split(\"_\")[0]\n        next_activity[\"next_id\"] = next_activity[item[0].split(\"_\")[0] + \"_id\"]\n      end\n    end\n  end\n\n  def next_activity_task\n    find_next_task = aggregated_tasks.where.not(status: \"Completed\").where.not(status: \"Cancelled\").select(\"tasks.*\", \"end_date as next_activity_date\").reorder(\"tasks.end_date ASC\").first\n\n    if find_next_task.present?\n      next_activity[\"task_id\"] = find_next_task.id\n      next_activity[\"task_date\"] = find_next_task.next_activity_date\n    else\n      next_activity[\"task_id\"] = nil\n      next_activity[\"task_date\"] = nil\n    end\n  end\n\n  def next_activity_meeting\n    find_next_meeting = aggregated_meetings.where(status: \"live\").select(\"meetings.*\", \"start_date as next_activity_date\").reorder(\"start_date ASC\").first\n\n    if find_next_meeting.present?\n      next_activity[\"meeting_id\"] = find_next_meeting.id\n      next_activity[\"meeting_date\"] = find_next_meeting.next_activity_date\n    else\n      next_activity[\"meeting_id\"] = nil\n      next_activity[\"meeting_date\"] = nil\n    end\n  end\n\n  def next_activity_nextactivities\n    next_call_email = next_activities.where(status: \"active\").select(\"next_activities.*\", \"scheduled as next_activity_date\", \"context_type as next_activity_type\").first\n\n    if next_call_email.present?\n      if next_call_email.next_activity_type == \"Call\"\n        next_activity[\"call_id\"] = next_call_email.id\n        next_activity[\"call_date\"] = next_call_email.next_activity_date\n        next_activity[\"email_id\"] = nil\n        next_activity[\"email_date\"] = nil\n      end\n\n      if next_call_email.next_activity_type == \"Email\"\n        next_activity[\"email_id\"] = next_call_email.id\n        next_activity[\"email_date\"] = next_call_email.next_activity_date\n        next_activity[\"call_id\"] = nil\n        next_activity[\"call_date\"] = nil\n      end\n    else\n      next_activity[\"call_id\"] = nil\n      next_activity[\"call_date\"] = nil\n      next_activity[\"email_id\"] = nil\n      next_activity[\"email_date\"] = nil\n    end\n  end\n\n  def next_activity_item\n    lead_type.prospect_status_items.where(prospect_status_id: prospect_status_id)\n    .joins(\"LEFT JOIN prospect_status_item_contacts ON prospect_status_item_contacts.prospect_status_item_id = prospect_status_items.id AND prospect_status_item_contacts.contact_id = #{id}\")\n    .joins(\"LEFT JOIN prospect_statuses ON prospect_statuses.id = prospect_status_items.prospect_status_id\")\n    .where('prospect_statuses.prospect_status_version_id': current_prospect_status_version.id)\n    .where('prospect_status_item_contacts.status': 2).first if lead_type\n  end\n\n  def set_first_activity_item(current_user)\n      if lead_stage_last_item\n        @next_item = lead_stage_last_item.prospect_status_item.lower_item\n      else\n        @next_item = ProspectStatusItem.where(prospect_status_id: prospect_status_id, lead_type_id: lead_type_id).first\n      end\n\n      if @next_item.present?\n        if !ProspectStatusItemContact.where(prospect_status_item_id: @next_item.id, contact_id:  id, tenant_id: tenant_id, status: 2).first\n          prospect_status_item_contact = ProspectStatusItemContact.create(\n            contact_id: id,\n            start_date: Time.zone.now(),\n            due_date: Time.zone.now() + @next_item.try(:completion_time).days,\n            prospect_status_item_id: @next_item.id,\n            tenant_id: tenant_id,\n            status: 2\n          )\n\n          prospect_status_item_contact.task_generate(current_user) if prospect_status_item_contact.prospect_status_item.item_type == \"Task\"\n          prospect_status_item_contact.meeting_generate(current_user) if prospect_status_item_contact.prospect_status_item.item_type == \"Meeting\"\n\n          skip_previous_items(prospect_status_item_contact)\n        end\n      end\n  end\n\n  def next_activity_due\n    item_hash = {}\n    contact_prospect_status_item =  next_activity_item\n    next_activity_item_contact = contact_prospect_status_item.prospect_status_item_contact(id) if contact_prospect_status_item\n\n    start_date = next_activity_item_contact.try(:start_date)\n    due_date = next_activity_item_contact.try(:due_date)\n\n    next_activity_date  = next_activity[\"next_date\"].try(:in_time_zone)\n\n    if next_activity_date.present? && due_date && due_date.try(:in_time_zone) <= next_activity_date || !next_activity_date.present? && due_date\n      item_hash[\"type\"] = contact_prospect_status_item.try(:item_type)\n      item_hash[\"start\"] = tenant.local_strftime(next_activity_item_contact.try(:start_date).try(:in_time_zone, tenant.time_zone), \"%%DM-%%DM-%Y\")\n      item_hash[\"due\"] = tenant.local_strftime(next_activity_item_contact.try(:due_date).try(:in_time_zone, tenant.time_zone), \"%%DM-%%DM-%Y\")\n    elsif next_activity_date\n    item_hash[\"type\"] =  next_activity[\"next_type\"]\n      item_hash[\"due\"] =  tenant.local_strftime(next_activity[\"next_date\"].try(:in_time_zone, tenant.time_zone), \"%%DM-%%DM-%Y\")\n      # item_hash['due'] = next_activity_item_contact.try(:due_date)\n    end\n\n    item_hash\n  end\n\n  def display_lead_statuses\n    available_lead_statuses = prospect_status.prospect_status_version.prospect_statuses\n    available_lead_statuses.joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.prospect_status_id = prospect_statuses.id AND prospect_status_items.lead_type_id = #{ lead_type_id}\").where.not('prospect_status_items.id': nil).group(\"prospect_statuses.id\")\n  end\n\n  def available_lead_statuses\n    if tenant.use_new_lead\n      available_lead_statuses = lead_type.prospect_status_version.prospect_statuses\n      available_lead_statuses.joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.prospect_status_id = prospect_statuses.id AND prospect_status_items.lead_type_id = #{ lead_type_id}\").where.not('prospect_status_items.id': nil).group(\"prospect_statuses.id\")\n    else\n      available_lead_statuses = lead_type.prospect_status_version.prospect_statuses\n    end\n  end\n\n  def next_available_status\n    current_prospect_status_version.prospect_statuses.joins(:prospect_status_items).where(\"prospect_statuses.position > (?)\", prospect_status.position).first\n  end\n\n  def previous_available_status\n    current_prospect_status_version.prospect_statuses.joins(:prospect_status_items).where(\"prospect_statuses.position < (?)\", prospect_status.position).reorder(\"prospect_statuses.position DESC\").first\n  end\n\n  def lead_stage_items\n      prospect_status_item_contacts\n      .joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.id = prospect_status_item_contacts.prospect_status_item_id\")\n      .joins(\"LEFT JOIN prospect_statuses ON prospect_statuses.id = prospect_status_items.prospect_status_id\")\n      .where('prospect_status_items.lead_type_id': lead_type_id)\n      .where('prospect_statuses.prospect_status_version_id': current_prospect_status_version.id)\n      .group(\"prospect_status_item_contacts.id\")\n  end\n\n  def lead_stage_last_item\n    prospect_status_item_contacts\n      .joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.id = prospect_status_item_contacts.prospect_status_item_id\")\n      .joins(\"LEFT JOIN prospect_statuses ON prospect_statuses.id = prospect_status_items.prospect_status_id\")\n      .where('prospect_statuses.prospect_status_version_id': current_prospect_status_version.id)\n      .where.not('prospect_status_item_contacts.status': 2)\n      .where('prospect_status_items.lead_type_id': lead_type_id)\n      .where('prospect_status_items.prospect_status_id': prospect_status_id)\n      .order(\"prospect_status_items.position DESC\")\n      .group(\"prospect_status_item_contacts.id, prospect_status_items.position\")\n      .first\n  end\n\n  def completed_lead_process?\n    return true if lead_type.prospect_status_items.where(prospect_status_id: current_prospect_status_version.prospect_statuses.joins(:prospect_status_items).pluck(:id)).count == lead_stage_items.length\n  end\n\n  def skip_previous_items(current_item_contact)\n    # SET ALL PREVIOUS STATUS ITEMS ITEMS AS SKIPPED FOR SPECIFIC VERSION STATUSES\n    current_prospect_status_version.prospect_statuses.where(\"prospect_statuses.position < (?)\",  current_item_contact.prospect_status_item.prospect_status.position).each do |status|\n      lead_type.prospect_status_items.where(prospect_status_id: status.id).each do |item|\n        process_skip_item(item)\n      end\n    end\n\n    # SET CURRENT STATUS PREVIOUS ITEMS AS SKIPPED\n    lead_type.prospect_status_items.where(prospect_status_id: current_item_contact.prospect_status_item.prospect_status_id).where(\"position < (?)\", current_item_contact.prospect_status_item.position).each do |item|\n      process_skip_item(item)\n    end\n  end\n\n  def skip_previous_status_items\n   # SET ALL PREVIOUS STATUS ITEMS ITEMS AS SKIPPED FOR SPECIFIC VERSION STATUSES\n    current_prospect_status_version.prospect_statuses.where(\"prospect_statuses.position < (?)\",  prospect_status.position).each do |status|\n      lead_type.prospect_status_items.where(prospect_status_id: status.id).each do |item|\n        process_skip_item(item)\n      end\n    end\n  end\n\n  def process_skip_item(item)\n    prospect_status_item_contact =  ProspectStatusItemContact.where(prospect_status_item: item, contact: id).first\n\n    if prospect_status_item_contact.present?\n      prospect_status_item_contact.update_attributes(status: 3) if prospect_status_item_contact.status == 0 || prospect_status_item_contact.status == 2\n\n      task = Task.where(taskable_type: \"Contact\", taskable_id: prospect_status_item_contact.contact_id, prospect_status_item_contact_id: prospect_status_item_contact.id).first\n      if task && prospect_status_item_contact.status == 3\n        task.status = \"Cancelled\"\n        task.save\n      end\n    else\n      prospect_status_item_contact =  ProspectStatusItemContact.create({\n        prospect_status_item_id: item.id,\n        contact_id: id,\n        start_date: Time.zone.now(),\n        due_date: Time.zone.now(),\n        tenant_id: tenant_id,\n        status: 3\n      })\n    end\n\n    prospect_status_item_contact\n  end\n\n  def current_prospect_status_version\n    prospect_status.prospect_status_version\n  end\n\n  def compute_activity_progress\n    return false if lead_type.status == \"Old\" || !lead_type\n\n    lead_items_count = lead_type.prospect_status_items.where(prospect_status_id: current_prospect_status_version.prospect_statuses.pluck(:id)).count\n    final_activity_items = lead_stage_items.length if lead_stage_items\n\n    if final_activity_items > 0\n      progress = (final_activity_items.to_f / lead_items_count.to_f * 100).round(0) if final_activity_items.to_f > 0 && lead_items_count.to_f > 0\n    else\n      progress = 0\n    end\n\n    self.conv_prob = progress\n    save\n  end\n\n  def privacy_state(option)\n    result = -1\n\n    if privacy_data.present? && privacy_data.key?(option) && privacy_data[option].present? && privacy_data[option][\"state\"].present?\n      result = privacy_data[option][\"state\"].try(:to_i) || -1\n    end\n\n    result\n  end\n\n  def privacy_state_key(option)\n    case privacy_state(option)\n    when -1\n      \"empty\"\n    when 0\n      \"no\"\n    when 1\n      \"yes\"\n    end\n  end\n\n  def privacy_date(option)\n    result = nil\n\n    if privacy_data.present? && privacy_data.key?(option) && privacy_data[option].present? && privacy_data[option][\"date\"].present?\n      result = privacy_data[option][\"date\"].try(:to_datetime).try(:to_date)\n    end\n\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "marketing",
              "scope": "-> (tenant) { joins(\"LEFT OUTER JOIN companies ON companies.id = contacts.company_id\").where(tenant_id: tenant.id, deleted: false, temp: false, unsubscribed: false, companies: {marketing_do_not_mail: false}) }"
            },
            {
              "name": "no_pending_estimates",
              "scope": "-> { where(\"NOT EXISTS(SELECT null FROM estimates WHERE estimates.contact_id = contacts.id AND estimates.on_pending_list = true)\") }"
            },
            {
              "name": "no_pending_invoices",
              "scope": "-> { where(\"NOT EXISTS(SELECT null FROM invoices WHERE invoices.contact_id = contacts.id AND invoices.on_pending_list = true)\") }"
            },
            {
              "name": "rolling_1_month_sales",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0)\\').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.month)..Date.tomorrow).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as rolling_1_month_sales\") }"
            },
            {
              "name": "calculated_rolling_1_month_sales",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: (Date.tomorrow - 1.month)..Date.tomorrow).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_rolling_1_month_sales\") }"
            },
            {
              "name": "calculated_rolling_12_month_sales",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_rolling_12_month_sales\") }"
            },
            {
              "name": "calculated_rolling_12_month_sales_ly",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: (Date.tomorrow - 2.years)..(Date.tomorrow - 1.year)).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_rolling_12_month_sales_ly\") }"
            },
            {
              "name": "calculated_rolling_12_month_sales_ly_ly",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: (Date.tomorrow - 3.years)..(Date.tomorrow - 2.years)).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_rolling_12_month_sales_ly_ly\") }"
            },
            {
              "name": "calculated_rolling_12_month_cogs",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'ROUND(CASE COALESCE(SUM(invoices.grand_total_inc_tax), 0) WHEN 0 THEN 0 ELSE COALESCE(SUM(invoices.total_cost), 0) / SUM(invoices.grand_total_inc_tax) END, 2)\\').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_rolling_12_month_cogs\") }"
            },
            {
              "name": "calculated_financial_year_sales",
              "scope": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: FinancialYear.new(tenant).start_date..FinancialYear.new(tenant).end_date).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_financial_year_sales\") }"
            },
            {
              "name": "calculated_financial_year_sales_ly",
              "scope": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: (FinancialYear.new(tenant).start_date - 1.year)..(FinancialYear.new(tenant).end_date - 1.year)).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_financial_year_sales_ly\") }"
            },
            {
              "name": "calculated_financial_year_sales_ly_ly",
              "scope": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)\\').invoiced(invoiced_only).joins(\\'LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE\\').where(pickup_date: (FinancialYear.new(tenant).start_date - 2.years)..(FinancialYear.new(tenant).end_date - 2.years)).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_financial_year_sales_ly_ly\") }"
            },
            {
              "name": "calculated_financial_year_cogs",
              "scope": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select(\\'ROUND(CASE COALESCE(SUM(invoices.grand_total_inc_tax), 0) WHEN 0 THEN 0 ELSE COALESCE(SUM(invoices.total_cost), 0) / SUM(invoices.grand_total_inc_tax) END, 2)\\').invoiced(invoiced_only).where(pickup_date: FinancialYear.new(tenant).start_date..FinancialYear.new(tenant).end_date).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_financial_year_cogs\") }"
            },
            {
              "name": "calculated_average_invoice",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'COALESCE(ROUND(AVG(invoices.grand_total), 2), 0)\\').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_average_invoice\") }"
            },
            {
              "name": "calculated_oldest_rolling_1_invoice",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').invoiced(invoiced_only).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').where(\\'invoices.pickup_date >= ?\\', (Date.tomorrow - 1.month)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_1_invoice\") }"
            },
            {
              "name": "calculated_oldest_rolling_12_invoice",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').invoiced(invoiced_only).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').where(\\'invoices.pickup_date >= ?\\', (Date.tomorrow - 1.year)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_invoice\") }"
            },
            {
              "name": "calculated_oldest_rolling_12_ly_invoice",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').invoiced(invoiced_only).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').where(\\'invoices.pickup_date >= ?\\', (Date.tomorrow - 2.years)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_ly_invoice\") }"
            },
            {
              "name": "calculated_oldest_rolling_12_ly_ly_invoice",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').invoiced(invoiced_only).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').where(\\'invoices.pickup_date >= ?\\', (Date.tomorrow - 3.years)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_ly_ly_invoice\") }"
            },
            {
              "name": "calculated_first_sale_date",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').invoiced(invoiced_only).where(\\'invoices.contact_id = contacts.id\\').order(pickup_date: :asc).limit(1).to_sql}) as calculated_first_sale_date\") }"
            },
            {
              "name": "calculated_last_pickup_date",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').invoiced(invoiced_only).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').order(pickup_date: :desc).limit(1).to_sql}) as calculated_last_pickup_date\") }"
            },
            {
              "name": "calculated_last_sale_order_date",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.ordered_date\\').where.not(ordered_date: nil).where(\\'invoices.contact_id = contacts.id\\').invoiced(invoiced_only).order(ordered_date: :desc).limit(1).to_sql}) as calculated_last_sale_order_date\") }"
            },
            {
              "name": "calculated_last_sale_pickup_date",
              "scope": "-> (invoiced_only=false) { select(\"(#{Sale.select(\\'invoices.pickup_date\\').where.not(pickup_date: nil).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').invoiced(invoiced_only).order(pickup_date: :desc).limit(1).to_sql}) as calculated_last_sale_pickup_date\") }"
            },
            {
              "name": "calculated_last_shipment_date",
              "scope": "-> { select(\"(#{Shipment.select(\\'shipments.shipment_date\\').where.not(shipment_date: nil).where(\\'shipments.tenant_id = contacts.tenant_id AND shipments.shipment_date IS NOT NULL AND shipments.contact_id = contacts.id\\').order(shipment_date: :desc).limit(1).to_sql}) as calculated_last_shipment_date\") }"
            },
            {
              "name": "order_count",
              "scope": "-> { select(\"(#{Order.select(\\'COUNT(*)\\').where(on_pending_list: true).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as order_count\") }"
            },
            {
              "name": "with_ranks",
              "scope": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales DESC NULLS LAST) AS calculated_rank\") }"
            },
            {
              "name": "with_ranks_ly",
              "scope": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales_ly DESC NULLS LAST) AS calculated_rank_ly\") }"
            },
            {
              "name": "with_ranks_ly_ly",
              "scope": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales_ly_ly DESC NULLS LAST) AS calculated_rank_ly_ly\") }"
            },
            {
              "name": "with_ranks_financial_year",
              "scope": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales DESC NULLS LAST) AS calculated_rank_financial_year\") }"
            },
            {
              "name": "with_ranks_financial_year_ly",
              "scope": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales_ly DESC NULLS LAST) AS calculated_rank_financial_year_ly\") }"
            },
            {
              "name": "with_ranks_financial_year_ly_ly",
              "scope": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales_ly_ly DESC NULLS LAST) AS calculated_rank_financial_year_ly_ly\") }"
            },
            {
              "name": "calculated_last_email_sent",
              "scope": "-> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = \\'email\\' AND activities.email_id IS NOT NULL\").order(\\'activities.source_created_at DESC NULLS LAST\\').limit(1).to_sql}) AS calculated_last_email_sent\") }"
            },
            {
              "name": "calculated_last_email_received",
              "scope": "-> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = \\'email\\' AND activities.email_id IS NULL\").order(\\'activities.source_created_at DESC NULLS LAST\\').limit(1).to_sql}) AS calculated_last_email_received\") }"
            },
            {
              "name": "calculated_last_phone_call",
              "scope": "-> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = \\'phone_call\\' AND activities.phone_call_id IS NOT NULL\").order(\\'activities.source_created_at DESC NULLS LAST\\').limit(1).to_sql}) AS calculated_last_phone_call\") }"
            },
            {
              "name": "calculated_last_order_date",
              "scope": "-> { select(\"(#{Order.select(\\'invoices.ordered_date\\').where.not(ordered_date: nil).where(\\'invoices.contact_id = contacts.id\\').order(ordered_date: :desc).limit(1).to_sql}) as calculated_last_order_date\") }"
            },
            {
              "name": "calculated_order_count",
              "scope": "-> { select(\"(#{Order.select(\\'COUNT(*)\\').where(on_pending_list: true).where(\\'invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id\\').to_sql}) as calculated_order_count\") }"
            },
            {
              "name": "by_parents",
              "scope": "->  { where(\"contacts.parent_contact_id = contacts.id\") }"
            },
            {
              "name": "by_parents_with_unmapped",
              "scope": "-> { where(\"contacts.parent_contact_id = contacts.id OR parent_contact_id = ?\", -1) }"
            },
            {
              "name": "single_purchase",
              "scope": "-> { where.not(single_sale_only_at: nil) }"
            },
            {
              "name": "first_sale",
              "scope": "-> { where.not(first_sale_at: nil) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "parent_contact",
              "options": {
                "class_name": "Contact",
                "foreign_key": "parent_contact_id"
              },
              "raw_options": "class_name: \"Contact\", foreign_key: \"parent_contact_id\""
            },
            {
              "name": "address",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "location",
              "options": {
                "class_name": "Location",
                "foreign_key": "id",
                "primary_key": "location_user_id"
              },
              "raw_options": "class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\""
            },
            {
              "name": "sales_rep_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "sales_rep_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\""
            },
            {
              "name": "inquiry",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_many": [
            {
              "name": "invoices",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "sales",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "estimates",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "orders",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tasks",
              "options": {
                "as": "taskable"
              },
              "raw_options": "as: :taskable"
            },
            {
              "name": "phone_calls",
              "options": {
                "as": "phoneable"
              },
              "raw_options": "as: :phoneable"
            },
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaign_messages",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "emails",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "notes",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "next_activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "interest_contexts",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "inquiries",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_item_contacts",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "contact_lists",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "country",
        "name_plural": "countries",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/country.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Country < ActiveRecord::Base\n  has_many :country_states, dependent: :destroy\n  has_and_belongs_to_many :enterprises\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "country_states",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "enterprises",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "countries_enterprise",
        "name_plural": "countries_enterprises",
        "dsl_file": ""
      },
      {
        "name": "country_state",
        "name_plural": "country_states",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/country_state.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass CountryState < ActiveRecord::Base\n  belongs_to :country\n  has_and_belongs_to_many :holidays\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "country",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [
            {
              "name": "holidays",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "country_states_holiday",
        "name_plural": "country_states_holidays",
        "dsl_file": ""
      },
      {
        "name": "deployment",
        "name_plural": "deployments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/deployment.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Deployment < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  has_many :backups, primary_key: :tenant_id, foreign_key: :tenant_id\n\n  def live_build\n    Build.where(name: name, os: os).first\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "backups",
              "options": {
                "primary_key": "tenant_id",
                "foreign_key": "tenant_id"
              },
              "raw_options": "primary_key: :tenant_id, foreign_key: :tenant_id"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_alias",
        "name_plural": "email_aliases",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_alias.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailAlias < ActiveRecord::Base\n  belongs_to :user\n  validates_uniqueness_of :email, scope: :user_id\n  validate :check_email_valid\n\n  def check_email_valid\n    if !Email.valid_format?(email)\n      errors.add(:email, :invalid)\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [
            {
              "line": ":check_email_valid"
            }
          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_credential",
        "name_plural": "email_credentials",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_credential.rb",
        "source": {
          "ruby": "class EmailCredential < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :tenant\n  belongs_to :enterprise\n\n\n\n  def smtp_server\n    credentials[\"smtp_server\"]\n  end\n\n  def smtp_port\n    credentials[\"smtp_port\"]\n  end\n\n  def smtp_username\n    credentials[\"smtp_username\"]\n  end\n\n  def smtp_password\n    credentials[\"smtp_password\"]\n  end\n\n  def imap_server\n    credentials[\"imap_server\"]\n  end\n\n  def imap_port\n    credentials[\"imap_port\"]\n  end\n\n  def imap_username\n    credentials[\"imap_username\"]\n  end\n\n  def imap_password\n    credentials[\"imap_password\"]\n  end\n\n  def valid_smtp?\n    return false if platform != \"smtp/imap\"\n    result = true\n    result = false if smtp_server.blank? || smtp_username.blank? || smtp_password.blank? || smtp_port.nil?\n\n    begin\n      smtp_client = Net::SMTP.new(smtp_server, smtp_port)\n      if smtp_port == 465\n        smtp_client.enable_ssl\n      else\n        smtp_client.enable_starttls_auto\n      end\n      smtp_client.open_timeout = 10\n      smtp_client.read_timeout = 10\n      smtp_client.start(\"localhost\", smtp_username, smtp_password, :login)\n      smtp_client.finish\n    rescue StandardError\n      result = false\n    end\n\n    result\n  end\n\n  def valid_imap?\n    require \"net/imap\"\n    require \"timeout\"\n    return false if platform != \"smtp/imap\"\n    result = true\n    result = false if imap_server.blank? || imap_username.blank? || imap_password.blank? || imap_port.nil?\n\n    begin\n      Timeout::timeout(10) do\n        imap = nil\n        if imap_port != 143\n          imap = Net::IMAP.new(imap_server, port: imap_port, ssl: true)\n        else\n          imap = Net::IMAP.new(imap_server, port: imap_port, ssl: false)\n          imap.starttls\n        end\n        imap.authenticate(\"PLAIN\", imap_username, imap_password)\n      end\n    rescue StandardError\n      result = false\n    end\n\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_delivery",
        "name_plural": "email_deliveries",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_delivery.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailDelivery < ActiveRecord::Base\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_message_activity",
        "name_plural": "email_message_activities",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_message_activity.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailMessageActivity < ActiveRecord::Base\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_soft_bounce",
        "name_plural": "email_soft_bounces",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_soft_bounce.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailSoftBounce < ActiveRecord::Base\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_status",
        "name_plural": "email_statuses",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_status.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailStatus < ActiveRecord::Base\n  enum status: %i[bounce complaint unsubscribe]\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_tag",
        "name_plural": "email_tags",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_tag.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailTag < ActiveRecord::Base\n  has_and_belongs_to_many :emails\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [
            {
              "name": "emails",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_tags_email",
        "name_plural": "email_tags_emails",
        "dsl_file": ""
      },
      {
        "name": "email_template_category",
        "name_plural": "email_template_categories",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template_category.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailTemplateCategory < ActiveRecord::Base\n  enum categories: {inquiries: 9, shipments: 10, estimates: 1, orders: 2, sales: 3, campaigns: 5, contacts: 6, companies: 7, comments: 8}\n\n  belongs_to :email_template\n\n  def self.platform_categories(tenant)\n    if Platform.is_printsmith?(tenant)\n      EmailTemplateCategory.categories.reject { |k, v| k == \"shipments\" }\n    elsif Platform.is_mbe?(tenant)\n      EmailTemplateCategory.categories.reject { |k, v| %w[estimates orders].include?(k) }\n    else\n      EmailTemplateCategory.categories\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "email_template",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_template_field",
        "name_plural": "email_template_fields",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template_field.rb",
        "source": {
          "ruby": "class EmailTemplateField < ActiveRecord::Base\n  belongs_to :email_template\n  has_many :values, class_name: \"EmailTemplateValue\"\n\n  def get_value(element, tenant_id = nil)\n    result = values.where(element_type: element.class, element_id: element.id, tenant_id: nil).first.try(:value)\n    if !tenant_id.nil?\n      tenant_value = values.where(element_type: element.class, element_id: element.id, tenant_id: tenant_id).first.try(:value)\n      result = tenant_value if !tenant_value.blank?\n    end\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "email_template",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "values",
              "options": {
                "class_name": "EmailTemplateValue"
              },
              "raw_options": "class_name: \"EmailTemplateValue\""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_template_value",
        "name_plural": "email_template_values",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template_value.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EmailTemplateValue < ActiveRecord::Base\n  belongs_to :email_template_field\n  belongs_to :campaign, polymorphic: true\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "email_template_field",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaign",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_template",
        "name_plural": "email_templates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template.rb",
        "source": {
          "ruby": "class EmailTemplate < ActiveRecord::Base\n  require \"fuzzystringmatch\"\n\n  # belongs_to :user\n  belongs_to :tenant\n  has_many :email_template_fields, dependent: :destroy\n  has_many :email_template_categories, dependent: :destroy\n  has_many :hidden_email_templates, dependent: :destroy\n  belongs_to :wrapper, class_name: \"EmailTemplate\", foreign_key: \"wrapper_id\"\n\n\n\n  before_save :nullify_global_tenant_id\n\n  accepts_nested_attributes_for :email_template_fields, reject_if: lambda { |a| a[:name].blank? }, allow_destroy: true\n\n  attr_accessor :hide\n\n  scope :by_category, -> (tenant, categories) { joins(\"LEFT OUTER JOIN email_template_categories ON email_template_categories.email_template_id = email_templates.id\").where(\"email_template_categories.category = ? OR email_templates.id = ?\", categories.to_s.blank? ? 0 : categories.to_s, tenant.enterprise.default_email_template_id).distinct }\n  scope :by_tenant, -> (tenant) { where(shell: false, hidden: false).where.not(archived: true).where(\"email_templates.tenant_id = ? OR (email_templates.global = ? AND email_templates.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(\"LEFT OUTER JOIN hidden_email_templates ON hidden_email_templates.email_template_id = email_templates.id\").having(\"? != ALL(array_agg(hidden_email_templates.tenant_id)) OR 0 = ALL(array_agg(COALESCE(hidden_email_templates.tenant_id, 0)))\", tenant.id).group(\"email_templates.id\") }\n  scope :by_enterprise, -> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }\n  scope :only_category, -> (categories) { joins(\"LEFT OUTER JOIN email_template_categories ON email_template_categories.email_template_id = email_templates.id\").where(\"email_template_categories.category = ?\", categories.to_s.blank? ? 0 : categories.to_s).distinct }\n  default_scope { order(name: :asc) }\n\n  validates :name, presence: true\n  validates :name, length: { maximum: 250 }\n\n  validates :subject, length: { maximum: 250 }\n\n  validate :name_must_be_unique, :name_must_not_be_in_global\n\n  def name_must_be_unique\n    found_template = EmailTemplate.none\n    if global\n      found_template = EmailTemplate.where(global: false).where(name: name)\n    else\n      found_template = EmailTemplate.by_tenant(tenant).where(global: false).where(name: name)\n    end\n    found_template = found_template.where.not(id: id) if id.present?\n    if found_template.first.present?\n      errors.add(:name, \"has already been taken by a local email template!\")\n    end\n  end\n\n  def name_must_not_be_in_global\n    target_tenant = tenant\n    target_tenant = user.primary_tenant if target_tenant.nil?\n    found_template = EmailTemplate.by_enterprise(target_tenant.enterprise).where(global: true).where(name: name)\n    found_template = found_template.where.not(id: id) if id.present?\n    if found_template.first.present?\n      errors.add(:name, \"has already been taken by a global email template!\")\n    end\n  end\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\n\n  def categories\n    email_template_categories.pluck(:category)\n  end\n\n  def categories=(new_categories)\n    if new_categories.nil?\n      email_template_categories.destroy_all\n    else\n      new_categories = new_categories.reject { |c| c.blank? }.map(&:to_i)\n      if (new_categories - EmailTemplateCategory.platform_categories(@tenant).values).empty?\n        email_template_categories.where.not(category: new_categories).destroy_all\n        old_categories = email_template_categories.where(category: new_categories).pluck(:category)\n        new_categories.each do |new_category|\n          email_template_categories << EmailTemplateCategory.create!(category: new_category) unless old_categories.include?(new_category)\n        end\n      end\n    end\n  end\n\n  def nullify_global_tenant_id\n    self.tenant_id = nil if global\n  end\n\n  def self.default_for_location(context = nil)\n    if context.present? && context.try(:production_location_id)\n      if %w[estimates orders].include? context.class.to_s.pluralize.downcase\n        by_tenant(context.tenant).by_category(context.tenant,  EmailTemplateCategory.platform_categories(@tenant)[context.class.to_s.pluralize.downcase.to_sym]).where(production_location_id: context.production_location_id).first\n      end\n    end\n  end\n\n  def update_similarities\n    jarow = FuzzyStringMatch::JaroWinkler.create(:native)\n    parent_template = EmailTemplate.where(id: copied_email_template_id).first\n    if parent_template\n      self.copied_similarity = jarow.getDistance(body, parent_template.body) * 100\n      save\n    end\n\n    root_template = EmailTemplate.where(id: copied_root_email_template_id).first\n    if root_template\n      self.root_similarity = jarow.getDistance(body, root_template.body) * 100\n      save\n    end\n\n    child_templates = EmailTemplate.where(copied_email_template_id: id, enterprise_id: enterprise_id)\n    child_templates.each do |child_template|\n      child_template.copied_similarity = jarow.getDistance(child_template.body, body) * 100\n      child_template.save\n    end\n\n    root_child_templates = EmailTemplate.where(copied_root_email_template_id: id, enterprise_id: enterprise_id)\n    root_child_templates.each do |root_child_template|\n      root_child_template.root_similarity = jarow.getDistance(root_child_template.body, body) * 100\n      root_child_template.save\n    end\n  end\n\n  def include_roboto?(enterprise)\n    (!try(:id) && enterprise.try(:default_roboto_font)) ||\n    use_roboto ||\n    try(:id) && enterprise.try(:default_roboto_font)\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(name: :asc) }",
          "scopes": [
            {
              "name": "by_category",
              "scope": "-> (tenant, categories) { joins(\"LEFT OUTER JOIN email_template_categories ON email_template_categories.email_template_id = email_templates.id\").where(\"email_template_categories.category = ? OR email_templates.id = ?\", categories.to_s.blank? ? 0 : categories.to_s, tenant.enterprise.default_email_template_id).distinct }"
            },
            {
              "name": "by_tenant",
              "scope": "-> (tenant) { where(shell: false, hidden: false).where.not(archived: true).where(\"email_templates.tenant_id = ? OR (email_templates.global = ? AND email_templates.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(\"LEFT OUTER JOIN hidden_email_templates ON hidden_email_templates.email_template_id = email_templates.id\").having(\"? != ALL(array_agg(hidden_email_templates.tenant_id)) OR 0 = ALL(array_agg(COALESCE(hidden_email_templates.tenant_id, 0)))\", tenant.id).group(\"email_templates.id\") }"
            },
            {
              "name": "by_enterprise",
              "scope": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
            },
            {
              "name": "only_category",
              "scope": "-> (categories) { joins(\"LEFT OUTER JOIN email_template_categories ON email_template_categories.email_template_id = email_templates.id\").where(\"email_template_categories.category = ?\", categories.to_s.blank? ? 0 : categories.to_s).distinct }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "wrapper",
              "options": {
                "class_name": "EmailTemplate",
                "foreign_key": "wrapper_id"
              },
              "raw_options": "class_name: \"EmailTemplate\", foreign_key: \"wrapper_id\""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "email_template_fields",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "email_template_categories",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "hidden_email_templates",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [
            {
              "line": ":name_must_be_unique, :name_must_not_be_in_global"
            }
          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: true"
            },
            {
              "name": "name",
              "raw_options": "length: { maximum: 250 }"
            },
            {
              "name": "subject",
              "raw_options": "length: { maximum: 250 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email_validation_reset_contact_id",
        "name_plural": "email_validation_reset_contact_ids",
        "dsl_file": ""
      },
      {
        "name": "email_validation",
        "name_plural": "email_validations",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_validation.rb",
        "source": {
          "ruby": "class EmailValidation < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :enterprise\n  belongs_to :contact\n\n\n\n  def status\n    result = \"unknown\"\n\n    if EmailValidation.deliverable_codes.include?(code)\n      result = \"deliverable\"\n    elsif EmailValidation.deliverable_but_unverified_codes.include?(code)\n      result = \"deliverable_but_unverified\"\n    elsif EmailValidation.unverified_codes.include?(code)\n      result = \"unverified\"\n    elsif EmailValidation.undeliverable_codes.include?(code)\n      result = \"undeliverable\"\n    end\n\n    result\n  end\n\n  def name\n    result = \"\"\n    if code.start_with?(\"t_\")\n      result = \"#{code[2..-1]} (Temporary)\"\n    elsif code.start_with?(\"p_\")\n      result = \"#{code[2..-1]} (Permanent)\"\n    else\n      result = code\n    end\n    result.titleize\n  end\n\n  def desc\n    result = \"\"\n    clean_code = code\n    if clean_code.start_with?(\"t_\") || clean_code.start_with?(\"p_\")\n      clean_code = code[2..-1]\n    end\n    result = EmailValidation.code_descriptions[clean_code.to_sym] || \"\"\n    result\n  end\n\n  def self.desc(code)\n    result = \"\"\n    clean_code = code\n    if clean_code.start_with?(\"t_\") || clean_code.start_with?(\"p_\")\n      clean_code = code[2..-1]\n    end\n    result = EmailValidation.code_descriptions[clean_code.to_sym] || \"\"\n    result\n  end\n\n  def color\n    result = \"default\"\n    case status\n    when \"deliverable\"\n      result = \"blue\"\n    when \"deliverable_but_unverified\"\n      result = \"mustard\"\n    when \"unverified\"\n      result = \"orange\"\n    when \"undeliverable\"\n      result = \"red\"\n    end\n    result\n  end\n\n  def self.code_descriptions\n    {\n      'ok': \"The email address is verified\",\n      'ok_for_all': \"The email server accepts all incoming mail but does not verify the specific email scanned\",\n      'email_exists': \"The email address exists but it is unclear if delivery will succeed\",\n      'antispam_system': \"The email server treats the incoming scan as a spam attempt and the specific email cannot be verified\",\n      'email_disabled': \"The email account is disabled, suspended, or limited\",\n      'unknown_email': \"The email address does not exist\",\n      'attempt_rejected': \"The email address scan failed\",\n      'relay_error': \"The verification attempt failed because of a relay problem\",\n      'domain_error': \"There is a problem with the domain and no email can be delivered to that domain\",\n      'dead_server': \"The email server cannot be contacted and no email can be delivered to that server\",\n      'syntax_error': \"There is a syntax error in the email address being scanned\",\n      'error': \"Server is saying that delivery was failed, but no information about email existence or availability\",\n      'smtp_error': \"The email server returns an error and the email address cannot be verified\",\n      'smtp_protocol': \"The email scan could connect to the email server but it rejected the verification attempt and the email cannot be verified\",\n      'spamtrap': \"The email is a spam trap\",\n      'disposable': \"The email is disposable\",\n      'invalid_syntax': \"The email syntax is invalid\",\n      'lock': \"The email address is locked\",\n      'unknown': \"Unknown\"\n    }\n  end\n\n  def self.deliverable_codes\n    [\n      \"ok\"\n    ]\n  end\n\n  def self.deliverable_but_unverified_codes\n    %w[\n      ok_for_all\n      email_exists\n    ]\n  end\n\n  def self.unverified_codes\n    %w[\n      antispam_system\n      t_antispam_system\n      p_antispam_system\n    ]\n  end\n\n  def self.undeliverable_codes\n    %w[\n      email_disabled\n      t_email_disabled\n      p_email_disabled\n      unknown_email\n      t_unknown_email\n      p_unknown_email\n      attempt_rejected\n      t_attempt_rejected\n      p_attempt_rejected\n      relay_error\n      t_relay_error\n      p_relay_error\n      domain_error\n      dead_server\n      syntax_error\n      error\n      t_error\n      p_error\n      smtp_error\n      smtp_protocol\n      spamtrap\n      disposable\n      invalid_syntax\n      unknown_email\n      lock\n      unknown\n    ]\n  end\n\n  def self.valid_codes\n    EmailValidation.deliverable_codes + EmailValidation.deliverable_but_unverified_codes + EmailValidation.unverified_codes + EmailValidation.undeliverable_codes\n  end\n\n  def self.scan_contact(contact)\n    return nil if contact.nil?\n    failed_validation = false\n    clean_email = Email.clean_email(contact.email)\n    if clean_email.blank?\n      if contact.needs_email_validation\n        contact.update_attributes(needs_email_validation: false)\n      end\n      return nil\n    end\n\n    result = nil\n\n    if contact.needs_email_validation\n      matching_contacts = Contact.joins(:company)\n                          .where(companies: { marketing_do_not_mail: false })\n                          .where(tenant: contact.tenant, deleted: false, unsubscribed: false, temp: false)\n                          .where(\"LOWER(TRIM(contacts.email)) = ?\", clean_email)\n\n      api_result = nil\n      if Rails.env.development?\n        rand_result = \"unknown\"\n        rand_percent = rand(100)\n        if rand_percent < 10\n          rand_result = EmailValidation.unverified_codes.sample\n        elsif rand_percent < 30\n          rand_result = EmailValidation.undeliverable_codes.sample\n        elsif rand_percent < 40\n          rand_result = EmailValidation.deliverable_but_unverified_codes.sample\n        else\n          rand_result = EmailValidation.deliverable_codes.sample\n        end\n        api_result = OpenStruct.new({\n          code: 200,\n          body: rand_result\n        })\n      else\n        if Email.valid_format?(clean_email)\n          request_start = Time.now\n          begin\n            api_result = RestClient.get(\"https://apps.emaillistverify.com/api/verifyEmail\", {\n              params: {\n                email: clean_email,\n                secret: Rails.application.secrets.email_list_verify_api_key\n              }\n            })\n          rescue StandardError\n          end\n        else\n          api_result = OpenStruct.new({\n            code: 200,\n            body: \"invalid_syntax\"\n          })\n        end\n      end\n\n      if api_result.try(:code) == 200\n        result_code = api_result.body\n        if result_code == \"error_credit\"\n          raise \"Email List Verify out of credits\"\n        end\n\n        if result_code == \"unknown\" && contact.email_validation_attempts < 3\n          failed_validation = true\n        else\n          if EmailValidation.valid_codes.include?(result_code)\n            contact_ids = [contact.id]\n            rescan_needed = result_code.start_with?(\"t_\")\n            email_validation = EmailValidation.create(\n              tenant: contact.tenant,\n              enterprise: contact.tenant.enterprise,\n              contact_id: contact.id,\n              address: clean_email,\n              parent_id: 0,\n              code: result_code,\n              rescan_needed: rescan_needed,\n              pending_rescan: rescan_needed\n            )\n            matching_contacts.each do |matching_contact|\n              next if contact.id == matching_contact.id\n              contact_ids << matching_contact.id\n              EmailValidation.create(\n                tenant: matching_contact.tenant,\n                enterprise: matching_contact.tenant.enterprise,\n                contact_id: matching_contact.id,\n                address: clean_email,\n                parent_id: email_validation.id,\n                code: result_code,\n                rescan_needed: rescan_needed,\n                pending_rescan: rescan_needed\n              )\n            end\n            Contact.where(id: contact_ids).update_all(needs_email_validation: false)\n            if email_validation.status == \"undeliverable\"\n              contact.unsubscribe(\"validation_#{result_code}\")\n            end\n            result = email_validation\n          else\n            Honeybadger.notify(\n              error_class: \"EmailValidation\",\n              error_message: \"EmailValidation API Data\",\n              parameters: {\n                api_code: api_result.code,\n                api_body: api_result.body,\n                email: clean_email,\n                contact_id: contact.id\n              }\n            )\n            raise \"EmailValidation API gave unknown result\"\n          end\n        end\n      elsif api_result.nil?\n        failed_validation = true\n      else\n        Honeybadger.notify(\n          error_class: \"EmailValidation\",\n          error_message: \"EmailValidation API Data\",\n          parameters: {\n            api_code: api_result.code,\n            api_body: api_result.body,\n            email: clean_email,\n            contact_id: contact.id\n          }\n        )\n      end\n\n      if failed_validation\n        Contact.where(id: matching_contacts).update_all(email_validation_attempts: contact.email_validation_attempts + 1)\n      end\n    else\n      result = EmailValidation.latest_result(contact)\n    end\n\n    result\n  end\n\n  def self.latest_result(contact)\n    return nil if contact.nil?\n    EmailValidation.where(tenant: contact.tenant, contact: contact).order(created_at: :desc).first\n  end\n\n  def self.do_scan(tenant, limit: 10)\n    return nil if tenant.nil?\n    while limit > 0\n      contacts = Contact.joins(:company).where(companies: { marketing_do_not_mail: false }).where(tenant: tenant, needs_email_validation: true, deleted: false, unsubscribed: false, temp: false).order(\"contacts.email_validation_attempts ASC, contacts.source_created_at DESC NULLS LAST\").limit(limit)\n      limit = 0\n      address_list = []\n      contacts.each do |contact|\n        clean_email = Email.clean_email(contact.email)\n        next if address_list.include?(clean_email)\n        if clean_email.blank?\n          limit += 1\n        else\n          address_list << contact.email\n        end\n        EmailValidation.scan_contact(contact)\n      end\n    end\n    nil\n  end\n\n  def self.result_query(tenant: nil, page: 1, per: 10, sort: \"date\", sort_order: \"desc\", deliverable: false, deliverable_but_unverified: false, unverified: false, undeliverable: false, search: nil)\n    sort = \"date\" if !%w[date name email code].include?(sort)\n    sort_order = \"desc\" if !%w[asc desc].include?(sort_order)\n    order_query = \"\"\n    case sort\n    when \"date\"\n      order_query = \"T.created_at #{sort_order}\"\n    when \"name\"\n      order_query = \"contacts.first_name #{sort_order}\"\n    when \"email\"\n      order_query = \"contacts.email #{sort_order}\"\n    when \"code\"\n      order_query = \"T.code #{sort_order}\"\n    end\n\n    search_condition = nil\n    if !search.blank?\n      search_condition = %Q{\n        AND (\n          (trim(regexp_replace(COALESCE(contacts.first_name, '') || ' ' || COALESCE(contacts.last_name, ''), '\\s+', ' ', 'g')) ILIKE #{ActiveRecord::Base::sanitize(\"%#{search}%\")})\n          OR contacts.email ILIKE #{ActiveRecord::Base::sanitize(\"%#{search}%\")}\n          OR companies.name ILIKE #{ActiveRecord::Base::sanitize(\"%#{search}%\")}\n        )\n      }\n    end\n\n    conditions = \"\"\n    if !tenant.nil?\n      conditions << \" AND tenant_id = #{tenant.id}\"\n    end\n    if deliverable\n      conditions << \" AND code IN (#{EmailValidation.deliverable_codes.map { |s| \"'#{s}'\" }.to_csv})\"\n    end\n    if deliverable_but_unverified\n      conditions << \" AND code IN (#{EmailValidation.deliverable_but_unverified_codes.map { |s| \"'#{s}'\" }.to_csv})\"\n    end\n    if unverified\n      conditions << \" AND code IN (#{EmailValidation.unverified_codes.map { |s| \"'#{s}'\" }.to_csv})\"\n    end\n    if undeliverable\n      conditions << \" AND code IN (#{EmailValidation.undeliverable_codes.map { |s| \"'#{s}'\" }.to_csv})\"\n    end\n\n    query = %Q{\n      SELECT T.*, (COUNT(*) OVER()) AS total_count\n      FROM (\n        SELECT *, ROW_NUMBER() OVER(PARTITION BY email_validations.contact_id ORDER BY email_validations.created_at DESC) AS row_num\n        FROM email_validations\n        WHERE TRUE\n        #{conditions}\n      ) T\n      INNER JOIN contacts ON contacts.id = T.contact_id\n      INNER JOIN companies ON companies.id = contacts.company_id\n      WHERE T.row_num = 1\n      #{search_condition}\n      ORDER BY #{order_query}\n      LIMIT #{per}\n      OFFSET #{(page-1) * per}\n    }\n\n    results = EmailValidation.find_by_sql(query)\n    Kaminari.paginate_array(results, total_count: results.first.try(:total_count) || 0).page(page).per(per)\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "email",
        "name_plural": "emails",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email.rb",
        "source": {
          "ruby": "class Email < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :sending_as_user, class_name: \"User\", foreign_key: :sending_as_user_id\n  belongs_to :tenant\n  belongs_to :context, polymorphic: true\n  has_and_belongs_to_many :email_tags\n  has_and_belongs_to_many :trackers, -> { uniq }\n  has_many :hits, through: :trackers\n\n\n\n  attr_accessor :from_name\n  attr_accessor :to_name\n\n  alias_attribute :date, :created_at\n  alias_attribute :from_address, :from\n  alias_attribute :to_address, :to\n\n  def to_email_message\n    EmailMessage.new(\n      sent_id: id,\n      subject: subject,\n      html: body,\n      text: body,\n      message_id: \"invalid\",\n      date: created_at,\n      from_addresses: [from],\n      from_names: [\"\"],\n      to_addresses: to.try(:split, \",\").try(:map) { |s| \"#{s.squish.downcase}\" },\n      to_names: to.try(:split, \",\").try(:map) { |s| \"\" },\n      cc_addresses: cc.try(:split, \",\").try(:map) { |s| \"#{s.squish.downcase}\" },\n      cc_names: cc.try(:split, \",\").try(:map) { |s| \"\" },\n      failed: check_failed\n    )\n  end\n\n  def check_failed\n    processed == true && message_id.blank? && email_id.blank? && created_at >= DateTime.new(2019, 3, 25)\n  end\n\n  def send_email\n    if !processed && (error_backoff.nil? || error_backoff < Time.now)\n      from_user = sending_as_user || user\n      if !from.blank? && from.include?(\"@\")\n        from_addr = nil\n        begin\n          from_addr = Mail::Address.new(\"#{from_user.email_name} <#{from}>\").format\n        rescue Mail::Field::ParseError\n          report_send_error(\"Failed to parse From address\", true)\n          return\n        end\n\n        attachments_ready = true\n        attachment_error = nil\n        pending_attachments = PendingAttachment.where(uuid: attachment_uuid)\n        pending_attachments.each do |pending_attachment|\n          attachment_error = pending_attachment.error if attachment_error.blank?\n          attachments_ready = false if !pending_attachment.complete\n        end\n\n        if !attachment_error.nil?\n          report_send_error(\"Attachment: #{attachment_error}\", true)\n          return\n        end\n\n        if !attachments_ready\n          return\n        end\n\n        encoded_mail, message_id = Email.create_email_message(\n          to: to,\n          from: from_addr,\n          cc: cc,\n          bcc: bcc,\n          subject: subject,\n          body: body.dup,\n          attachment_uuid: attachment_uuid\n        )\n\n        if encoded_mail.nil?\n          report_send_error(\"Failed to create email message\", true)\n          return\n        end\n\n        begin\n          Timeout::timeout(120) do\n            if tenant.use_smtp\n              send_smtp(from_user, encoded_mail, message_id)\n            else\n              send_gmail(from_user, encoded_mail, message_id)\n            end\n          end\n        rescue Timeout::Error\n          report_send_error(\"Email took too long to send\", false)\n        end\n      else\n        report_send_error(\"From address invalid\", true)\n      end\n    end\n  end\n\n  def send_smtp(from_user, encoded_mail, message_id)\n    creds = from_user.email_creds(tenant)\n    return if creds.smtp_server.blank? || creds.smtp_username.blank? || creds.smtp_password.blank? || creds.smtp_port.nil?\n    begin\n      from_addrs = Email.parse_email_addresses(from)\n      to_addrs = Email.parse_email_addresses(to)\n      cc_addrs = Email.parse_email_addresses(cc)\n      bcc_addrs = Email.parse_email_addresses(bcc)\n      dest_addrs = (to_addrs + cc_addrs + bcc_addrs)\n      dest_addrs = (dest_addrs + from_addrs) if tenant.auto_self_bcc\n      dest_addrs = dest_addrs.uniq.reject(&:blank?)\n    rescue StandardError\n      report_send_error(\"Invalid address\", true)\n    end\n    begin\n      smtp_client = Net::SMTP.new(creds.smtp_server, creds.smtp_port)\n      if creds.smtp_port == 465\n        smtp_client.enable_ssl\n      else\n        smtp_client.enable_starttls_auto\n      end\n      smtp_client.start(\"localhost\", creds.smtp_username, creds.smtp_password, :login) do |smtp|\n        smtp.sendmail(encoded_mail, from, dest_addrs)\n      end\n      self.processed = true\n      self.message_id = message_id\n      save\n      Email.cleanup_attachment_uuid(attachment_uuid, id)\n    rescue Exception => e\n      report_send_error(e)\n    end\n  end\n\n  def send_gmail(from_user, encoded_mail, message_id)\n    if from_user.token.blank?\n      report_send_error(\"Unauthorized\", true)\n      return\n    end\n\n    require \"google/apis/gmail_v1\"\n    gmail = Google::Apis::GmailV1::GmailService.new\n    gmail.authorization = from_user.token.authorization\n    unless bcc.blank?\n      encoded_mail.prepend \"Bcc: #{bcc}\\n\"\n    end\n\n    begin\n      result = gmail.send_user_message(\"me\", nil, upload_source: StringIO.new(encoded_mail), content_type: \"message/rfc822\")\n      self.email_id = result.id\n      self.thread_id = result.thread_id\n      self.message_id = message_id\n      self.processed = true\n      save\n      Email.cleanup_attachment_uuid(attachment_uuid, id)\n    rescue Google::Apis::ClientError => client_error\n      report_send_error(client_error, true)\n    rescue Exception => e\n      Token.where(user_id: from_user.id).update_all(expires_at: Time.now)\n      report_send_error(e)\n    end\n  end\n\n  def report_send_error(error_message, permanent=false)\n    self.processed = permanent\n    self.failed_reason = error_message\n    notify = false\n    if error_backoff.nil?\n      self.error_backoff = Time.now + 30.seconds\n    else\n      notify = true if created_at >= 15.minutes.ago\n      self.error_backoff = Time.now + 5.minutes\n    end\n    save\n    if notify\n      ::Honeybadger.notify(\n        error_class: \"Failed to process outbound email\",\n        error_message: error_message,\n        parameters: {\n          email: {\n            id: id\n          },\n          tenant: {\n            id: tenant.id,\n            name: tenant.display_name\n          }\n        }\n      )\n    end\n  end\n\n  def friendly_error_message\n    result = \"None\"\n\n    if !failed_reason.blank?\n      result = \"Unknown\"\n      if self.failed_reason = \"Email took too long to send\"\n        result = failed_reason\n      elsif failed_reason =~ /Attachment:/i\n        result = failed_reason\n      elsif failed_reason =~ /invalid\\saddress/i\n        result = \"Invalid Address\"\n      elsif failed_reason =~ /invalid/i\n        result = \"Invalid\"\n      elsif failed_reason =~ /uploadTooLarge/i\n        result = \"Attachments Too Large\"\n      elsif failed_reason =~ /authorization\\sfailed/i || failed_reason =~ /authentication\\sunsuccessfu/i\n        result = \"Unauthorized\"\n      end\n    end\n\n    result\n  end\n\n  def attachment_assets\n    Asset.where(tenant_id: tenant.id, category: \"Email Attachment\", context_type: \"Email\", context_id: id)\n  end\n\n  def self.cleanup_attachment_uuid(attachment_uuid, email_id)\n    pending_attachments = PendingAttachment.where(uuid: attachment_uuid)\n    pending_attachments.each do |pending_attachment|\n      asset = Asset.where(context_type: \"PendingAttachment\", context_id: pending_attachment.id).first\n      if asset\n        asset.update_attributes(context_type: \"Email\", context_id: email_id)\n      end\n      pending_attachment.destroy\n    end\n  end\n\n  def self.create_email_message(to: nil, from: nil, cc: nil, bcc: nil, subject: nil, body: nil, attachment_uuid: nil)\n    return nil if to.blank? || from.blank?\n\n    msg = Mail.new\n    subject = \"\" if subject.nil?\n    body = \"\" if body.nil?\n\n    pending_attachments = []\n    new_attachments = []\n    if !attachment_uuid.blank?\n      pending_attachments = PendingAttachment.where(uuid: attachment_uuid)\n      pending_attachments.each do |pending_attachment|\n        failed = false\n        asset = Asset.where(context_type: \"PendingAttachment\", context_id: pending_attachment.id).first\n        if asset\n          file_contents = nil\n          if pending_attachment.inline\n            begin\n              file_contents = open(URI.encode(asset.url, \"[]\")).read\n            rescue StandardError\n              failed = true\n            end\n          end\n\n          if !failed\n            new_attachments << {\n              url: asset.tracked_url,\n              file_contents: file_contents,\n              file_name: asset.file_name\n            }\n          end\n        else\n          failed = true\n        end\n\n        if failed\n          return nil\n        end\n      end\n    end\n\n    if new_attachments.count > 0\n      inlined_file_names = []\n      hint_text = \"<!-- ATTACHMENTS -->\"\n      pos = body.index(hint_text)\n      attachment_text = \"\"\n      attachment_text << \"<strong>Attachments</strong><ul>\"\n\n      new_attachments.each do |new_attachment|\n        attachment_text << %Q{<li><a href=\"#{new_attachment[:url]}\">#{new_attachment[:file_name]}</a></li>}\n\n        if !new_attachment[:file_contents].nil?\n          uniq_file_name = new_attachment[:file_name]\n          uniq_file_name = %Q{#{inlined_file_names.count}_#{uniq_file_name}} if inlined_file_names.include?(uniq_file_name)\n          inlined_file_names << uniq_file_name\n\n          msg.attachments[uniq_file_name] = {\n            mime_type: MIME::Types.type_for(new_attachment[:file_name]).first.try(:content_type) || \"application/octet-stream\",\n            content: new_attachment[:file_contents]\n          }\n        end\n      end\n\n      attachment_text << \"</ul>\"\n      if pos.nil?\n        body << \"<br/><br/>#{attachment_text}\"\n      else\n        body.insert(pos + hint_text.length, attachment_text)\n      end\n    end\n\n    msg.date = Time.now\n    msg.subject = subject\n    msg.content_type = \"multipart/mixed\"\n    msg.html_part = Mail::Part.new({\n      content_type: \"text/html; charset=UTF-8\",\n      body: body\n    })\n\n    msg.to = to\n    msg.from = from\n    msg.cc = cc unless cc.blank?\n\n    msg.encoded\n\n    msg.header[\"X-PrintSpeak-Id\"] = msg.message_id\n\n    encoded_mail = msg.encoded\n\n    [encoded_mail, msg.message_id]\n  end\n\n  def self.clean_email(data)\n    data.try(:strip).try(:downcase) || \"\"\n  end\n\n  def self.valid_format?(data)\n    !/\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\Z/.match(data).nil?\n  end\n\n  def self.valid_rfc822?(data)\n    return false if data.blank?\n    result = false\n    rx = /((?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(?:(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)*\\<(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\"(?:[^\\\"\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*\"(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()<>@,;:\\\\\".\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\"()<>@,;:\\\\\".\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\>(?:(?:\\r\\n)?[ \\t])*))*)?;\\s*))/\n    data = data.gsub(/\\(.+?\\)/, \"\").strip\n    cleaned = data.gsub(\";\", \",\").gsub(\",,\", \",\").chomp(\",\")\n    built = \"\"\n    first = true\n    data.scan(rx) do |match|\n      address = match.first\n      if rx.match(address)\n        squished_address = address.gsub(/\\s+/, \"\")\n        if /[^\\s<]+@[^\\s>]+/.match(squished_address).to_s == /[^\\s<]+@[^\\s>]+/.match(address).to_s\n          built << \",\" if !first\n          built << \"#{address}\"\n          first = false\n        end\n      end\n    end\n    if cleaned == built\n      result = true\n    else\n    end\n    result\n  end\n\n  # def self.scan_test\n  #   Email.select('emails.id, emails.email_id, emails.cc').where(\"cc is not null and cc != ''\").where(processed: true).find_each do |email|\n  #     valid = Email.valid_rfc822?(email.cc)\n\n  #     if email.email_id.blank? != !valid\n  #       puts \"MISMATCH ID: #{email.id} HAS_EMAIL_ID: #{!email.email_id.blank?} VALID: #{valid}   '#{email.cc}'\"\n  #     end\n  #   end\n  # end\n\n  def self.ses_send(addresses, subject, body, source_email = \"support@printspeak.com\")\n    return if addresses.count <= 0\n    begin\n      ses = Aws::SES::Client.new(region: RegionConfig.require_value(\"aws_region\"), access_key_id: Rails.application.secrets.aws_access_key_id_email, secret_access_key: Rails.application.secrets.aws_secret_access_key_email)\n      addresses = addresses.uniq\n      addresses.each do |address|\n        next if !Email.valid_rfc822?(address)\n        to_addr = address\n        to_addr = \"emailtest@printspeak.com\" if Rails.env.staging?\n        ses.send_email(\n        {\n          source: source_email,\n          destination: {\n            to_addresses: [to_addr]\n          },\n          message: {\n            subject: {\n              data: subject\n            },\n            body: {\n              text: {\n                data: \"\"\n              },\n              html: {\n                data: body\n              },\n            },\n          }\n        })\n      end\n    rescue StandardError => e\n      Honeybadger.notify(\n        error_class: \"SES Send Failed\",\n        error_message: e.message,\n        backtrace: e.backtrace,\n        parameters: {\n          from: source_email,\n          to: addresses,\n          subject: subject,\n          body: body\n        }\n      )\n    end\n  end\n\n  def self.parse_email_addresses(address_string)\n    result = []\n\n    if !address_string.blank?\n      addresses =  address_string.split(/,(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/)\n      addresses.each do |address|\n        parsed_address = Mail::Address.new(address.squish)\n        result << parsed_address.address\n      end\n    end\n\n    result\n  end\n\n  def self.send_unprocessed_emails(tenant)\n    limit = 5\n    Email.where(tenant: tenant, processed: false).order(\"bulk ASC NULLS FIRST, created_at ASC\").each do |email|\n      break if limit <= 0\n      email.send_email\n      limit = limit - 1 if email.processed\n      WorkerDaemon.heartbeat\n    end\n  end\n\n  def self.printspeak_template(body)\n    %Q{\n      <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n      <html xmlns=\"http://www.w3.org/1999/xhtml\">\n        <head>\n          <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width\">\n          <meta name=\"format-detection\" content=\"address=no;email=no;telephone=no\">\n        </head>\n        <body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\" style=\"-webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%;margin-top: 0;margin-left: 0;margin-right: 0;margin-bottom: 0;padding-top: 25px;padding-bottom: 25px;padding-left: 0;padding-right: 0;height: 100%;width: 100%;background-color: #efefef;\">\n          <table id=\"container\" style=\"background: #ffffff;margin: 0px auto;font-size: 14px;width: 500px;border-radius: 5px; font-family: 'Helvetica Neue', Arial, Verdana;overflow: hidden;line-height: 125% !important;\">\n            <thead>\n              <tr style=\"background: #3695d5;width: 100%;display: block;color: #fff;font-size: 16px;white-space: nowrap;margin: -2px -2px 0px -2px;padding-right: 4px;\">\n                <td style=\"padding: 5px !important;border: none;\">\n                  <img src=\"http://public.printspeak.com/images/logo-white.png\" alt=\"\" style=\"width:50px; vertical-align: middle\"> Print Speak\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td style=\"padding: 20px;border: none;\">\n                  #{body}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </body>\n      </html>\n    }\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "sending_as_user",
              "options": {
                "class_name": "User",
                "foreign_key": "sending_as_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: :sending_as_user_id"
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "hits",
              "options": {
                "through": "trackers"
              },
              "raw_options": "through: :trackers"
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "email_tags",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "trackers",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "emails_tracker",
        "name_plural": "emails_trackers",
        "dsl_file": ""
      },
      {
        "name": "enterprise_business_welcome",
        "name_plural": "enterprise_business_welcomes",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise_business_welcome.rb",
        "source": {
          "ruby": "class EnterpriseBusinessWelcome < ActiveRecord::Base\n  belongs_to :enterprise\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "enterprise_salestarget",
        "name_plural": "enterprise_salestargets",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise_salestarget.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EnterpriseSalestarget < ActiveRecord::Base\n  belongs_to :enterprise\n  belongs_to :lead_type\n  belongs_to :prospect_status\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "enterprise_togglefield",
        "name_plural": "enterprise_togglefields",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise_togglefield.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EnterpriseTogglefield < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :enterprise, **belongs_to_required\n  validates :enterprise, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "enterprise",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "enterprise",
        "name_plural": "enterprises",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/enterprise.rb",
        "source": {
          "ruby": "class Enterprise < ActiveRecord::Base\n  has_many :tenants\n  has_and_belongs_to_many :countries\n  has_many :enterprise_togglefields\n  has_many :news\n  has_many :groups\n  has_many :campaigns\n  has_many :contact_lists\n  has_many :task_types\n  has_many :workflows\n  has_many :interest_categories\n  has_many :prospect_statuses, -> { where(lead_type_id: 0, tenant_id: 0, prospect_status_version_id: 0).order(name: :asc) }\n\n\n\n  has_many :enterprise_salestargets\n  has_many :enterprise_business_welcomes\n  has_many :lead_types, -> { where(tenant_id: nil, global: true) }\n  has_many :lead_sources\n  has_many :holidays\n  has_many :prospect_status_items\n  has_many :tag_categories\n  has_one :default_group, -> { where(default: true) }, class_name: \"Group\"\n\n  default_scope { where(deleted_at: nil) }\n\n  def banner\n    Asset.where(id: banner_id, enterprise_id: id, category: \"Banner\").first\n  end\n\n  def self.connection_types\n    %w[printsmith mbehub]\n  end\n\n  def users\n    User.where(enterprise_id: id).order(first_name: :asc)\n  end\n\n  def primary_users\n    users.where(\"users.parent_id = users.id\")\n  end\n\n  def visible_users\n    primary_users.where(role: [\"User\", \"Admin\", \"Enterprise User\"])\n  end\n\n  def default_tenant\n    result = nil\n\n    result = tenants.enabled.where(id: default_tenant_id).first if default_tenant_id.present?\n    result = tenants.enabled.where(demo: true).first if result.nil?\n    result = tenants.enabled.first if result.nil?\n    result = tenants.first if result.nil?\n\n    result\n  end\n\n  def is_AGI?\n   return true if ((RegionConfig.get_value(\"region\") == \"us\" && id == 3) || Rails.env.staging? || Rails.env.development?)\n  end\n\n  # AFTER CREATE GENERATE DEFAULT TASKS FOR ENTERPRISE ID\n  # eg. rake generate:tasktypes[14]\n\n  # TODO: FIX TO GET THE FIRST AVAILABLE LEAD STATUS\n\n  def first_prospect_status\n    prospect_statuses.where(position: 1).first\n  end\n\n  def first_lead_type\n    lead_types.active.first\n  end\n\n  # available lead stages\n  def available_lead_statuses(lead_type_id)\n    lead_type = lead_types.where(id: lead_type_id).first\n    lead_type.lead_status_visibility.present? ? prospect_statuses.where(id: lead_type.lead_status_visibility) : prospect_statuses\n    # self.prospect_statuses.where(lead_type_id: nil)\n  end\n\n  def invoice_types\n    result = {}\n\n    if platform_data && platform_data[\"invoice_types\"]\n      invoice_types = platform_data[\"invoice_types\"]\n      invoice_types.sort_by! { |invoice_type| invoice_type[\"position\"] }\n      invoice_types.each do |invoice_type|\n        result[invoice_type[\"id\"]] = invoice_type[\"name\"]\n      end\n    end\n\n    result\n  end\n\n  def invoiced_types\n    result = []\n\n    if platform_data && platform_data[\"invoice_types\"]\n      invoice_types = platform_data[\"invoice_types\"]\n      result = invoice_types.map { |invoice_type| invoice_type[\"id\"] if invoice_type[\"invoiced\"] }.compact\n    end\n\n    result\n  end\n\n  def deferred_types\n    result = []\n\n    if platform_data && platform_data[\"invoice_types\"]\n      invoice_types = platform_data[\"invoice_types\"]\n      result = invoice_types.map { |invoice_type| invoice_type[\"id\"] if invoice_type[\"deferred\"] }.compact\n    end\n\n    result\n  end\n\n  def royalty_types\n    result = {}\n\n    if platform_data && platform_data[\"royalty_types\"]\n      result = platform_data[\"royalty_types\"]\n    end\n\n    result\n  end\n\n  def mbe_services\n    result = {}\n\n    if platform_data && platform_data[\"mbe_services\"]\n      result = platform_data[\"mbe_services\"]\n    end\n\n    result\n  end\n\n  def privacy_types\n    result = []\n\n    if platform_data && platform_data[\"privacy_types\"]\n      result = platform_data[\"privacy_types\"].sort_by { |k, v| [v[0], k] }.map { |k, v| k }\n    end\n\n    result\n  end\n\n  def privacy_type_id(type_id)\n    result = nil\n\n    if platform_data && platform_data[\"privacy_types\"]\n      platform_data[\"privacy_types\"].each do |k, v|\n        if v && v.include?(type_id)\n          result = k\n          break\n        end\n      end\n    end\n\n    result\n  end\n\n  def business_plan_marketing_activities\n    BusinessPlanMarketingActivity.where(global: true, enterprise_id: self.id).all\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted_at: nil) }",
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [
            {
              "name": "default_group",
              "options": {
                "a_lambda": "-> { where(default: true) }",
                "class_name": "Group"
              },
              "raw_options": "a_lambda: '-> { where(default: true) }',  class_name: \"Group\""
            }
          ],
          "has_many": [
            {
              "name": "tenants",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise_togglefields",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "news",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "groups",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaigns",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact_lists",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "task_types",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "workflows",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "interest_categories",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_statuses",
              "options": {
                "a_lambda": "-> { where(lead_type_id: 0, tenant_id: 0, prospect_status_version_id: 0).order(name: :asc) }"
              },
              "raw_options": "a_lambda: '-> { where(lead_type_id: 0, tenant_id: 0, prospect_status_version_id: 0).order(name: :asc) }'"
            },
            {
              "name": "enterprise_salestargets",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise_business_welcomes",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_types",
              "options": {
                "a_lambda": "-> { where(tenant_id: nil, global: true) }"
              },
              "raw_options": "a_lambda: '-> { where(tenant_id: nil, global: true) }'"
            },
            {
              "name": "lead_sources",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "holidays",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_items",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tag_categories",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "countries",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "estimate_element",
        "name_plural": "estimate_elements",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/estimate_element.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EstimateElement < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :estimate\n  belongs_to :element, polymorphic: true\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "estimate",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "element",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "estimate",
        "name_plural": "estimates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/estimate.rb",
        "source": {
          "ruby": "class Estimate < ActiveRecord::Base\n  # has_paper_trail\n  include ApiLoggable\n  include Excludable\n  include Bookmarkable\n  include Categorizable\n\n  TESTING_INVOICE_NUMBER = 2923\n  TESTING_platform_id = 2928522\n\n  default_scope { where(voided: false, deleted: false) }\n\n  has_secure_token :public_token\n\n  belongs_to :tenant, inverse_of: :estimates\n  belongs_to :company, inverse_of: :estimates\n\n  has_many :tasks, as: :taskable\n  has_many :phone_calls, as: :phoneable\n  has_many :comments, as: :commentable\n  has_many :emails, as: :context\n  has_many :activities\n  has_many :notes, as: :context\n  has_many :meetings, as: :context\n\n  # has_one :production_location, :class_name => \"ProductionLocation\", :foreign_key => \"id\", :primary_key => \"production_location_id\"\n  belongs_to :production_location, inverse_of: :invoices\n  has_one :contact, class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\"\n  has_one :location, class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\"\n  has_one :taken_by_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\"\n\n  belongs_to :contact_group\n  belongs_to :pdf\n  belongs_to :taken_by\n\n\n\n  scope :for_tenant, ->(tenant_id) { where(tenant_id: Array(tenant_id).first) }\n  scope :for_dates,  ->(start_date, end_date) { where(ordered_date: start_date..end_date) }\n  scope :including_companies, -> { includes(:company) }\n\n  belongs_to :inquiry\n\n  def self.conversion_ratio\n    conversion_ratio = 0\n\n    if count > 0\n      count_all = won.count + lost.count + pending.count\n      conversion_ratio = ((won.count.to_f / count_all) * 100).round(2) if count_all > 0\n    end\n\n    conversion_ratio\n  end\n\n  scope :won,       -> { where(status: \"Won\") }\n  scope :lost,      -> { where(status: \"Lost\") }\n  scope :pending,   -> { where(status: \"\") }\n  scope :overdue,   -> (today = Time.now) { where(\"wanted_by < ?\", today) }\n  scope :lonely, lambda { joins(\"LEFT OUTER JOIN tags ON estimates.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }\n  scope :needs_pdf, -> { where(\"ordered_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }\n\n\n  # scope :overdue, -> { where('wanted_by < ?', Time.now) }\n\n  # def beginning_of_month\n  #   ...\n  # end\n\n  def cogs_percentage\n    grand_total_inc_non_sales_minus_tax = grand_total_inc_tax.to_f - tax.to_f\n\n    if grand_total_inc_non_sales_minus_tax.to_f != 0.0 &&\n       total_cost.to_f != 0.0 &&\n       !grand_total_inc_non_sales_minus_tax.nil? &&\n       !total_cost.nil?\n      total_cost / (grand_total_inc_tax.to_f - tax.to_f) * 100\n    else\n      0\n    end\n  end\n\n  def platform_id_for_psv\n    Rails.env.production? ? self[:platform_id] : TESTING_platform_id\n  end\n\n  def invoice_number_for_psv\n    Rails.env.production? ? self[:invoice_number] : TESTING_INVOICE_NUMBER\n  end\n\n  def is_archived?\n    if on_pending_list.blank?\n      true\n    else\n      false\n    end\n  end\n\n  def archived_user\n    User.where(id: archived_user_id).first\n  end\n\n  def won?\n    true unless status != \"Won\"\n  end\n\n  class << self\n    def group_year_month_day\n      group(\"extract(year from created_at), extract(month from created_at), extract(day from created_at)\")\n    end\n\n    def sales_estimates_for_tenant(tenant_id)\n      where(tenant_id: tenant_id).\n        group_year_month_day.\n        select(\"extract(year from created_at) as year, extract(month from created_at) as month, extract(day from created_at) as day\").\n        select(\"sum(grand_total), avg(grand_total), count(grand_total)\").\n        order(\"year, month, day\")\n    end\n\n    def conversion_ratio_by_company_id\n      all.group(:company_id).\n        select(:company_id).\n        select(\"CASE\n    WHEN count(CASE WHEN status IN ('Won', 'Lost', '') THEN 1 END) = 0 THEN 0\n    ELSE (cast(count(CASE WHEN status = 'Won' THEN 1 END) as float) / cast(count(CASE WHEN status IN ('Won', 'Lost', '') THEN 1 END) as float))\n  END AS conversion_ratio\")\n    end\n  end\n\n  def reason_text\n    unit = Utils::Currency.symbole_of(self)\n    case reason\n    when \"too_expensive\"\n      \"Too Expensive#{ reason_value ? ' by: '+unit+reason_value : ''}\"\n    when \"competitor_beter\"\n      \"Competitor #{ reason_value ? reason_value : ''} Better\"\n    when \"quote_too_late\"\n      \"Quote too late\"\n    when \"went_with_current_supplier\"\n      \"Went with current supplier\"\n    when \"could_not_meet_customer_requirement\"\n      \"Could not meet the customer requirement#{ reason_value ? ': \"'+reason_value+'\"' : ''}\"\n    when \"custom\"\n      \"#{ reason_value ? reason_value : 'No reason specified'}\"\n    when \"job_didnt_go_ahead\"\n      \"Job didn't go ahead\"\n    when \"multi_part_job\"\n      \"Multi Part Job\"\n    when \"received_better_value\"\n      \"Received a better value quote\"\n    when \"template\"\n      \"Template\"\n    when \"web_template\"\n      \"Web Template\"\n    else\n      reason.split(\"_\").join(\" \").camelcase.gsub(\"didnt\",  \"didn't\")\n    end\n  end\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def aggregated_tasks\n    where_condition = \"(tasks.taskable_type = 'Estimate' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if inquiry\n      where_condition << \" OR (tasks.taskable_type = 'Inquiry' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Task.where(tenant: tenant).\n         where(where_condition).\n         order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    where_condition = \"(phone_calls.phoneable_type = 'Estimate' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if inquiry\n      where_condition << \" OR (phone_calls.phoneable_type = 'Inquiry' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    PhoneCall.where(tenant: tenant).\n              where(where_condition).\n              order(created_at: :desc)\n  end\n\n  def aggregated_notes\n    where_condition = \"(notes.context_type = 'Estimate' AND notes.context_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if inquiry\n      where_condition << \" OR (notes.context_type = 'Inquiry' AND notes.context_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Note.where(tenant: tenant).\n         where(where_condition).\n         order(\"created_at DESC, id DESC\")\n  end\n\n  def aggregated_meetings\n    where_condition = \"(meetings.context_type = 'Estimate' AND meetings.context_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if inquiry\n      where_condition << \" OR (meetings.context_type = 'Inquiry' AND meetings.context_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Meeting.where(tenant: tenant).\n            where(where_condition).\n            order(created_at: :desc)\n  end\n\n  def self.to_csv\n    CSV.generate(col_sep: all.first.tenant.enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Off Pending Date\", \"Estimate\", \"Name\", \"Total\", \"Company Name\", \"Status\", \"Converted Value\", \"Reason\"]\n      csv << desired_columns\n      all.each do |result|\n        csv << [\n          result.send(\"get_off_pending\"),\n          \"##{result.invoice_number}\",\n          \"#{result.name}\",\n          \"#{result.grand_total}\",\n          result.send(\"get_company_name\"),\n          \"#{result.status}\",\n          result.send(\"order_value\"),\n          result.send(\"reason_info\")\n        ]\n      end\n    end\n  end\n\n  def get_off_pending\n    tenant.local_strftime(off_pending_date, \"%%DM-%%DM-%Y\") if off_pending_date.present?\n  end\n\n  def get_company_name\n    \"#{company.name}\" if company.present?\n  end\n\n  def reason_info\n    \"#{reason_text}\" if reason.present?\n  end\n\n  def order_value\n    if converted_invoice_number.present?\n      invoice_total = tenant.orders.where(invoice_number: converted_invoice_number).first\n      if invoice_total\n        Utils::Currency.symbole_of(self)+invoice_total.grand_total.to_s\n      else\n        \"-\"\n      end\n    end\n  end\n\n  def portal_url\n    return Rails.application.routes.url_helpers.url_for(controller: \"/portal/estimate\", action: :view, key: \"invalid\") if !id\n\n    if portal_key.blank?\n      self.portal_key = \"#{id}#{SecureRandom.urlsafe_base64(64)}\"\n      save\n    end\n    Rails.application.routes.url_helpers.url_for(controller: \"/portal/estimate\", action: :view, key: portal_key)\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(voided: false, deleted: false) }",
          "scopes": [
            {
              "name": "for_tenant",
              "scope": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
            },
            {
              "name": "for_dates",
              "scope": "->(start_date, end_date) { where(ordered_date: start_date..end_date) }"
            },
            {
              "name": "including_companies",
              "scope": "-> { includes(:company) }"
            },
            {
              "name": "won",
              "scope": "-> { where(status: \"Won\") }"
            },
            {
              "name": "lost",
              "scope": "-> { where(status: \"Lost\") }"
            },
            {
              "name": "pending",
              "scope": "-> { where(status: \"\") }"
            },
            {
              "name": "overdue",
              "scope": "-> (today = Time.now) { where(\"wanted_by < ?\", today) }"
            },
            {
              "name": "lonely",
              "scope": "lambda { joins(\"LEFT OUTER JOIN tags ON estimates.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }"
            },
            {
              "name": "needs_pdf",
              "scope": "-> { where(\"ordered_date > \\'2015-07-01\\'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
                "inverse_of": "estimates"
              },
              "raw_options": "inverse_of: :estimates"
            },
            {
              "name": "company",
              "options": {
                "inverse_of": "estimates"
              },
              "raw_options": "inverse_of: :estimates"
            },
            {
              "name": "production_location",
              "options": {
                "inverse_of": "invoices"
              },
              "raw_options": "inverse_of: :invoices"
            },
            {
              "name": "contact_group",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "pdf",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "taken_by",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "inquiry",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "contact",
              "options": {
                "class_name": "Contact",
                "foreign_key": "id",
                "primary_key": "contact_id"
              },
              "raw_options": "class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\""
            },
            {
              "name": "location",
              "options": {
                "class_name": "Location",
                "foreign_key": "id",
                "primary_key": "location_user_id"
              },
              "raw_options": "class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\""
            },
            {
              "name": "taken_by_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "taken_by_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\""
            }
          ],
          "has_many": [
            {
              "name": "tasks",
              "options": {
                "as": "taskable"
              },
              "raw_options": "as: :taskable"
            },
            {
              "name": "phone_calls",
              "options": {
                "as": "phoneable"
              },
              "raw_options": "as: :phoneable"
            },
            {
              "name": "comments",
              "options": {
                "as": "commentable"
              },
              "raw_options": "as: :commentable"
            },
            {
              "name": "emails",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "notes",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "meetings",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "etl_setting",
        "name_plural": "etl_settings",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/etl_setting.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass EtlSetting < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "event_stat",
        "name_plural": "event_stats",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/event_stat.rb",
        "source": {
          "ruby": "class EventStat < ActiveRecord::Base\n  belongs_to :tenant\n\n  # CREATE INDEX CONCURRENTLY index_event_stats_on_created_at ON event_stats (created_at)\n  # CREATE INDEX CONCURRENTLY index_event_stats_on_tenant_event_data_source_duration ON event_stats (tenant_id, event_type, data, source, duration ASC)\n\n  def self.log(tenant, event_type, data, duration, source)\n    EventStat.create(\n      tenant: tenant,\n      event_type: event_type,\n      data: data,\n      duration: duration.to_f,\n      source: source\n    )\n  end\n\n  def self.clean\n    EventStat.where(\"event_stats.created_at < ?\", 24.hours.ago).delete_all\n  end\n\n  def self.log_changed_attributes(tenant, object)\n    object.attributes.each do |attr_name, attr_value|\n      if object.send(\"#{attr_name}_changed?\")\n        data = {\n          \"#{object.class.to_s.downcase}_id\".to_sym => object.id,\n          attr_name: attr_name,\n          attr_new_value: attr_value,\n          attr_old_value: object.send(\"#{attr_name}_was\")\n        }\n        Event.queue(tenant, \"#{object.class.to_s.downcase}_attr_changed\", data: data, trace_back_count: 1)\n      end\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "event",
        "name_plural": "events",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/event.rb",
        "source": {
          "ruby": "class Event < ActiveRecord::Base\n  belongs_to :tenant\n\n  def process\n    result = \"\"\n    if tenant.present?\n      start_time = Time.now\n      case event_type\n      when \"company_sales\"\n        company = Company.where(id: data[\"company_id\"]).first\n        if company\n          company.generate_sales_stats\n        end\n      when \"contact_sales\"\n        contact = Contact.where(id: data[\"contact_id\"]).first\n        if contact\n          contact.generate_sales_stats\n        end\n      when \"contact_rolling_sales\"\n        Contact.update_rolling_sales(tenant) if tenant\n      when \"sales_summary_perform_closeout\"\n        sales_summary = SalesSummary.where(id: data[\"sales_summary_id\"]).first\n        if sales_summary\n          sales_summary.perform_closeout\n        end\n      when \"sales_summary_current_accounting_period\"\n        sales_summary = SalesSummary.generate_current_month_stats(tenant) if tenant\n      when \"propagate_company_sales_reps\"\n        company = Company.where(id: data[\"company_id\"]).first\n        if company\n          company.do_propagate_sales_reps\n        end\n      when \"shipment_update\"\n        shipment = Shipment.where(id: data[\"shipment_id\"]).first\n        if shipment\n          shipment.apply_source_tag\n          shipment.invoice.update_deferred if shipment.invoice\n          shipment.parent_invoice.update_deferred if shipment.parent_invoice\n        end\n      when \"bubble_parent_tag\"\n        parent_tag = Tag.unscoped.where(id: data[\"parent_tag_id\"]).first\n        if parent_tag\n          parent_tag.bubble\n        end\n      end\n      end_time = Time.now\n      EventStat.log(tenant, event_type, data, end_time - start_time, source)\n    end\n    destroy\n  end\n\n  # Doesn't 100% guarantee unqiueness of event in a parallel enviroment\n  def self.queue(tenant, event_type, data: {}, schedule_date: nil, unique_for: [\"all\"], trace_back_count: 0)\n    result = false\n\n    unique_for = %w[running queued scheduled] if unique_for.include?(\"all\")\n\n    line_data = \"unknown\"\n    caller_info = caller[trace_back_count].try(:split, \":\")\n    if caller_info\n      caller_file = caller_info[0].gsub(/^#{Rails.root}/, \"\")\n      caller_line_number = caller_info[1]\n      line_data = \"#{caller_file}:#{caller_line_number}\"\n    end\n\n    status = \"queued\"\n    if !schedule_date.nil?\n      status = \"scheduled\"\n    end\n\n    unique_for_condition = \"AND FALSE\"\n\n    if unique_for.count > 0\n      sanitized_unqiue_for = unique_for.map { |s| ActiveRecord::Base::sanitize(s) }\n      unique_for_condition = \"AND status IN (#{sanitized_unqiue_for.to_csv})\"\n    end\n\n    tenant_id = tenant.try(:id)\n\n    create_event_query = %Q{\n      INSERT INTO events (tenant_id, event_type, status, data, schedule_date, source, created_at, updated_at)\n      SELECT #{ActiveRecord::Base::sanitize(tenant_id)},\n      #{ActiveRecord::Base::sanitize(event_type)},\n      #{ActiveRecord::Base::sanitize(status)},\n      #{ActiveRecord::Base::sanitize(data.to_json)},\n      #{ActiveRecord::Base::sanitize(schedule_date)},\n      #{ActiveRecord::Base::sanitize(line_data)},\n      NOW(),\n      NOW()\n      WHERE NOT EXISTS (\n        SELECT null\n        FROM events\n        WHERE tenant_id = #{ActiveRecord::Base::sanitize(tenant_id)}\n        AND event_type = #{ActiveRecord::Base::sanitize(event_type)}\n        AND data = #{ActiveRecord::Base::sanitize(data.to_json)}\n        #{unique_for_condition}\n      )\n      RETURNING id;\n    }\n\n    event_id = ActiveRecord::Base.connection.execute(create_event_query).try(:first).try(:[], \"id\")\n    if !event_id.nil?\n      result = true\n    end\n\n    result\n  end\n\n  def self.process_queued\n    result = false\n    event_query = %Q{\n      UPDATE events\n      SET status = 'running',\n          updated_at = NOW()\n      WHERE id = (\n        SELECT id\n        FROM events\n        WHERE status = 'queued'\n        ORDER BY created_at ASC\n        LIMIT 1\n        FOR UPDATE SKIP LOCKED\n      )\n      RETURNING id;\n    }\n    event_id = ActiveRecord::Base.connection.execute(event_query).first.try(:[], \"id\")\n    event = nil\n    event = Event.where(id: event_id).first if !event_id.nil?\n    if event\n      result = true\n      event.process\n    end\n\n    result\n  end\n\n  def self.queue_scheduled\n    scheduled_events_query = %Q{\n      UPDATE events\n      SET status = 'queued'\n      WHERE status = 'scheduled'\n      AND schedule_date <= NOW()\n    }\n    ActiveRecord::Base.connection.execute(scheduled_events_query)\n\n    stalled_events_query = %Q{\n      UPDATE events\n      SET status = 'queued'\n      WHERE status = 'running'\n      AND updated_at <= (NOW() - interval '1 hour')\n    }\n    ActiveRecord::Base.connection.execute(stalled_events_query)\n\n    nil\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "exclusion",
        "name_plural": "exclusions",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/exclusion.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Exclusion < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :context, polymorphic: true\n  validates_uniqueness_of :user_id, scope: %i[context_type context_id]\n\n  scope :for_user, -> (user) { where(user_id: (user.is_a? Integer) ? user : user.id) }\n  singleton_class.send(:alias_method, :by, :for_user)\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "for_user",
              "scope": "-> (user) { where(user_id: (user.is_a? Integer) ? user : user.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "filter_default",
        "name_plural": "filter_defaults",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/filter_default.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass FilterDefault < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :tenant\n  belongs_to :context, polymorphic: true\n  validates_uniqueness_of :user_id, scope: %i[context_type context_id]\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "group",
        "name_plural": "groups",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/group.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Group < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { order(name: :asc) }\n\n  has_and_belongs_to_many :tenants\n\n  belongs_to :enterprise, **belongs_to_required\n  validates :enterprise, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(name: :asc) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [
            {
              "name": "tenants",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "enterprise",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "groups_tenant",
        "name_plural": "groups_tenants",
        "dsl_file": ""
      },
      {
        "name": "hidden_email_template",
        "name_plural": "hidden_email_templates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_email_template.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass HiddenEmailTemplate < ActiveRecord::Base\n  belongs_to :email_template\n  belongs_to :tenant\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "email_template",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "hidden_holiday",
        "name_plural": "hidden_holidays",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_holiday.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass HiddenHoliday < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :holiday\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "holiday",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "hidden_lead_type",
        "name_plural": "hidden_lead_types",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_lead_type.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass HiddenLeadType < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :lead_type\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "hidden_task_type",
        "name_plural": "hidden_task_types",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/hidden_task_type.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass HiddenTaskType < ActiveRecord::Base\n  belongs_to :task_type\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "task_type",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "holiday_date",
        "name_plural": "holiday_dates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/holiday_date.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass HolidayDate < ActiveRecord::Base\n  belongs_to :holiday\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "holiday",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "holiday",
        "name_plural": "holidays",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/holiday.rb",
        "source": {
          "ruby": "class Holiday < ActiveRecord::Base\n  default_scope {\n      includes(:holiday_dates)\n      .order(\"holiday_dates.date\")\n  }\n\n  scope :visible, -> {\n    includes(:hidden_holidays)\n    .where(hidden_holidays: { holiday_id: nil })\n  }\n  scope :has_dates, -> {\n    where.not(holiday_dates: { date: nil }) # SHOW ONLY HOLIDAYS THAT HAVE DATES\n  }\n  scope :by_tenant_all, -> (tenant) {\n    where(\"holidays.global = ? OR holidays.tenant_id = ?\", true, tenant.id)\n  }\n\n  scope :by_state, -> (state) {\n    joins(:country_states).where(\"country_states.name = ?\",  state)\n  }\n\n\n  # CHAIN SCOPE TENANT VISIBLE\n  class << self\n    def tenant(tenant)\n      if tenant.enterprise.countries.first.present? &&  tenant.enterprise.countries.first.country_states.count > 0\n        by_state(tenant.state).by_tenant_all(tenant).visible.has_dates\n      else\n        by_tenant_all(tenant).visible.has_dates\n      end\n    end\n  end\n\n  scope :by_month_year, -> (month, year) {\n      where(\"extract(month from holiday_dates.date) = ?\", month)\n      .where(\"extract(year from holiday_dates.date) = ?\", year)\n  }\n  scope :current_month, -> {\n      where(\"extract(month from holiday_dates.date) = ?\",  Date.today.month)\n      .where(\"extract(year from holiday_dates.date) = ?\",  Date.today.year)\n  }\n\n  scope :gone, -> (selected_date) { where(\"extract(day from holiday_dates.date) < ?\", selected_date.day) }\n  scope :left, -> (selected_date) { where(\"extract(day from holiday_dates.date) > ?\", selected_date.day) }\n\n  # RELATIONS\n  has_many :holiday_dates, dependent: :destroy\n  has_and_belongs_to_many :country_states\n  has_many :hidden_holidays, dependent: :destroy\n  belongs_to :tenant\n  belongs_to :enterprise\n  belongs_to :user\n\n\n\n  # VALIDATIONS\n\n  validates :name, presence: { message: \"Holiday name is required.\" }\n  validates :holiday_dates, presence: { message: \"Holiday dates are required.\" }\n\n  validate do\n    validate_holiday_dates\n  end\n\n  # validate :validate_holiday_states\n\n  def states\n    Holiday.find(id).country_states\n  end\n\n  private\n\n  def validate_holiday_dates\n    date_format = Tenant.new.date_format(false)\n    holiday_dates.each do |holiday|\n      if holiday.date.blank?\n        errors.add(:holiday_dates, \"Date Format NOT VALID. Should be \" + date_format)\n        break\n      end\n    end\n  end\n\n  # def validate_holiday_states\n  #   errors.add(:states, \"Tenant State Error: Please update your tenant: Settings > Basic Information > State using Abbreviations: eg. AL\") unless self.country_states.present?\n  # end\nend\n",
          "public": "class Holiday < ActiveRecord::Base\n  default_scope {\n      includes(:holiday_dates)\n      .order(\"holiday_dates.date\")\n  }\n\n  scope :visible, -> {\n    includes(:hidden_holidays)\n    .where(hidden_holidays: { holiday_id: nil })\n  }\n  scope :has_dates, -> {\n    where.not(holiday_dates: { date: nil }) # SHOW ONLY HOLIDAYS THAT HAVE DATES\n  }\n  scope :by_tenant_all, -> (tenant) {\n    where(\"holidays.global = ? OR holidays.tenant_id = ?\", true, tenant.id)\n  }\n\n  scope :by_state, -> (state) {\n    joins(:country_states).where(\"country_states.name = ?\",  state)\n  }\n\n\n  # CHAIN SCOPE TENANT VISIBLE\n  class << self\n    def tenant(tenant)\n      if tenant.enterprise.countries.first.present? &&  tenant.enterprise.countries.first.country_states.count > 0\n        by_state(tenant.state).by_tenant_all(tenant).visible.has_dates\n      else\n        by_tenant_all(tenant).visible.has_dates\n      end\n    end\n  end\n\n  scope :by_month_year, -> (month, year) {\n      where(\"extract(month from holiday_dates.date) = ?\", month)\n      .where(\"extract(year from holiday_dates.date) = ?\", year)\n  }\n  scope :current_month, -> {\n      where(\"extract(month from holiday_dates.date) = ?\",  Date.today.month)\n      .where(\"extract(year from holiday_dates.date) = ?\",  Date.today.year)\n  }\n\n  scope :gone, -> (selected_date) { where(\"extract(day from holiday_dates.date) < ?\", selected_date.day) }\n  scope :left, -> (selected_date) { where(\"extract(day from holiday_dates.date) > ?\", selected_date.day) }\n\n  # RELATIONS\n  has_many :holiday_dates, dependent: :destroy\n  has_and_belongs_to_many :country_states\n  has_many :hidden_holidays, dependent: :destroy\n  belongs_to :tenant\n  belongs_to :enterprise\n  belongs_to :user\n\n\n\n  # VALIDATIONS\n\n  validates :name, presence: { message: \"Holiday name is required.\" }\n  validates :holiday_dates, presence: { message: \"Holiday dates are required.\" }\n\n  validate do\n    validate_holiday_dates\n  end\n\n  # validate :validate_holiday_states\n\n  def states\n    Holiday.find(id).country_states\n  end\n\n  ",
          "private": "private\n\n  def validate_holiday_dates\n    date_format = Tenant.new.date_format(false)\n    holiday_dates.each do |holiday|\n      if holiday.date.blank?\n        errors.add(:holiday_dates, \"Date Format NOT VALID. Should be \" + date_format)\n        break\n      end\n    end\n  end\n\n  # def validate_holiday_states\n  #   errors.add(:states, \"Tenant State Error: Please update your tenant: Settings > Basic Information > State using Abbreviations: eg. AL\") unless self.country_states.present?\n  # end\nend\n",
          "all_methods": {
            "klass": [

            ],
            "instance": [
              {
                "name": "tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "states",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "validate_holiday_dates",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "validate_holiday_states",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenant)"
              },
              {
                "name": "states",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_private": [
              {
                "name": "validate_holiday_dates",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "validate_holiday_states",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ includes(:holiday_dates)\n      .order(\"holiday_dates.date\") }",
          "scopes": [
            {
              "name": "visible",
              "scope": "-> {\n    includes(:hidden_holidays)\n    .where(hidden_holidays: { holiday_id: nil })  }"
            },
            {
              "name": "has_dates",
              "scope": "-> {\n    where.not(holiday_dates: { date: nil }) # SHOW ONLY HOLIDAYS THAT HAVE DATES  }"
            },
            {
              "name": "by_tenant_all",
              "scope": "-> (tenant) {\n    where(\"holidays.global = ? OR holidays.tenant_id = ?\", true, tenant.id)  }"
            },
            {
              "name": "by_state",
              "scope": "-> (state) {\n    joins(:country_states).where(\"country_states.name = ?\",  state)  }"
            },
            {
              "name": "by_month_year",
              "scope": "-> (month, year) {\n      where(\"extract(month from holiday_dates.date) = ?\", month)\n      .where(\"extract(year from holiday_dates.date) = ?\", year)  }"
            },
            {
              "name": "current_month",
              "scope": "-> {\n      where(\"extract(month from holiday_dates.date) = ?\",  Date.today.month)\n      .where(\"extract(year from holiday_dates.date) = ?\",  Date.today.year)  }"
            },
            {
              "name": "gone",
              "scope": "-> (selected_date) { where(\"extract(day from holiday_dates.date) < ?\", selected_date.day) }"
            },
            {
              "name": "left",
              "scope": "-> (selected_date) { where(\"extract(day from holiday_dates.date) > ?\", selected_date.day) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "holiday_dates",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "hidden_holidays",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "country_states",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: { message: \"Holiday name is required.\" }"
            },
            {
              "name": "holiday_dates",
              "raw_options": "presence: { message: \"Holiday dates are required.\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "identity",
        "name_plural": "identities",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/identity.rb",
        "source": {
          "ruby": "class Identity < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  has_many :locations\n  has_many :campaigns\n\n  def check_email_status(new_email = nil)\n    email = new_email.nil? ? email_marketing : new_email\n\n    if email.blank?\n      self.email_status = nil\n      save\n      return \"No Email\"\n    end\n\n    domain = email.split(\"@\").last\n    base_domain = PublicSuffix.domain(domain)\n\n    result = \"\"\n    set_topics = false\n    begin\n      if Platform.is_mbe?(tenant)\n        resp = ses.get_identity_verification_attributes({identities: [email]})\n      else\n        resp = ses.get_identity_verification_attributes({identities: [email, domain, base_domain]})\n      end\n\n      if resp\n        if resp.verification_attributes[domain].try(:verification_status) == \"Success\" || resp.verification_attributes[base_domain].try(:verification_status) == \"Success\"\n          result = \"Success\"\n        elsif resp.verification_attributes[email].try(:verification_status) == \"Success\"\n          result = \"Success\"\n          set_topics = true\n        else\n          result = \"Pending\" if resp.verification_attributes[email].try(:verification_status) == \"Pending\" ||\n                                resp.verification_attributes[domain].try(:verification_status) == \"Pending\" ||\n                                resp.verification_attributes[base_domain].try(:verification_status) == \"Pending\"\n        end\n      end\n    rescue StandardError\n    end\n\n    if result == \"Success\"\n      if set_topics\n        topic = \"arn:aws:sns:us-west-2:016696148259:ses_sqs_staging\" if Rails.env.staging?\n        topic = RegionConfig.require_value(\"ses_sns_topic\") if Rails.env.production? || Rails.env.worker?\n        set_sns_topics(email, topic)\n      end\n      self.last_validated = Time.now\n      self.email_status = \"Validated\"\n    elsif result == \"Pending\"\n      self.email_status = \"Pending\"\n      self.last_validated = nil\n    else\n      self.email_status = nil\n      self.last_validated = nil\n    end\n    save\n\n    result\n  end\n\n  def set_sns_topics(email, topic)\n    begin\n      resp = ses.set_identity_notification_topic({ identity: email, notification_type: \"Delivery\", sns_topic: topic })\n      resp = ses.set_identity_notification_topic({ identity: email, notification_type: \"Bounce\", sns_topic: topic })\n      resp = ses.set_identity_notification_topic({ identity: email, notification_type: \"Complaint\", sns_topic: topic })\n    rescue StandardError => e\n      Honeybadger.notify(e, context: {\n        tenant: tenant,\n        email: email,\n        topic: topic,\n      })\n    end\n    nil\n  end\n\n  def was_valid?\n    last_validated != nil\n  end\n\n  def sent_verification_email?\n    return false if email_marketing.blank?\n    result = false\n\n    begin\n      resp = ses.verify_email_identity({email_address: \"#{email_marketing}\"})\n\n      if resp.successful?\n        result = true\n        self.email_status = \"Pending\"\n      else\n        result = false\n      end\n      save\n    rescue StandardError\n    end\n\n    result\n  end\n\n  def send_email(dest_addr, subject, body, bcc_addrs = [])\n    # return nil unless valid_ses?\n\n    result = nil\n    # return SecureRandom.uuid # Uncomment if you want to prevent all sending for debugging purposes\n\n    from_addr = marketing_name.blank? ? email_marketing : \"#{marketing_name} <#{email_marketing}>\"\n    begin\n      resp = ses.send_email({\n        source: from_addr,\n        destination: {\n          bcc_addresses: bcc_addrs,\n          to_addresses: [dest_addr]\n          },\n        message: {\n            subject: {\n              data: subject\n              },\n            body: {\n                html: {\n                  data: body\n                  },\n                  },\n                }\n                })\n      if resp\n        result = resp.message_id\n      end\n    rescue StandardError\n    end\n\n    result\n  end\n\n  private\n\n  def ses\n    @ses ||= Aws::SES::Client.new(region: RegionConfig.require_value(\"aws_region\"), access_key_id: Rails.application.secrets.aws_access_key_id_email, secret_access_key: Rails.application.secrets.aws_secret_access_key_email)\n  end\nend\n",
          "public": "class Identity < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  has_many :locations\n  has_many :campaigns\n\n  def check_email_status(new_email = nil)\n    email = new_email.nil? ? email_marketing : new_email\n\n    if email.blank?\n      self.email_status = nil\n      save\n      return \"No Email\"\n    end\n\n    domain = email.split(\"@\").last\n    base_domain = PublicSuffix.domain(domain)\n\n    result = \"\"\n    set_topics = false\n    begin\n      if Platform.is_mbe?(tenant)\n        resp = ses.get_identity_verification_attributes({identities: [email]})\n      else\n        resp = ses.get_identity_verification_attributes({identities: [email, domain, base_domain]})\n      end\n\n      if resp\n        if resp.verification_attributes[domain].try(:verification_status) == \"Success\" || resp.verification_attributes[base_domain].try(:verification_status) == \"Success\"\n          result = \"Success\"\n        elsif resp.verification_attributes[email].try(:verification_status) == \"Success\"\n          result = \"Success\"\n          set_topics = true\n        else\n          result = \"Pending\" if resp.verification_attributes[email].try(:verification_status) == \"Pending\" ||\n                                resp.verification_attributes[domain].try(:verification_status) == \"Pending\" ||\n                                resp.verification_attributes[base_domain].try(:verification_status) == \"Pending\"\n        end\n      end\n    rescue StandardError\n    end\n\n    if result == \"Success\"\n      if set_topics\n        topic = \"arn:aws:sns:us-west-2:016696148259:ses_sqs_staging\" if Rails.env.staging?\n        topic = RegionConfig.require_value(\"ses_sns_topic\") if Rails.env.production? || Rails.env.worker?\n        set_sns_topics(email, topic)\n      end\n      self.last_validated = Time.now\n      self.email_status = \"Validated\"\n    elsif result == \"Pending\"\n      self.email_status = \"Pending\"\n      self.last_validated = nil\n    else\n      self.email_status = nil\n      self.last_validated = nil\n    end\n    save\n\n    result\n  end\n\n  def set_sns_topics(email, topic)\n    begin\n      resp = ses.set_identity_notification_topic({ identity: email, notification_type: \"Delivery\", sns_topic: topic })\n      resp = ses.set_identity_notification_topic({ identity: email, notification_type: \"Bounce\", sns_topic: topic })\n      resp = ses.set_identity_notification_topic({ identity: email, notification_type: \"Complaint\", sns_topic: topic })\n    rescue StandardError => e\n      Honeybadger.notify(e, context: {\n        tenant: tenant,\n        email: email,\n        topic: topic,\n      })\n    end\n    nil\n  end\n\n  def was_valid?\n    last_validated != nil\n  end\n\n  def sent_verification_email?\n    return false if email_marketing.blank?\n    result = false\n\n    begin\n      resp = ses.verify_email_identity({email_address: \"#{email_marketing}\"})\n\n      if resp.successful?\n        result = true\n        self.email_status = \"Pending\"\n      else\n        result = false\n      end\n      save\n    rescue StandardError\n    end\n\n    result\n  end\n\n  def send_email(dest_addr, subject, body, bcc_addrs = [])\n    # return nil unless valid_ses?\n\n    result = nil\n    # return SecureRandom.uuid # Uncomment if you want to prevent all sending for debugging purposes\n\n    from_addr = marketing_name.blank? ? email_marketing : \"#{marketing_name} <#{email_marketing}>\"\n    begin\n      resp = ses.send_email({\n        source: from_addr,\n        destination: {\n          bcc_addresses: bcc_addrs,\n          to_addresses: [dest_addr]\n          },\n        message: {\n            subject: {\n              data: subject\n              },\n            body: {\n                html: {\n                  data: body\n                  },\n                  },\n                }\n                })\n      if resp\n        result = resp.message_id\n      end\n    rescue StandardError\n    end\n\n    result\n  end\n\n  ",
          "private": "private\n\n  def ses\n    @ses ||= Aws::SES::Client.new(region: RegionConfig.require_value(\"aws_region\"), access_key_id: Rails.application.secrets.aws_access_key_id_email, secret_access_key: Rails.application.secrets.aws_secret_access_key_email)\n  end\nend\n",
          "all_methods": {
            "klass": [

            ],
            "instance": [
              {
                "name": "check_email_status",
                "scope": "public",
                "class_method": false,
                "arguments": "(new_email = nil)"
              },
              {
                "name": "set_sns_topics",
                "scope": "public",
                "class_method": false,
                "arguments": "(email, topic)"
              },
              {
                "name": "was_valid?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sent_verification_email?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(dest_addr, subject, body, bcc_addrs = [])"
              },
              {
                "name": "ses",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "check_email_status",
                "scope": "public",
                "class_method": false,
                "arguments": "(new_email = nil)"
              },
              {
                "name": "set_sns_topics",
                "scope": "public",
                "class_method": false,
                "arguments": "(email, topic)"
              },
              {
                "name": "was_valid?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sent_verification_email?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(dest_addr, subject, body, bcc_addrs = [])"
              }
            ],
            "instance_private": [
              {
                "name": "ses",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "locations",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaigns",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "inquiry",
        "name_plural": "inquiries",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/inquiry.rb",
        "source": {
          "ruby": "class Inquiry < ActiveRecord::Base\n  include Categorizable\n\n  has_many :inquiry_attachments\n\n  enum inquiry_type: { Website: 1, Email: 2 }\n\n  enum inquiry_status: {\n    \"Unread\": 0,\n    \"Read\": 7,\n    \"Awaiting Details\": 1,\n    \"In progress\": 2,\n    \"Replied\": 3,\n    \"Won\": 4,\n    \"Lost\": 5,\n    \"Archived\": 6\n  }\n\n  enum inquiry_lost_reason: {\n    \"Do not offer products/services requested\": 1,\n    \"Test inquiry\": 2,\n    \"Insufficient information to quote\": 3,\n    \"Unable to reach contact\": 4,\n    \"Responded too late\": 5,\n    \"Estimate lost\": 6,\n    \"SPAM\": 7\n  }\n\n  enum inquiry_identifier: {\n    \"Quote Request\": 1,\n    \"Send a file\": 2,\n    \"Contact us\": 3,\n    \"Shipment Request\": 4,\n    \"General\": 5,\n    \"Logistica\": 6,\n    \"e-link\": 7,\n    \"Web Services\": 8,\n    \"Touch\": 9,\n    \"Address\": 10,\n    \"Spedizioni-imballaggio\": 11,\n    \"Printing-Marketing\": 12,\n    \"E-commerce\": 13,\n    \"SafeValue\": 14,\n    \"1M Project\": 15\n  }\n\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :contact\n  belongs_to :company\n  has_many :activities\n\n  has_many :phone_calls, as: :phoneable\n  has_many :tasks, as: :taskable\n  has_many :notes, as: :context\n  has_many :meetings, as: :context\n  # has_many :emails, as: :context\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def name\n    if contact_id\n      tenant.contacts.where(id: contact_id).first.try(:full_name)\n    else\n      first_name.to_s + \" \" + last_name.to_s\n    end\n  end\n\n  def send_new_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_new_email\")\n\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.new_inquiry(self, host)\n    send_mail(to_addrs, \"Print Speak: New Inquiry created\", email_body) if to_addrs.present?\n  end\n\n  def send_new_api_email\n    return unless inquiry_send_email_allowed?(\"send_new_api_email\")\n    return unless user\n\n    dest_address = test_mode_if_required(user.tenant_email(tenant))\n    message = \"A new Inquiry has been created:\"\n\n    if !try(:contact)\n      inquiry_name = try(:first_name).to_s + \" \" + try(:last_name).to_s if try(:first_name) || try(:last_name)\n      inquiry_email = try(:from_email)\n    else\n      inquiry_name = contact.full_name\n      inquiry_email = contact.email\n    end\n\n    body = <<-EOF\n      <p>\n        Hi #{try(:user).try(:full_name)},\n      </p>\n\n      <p>\n        #{message}\n      </p>\n\n      <table>\n      <tr>\n        <td width=\"150\"  style=\"padding:8px;\">Name: </td>\n        <td  style=\"padding:8px;\">#{inquiry_name }</td>\n      </tr>\n      <tr>\n        <td width=\"150\"  style=\"padding:8px;\">Email: </td>\n        <td  style=\"padding:8px;\">#{ inquiry_email }</td>\n      </tr>\n      <tr>\n        <td width=\"150\" style=\"padding:8px;\">Inquiry Company: </td>\n        <td  style=\"padding:8px;\">#{ try(:company) ? company.try(:name) : company_name }</td>\n      </tr>\n      <tr>\n        <td width=\"150\" style=\"padding:8px;\">Assigned User:</td>\n        <td style=\"padding:8px;\"><strong>#{ try(:user).try(:full_name) }<strong></td>\n      </tr>\n      <tr>\n        <td width=\"150\"  style=\"padding:8px;\">Status: </td>\n        <td  style=\"padding:8px;\">#{ try(:inquiry_status) }</td>\n      </tr>\n      <tr>\n          <td  style=\"padding:8px;\">Link: </td>\n          <td  style=\"padding:8px;\"><a href=\"#{Rails.application.routes.url_helpers.url_for(controller: :inquiries, action: :edit, id: id)}\">View in Print Speak</a></td>\n        </tr>\n      </table>\n  EOF\n\n    Email.ses_send([dest_address], \"Print Speak: New Inquiry created\", Email.printspeak_template(body)) if dest_address.present?\n  end\n\n  def send_assigned_user_change_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_assigned_user_change_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.assigned_user_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry assigned user changed to: #{user.full_name}\", email_body) if to_addrs.present?\n  end\n\n  def send_contact_change_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_contact_change_email\")\n    to_addrs = get_email_addresses(changing_user)\n    message = contact.present? ? \"contact assigned\" : \"contact cleared\"\n    email_body = Emails::Inquiry.new.contact_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry #{message}\", email_body) if to_addrs.present?\n  end\n\n  def send_company_change_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_company_change_email\")\n    to_addrs = get_email_addresses(changing_user)\n    message = company.present? ? \"company assigned\" : \"company cleared\"\n    email_body = Emails::Inquiry.new.company_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry #{message}\", email_body) if to_addrs.present?\n  end\n\n  def send_estimate_assign_update_email(host, changing_user = nil, estimate = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_estimate_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.estimate_assigned(self, host, estimate, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry estimate ##{estimate.invoice_number} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_order_assign_update_email(host, changing_user = nil, order = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_order_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.order_assigned(self, host, order, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry order ##{order.invoice_number} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_shipment_assign_update_email(host, changing_user = nil, shipment = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_shipment_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.shipment_assigned(self, host, shipment, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry shipment ##{shipment.courier_tracking} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_sale_assign_update_email(host, changing_user = nil, sale = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_sale_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.sale_assigned(self, host, sale, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry sale ##{sale.invoice_number} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_status_update_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_status_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.status_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry status changed\", email_body) if to_addrs.present?\n  end\n\n  def send_inquiry_update_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_inquiry_update_email\")\n\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.inquiry_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry updated\", email_body) if to_addrs.present?\n  end\n\n  def send_call_created_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_call_created_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.call_created(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry Call added\", email_body) if to_addrs.present?\n  end\n\n  def send_note_created_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_note_created_email\")\n\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.note_created(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry Note added\", email_body) if to_addrs.present?\n  end\n\n  def send_mail(addresses, email_subject, email_body, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(addresses, email_subject, email_body, source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  def assets\n    assets_array = []\n    Asset.where(context_type: \"Inquiry\", context_id: id, tenant_id: tenant_id).each do |asset|\n      assets_array << asset.presigned_url(false)\n    end\n    assets_array\n  end\n\n  def platform_id\n    nil\n  end\n\n  def invoices\n    Invoice.where(tenant: tenant, inquiry_id: id)\n  end\n\n  def estimates\n    Estimate.where(tenant: tenant, inquiry_id: id)\n  end\n\n  def shipments\n    Shipment.where(tenant: tenant, inquiry_id: id)\n  end\n\n  def aggregated_tasks\n    Task.where(tenant: tenant, taskable_type: \"Inquiry\", taskable_id: id).order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    PhoneCall.where(tenant: tenant, phoneable_type: \"Inquiry\", phoneable_id: id).order(created_at: :asc)\n  end\n\n  def aggregated_notes\n    Note.where(tenant: tenant, context_type: \"Inquiry\", context_id: id).order(\"created_at DESC, id DESC\")\n  end\n\n  def aggregated_meetings\n    Meeting.where(tenant: tenant, context_type: \"Inquiry\", context_id: id).order(created_at: :asc)\n  end\n\n  def get_email_addresses(changing_user)\n    to_addrs = []\n\n    # IF USER IS NOT NIL AND DIFFERENT THAN CURRENT USER\n    if not_self_assigned_user?(changing_user)\n      to_addrs << test_mode_if_required(user.tenant_email(tenant))\n    end\n    # APPEND EMAILS FROM SELECTED NOTIFICATION IDS\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    to_addrs if to_addrs.count.positive?\n  end\n\n  private\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\n\n  def add_emails_from_notifications(to_addrs)\n    tenant.visible_users.where(id: notification_ids).each do |notification_user|\n      to_addrs << test_mode_if_required(notification_user.email) unless notification_user.email.blank?\n    end\n    to_addrs\n  end\n\n  def not_self_assigned_user?(changing_user)\n    user.present? && changing_user.present? && !test_mode_if_required(user.tenant_email(tenant)).blank? && (changing_user.try(:id) != user.try(:id))\n  end\n\n  def inquiry_send_email_allowed?(context)\n    tenant.inquiry_notifications.nil? || !tenant.inquiry_notifications.nil? && tenant.inquiry_notifications.include?(context)\n  end\n\n  def self.platform_identifier(tenant)\n    if Platform.is_printsmith?(tenant)\n      if tenant.enterprise.id == 3 && RegionConfig.get_value(\"region\") == \"us\"\n        Inquiry.inquiry_identifiers.reject { |k, v| [\"Shipment Request\", \"General\", \"Logistica\", \"e-link\", \"Web Services\", \"Touch\", \"Address\", \"Spedizioni-imballaggio\", \"Printing-Marketing\", \"E-commerce\", \"SafeValue\"].include?(k) }\n      else\n        Inquiry.inquiry_identifiers.reject { |k, v| [\"Shipment Request\", \"General\", \"Logistica\", \"e-link\", \"Web Services\", \"Touch\", \"Address\", \"Spedizioni-imballaggio\", \"Printing-Marketing\", \"E-commerce\", \"SafeValue\", \"1M Project\"].include?(k) }\n      end\n    elsif Platform.is_mbe?(tenant)\n      Inquiry.inquiry_identifiers.reject { |k, v| [\"Quote Request\", \"Send a file\", \"Contact us\", \"1M Project\"].include?(k) }\n    else\n      Inquiry.inquiry_identifiers\n    end\n  end\nend\n",
          "public": "class Inquiry < ActiveRecord::Base\n  include Categorizable\n\n  has_many :inquiry_attachments\n\n  enum inquiry_type: { Website: 1, Email: 2 }\n\n  enum inquiry_status: {\n    \"Unread\": 0,\n    \"Read\": 7,\n    \"Awaiting Details\": 1,\n    \"In progress\": 2,\n    \"Replied\": 3,\n    \"Won\": 4,\n    \"Lost\": 5,\n    \"Archived\": 6\n  }\n\n  enum inquiry_lost_reason: {\n    \"Do not offer products/services requested\": 1,\n    \"Test inquiry\": 2,\n    \"Insufficient information to quote\": 3,\n    \"Unable to reach contact\": 4,\n    \"Responded too late\": 5,\n    \"Estimate lost\": 6,\n    \"SPAM\": 7\n  }\n\n  enum inquiry_identifier: {\n    \"Quote Request\": 1,\n    \"Send a file\": 2,\n    \"Contact us\": 3,\n    \"Shipment Request\": 4,\n    \"General\": 5,\n    \"Logistica\": 6,\n    \"e-link\": 7,\n    \"Web Services\": 8,\n    \"Touch\": 9,\n    \"Address\": 10,\n    \"Spedizioni-imballaggio\": 11,\n    \"Printing-Marketing\": 12,\n    \"E-commerce\": 13,\n    \"SafeValue\": 14,\n    \"1M Project\": 15\n  }\n\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :contact\n  belongs_to :company\n  has_many :activities\n\n  has_many :phone_calls, as: :phoneable\n  has_many :tasks, as: :taskable\n  has_many :notes, as: :context\n  has_many :meetings, as: :context\n  # has_many :emails, as: :context\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def name\n    if contact_id\n      tenant.contacts.where(id: contact_id).first.try(:full_name)\n    else\n      first_name.to_s + \" \" + last_name.to_s\n    end\n  end\n\n  def send_new_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_new_email\")\n\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.new_inquiry(self, host)\n    send_mail(to_addrs, \"Print Speak: New Inquiry created\", email_body) if to_addrs.present?\n  end\n\n  def send_new_api_email\n    return unless inquiry_send_email_allowed?(\"send_new_api_email\")\n    return unless user\n\n    dest_address = test_mode_if_required(user.tenant_email(tenant))\n    message = \"A new Inquiry has been created:\"\n\n    if !try(:contact)\n      inquiry_name = try(:first_name).to_s + \" \" + try(:last_name).to_s if try(:first_name) || try(:last_name)\n      inquiry_email = try(:from_email)\n    else\n      inquiry_name = contact.full_name\n      inquiry_email = contact.email\n    end\n\n    body = <<-EOF\n      <p>\n        Hi #{try(:user).try(:full_name)},\n      </p>\n\n      <p>\n        #{message}\n      </p>\n\n      <table>\n      <tr>\n        <td width=\"150\"  style=\"padding:8px;\">Name: </td>\n        <td  style=\"padding:8px;\">#{inquiry_name }</td>\n      </tr>\n      <tr>\n        <td width=\"150\"  style=\"padding:8px;\">Email: </td>\n        <td  style=\"padding:8px;\">#{ inquiry_email }</td>\n      </tr>\n      <tr>\n        <td width=\"150\" style=\"padding:8px;\">Inquiry Company: </td>\n        <td  style=\"padding:8px;\">#{ try(:company) ? company.try(:name) : company_name }</td>\n      </tr>\n      <tr>\n        <td width=\"150\" style=\"padding:8px;\">Assigned User:</td>\n        <td style=\"padding:8px;\"><strong>#{ try(:user).try(:full_name) }<strong></td>\n      </tr>\n      <tr>\n        <td width=\"150\"  style=\"padding:8px;\">Status: </td>\n        <td  style=\"padding:8px;\">#{ try(:inquiry_status) }</td>\n      </tr>\n      <tr>\n          <td  style=\"padding:8px;\">Link: </td>\n          <td  style=\"padding:8px;\"><a href=\"#{Rails.application.routes.url_helpers.url_for(controller: :inquiries, action: :edit, id: id)}\">View in Print Speak</a></td>\n        </tr>\n      </table>\n  EOF\n\n    Email.ses_send([dest_address], \"Print Speak: New Inquiry created\", Email.printspeak_template(body)) if dest_address.present?\n  end\n\n  def send_assigned_user_change_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_assigned_user_change_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.assigned_user_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry assigned user changed to: #{user.full_name}\", email_body) if to_addrs.present?\n  end\n\n  def send_contact_change_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_contact_change_email\")\n    to_addrs = get_email_addresses(changing_user)\n    message = contact.present? ? \"contact assigned\" : \"contact cleared\"\n    email_body = Emails::Inquiry.new.contact_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry #{message}\", email_body) if to_addrs.present?\n  end\n\n  def send_company_change_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_company_change_email\")\n    to_addrs = get_email_addresses(changing_user)\n    message = company.present? ? \"company assigned\" : \"company cleared\"\n    email_body = Emails::Inquiry.new.company_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry #{message}\", email_body) if to_addrs.present?\n  end\n\n  def send_estimate_assign_update_email(host, changing_user = nil, estimate = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_estimate_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.estimate_assigned(self, host, estimate, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry estimate ##{estimate.invoice_number} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_order_assign_update_email(host, changing_user = nil, order = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_order_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.order_assigned(self, host, order, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry order ##{order.invoice_number} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_shipment_assign_update_email(host, changing_user = nil, shipment = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_shipment_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.shipment_assigned(self, host, shipment, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry shipment ##{shipment.courier_tracking} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_sale_assign_update_email(host, changing_user = nil, sale = nil, type)\n    return unless inquiry_send_email_allowed?(\"send_sale_assign_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.sale_assigned(self, host, sale, type)\n    send_mail(to_addrs, \"Print Speak: Inquiry sale ##{sale.invoice_number} #{type}\", email_body) if to_addrs.present?\n  end\n\n  def send_status_update_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_status_update_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.status_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry status changed\", email_body) if to_addrs.present?\n  end\n\n  def send_inquiry_update_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_inquiry_update_email\")\n\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.inquiry_update(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry updated\", email_body) if to_addrs.present?\n  end\n\n  def send_call_created_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_call_created_email\")\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.call_created(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry Call added\", email_body) if to_addrs.present?\n  end\n\n  def send_note_created_email(host, changing_user = nil)\n    return unless inquiry_send_email_allowed?(\"send_note_created_email\")\n\n    to_addrs = get_email_addresses(changing_user)\n    email_body = Emails::Inquiry.new.note_created(self, host)\n    send_mail(to_addrs, \"Print Speak: Inquiry Note added\", email_body) if to_addrs.present?\n  end\n\n  def send_mail(addresses, email_subject, email_body, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(addresses, email_subject, email_body, source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  def assets\n    assets_array = []\n    Asset.where(context_type: \"Inquiry\", context_id: id, tenant_id: tenant_id).each do |asset|\n      assets_array << asset.presigned_url(false)\n    end\n    assets_array\n  end\n\n  def platform_id\n    nil\n  end\n\n  def invoices\n    Invoice.where(tenant: tenant, inquiry_id: id)\n  end\n\n  def estimates\n    Estimate.where(tenant: tenant, inquiry_id: id)\n  end\n\n  def shipments\n    Shipment.where(tenant: tenant, inquiry_id: id)\n  end\n\n  def aggregated_tasks\n    Task.where(tenant: tenant, taskable_type: \"Inquiry\", taskable_id: id).order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    PhoneCall.where(tenant: tenant, phoneable_type: \"Inquiry\", phoneable_id: id).order(created_at: :asc)\n  end\n\n  def aggregated_notes\n    Note.where(tenant: tenant, context_type: \"Inquiry\", context_id: id).order(\"created_at DESC, id DESC\")\n  end\n\n  def aggregated_meetings\n    Meeting.where(tenant: tenant, context_type: \"Inquiry\", context_id: id).order(created_at: :asc)\n  end\n\n  def get_email_addresses(changing_user)\n    to_addrs = []\n\n    # IF USER IS NOT NIL AND DIFFERENT THAN CURRENT USER\n    if not_self_assigned_user?(changing_user)\n      to_addrs << test_mode_if_required(user.tenant_email(tenant))\n    end\n    # APPEND EMAILS FROM SELECTED NOTIFICATION IDS\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    to_addrs if to_addrs.count.positive?\n  end\n\n  ",
          "private": "private\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\n\n  def add_emails_from_notifications(to_addrs)\n    tenant.visible_users.where(id: notification_ids).each do |notification_user|\n      to_addrs << test_mode_if_required(notification_user.email) unless notification_user.email.blank?\n    end\n    to_addrs\n  end\n\n  def not_self_assigned_user?(changing_user)\n    user.present? && changing_user.present? && !test_mode_if_required(user.tenant_email(tenant)).blank? && (changing_user.try(:id) != user.try(:id))\n  end\n\n  def inquiry_send_email_allowed?(context)\n    tenant.inquiry_notifications.nil? || !tenant.inquiry_notifications.nil? && tenant.inquiry_notifications.include?(context)\n  end\n\n  def self.platform_identifier(tenant)\n    if Platform.is_printsmith?(tenant)\n      if tenant.enterprise.id == 3 && RegionConfig.get_value(\"region\") == \"us\"\n        Inquiry.inquiry_identifiers.reject { |k, v| [\"Shipment Request\", \"General\", \"Logistica\", \"e-link\", \"Web Services\", \"Touch\", \"Address\", \"Spedizioni-imballaggio\", \"Printing-Marketing\", \"E-commerce\", \"SafeValue\"].include?(k) }\n      else\n        Inquiry.inquiry_identifiers.reject { |k, v| [\"Shipment Request\", \"General\", \"Logistica\", \"e-link\", \"Web Services\", \"Touch\", \"Address\", \"Spedizioni-imballaggio\", \"Printing-Marketing\", \"E-commerce\", \"SafeValue\", \"1M Project\"].include?(k) }\n      end\n    elsif Platform.is_mbe?(tenant)\n      Inquiry.inquiry_identifiers.reject { |k, v| [\"Quote Request\", \"Send a file\", \"Contact us\", \"1M Project\"].include?(k) }\n    else\n      Inquiry.inquiry_identifiers\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "platform_identifier",
                "scope": "private",
                "class_method": true,
                "arguments": "(tenant)"
              }
            ],
            "instance": [
              {
                "name": "sales_rep",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_new_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_new_api_email",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_assigned_user_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_contact_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_company_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_estimate_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, estimate = nil, type)"
              },
              {
                "name": "send_order_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, order = nil, type)"
              },
              {
                "name": "send_shipment_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, shipment = nil, type)"
              },
              {
                "name": "send_sale_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, sale = nil, type)"
              },
              {
                "name": "send_status_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_inquiry_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_call_created_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_note_created_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_mail",
                "scope": "public",
                "class_method": false,
                "arguments": "(addresses, email_subject, email_body, source_email = \"support@printspeak.com\")"
              },
              {
                "name": "assets",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "platform_id",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoices",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimates",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shipments",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_tasks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_phone_calls",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_notes",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_meetings",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "get_email_addresses",
                "scope": "public",
                "class_method": false,
                "arguments": "(changing_user)"
              },
              {
                "name": "test_mode_if_required",
                "scope": "private",
                "class_method": false,
                "arguments": "(email_address)"
              },
              {
                "name": "add_emails_from_notifications",
                "scope": "private",
                "class_method": false,
                "arguments": "(to_addrs)"
              },
              {
                "name": "not_self_assigned_user?",
                "scope": "private",
                "class_method": false,
                "arguments": "(changing_user)"
              },
              {
                "name": "inquiry_send_email_allowed?",
                "scope": "private",
                "class_method": false,
                "arguments": "(context)"
              }
            ],
            "instance_public": [
              {
                "name": "sales_rep",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_new_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_new_api_email",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_assigned_user_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_contact_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_company_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_estimate_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, estimate = nil, type)"
              },
              {
                "name": "send_order_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, order = nil, type)"
              },
              {
                "name": "send_shipment_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, shipment = nil, type)"
              },
              {
                "name": "send_sale_assign_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil, sale = nil, type)"
              },
              {
                "name": "send_status_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_inquiry_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_call_created_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_note_created_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_mail",
                "scope": "public",
                "class_method": false,
                "arguments": "(addresses, email_subject, email_body, source_email = \"support@printspeak.com\")"
              },
              {
                "name": "assets",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "platform_id",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoices",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimates",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shipments",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_tasks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_phone_calls",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_notes",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_meetings",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "get_email_addresses",
                "scope": "public",
                "class_method": false,
                "arguments": "(changing_user)"
              }
            ],
            "instance_private": [
              {
                "name": "test_mode_if_required",
                "scope": "private",
                "class_method": false,
                "arguments": "(email_address)"
              },
              {
                "name": "add_emails_from_notifications",
                "scope": "private",
                "class_method": false,
                "arguments": "(to_addrs)"
              },
              {
                "name": "not_self_assigned_user?",
                "scope": "private",
                "class_method": false,
                "arguments": "(changing_user)"
              },
              {
                "name": "inquiry_send_email_allowed?",
                "scope": "private",
                "class_method": false,
                "arguments": "(context)"
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "inquiry_attachments",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "phone_calls",
              "options": {
                "as": "phoneable"
              },
              "raw_options": "as: :phoneable"
            },
            {
              "name": "tasks",
              "options": {
                "as": "taskable"
              },
              "raw_options": "as: :taskable"
            },
            {
              "name": "notes",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "meetings",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "inquiry_attachment",
        "name_plural": "inquiry_attachments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/inquiry_attachment.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass InquiryAttachment < ActiveRecord::Base\n  belongs_to :inquiry\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "inquiry",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "interest_category",
        "name_plural": "interest_categories",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/interest_category.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass InterestCategory < ActiveRecord::Base\n  enum interest_type: {personal: 1, product: 2 }\n  default_scope { order(\"LOWER(name) ASC\") }\n\n  belongs_to :enterprise\n  has_many :interests, dependent: :destroy\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(\"LOWER(name) ASC\") }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "interests",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "interest_context",
        "name_plural": "interest_contexts",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/interest_context.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass InterestContext < ActiveRecord::Base\n  belongs_to :interest\n  belongs_to :context, polymorphic: true\n  belongs_to :user\n  belongs_to :tenant\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "interest",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "interest",
        "name_plural": "interests",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/interest.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Interest < ActiveRecord::Base\n  belongs_to :interest_category\n  belongs_to :user\n  default_scope { order(\"LOWER(name) ASC\") }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(\"LOWER(name) ASC\") }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "interest_category",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "invoice_element",
        "name_plural": "invoice_elements",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/invoice_element.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass InvoiceElement < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :invoice\n  belongs_to :element, polymorphic: true\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "invoice",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "element",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "invoice",
        "name_plural": "invoices",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/invoice.rb",
        "source": {
          "ruby": "class Invoice < ActiveRecord::Base\n  include ApiLoggable\n  include Categorizable\n\n  default_scope { where(\"invoices.voided = false or invoices.voided is null\").where(deleted: false) }\n  # default_scope { where(ready: true) }\n  # Invoice.all          # => SELECT * FROM invoices WHERE ready = true\n  # Invoice.unscoped.all # => SELECT * FROM invoices\n  # consider any raw SQL\n  after_commit :recalc_statistics\n\n  has_secure_token :public_token\n\n  has_many :activities\n  belongs_to :tenant, inverse_of: :invoices\n  belongs_to :company, inverse_of: :invoices\n  belongs_to :production_location, inverse_of: :invoices\n  belongs_to :company, inverse_of: :sales\n\n  has_one :location, class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\"\n  has_one :sales_rep_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\"\n  has_one :taken_by_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\"\n  has_one :contact, class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\"\n  has_one :adjustment\n  has_many :actions, as: :actionable\n  has_many :tasks, as: :taskable\n  has_many :phone_calls, as: :phoneable\n\n\n  has_many :emails, as: :context\n  has_many :meetings, as: :context\n  has_many :proofs\n\n  belongs_to :pdf\n\n\n\n  # def self.to_csv(options = {})\n  #   CSV.generate(options) do |csv|\n  #     csv << column_names\n  #     all.each do |invoice|\n  #       csv << invoice.attributes.values_at(*column_names)\n  #     end\n  #   end\n  # end\n\n  scope :for_tenant, ->(tenant_id) { where(tenant_id: Array(tenant_id).first) }\n  scope :for_dates,  ->(start_date, end_date) { where(ordered_date: start_date..end_date) }\n  scope :including_companies, -> { includes(:company) }\n  scope :lonely, lambda { joins(\"LEFT OUTER JOIN tags ON invoices.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }\n  scope :needs_pdf, -> { where(\"ordered_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }\n  scope :invoiced, -> (invoiced_only=true) { where(Invoice.INVOICED) if invoiced_only }\n  scope :deferred, -> (deferred_only=true) { where(Invoice.DEFERRED) if deferred_only }\n\n  #TODO Deprecate these in favor of the above, leaving them in as there are other PRs still using them\n  scope :mbe_invoiced, -> (invoiced_only=true) { invoiced(invoiced_only) }\n  scope :mbe_deferred, -> (deferred_only=true) { deferred(deferred_only) }\n\n  def self.INVOICED\n    \"COALESCE(invoices.platform_data->>'invoiced', 'false')::BOOLEAN = TRUE\"\n  end\n\n  def self.DEFERRED\n    \"COALESCE(invoices.platform_data->>'deferred', 'false')::BOOLEAN = TRUE\"\n  end\n\n  def update_invoiced\n    invoiced = false\n    if tenant.enterprise.invoiced_types.include?(invoice_type)\n      invoiced = true\n    end\n\n    if invoiced != platform_data[\"invoiced\"]\n      platform_data[\"invoiced\"] = invoiced\n      save\n    end\n  end\n\n  def update_deferred\n    deferred = false\n    if tenant.enterprise.deferred_types.include?(invoice_type) && platform_data[\"source_invoice_platform_id\"].blank?\n      if invoice_type == tenant.enterprise.invoice_types.key(\"Shipment\")\n        deferred = true if shipment && !shipment.not_to_invoice && shipment.source_invoice_platform_id.blank?\n      else\n        deferred = true\n      end\n    end\n\n    if deferred != platform_data[\"deferred\"]\n      platform_data[\"deferred\"] = deferred\n      save\n    end\n  end\n\n  def shipment\n    result = nil\n    if !platform_data[\"source_shipment_platform_id\"].blank?\n      result = Shipment.where(tenant: tenant, platform_id: platform_data[\"source_shipment_platform_id\"]).first\n    end\n    result\n  end\n\n  def parent_invoice\n    Invoice.where(tenant: tenant).where(\"platform_data->>'source_invoice_platform_id' = ?\", platform_id).first\n  end\n\n  def cogs_percentage\n    grand_total_inc_non_sales_minus_tax = grand_total_inc_tax.to_f - tax.to_f\n\n    if grand_total_inc_non_sales_minus_tax.to_f != 0.0 &&\n      total_cost.to_f != 0.0 &&\n      !grand_total_inc_non_sales_minus_tax.nil? &&\n      !total_cost.nil?\n     total_cost / (grand_total_inc_tax.to_f - tax.to_f) * 100\n    else\n      0\n    end\n  end\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def notes\n    Note.where(context_type: [Invoice, Order, Sale], context_id: id)\n  end\n\n  def source_estimate\n    result = nil\n    if !source_estimate_number.blank?\n      if converted || source_invoice_number.blank?\n        result = Estimate.where(tenant: tenant, invoice_number: source_estimate_number).first\n      end\n    end\n    result\n  end\n\n  def inquiry\n    Inquiry.where(id: inquiry_id).first\n  end\n\n  def aggregated_tasks\n    where_condition = \"(tasks.taskable_type IN ('Invoice', 'Sale', 'Order') AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (tasks.taskable_type = 'Estimate' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (tasks.taskable_type = 'Inquiry' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (tasks.taskable_type = 'Inquiry' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Task.where(tenant: tenant).\n         where(where_condition).\n         order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    where_condition = \"(phone_calls.phoneable_type IN ('Invoice', 'Sale', 'Order') AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (phone_calls.phoneable_type = 'Estimate' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (phone_calls.phoneable_type = 'Inquiry' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (phone_calls.phoneable_type = 'Inquiry' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    PhoneCall.where(tenant: tenant).\n              where(where_condition).\n              order(created_at: :desc)\n  end\n\n  def aggregated_notes\n    where_condition = \"(notes.context_type IN ('Invoice', 'Sale', 'Order') AND notes.context_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (notes.context_type = 'Estimate' AND notes.context_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (notes.context_type = 'Inquiry' AND notes.context_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (notes.context_type = 'Inquiry' AND notes.context_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Note.where(tenant: tenant).\n         where(where_condition).\n         order(\"created_at DESC, id DESC\")\n  end\n\n  def aggregated_meetings\n    where_condition = \"(meetings.context_type IN ('Invoice', 'Sale', 'Order') AND meetings.context_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (meetings.context_type = 'Estimate' AND meetings.context_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (meetings.context_type = 'Inquiry' AND meetings.context_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (meetings.context_type = 'Inquiry' AND meetings.context_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Meeting.where(tenant: tenant).\n            where(where_condition).\n            order(created_at: :desc)\n  end\n\n  def pay_url(target_tenant: tenant, amount: nil, number: nil, name: nil, email: nil)\n    result = \"\"\n\n    if !target_tenant.try(:pay_url).blank?\n      result = target_tenant.pay_url\n      result = result.gsub(\"{{amount}}\", URI::encode(\"%.02f\" % (amount || try(:amount_due) || 0)))\n      result = result.gsub(\"{{number}}\", URI::encode(number || try(:invoice_number).try(:to_s) || \"\"))\n      result = result.gsub(\"{{name}}\", URI::encode(name || try(:company).try(:name) || try(:contact).try(:full_name) || \"\"))\n      result = result.gsub(\"{{email}}\", URI::encode(email || try(:contact).try(:email) || \"\"))\n    end\n\n    result\n  end\n\n  def portal_url\n    return Rails.application.routes.url_helpers.url_for(controller: \"/portal/proof\", action: :view, key: \"invalid\") if !id\n\n    if portal_key.blank?\n      self.portal_key = \"#{id}#{SecureRandom.urlsafe_base64(64)}\"\n      save\n    end\n    Rails.application.routes.url_helpers.url_for(controller: \"/portal/proof\", action: :view, key: portal_key)\n  end\n\n  def proof\n    if proof_approved_id\n      result = Proof.where(id: proof_approved_id).first\n    end\n    if result.nil?\n      result = Proof.where(id: proof_id).first\n    end\n    if result.nil?\n      result = latest_proof\n    end\n    result\n  end\n\n  def proofs\n    Proof.where(tenant_id: tenant_id, invoice_id: id, revision_of_id: nil).order(number: :asc)\n  end\n\n  def latest_proof\n    Proof.where(invoice_id: id).order(created_at: :desc).first\n  end\n\n  def proof_count\n    Proof.where(invoice_id: id, revision_of_id: nil).count\n  end\n\n  def self.bulk_all_tags(target_tenant, target_ids, category_ids, manual = false)\n    Tag.unscoped.where(tenant_id: target_tenant.id, taggable: self, tag_category_id: category_ids)\n  end\n\n  private\n\n  def recalc_statistics\n    if (previous_changes.keys & %w[company_id pickup_date deleted voided]).any?\n      Platform::Tagger::SingleSaleOnly.new(company).perform if company\n      Platform::Tagger::FirstSale.new(company).perform if company\n    end\n\n    if (previous_changes.keys & %w[contact_id pickup_date deleted voided]).any?\n      Platform::Tagger::SingleSaleOnlyContact.new(contact).perform if contact\n      Platform::Tagger::FirstSaleContact.new(contact).perform if contact\n    end\n  end\nend\n",
          "public": "class Invoice < ActiveRecord::Base\n  include ApiLoggable\n  include Categorizable\n\n  default_scope { where(\"invoices.voided = false or invoices.voided is null\").where(deleted: false) }\n  # default_scope { where(ready: true) }\n  # Invoice.all          # => SELECT * FROM invoices WHERE ready = true\n  # Invoice.unscoped.all # => SELECT * FROM invoices\n  # consider any raw SQL\n  after_commit :recalc_statistics\n\n  has_secure_token :public_token\n\n  has_many :activities\n  belongs_to :tenant, inverse_of: :invoices\n  belongs_to :company, inverse_of: :invoices\n  belongs_to :production_location, inverse_of: :invoices\n  belongs_to :company, inverse_of: :sales\n\n  has_one :location, class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\"\n  has_one :sales_rep_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\"\n  has_one :taken_by_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\"\n  has_one :contact, class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\"\n  has_one :adjustment\n  has_many :actions, as: :actionable\n  has_many :tasks, as: :taskable\n  has_many :phone_calls, as: :phoneable\n\n\n  has_many :emails, as: :context\n  has_many :meetings, as: :context\n  has_many :proofs\n\n  belongs_to :pdf\n\n\n\n  # def self.to_csv(options = {})\n  #   CSV.generate(options) do |csv|\n  #     csv << column_names\n  #     all.each do |invoice|\n  #       csv << invoice.attributes.values_at(*column_names)\n  #     end\n  #   end\n  # end\n\n  scope :for_tenant, ->(tenant_id) { where(tenant_id: Array(tenant_id).first) }\n  scope :for_dates,  ->(start_date, end_date) { where(ordered_date: start_date..end_date) }\n  scope :including_companies, -> { includes(:company) }\n  scope :lonely, lambda { joins(\"LEFT OUTER JOIN tags ON invoices.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }\n  scope :needs_pdf, -> { where(\"ordered_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }\n  scope :invoiced, -> (invoiced_only=true) { where(Invoice.INVOICED) if invoiced_only }\n  scope :deferred, -> (deferred_only=true) { where(Invoice.DEFERRED) if deferred_only }\n\n  #TODO Deprecate these in favor of the above, leaving them in as there are other PRs still using them\n  scope :mbe_invoiced, -> (invoiced_only=true) { invoiced(invoiced_only) }\n  scope :mbe_deferred, -> (deferred_only=true) { deferred(deferred_only) }\n\n  def self.INVOICED\n    \"COALESCE(invoices.platform_data->>'invoiced', 'false')::BOOLEAN = TRUE\"\n  end\n\n  def self.DEFERRED\n    \"COALESCE(invoices.platform_data->>'deferred', 'false')::BOOLEAN = TRUE\"\n  end\n\n  def update_invoiced\n    invoiced = false\n    if tenant.enterprise.invoiced_types.include?(invoice_type)\n      invoiced = true\n    end\n\n    if invoiced != platform_data[\"invoiced\"]\n      platform_data[\"invoiced\"] = invoiced\n      save\n    end\n  end\n\n  def update_deferred\n    deferred = false\n    if tenant.enterprise.deferred_types.include?(invoice_type) && platform_data[\"source_invoice_platform_id\"].blank?\n      if invoice_type == tenant.enterprise.invoice_types.key(\"Shipment\")\n        deferred = true if shipment && !shipment.not_to_invoice && shipment.source_invoice_platform_id.blank?\n      else\n        deferred = true\n      end\n    end\n\n    if deferred != platform_data[\"deferred\"]\n      platform_data[\"deferred\"] = deferred\n      save\n    end\n  end\n\n  def shipment\n    result = nil\n    if !platform_data[\"source_shipment_platform_id\"].blank?\n      result = Shipment.where(tenant: tenant, platform_id: platform_data[\"source_shipment_platform_id\"]).first\n    end\n    result\n  end\n\n  def parent_invoice\n    Invoice.where(tenant: tenant).where(\"platform_data->>'source_invoice_platform_id' = ?\", platform_id).first\n  end\n\n  def cogs_percentage\n    grand_total_inc_non_sales_minus_tax = grand_total_inc_tax.to_f - tax.to_f\n\n    if grand_total_inc_non_sales_minus_tax.to_f != 0.0 &&\n      total_cost.to_f != 0.0 &&\n      !grand_total_inc_non_sales_minus_tax.nil? &&\n      !total_cost.nil?\n     total_cost / (grand_total_inc_tax.to_f - tax.to_f) * 100\n    else\n      0\n    end\n  end\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def notes\n    Note.where(context_type: [Invoice, Order, Sale], context_id: id)\n  end\n\n  def source_estimate\n    result = nil\n    if !source_estimate_number.blank?\n      if converted || source_invoice_number.blank?\n        result = Estimate.where(tenant: tenant, invoice_number: source_estimate_number).first\n      end\n    end\n    result\n  end\n\n  def inquiry\n    Inquiry.where(id: inquiry_id).first\n  end\n\n  def aggregated_tasks\n    where_condition = \"(tasks.taskable_type IN ('Invoice', 'Sale', 'Order') AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (tasks.taskable_type = 'Estimate' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (tasks.taskable_type = 'Inquiry' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (tasks.taskable_type = 'Inquiry' AND tasks.taskable_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Task.where(tenant: tenant).\n         where(where_condition).\n         order(created_at: :asc)\n  end\n\n  def aggregated_phone_calls\n    where_condition = \"(phone_calls.phoneable_type IN ('Invoice', 'Sale', 'Order') AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (phone_calls.phoneable_type = 'Estimate' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (phone_calls.phoneable_type = 'Inquiry' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (phone_calls.phoneable_type = 'Inquiry' AND phone_calls.phoneable_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    PhoneCall.where(tenant: tenant).\n              where(where_condition).\n              order(created_at: :desc)\n  end\n\n  def aggregated_notes\n    where_condition = \"(notes.context_type IN ('Invoice', 'Sale', 'Order') AND notes.context_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (notes.context_type = 'Estimate' AND notes.context_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (notes.context_type = 'Inquiry' AND notes.context_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (notes.context_type = 'Inquiry' AND notes.context_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Note.where(tenant: tenant).\n         where(where_condition).\n         order(\"created_at DESC, id DESC\")\n  end\n\n  def aggregated_meetings\n    where_condition = \"(meetings.context_type IN ('Invoice', 'Sale', 'Order') AND meetings.context_id = #{ActiveRecord::Base::sanitize(id)})\"\n    if source_estimate\n      where_condition << \" OR (meetings.context_type = 'Estimate' AND meetings.context_id = #{ActiveRecord::Base::sanitize(source_estimate.id)})\"\n      if source_estimate.inquiry\n        where_condition << \" OR (meetings.context_type = 'Inquiry' AND meetings.context_id = #{ActiveRecord::Base::sanitize(source_estimate.inquiry.id)})\"\n      end\n    end\n    if inquiry\n      where_condition << \" OR (meetings.context_type = 'Inquiry' AND meetings.context_id = #{ActiveRecord::Base::sanitize(inquiry.id)})\"\n    end\n    Meeting.where(tenant: tenant).\n            where(where_condition).\n            order(created_at: :desc)\n  end\n\n  def pay_url(target_tenant: tenant, amount: nil, number: nil, name: nil, email: nil)\n    result = \"\"\n\n    if !target_tenant.try(:pay_url).blank?\n      result = target_tenant.pay_url\n      result = result.gsub(\"{{amount}}\", URI::encode(\"%.02f\" % (amount || try(:amount_due) || 0)))\n      result = result.gsub(\"{{number}}\", URI::encode(number || try(:invoice_number).try(:to_s) || \"\"))\n      result = result.gsub(\"{{name}}\", URI::encode(name || try(:company).try(:name) || try(:contact).try(:full_name) || \"\"))\n      result = result.gsub(\"{{email}}\", URI::encode(email || try(:contact).try(:email) || \"\"))\n    end\n\n    result\n  end\n\n  def portal_url\n    return Rails.application.routes.url_helpers.url_for(controller: \"/portal/proof\", action: :view, key: \"invalid\") if !id\n\n    if portal_key.blank?\n      self.portal_key = \"#{id}#{SecureRandom.urlsafe_base64(64)}\"\n      save\n    end\n    Rails.application.routes.url_helpers.url_for(controller: \"/portal/proof\", action: :view, key: portal_key)\n  end\n\n  def proof\n    if proof_approved_id\n      result = Proof.where(id: proof_approved_id).first\n    end\n    if result.nil?\n      result = Proof.where(id: proof_id).first\n    end\n    if result.nil?\n      result = latest_proof\n    end\n    result\n  end\n\n  def proofs\n    Proof.where(tenant_id: tenant_id, invoice_id: id, revision_of_id: nil).order(number: :asc)\n  end\n\n  def latest_proof\n    Proof.where(invoice_id: id).order(created_at: :desc).first\n  end\n\n  def proof_count\n    Proof.where(invoice_id: id, revision_of_id: nil).count\n  end\n\n  def self.bulk_all_tags(target_tenant, target_ids, category_ids, manual = false)\n    Tag.unscoped.where(tenant_id: target_tenant.id, taggable: self, tag_category_id: category_ids)\n  end\n\n  ",
          "private": "private\n\n  def recalc_statistics\n    if (previous_changes.keys & %w[company_id pickup_date deleted voided]).any?\n      Platform::Tagger::SingleSaleOnly.new(company).perform if company\n      Platform::Tagger::FirstSale.new(company).perform if company\n    end\n\n    if (previous_changes.keys & %w[contact_id pickup_date deleted voided]).any?\n      Platform::Tagger::SingleSaleOnlyContact.new(contact).perform if contact\n      Platform::Tagger::FirstSaleContact.new(contact).perform if contact\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "to_csv",
                "scope": "public",
                "class_method": true,
                "arguments": "(options = {})"
              },
              {
                "name": "INVOICED",
                "scope": "public",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "DEFERRED",
                "scope": "public",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "bulk_all_tags",
                "scope": "public",
                "class_method": true,
                "arguments": "(target_tenant, target_ids, category_ids, manual = false)"
              }
            ],
            "instance": [
              {
                "name": "update_invoiced",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_deferred",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shipment",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "parent_invoice",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "cogs_percentage",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sales_rep",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "notes",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "source_estimate",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "inquiry",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_tasks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_phone_calls",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_notes",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_meetings",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "pay_url",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant: tenant, amount: nil, number: nil, name: nil, email: nil)"
              },
              {
                "name": "portal_url",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "proof",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "proofs",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "latest_proof",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "proof_count",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "recalc_statistics",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "update_invoiced",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "update_deferred",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shipment",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "parent_invoice",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "cogs_percentage",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sales_rep",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "notes",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "source_estimate",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "inquiry",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_tasks",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_phone_calls",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_notes",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "aggregated_meetings",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "pay_url",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant: tenant, amount: nil, number: nil, name: nil, email: nil)"
              },
              {
                "name": "portal_url",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "proof",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "proofs",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "latest_proof",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "proof_count",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_private": [
              {
                "name": "recalc_statistics",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(\"invoices.voided = false or invoices.voided is null\").where(deleted: false) }",
          "scopes": [
            {
              "name": "for_tenant",
              "scope": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
            },
            {
              "name": "for_dates",
              "scope": "->(start_date, end_date) { where(ordered_date: start_date..end_date) }"
            },
            {
              "name": "including_companies",
              "scope": "-> { includes(:company) }"
            },
            {
              "name": "lonely",
              "scope": "lambda { joins(\"LEFT OUTER JOIN tags ON invoices.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }"
            },
            {
              "name": "needs_pdf",
              "scope": "-> { where(\"ordered_date > \\'2015-07-01\\'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }"
            },
            {
              "name": "invoiced",
              "scope": "-> (invoiced_only=true) { where(Invoice.INVOICED) if invoiced_only }"
            },
            {
              "name": "deferred",
              "scope": "-> (deferred_only=true) { where(Invoice.DEFERRED) if deferred_only }"
            },
            {
              "name": "mbe_invoiced",
              "scope": "-> (invoiced_only=true) { invoiced(invoiced_only) }"
            },
            {
              "name": "mbe_deferred",
              "scope": "-> (deferred_only=true) { deferred(deferred_only) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
                "inverse_of": "invoices"
              },
              "raw_options": "inverse_of: :invoices"
            },
            {
              "name": "company",
              "options": {
                "inverse_of": "invoices"
              },
              "raw_options": "inverse_of: :invoices"
            },
            {
              "name": "production_location",
              "options": {
                "inverse_of": "invoices"
              },
              "raw_options": "inverse_of: :invoices"
            },
            {
              "name": "company",
              "options": {
                "inverse_of": "sales"
              },
              "raw_options": "inverse_of: :sales"
            },
            {
              "name": "pdf",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "location",
              "options": {
                "class_name": "Location",
                "foreign_key": "id",
                "primary_key": "location_user_id"
              },
              "raw_options": "class_name: \"Location\", foreign_key: \"id\", primary_key: \"location_user_id\""
            },
            {
              "name": "sales_rep_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "sales_rep_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\""
            },
            {
              "name": "taken_by_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "taken_by_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\""
            },
            {
              "name": "contact",
              "options": {
                "class_name": "Contact",
                "foreign_key": "id",
                "primary_key": "contact_id"
              },
              "raw_options": "class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\""
            },
            {
              "name": "adjustment",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_many": [
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "actions",
              "options": {
                "as": "actionable"
              },
              "raw_options": "as: :actionable"
            },
            {
              "name": "tasks",
              "options": {
                "as": "taskable"
              },
              "raw_options": "as: :taskable"
            },
            {
              "name": "phone_calls",
              "options": {
                "as": "phoneable"
              },
              "raw_options": "as: :phoneable"
            },
            {
              "name": "emails",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "meetings",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "proofs",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "job_stat",
        "name_plural": "job_stats",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/job_stat.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass JobStat < ActiveRecord::Base\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "lead_source",
        "name_plural": "lead_sources",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/lead_source.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass LeadSource < ActiveRecord::Base\n  default_scope { order(\"LOWER(lead_sources.name) ASC\") }\n\n  belongs_to :enterprise\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(\"LOWER(lead_sources.name) ASC\") }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "lead_type",
        "name_plural": "lead_types",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/lead_type.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass LeadType < ActiveRecord::Base\n  default_scope { order(\"LOWER(lead_types.name) ASC\") }\n\n  validate :name_unique\n\n  scope :visible, -> {\n    includes(:hidden_lead_types)\n    .where(hidden_lead_types: { lead_type: nil })\n  }\n\n  scope :active, -> {\n    where.not(status: [2, 3, 4])\n    .order(name: :asc)\n  }\n\n  scope :by_tenant, -> (tenant) { where.not(status: [2, 3, 4]).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(\"LEFT OUTER JOIN hidden_lead_types ON hidden_lead_types.lead_type_id = lead_types.id\").having(\"? != ALL(array_agg(hidden_lead_types.tenant_id)) OR 0 = ALL(array_agg(COALESCE(hidden_lead_types.tenant_id, 0)))\", tenant.id).joins(:prospect_statuses).group(\"lead_types.id\") }\n  scope :by_tenant_old, -> (tenant) { where(status: 4).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(:prospect_statuses).group(\"lead_types.id\")  }\n  scope :by_tenant_archived, -> (tenant) {\n    where(status: 3).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id)\n    .joins(:prospect_status_version)\n    .joins(:prospect_statuses)\n    .joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.prospect_status_id = prospect_statuses.id AND prospect_status_items.lead_type_id = lead_types.id\").where.not('prospect_status_items.id': nil)\n    .group(\"lead_types.id\")\n  }\n\n  enum status: { Live: 1, Draft: 2, Archived: 3, Old: 4 }\n\n  belongs_to :enterprise\n  belongs_to :tenant\n  has_many :prospect_status_items\n  has_many :prospect_status_versions\n  has_many :contacts\n\n  belongs_to :prospect_status_version, class_name: \"ProspectStatusVersion\", foreign_key: \"active_status_version\"\n\n  has_many :prospect_statuses, dependent: :destroy\n  has_many :hidden_lead_types, dependent: :destroy\n\n  has_one :enterprise_salestarget\n\n  def first_active_status\n    prospect_status_version.prospect_statuses.first\n  end\n\n  def sales_target(tenant)\n    Salestarget.where(tenant_id: tenant.id, target_type: 4, name: name, user_id: nil).first\n  end\n\n  def name_unique\n    if global == true\n      matching_lead_types = LeadType.unscoped.where(enterprise_id: enterprise.id).where(global: true).where.not(status: [3, 4]).where(name: name).where.not(id: id).count\n    else\n      matching_lead_types = LeadType.unscoped.where(enterprise_id: enterprise.id).where.not(status: [3, 4]).where(name: name).where.not(id: id).count\n    end\n\n    if matching_lead_types > 0\n      errors.add(:name, \"Lead Type name must be unique\")\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(\"LOWER(lead_types.name) ASC\") }",
          "scopes": [
            {
              "name": "visible",
              "scope": "-> {\n    includes(:hidden_lead_types)\n    .where(hidden_lead_types: { lead_type: nil })  }"
            },
            {
              "name": "active",
              "scope": "-> {\n    where.not(status: [2, 3, 4])\n    .order(name: :asc)  }"
            },
            {
              "name": "by_tenant",
              "scope": "-> (tenant) { where.not(status: [2, 3, 4]).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(\"LEFT OUTER JOIN hidden_lead_types ON hidden_lead_types.lead_type_id = lead_types.id\").having(\"? != ALL(array_agg(hidden_lead_types.tenant_id)) OR 0 = ALL(array_agg(COALESCE(hidden_lead_types.tenant_id, 0)))\", tenant.id).joins(:prospect_statuses).group(\"lead_types.id\") }"
            },
            {
              "name": "by_tenant_old",
              "scope": "-> (tenant) { where(status: 4).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(:prospect_statuses).group(\"lead_types.id\")  }"
            },
            {
              "name": "by_tenant_archived",
              "scope": "-> (tenant) {\n    where(status: 3).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id)\n    .joins(:prospect_status_version)\n    .joins(:prospect_statuses)\n    .joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.prospect_status_id = prospect_statuses.id AND prospect_status_items.lead_type_id = lead_types.id\").where.not(\\'prospect_status_items.id\\': nil)\n    .group(\"lead_types.id\")  }"
            }
          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_version",
              "options": {
                "class_name": "ProspectStatusVersion",
                "foreign_key": "active_status_version"
              },
              "raw_options": "class_name: \"ProspectStatusVersion\", foreign_key: \"active_status_version\""
            }
          ],
          "has_one": [
            {
              "name": "enterprise_salestarget",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_many": [
            {
              "name": "prospect_status_items",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_versions",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contacts",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_statuses",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "hidden_lead_types",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [
            {
              "line": ":name_unique"
            }
          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "list",
        "name_plural": "lists",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/list.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass List < ActiveRecord::Base\n  store_accessor :filter, :abc\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "location",
        "name_plural": "locations",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/location.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Location < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, inverse_of: :backups, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  belongs_to :identity\n\n  has_many :statistics\n  has_many :sales_reps\n  has_many :adjustments, foreign_key: \"location_user_id\", primary_key: \"id\"\n\n  validates :name, presence: true\n\n  def to_s\n    name\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "inverse_of: :backups, **belongs_to_required"
            },
            {
              "name": "identity",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "statistics",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "sales_reps",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "adjustments",
              "options": {
                "foreign_key": "location_user_id",
                "primary_key": "id"
              },
              "raw_options": "foreign_key: \"location_user_id\", primary_key: \"id\""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            },
            {
              "name": "name",
              "raw_options": "presence: true"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "marketing_group",
        "name_plural": "marketing_groups",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/marketing_group.rb",
        "source": {
          "ruby": "class MarketingGroup < ActiveRecord::Base\n  def email_templates\n    result = EmailTemplate.none\n\n    if email_template_ids && email_template_ids.count > 0\n      result = EmailTemplate.where(\"email_templates.id IN (#{email_template_ids.join(',')}) OR email_templates.copied_email_template_id IN (#{email_template_ids.join(',')}) OR email_templates.copied_root_email_template_id IN (#{email_template_ids.join(',')})\")\n                            .where(\"email_templates.copied_similarity >= 85 OR email_templates.id IN (#{email_template_ids.join(',')})\")\n                            .reorder(\"COALESCE((SELECT name FROM email_templates e WHERE e.id = email_templates.copied_root_email_template_id), email_templates.name) ASC, email_templates.copied_email_template_id ASC, email_templates.name ASC\")\n      if excluded_email_template_ids && excluded_email_template_ids.count > 0\n        result = result.where.not(id: excluded_email_template_ids)\n      end\n    end\n\n    result\n  end\n\n  def matched_campaigns\n    result = Campaign.none\n\n    email_template_ids = email_templates.map(&:id)\n\n    if email_template_ids && email_template_ids.count > 0\n      result = Campaign.where(email_template_id: email_template_ids, parent_id: nil, enterprise_id: enterprise_id).order(name: :asc)\n    end\n\n    result\n  end\n\n  def manual_campaigns\n    result = Campaign.none\n\n    if campaign_ids && campaign_ids.count > 0\n      result = Campaign.where(id: campaign_ids, enterprise_id: enterprise_id).order(name: :asc)\n    end\n\n    result\n  end\n\n  def excluded_campaigns\n    result = Campaign.none\n\n    if excluded_campaign_ids && excluded_campaign_ids.count > 0\n      result = Campaign.where(id: excluded_campaign_ids, enterprise_id: enterprise_id).order(name: :asc)\n    end\n\n    result\n  end\n\n  def campaigns(sent=false)\n    campaigns_condition = \"FALSE\"\n    if campaign_ids.count > 0\n      if sent\n        campaigns_condition = \"campaigns.parent_id IN (#{campaign_ids.join(\",\")})\"\n      else\n        campaigns_condition = \"campaigns.id IN (#{campaign_ids.join(\",\")})\"\n      end\n    end\n\n    email_templates_condition = \"FALSE\"\n    email_template_ids = email_templates.pluck(:id)\n    if email_template_ids.count > 0\n      email_templates_condition = \"campaigns.email_template_id IN (#{email_template_ids.join(\",\")})\"\n    end\n\n    excluded_campaigns_condition = \"\"\n    if excluded_campaign_ids.count > 0\n      if sent\n        excluded_campaigns_condition = \"AND campaigns.parent_id NOT IN (#{excluded_campaign_ids.join(\",\")})\"\n      else\n        excluded_campaigns_condition = \"AND campaigns.id NOT IN (#{excluded_campaign_ids.join(\",\")})\"\n      end\n    end\n\n    sent_condition = \"\"\n    if sent\n      sent_condition = \" NOT\"\n    end\n\n    campaigns_query = %Q{\n      SELECT *\n      FROM campaigns\n      WHERE campaigns.parent_id IS#{sent_condition} NULL\n      AND campaigns.test = FALSE\n      AND (\n        #{campaigns_condition}\n        OR\n        #{email_templates_condition}\n      )\n      #{excluded_campaigns_condition}\n      ORDER BY campaigns.name ASC\n    }\n    Campaign.find_by_sql(campaigns_query)\n  end\n\n  def self.search(search, enterprise_id, page: 1, per: 20)\n    query = %Q{\n      SELECT *, (COUNT(*) OVER()) AS total_count\n      FROM marketing_groups\n      WHERE marketing_groups.enterprise_id = #{enterprise_id}\n      AND marketing_groups.name ILIKE #{ActiveRecord::Base::sanitize(\"%#{search}%\")}\n      OR EXISTS\n      (\n      SELECT null\n      FROM campaigns\n      WHERE campaigns.parent_id IS NULL\n      AND campaigns.test = FALSE\n      AND campaigns.name ILIKE #{ActiveRecord::Base::sanitize(\"%#{search}%\")}\n      AND (\n        ARRAY[campaigns.id] && marketing_groups.campaign_ids\n        OR\n        campaigns.email_template_id IN (\n          SELECT email_templates.id\n          FROM email_templates\n          WHERE (\n            ARRAY[email_templates.id] && marketing_groups.email_template_ids\n            OR ARRAY[email_templates.copied_email_template_id] && (marketing_groups.email_template_ids)\n            OR ARRAY[email_templates.copied_root_email_template_id] && (marketing_groups.email_template_ids)\n          )\n          AND (\n            email_templates.copied_similarity >= 85\n            OR ARRAY[email_templates.id] && marketing_groups.email_template_ids\n          )\n          AND NOT (ARRAY[email_templates.id] && marketing_groups.excluded_email_template_ids)\n        )\n      )\n      AND NOT (ARRAY[campaigns.id] && marketing_groups.excluded_campaign_ids)\n      )\n      ORDER BY marketing_groups.name ASC\n      LIMIT #{per.to_i}\n      OFFSET #{(page.to_i-1) * per.to_i}\n    }\n\n    results = MarketingGroup.find_by_sql(query)\n    Kaminari.paginate_array(results, total_count: results.first.try(:total_count) || 0).page(page).per(per)\n  end\nend",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "meeting_attendee",
        "name_plural": "meeting_attendees",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/meeting_attendee.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass MeetingAttendee < ActiveRecord::Base\n  # This enum has a misspelling\n  enum status: %i[unknown sent received accepted rejected]\n  belongs_to :user\n  belongs_to :contact\n  belongs_to :meeting, inverse_of: :attendees\n  delegate :tenant, to: :meeting, allow_nil: true\n\n  def address\n    result = nil\n    if user\n      result = user.email\n    elsif contact\n      result = contact.email\n    else\n      result = email_address\n    end\n    result\n  end\n\n  def display_name\n    result = nil\n    if user\n      result = user.display_name\n    elsif contact\n      result = contact.full_name\n    else\n      result = email_address\n    end\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "meeting",
              "options": {
                "inverse_of": "attendees"
              },
              "raw_options": "inverse_of: :attendees"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "meeting",
        "name_plural": "meetings",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/meeting.rb",
        "source": {
          "ruby": "class Meeting < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :context, polymorphic: true\n  has_many :attendees, inverse_of: :meeting, class_name: \"MeetingAttendee\", dependent: :destroy\n  accepts_nested_attributes_for :attendees\n\n  attr_accessor :status_complete\n\n\n  scope :contextual, lambda { |context| where(context_type: context.class, context_id: context.id) }\n\n  validates :title, presence: { message: \"Title is required.\" }\n\n  def update_calendar\n    return unless user\n    return false if status == \"draft\"\n\n    failed = false\n    result_id = nil\n\n    event_status = status == \"cancelled\" ? \"cancelled\" : \"confirmed\"\n\n    if user_calendar_entry_id.blank? && event_status != \"cancelled\"\n      event_attendees = []\n      attendees.each do |attendee|\n        if !attendee.address.blank?\n          status = \"needsAction\"\n          status = \"accepted\" if attendee.user_id == user_id\n          event_attendees << Google::Apis::CalendarV3::EventAttendee.new(\n            email: attendee.address,\n            display_name: attendee.display_name,\n            response_status: status,\n          )\n        end\n      end\n\n\n\n      event = Google::Apis::CalendarV3::Event.new(\n        summary: title,\n        description: summary,\n        location: location,\n        start: Google::Apis::CalendarV3::EventDateTime.new(date_time: start_date.to_datetime.rfc3339),\n        end: Google::Apis::CalendarV3::EventDateTime.new(date_time: end_date.to_datetime.rfc3339),\n        status: event_status,\n        time_zone: tenant.time_zone,\n        attendees: event_attendees,\n      )\n      result_id = user.create_calendar_event(\"primary\", event, send_updates: true)\n\n    elsif user_calendar_entry_id.present?\n      event = user.get_calendar_event(\"primary\", user_calendar_entry_id)\n      if event == \"not_found\"\n        self.user_calendar_entry_id = nil\n      elsif event\n        event.summary = title\n        event.description = summary\n        event.location = location\n        event.start = Google::Apis::CalendarV3::EventDateTime.new(date_time: start_date.to_datetime.rfc3339)\n        event.end = Google::Apis::CalendarV3::EventDateTime.new(date_time: end_date.to_datetime.rfc3339)\n        event.status = event_status\n        time_zone = tenant.time_zone\n\n        attendees.each do |attendee|\n          found = false\n          event.attendees.each do |event_attendee|\n            found = true if attendee.address == event_attendee.email\n          end\n          if !found\n            event.attendees << Google::Apis::CalendarV3::EventAttendee.new(\n              email: attendee.address,\n              display_name: attendee.display_name\n            )\n          end\n        end\n\n        event.attendees.reverse_each do |event_attendee|\n          found = false\n          attendees.each do |attendee|\n            found = true if attendee.address == event_attendee.email\n          end\n          if !found\n            event.attendees.delete(event_attendee)\n          end\n        end\n\n        result_id = user.update_calendar_event(\"primary\", user_calendar_entry_id, event, send_updates: true)\n      end\n    end\n\n    if result_id == \"failed\"\n      failed = true\n    elsif result_id\n      self.user_calendar_entry_id = result_id\n    end\n    self.calendar_needs_update = false unless failed\n    save\n  end\n\n  def notify_creator(type=\"created\")\n    return unless user && status == \"draft\"\n    mbe = Platform.is_mbe?(tenant)\n\n    dest_address = user.email\n    subject = I18n.t(\"platform.new_printspeak_meeting\", mbe: mbe, title: title)\n    subject = I18n.t(\"platform.updated_printspeak_meeting\", mbe: mbe, title: title) if type == \"update\"\n    subject = I18n.t(\"platform.upcoming_printspeak_meeting\", mbe: mbe, title: title) if type == \"reminder\"\n    subject = I18n.t(\"platform.cancelled_printspeak_meeting\", mbe: mbe, title: title) if type == \"cancelled\"\n\n    attendee_list = \"\"\n    attendees.each do |attendee|\n      attendee_list << \"#{attendee.display_name} <#{attendee.address}>\"\n    end\n\n    body = %Q{\n      <p>Hi #{user.full_name},</p>\n      <p>#{subject}</p>\n      <table>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"title\")}:</td>\n          <td>#{title}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"summary\")}:</td>\n          <td>#{summary}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"location\")}:</td>\n          <td>#{location}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"start_date\")}:</td>\n          <td>#{tenant.local_strftime(start_date, '%%DM-%%DM-%y %l:%M %p')}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"end_date\")}:</td>\n          <td>#{tenant.local_strftime(end_date, '%%DM-%%DM-%y %l:%M %p')}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"notes\")}:</td>\n          <td>#{note}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"attendees\")}:</td>\n          <td>#{attendee_list}</td>\n        </tr>\n        <tr>\n          <td width=\"150\">#{I18n.t(\"link_url\")}:</td>\n          <td><a href=\"#{Rails.application.routes.url_helpers.url_for(controller: :meetings, action: :show, id: id)}\">#{I18n.t(\"platform.view_in_printspeak\", mbe: mbe)}</a></td>\n        </tr>\n      </table>\n    }\n\n    Email.ses_send([dest_address], subject, Email.printspeak_template(body))\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "contextual",
              "scope": "lambda { |context| where(context_type: context.class, context_id: context.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "attendees",
              "options": {
                "inverse_of": "meeting",
                "class_name": "MeetingAttendee",
                "dependent": "destroy"
              },
              "raw_options": "inverse_of: :meeting, class_name: \"MeetingAttendee\", dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "title",
              "raw_options": "presence: { message: \"Title is required.\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "news",
        "name_plural": "news",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/news.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass News < ActiveRecord::Base\n  acts_as_readable on: :created_at\n  belongs_to :enterprise\n\n  scope :by_enterprise, -> (enterprise_id) { where(\"enterprise_id = ? or global IS TRUE\", enterprise_id) }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "by_enterprise",
              "scope": "-> (enterprise_id) { where(\"enterprise_id = ? or global IS TRUE\", enterprise_id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "next_activity",
        "name_plural": "next_activities",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/next_activity.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass NextActivity < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :contact\n  belongs_to :context, polymorphic: true\n\n  scope :active, -> {\n    where(status: \"active\")\n  }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "active",
              "scope": "-> {\n    where(status: \"active\")  }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "note",
        "name_plural": "notes",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/note.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Note < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :context, polymorphic: true\n\n  default_scope { where(deleted: false) }\n  scope :contextual, lambda { |context| where(context_type: context.class, context_id: context.id) }\n\n  validates :title, presence: { message: \"Title is required.\" }\n  validates :message, presence: { message: \"Message is required.\" }\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [
            {
              "name": "contextual",
              "scope": "lambda { |context| where(context_type: context.class, context_id: context.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "title",
              "raw_options": "presence: { message: \"Title is required.\" }"
            },
            {
              "name": "message",
              "raw_options": "presence: { message: \"Message is required.\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "original_user",
        "name_plural": "original_users",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/original_user.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass OriginalUser < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :user, **belongs_to_required\n  validates :user, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "user",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "pdf",
        "name_plural": "pdfs",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/pdf.rb",
        "source": {
          "ruby": "class Pdf < ActiveRecord::Base\n  # Ideally we don't want to need this\n  def self.presigned_pdf_by_key(key, platform_id, inline: true, expires_in: 3600)\n    context = Invoice.where(key: key, platform_id: platform_id).first\n    context = Estimate.where(key: key, platform_id: platform_id).first if context.nil?\n    Pdf.presigned_pdf(context, inline: inline, expires_in: expires_in)\n  end\n\n  def self.presigned_pdf(context, inline: true, expires_in: 3600)\n    url = \"#invalid\"\n    if !context.nil?\n      credentials = Aws::Credentials.new(Rails.application.secrets.aws_access_key_id, Rails.application.secrets.aws_secret_access_key)\n      s3_client = Aws::S3::Client.new(credentials: credentials, region: RegionConfig.require_value(\"bucket_region\"))\n      filename = context.invoice_number\n      disposition = \"inline;filename=\\\"#{filename}.pdf\\\"\"\n      disposition = \"attachment;filename=\\\"#{filename}.pdf\\\"\" unless inline\n      signer = Aws::S3::Presigner.new(client: s3_client)\n      bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('pdf_bucket')}/#{context.key}/#{context.platform_id}.pdf\")\n      url = signer.presigned_url(:get_object, bucket: bucket_info[:bucket], key: bucket_info[:key], response_content_disposition: disposition, expires_in: expires_in)\n    end\n    url\n  end\n\n  def self.presigned_img(context, size: \"large\", page: 1, expires_in: 900)\n    credentials = Aws::Credentials.new(Rails.application.secrets.aws_access_key_id, Rails.application.secrets.aws_secret_access_key)\n    s3_client = Aws::S3::Client.new(credentials: credentials, region: RegionConfig.require_value(\"bucket_region\"))\n    signer = Aws::S3::Presigner.new(client: s3_client)\n    image_name = \"#{context.platform_id}-#{size}-#{page - 1}.jpg\"\n    bucket_info = Asset.split_bucket_info(\"#{RegionConfig.require_value('pdf_bucket')}/#{context.key}/#{image_name}\")\n    url = signer.presigned_url(:get_object, bucket: bucket_info[:bucket], key: bucket_info[:key], expires_in: expires_in)\n    url\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "pending_attachment",
        "name_plural": "pending_attachments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/pending_attachment.rb",
        "source": {
          "ruby": "class PendingAttachment < ActiveRecord::Base\n  belongs_to :tenant\n  before_destroy :cleanup_temporary_files\n\n\n\n  def process_attachment\n    extension_blacklist = [\".exe\", \".sh\"]\n    max_size = 1024*1024*200\n    if !complete && !needs_asset.blank?\n      file_contents = nil\n      asset_type = needs_asset[\"type\"]\n      case asset_type\n      when \"statement\"\n        company_id = needs_asset[\"company_id\"]\n        invoices_only = needs_asset[\"invoices_only\"] || false\n        company = Company.where(id: company_id, tenant_id: tenant.id).first if !company_id.blank?\n        if company\n          account_statement = Utils::AccountStatement.new(tenant, company, invoices_only: invoices_only).generate\n          if account_statement[:error].blank?\n            self.warn = account_statement[:warn]\n            self.file_name = \"Statement_#{company.id}.pdf\"\n            self.file_name = \"Invoices_#{company.id}.pdf\" if invoices_only\n            self.inline = false if account_statement[:pdf_content].length >= 20000000\n            file_contents = account_statement[:pdf_content]\n          else\n            self.error = account_statement[:error]\n          end\n        else\n          self.error = \"company_not_found\"\n        end\n      when \"pdf\"\n        context_id = needs_asset[\"context_id\"]\n        context_type = needs_asset[\"context_type\"]\n        context = nil\n        if !context_id.blank? && !context_type.blank?\n          found_context = context_type.restricted_constantize(PrintSpeak::Application.config.common_context_types).where(id: context_id).first\n          context = found_context if found_context && found_context.tenant_id == tenant.id\n        end\n\n        pdf_url = \"\"\n        if context\n          if context.try(:needs_pdf).nil?\n            self.error = \"no_pdf_for_context\"\n          else\n            if context.needs_pdf\n              klass = context.class\n              klass = Invoice if [Sale, Order].include?(context.class)\n              preferred_name = nil\n              case klass\n              when Invoice\n                preferred_name = tenant.preferred_invoice_name\n              when Estimate\n                preferred_name = tenant.preferred_estimate_name\n              end\n              Utils::Pdf.new(tenant, klass, preferred_name).perform_single(context.id)\n            end\n\n            context.reload\n\n            if context.needs_pdf == false\n              pdf_url = Pdf.presigned_pdf(context)\n              file_name = \"#{context.invoice_number}.pdf\"\n              file_name = \"#{context.platform_id}.pdf\"  if file_name.blank?\n\n              begin\n                URI.parse(URI.encode(pdf_url, \"[]\"))\n              rescue URI::InvalidURIError\n                self.error = \"invalid_url\"\n              end\n\n              if error.blank?\n                downloaded_file = nil\n                begin\n                  downloaded_file = HTTParty.get(pdf_url)\n                  if downloaded_file.blank? || file_name.blank?\n                    self.error = \"invalid_file\"\n                  end\n                rescue Exception => e\n                  self.error = \"could_not_fetch_pdf_url\"\n                end\n\n                if error.blank?\n                  self.file_name = file_name\n                  self.inline = false if downloaded_file.size >= 20000000\n                  file_contents = downloaded_file.parsed_response\n                end\n              end\n            else\n              self.error = \"pdf_failed\"\n            end\n          end\n        else\n          self.error = \"invalid_context\"\n        end\n      when \"url\"\n        file_url = needs_asset[\"file_url\"]\n        if !file_url.blank?\n          url = file_url\n          file_name = needs_asset[\"file_name\"]\n          file_name = url.split(\"#\").shift.split(\"?\").shift.split(\"/\").pop if file_name.blank?\n          file_extension = File.extname(file_name)\n          if extension_blacklist.include?(file_extension)\n            self.error = \"file_type_not_allowed\"\n          else\n            begin\n              URI.parse(URI.encode(url, \"[]\"))\n            rescue URI::InvalidURIError\n              self.error = \"invalid_url\"\n            end\n\n            if error.blank?\n              downloaded_file = nil\n              begin\n                downloaded_file = HTTParty.get(url)\n                if downloaded_file.blank? || file_name.blank?\n                  self.error = \"invalid_file\"\n                elsif downloaded_file.size > max_size\n                  self.error = \"file_exceeds_size\"\n                end\n              rescue Exception => e\n                self.error = \"could_not_fetch_url\"\n              end\n\n              if error.blank?\n                self.file_name = file_name\n                self.inline = false if downloaded_file.size >= 20000000\n                file_contents = downloaded_file.parsed_response\n              end\n            end\n          end\n        else\n          self.error = \"invalid_url\"\n        end\n      when \"asset\"\n        attaching_asset_id = needs_asset[\"asset_id\"]\n        attaching_asset = Asset.where(tenant_id: tenant_id, id: attaching_asset_id).first if !attaching_asset_id.blank?\n        if attaching_asset\n          downloaded_file = HTTParty.get(URI.encode(attaching_asset.url, \"[]\"))\n          if downloaded_file.blank?\n            self.error = \"could_not_fetch_asset\"\n          elsif downloaded_file.size > max_size\n            self.error = \"file_exceeds_size\"\n          else\n            self.file_name = attaching_asset.file_name\n            self.inline = false if downloaded_file.size >= 20000000\n            file_contents = downloaded_file.parsed_response\n          end\n        else\n          self.error = \"invalid_asset\"\n        end\n      when \"job\"\n        invoice_id = needs_asset[\"invoice_id\"]\n        invoice = Invoice.where(id: invoice_id, tenant_id: tenant.id).first if !invoice_id.blank?\n        if invoice\n          downloaded_file = nil\n          url = \"#{tenant.report_url}/PrintSmith/reportservlet?invoiceTicket=EFI_jobTicket.rpt&reportParameter=#{invoice.platform_id}&showShippingCharges=false&showBarcode=true&ignoreSession=true\"\n          begin\n            downloaded_file = HTTParty.get(url)\n            if downloaded_file.blank?\n              self.error = \"job_ticket_invalid_file\"\n            elsif downloaded_file.size > max_size\n              self.error = \"file_exceeds_size\"\n            end\n          rescue Exception => e\n            self.error = \"could_not_fetch_job\"\n          end\n\n          if error.blank?\n            self.file_name = \"Job_Ticket_#{invoice.invoice_number}.pdf\"\n            self.inline = false if downloaded_file.size >= 20000000\n            file_contents = downloaded_file.parsed_response\n          end\n        else\n          self.error = \"invoice_not_found\"\n        end\n      when \"waybill\"\n        shipment_id = needs_asset[\"shipment_id\"]\n        mbe = needs_asset[\"mbe\"] || false\n        shipment = Shipment.where(id: shipment_id, tenant_id: tenant.id).first if !shipment_id.blank?\n        if shipment\n          waybill = nil\n          if mbe\n            waybill = Mbe::Api.new(tenant).shipment.mbe_waybill(shipment.platform_id)\n          else\n            waybill = Mbe::Api.new(tenant).shipment.waybill(shipment.platform_id)\n          end\n          if waybill\n            tracking = shipment.courier_tracking\n            tracking = shipment.mbe_tracking if tracking.blank?\n            self.file_name = \"WAYBILL-#{tracking}.pdf\"\n            self.file_name = \"MBE-WAYBILL-#{shipment.mbe_tracking}.pdf\" if mbe\n            self.inline = false if waybill.length >= 20000000\n            file_contents = waybill\n          else\n            self.error = \"waybill_could_not_fetch\"\n          end\n        else\n          self.error = \"shipment_not_found\"\n        end\n      else\n        self.error = \"request_unknown_asset_type\"\n      end\n\n      if error.blank?\n        if !file_contents.blank?\n          asset = Asset.new(tenant_id: tenant.id,\n                            enterprise_id: tenant.enterprise.id,\n                            category: \"Email Attachment\",\n                            new_file_contents: file_contents,\n                            new_file_name: self.file_name,\n                            context_type: \"PendingAttachment\",\n                            context_id: id)\n          if asset.save\n            self.complete = true\n          else\n            asset = nil\n            self.error = \"failed\"\n          end\n        else\n          self.error = \"empty_attachment\"\n        end\n      end\n    elsif complete\n      asset = Asset.where(context_type: \"PendingAttachment\", context_id: id).first\n      if !asset\n        self.error = \"missing_attachment\"\n      end\n    else\n      self.error = \"request_invalid_asset\"\n    end\n\n    save\n  end\n\n  def find_asset\n    Asset.where(context_type: \"PendingAttachment\", context_id: id).first\n  end\n\n  def destroy_asset\n    asset = find_asset\n    asset.destroy if asset\n  end\n\n  def self.process_pending_attachments(tenant)\n    pending_attachments = PendingAttachment.where(tenant: tenant, complete: false, error: nil).where(\"needs_asset IS NOT NULL AND needs_asset != ?\" , \"{}\").order(\"bulk ASC NULLS FIRST, created_at ASC\").limit(5)\n    pending_attachments.each do |pending_attachment|\n      pending_attachment.process_attachment\n    end\n\n    stale_attachments = PendingAttachment.where(tenant: tenant).where(\"created_at < ?\", 1.day.ago)\n    stale_attachments.each do |stale_attachment|\n      stale_attachment.destroy_asset\n      stale_attachment.destroy\n    end\n\n    stale_assets = Asset.where(tenant_id: tenant.id, context_type: \"PendingAttachment\").where(\"created_at < ?\", 1.day.ago)\n    stale_assets.each do |stale_asset|\n      stale_asset.destroy\n    end\n  end\n\n  private\n\n  def cleanup_temporary_files\n    begin\n      File.delete(path) if !path.blank?\n    rescue StandardError\n    end\n  end\nend\n",
          "public": "class PendingAttachment < ActiveRecord::Base\n  belongs_to :tenant\n  before_destroy :cleanup_temporary_files\n\n\n\n  def process_attachment\n    extension_blacklist = [\".exe\", \".sh\"]\n    max_size = 1024*1024*200\n    if !complete && !needs_asset.blank?\n      file_contents = nil\n      asset_type = needs_asset[\"type\"]\n      case asset_type\n      when \"statement\"\n        company_id = needs_asset[\"company_id\"]\n        invoices_only = needs_asset[\"invoices_only\"] || false\n        company = Company.where(id: company_id, tenant_id: tenant.id).first if !company_id.blank?\n        if company\n          account_statement = Utils::AccountStatement.new(tenant, company, invoices_only: invoices_only).generate\n          if account_statement[:error].blank?\n            self.warn = account_statement[:warn]\n            self.file_name = \"Statement_#{company.id}.pdf\"\n            self.file_name = \"Invoices_#{company.id}.pdf\" if invoices_only\n            self.inline = false if account_statement[:pdf_content].length >= 20000000\n            file_contents = account_statement[:pdf_content]\n          else\n            self.error = account_statement[:error]\n          end\n        else\n          self.error = \"company_not_found\"\n        end\n      when \"pdf\"\n        context_id = needs_asset[\"context_id\"]\n        context_type = needs_asset[\"context_type\"]\n        context = nil\n        if !context_id.blank? && !context_type.blank?\n          found_context = context_type.restricted_constantize(PrintSpeak::Application.config.common_context_types).where(id: context_id).first\n          context = found_context if found_context && found_context.tenant_id == tenant.id\n        end\n\n        pdf_url = \"\"\n        if context\n          if context.try(:needs_pdf).nil?\n            self.error = \"no_pdf_for_context\"\n          else\n            if context.needs_pdf\n              klass = context.class\n              klass = Invoice if [Sale, Order].include?(context.class)\n              preferred_name = nil\n              case klass\n              when Invoice\n                preferred_name = tenant.preferred_invoice_name\n              when Estimate\n                preferred_name = tenant.preferred_estimate_name\n              end\n              Utils::Pdf.new(tenant, klass, preferred_name).perform_single(context.id)\n            end\n\n            context.reload\n\n            if context.needs_pdf == false\n              pdf_url = Pdf.presigned_pdf(context)\n              file_name = \"#{context.invoice_number}.pdf\"\n              file_name = \"#{context.platform_id}.pdf\"  if file_name.blank?\n\n              begin\n                URI.parse(URI.encode(pdf_url, \"[]\"))\n              rescue URI::InvalidURIError\n                self.error = \"invalid_url\"\n              end\n\n              if error.blank?\n                downloaded_file = nil\n                begin\n                  downloaded_file = HTTParty.get(pdf_url)\n                  if downloaded_file.blank? || file_name.blank?\n                    self.error = \"invalid_file\"\n                  end\n                rescue Exception => e\n                  self.error = \"could_not_fetch_pdf_url\"\n                end\n\n                if error.blank?\n                  self.file_name = file_name\n                  self.inline = false if downloaded_file.size >= 20000000\n                  file_contents = downloaded_file.parsed_response\n                end\n              end\n            else\n              self.error = \"pdf_failed\"\n            end\n          end\n        else\n          self.error = \"invalid_context\"\n        end\n      when \"url\"\n        file_url = needs_asset[\"file_url\"]\n        if !file_url.blank?\n          url = file_url\n          file_name = needs_asset[\"file_name\"]\n          file_name = url.split(\"#\").shift.split(\"?\").shift.split(\"/\").pop if file_name.blank?\n          file_extension = File.extname(file_name)\n          if extension_blacklist.include?(file_extension)\n            self.error = \"file_type_not_allowed\"\n          else\n            begin\n              URI.parse(URI.encode(url, \"[]\"))\n            rescue URI::InvalidURIError\n              self.error = \"invalid_url\"\n            end\n\n            if error.blank?\n              downloaded_file = nil\n              begin\n                downloaded_file = HTTParty.get(url)\n                if downloaded_file.blank? || file_name.blank?\n                  self.error = \"invalid_file\"\n                elsif downloaded_file.size > max_size\n                  self.error = \"file_exceeds_size\"\n                end\n              rescue Exception => e\n                self.error = \"could_not_fetch_url\"\n              end\n\n              if error.blank?\n                self.file_name = file_name\n                self.inline = false if downloaded_file.size >= 20000000\n                file_contents = downloaded_file.parsed_response\n              end\n            end\n          end\n        else\n          self.error = \"invalid_url\"\n        end\n      when \"asset\"\n        attaching_asset_id = needs_asset[\"asset_id\"]\n        attaching_asset = Asset.where(tenant_id: tenant_id, id: attaching_asset_id).first if !attaching_asset_id.blank?\n        if attaching_asset\n          downloaded_file = HTTParty.get(URI.encode(attaching_asset.url, \"[]\"))\n          if downloaded_file.blank?\n            self.error = \"could_not_fetch_asset\"\n          elsif downloaded_file.size > max_size\n            self.error = \"file_exceeds_size\"\n          else\n            self.file_name = attaching_asset.file_name\n            self.inline = false if downloaded_file.size >= 20000000\n            file_contents = downloaded_file.parsed_response\n          end\n        else\n          self.error = \"invalid_asset\"\n        end\n      when \"job\"\n        invoice_id = needs_asset[\"invoice_id\"]\n        invoice = Invoice.where(id: invoice_id, tenant_id: tenant.id).first if !invoice_id.blank?\n        if invoice\n          downloaded_file = nil\n          url = \"#{tenant.report_url}/PrintSmith/reportservlet?invoiceTicket=EFI_jobTicket.rpt&reportParameter=#{invoice.platform_id}&showShippingCharges=false&showBarcode=true&ignoreSession=true\"\n          begin\n            downloaded_file = HTTParty.get(url)\n            if downloaded_file.blank?\n              self.error = \"job_ticket_invalid_file\"\n            elsif downloaded_file.size > max_size\n              self.error = \"file_exceeds_size\"\n            end\n          rescue Exception => e\n            self.error = \"could_not_fetch_job\"\n          end\n\n          if error.blank?\n            self.file_name = \"Job_Ticket_#{invoice.invoice_number}.pdf\"\n            self.inline = false if downloaded_file.size >= 20000000\n            file_contents = downloaded_file.parsed_response\n          end\n        else\n          self.error = \"invoice_not_found\"\n        end\n      when \"waybill\"\n        shipment_id = needs_asset[\"shipment_id\"]\n        mbe = needs_asset[\"mbe\"] || false\n        shipment = Shipment.where(id: shipment_id, tenant_id: tenant.id).first if !shipment_id.blank?\n        if shipment\n          waybill = nil\n          if mbe\n            waybill = Mbe::Api.new(tenant).shipment.mbe_waybill(shipment.platform_id)\n          else\n            waybill = Mbe::Api.new(tenant).shipment.waybill(shipment.platform_id)\n          end\n          if waybill\n            tracking = shipment.courier_tracking\n            tracking = shipment.mbe_tracking if tracking.blank?\n            self.file_name = \"WAYBILL-#{tracking}.pdf\"\n            self.file_name = \"MBE-WAYBILL-#{shipment.mbe_tracking}.pdf\" if mbe\n            self.inline = false if waybill.length >= 20000000\n            file_contents = waybill\n          else\n            self.error = \"waybill_could_not_fetch\"\n          end\n        else\n          self.error = \"shipment_not_found\"\n        end\n      else\n        self.error = \"request_unknown_asset_type\"\n      end\n\n      if error.blank?\n        if !file_contents.blank?\n          asset = Asset.new(tenant_id: tenant.id,\n                            enterprise_id: tenant.enterprise.id,\n                            category: \"Email Attachment\",\n                            new_file_contents: file_contents,\n                            new_file_name: self.file_name,\n                            context_type: \"PendingAttachment\",\n                            context_id: id)\n          if asset.save\n            self.complete = true\n          else\n            asset = nil\n            self.error = \"failed\"\n          end\n        else\n          self.error = \"empty_attachment\"\n        end\n      end\n    elsif complete\n      asset = Asset.where(context_type: \"PendingAttachment\", context_id: id).first\n      if !asset\n        self.error = \"missing_attachment\"\n      end\n    else\n      self.error = \"request_invalid_asset\"\n    end\n\n    save\n  end\n\n  def find_asset\n    Asset.where(context_type: \"PendingAttachment\", context_id: id).first\n  end\n\n  def destroy_asset\n    asset = find_asset\n    asset.destroy if asset\n  end\n\n  def self.process_pending_attachments(tenant)\n    pending_attachments = PendingAttachment.where(tenant: tenant, complete: false, error: nil).where(\"needs_asset IS NOT NULL AND needs_asset != ?\" , \"{}\").order(\"bulk ASC NULLS FIRST, created_at ASC\").limit(5)\n    pending_attachments.each do |pending_attachment|\n      pending_attachment.process_attachment\n    end\n\n    stale_attachments = PendingAttachment.where(tenant: tenant).where(\"created_at < ?\", 1.day.ago)\n    stale_attachments.each do |stale_attachment|\n      stale_attachment.destroy_asset\n      stale_attachment.destroy\n    end\n\n    stale_assets = Asset.where(tenant_id: tenant.id, context_type: \"PendingAttachment\").where(\"created_at < ?\", 1.day.ago)\n    stale_assets.each do |stale_asset|\n      stale_asset.destroy\n    end\n  end\n\n  ",
          "private": "private\n\n  def cleanup_temporary_files\n    begin\n      File.delete(path) if !path.blank?\n    rescue StandardError\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "process_pending_attachments",
                "scope": "public",
                "class_method": true,
                "arguments": "(tenant)"
              }
            ],
            "instance": [
              {
                "name": "process_attachment",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "find_asset",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "destroy_asset",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "cleanup_temporary_files",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "process_attachment",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "find_asset",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "destroy_asset",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_private": [
              {
                "name": "cleanup_temporary_files",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "phone_call",
        "name_plural": "phone_calls",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/phone_call.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass PhoneCall < ActiveRecord::Base\n  validates :subject, length: { maximum: 250 }\n\n  belongs_to :phoneable, polymorphic: true\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :contact\n  has_many :activities, dependent: :destroy\n\n  scope :contextual, lambda { |context| where(context_type: context.class, context_id: context.id) }\n\n  def self.internationalize_phone_number(number)\n    codes = {\n      \"us\" => \"1\",\n      \"au\" => \"61\",\n      \"ro\" => \"40\"\n    }\n    country_code = codes[RegionConfig.get_value(\"region\")]\n    # country_code = '40' #force country code\n\n    if country_code\n      number = Phony.normalize(number, cc: country_code)\n      # number = \"#{country_code}#{number}\" unless number.starts_with?(country_code)\n    end\n\n    number = Phony.normalize(number)\n    Phony.format(number, spaces: \"\")\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "contextual",
              "scope": "lambda { |context| where(context_type: context.class, context_id: context.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "phoneable",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "activities",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "subject",
              "raw_options": "length: { maximum: 250 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "portal_comment",
        "name_plural": "portal_comments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/portal_comment.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass PortalComment < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :context, polymorphic: true\n  belongs_to :tenant\n\n  def record_activity(contextual)\n    return if !id\n    return if !contextual\n\n    activity_attrs = {\n      tenant_id: contextual.tenant_id,\n      portal_comment_id: id,\n      activity_for: \"portal_comment\"\n    }\n\n    activity_attrs = Activity.add_contextual_attribute(activity_attrs, contextual)\n    Activity.create!(activity_attrs)\n  end\n\n  def commenter_name\n    return (name.blank? ? user.full_name : name) if user\n\n    name.blank? ? \"Customer\" : name\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "context",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "production_location",
        "name_plural": "production_locations",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/production_location.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ProductionLocation < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { where(deleted: false).order(\"orderby ASC NULLS LAST, name ASC\") }\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  # belongs_to :estimate\n  has_many :estimates, inverse_of: :production_location\n  has_many :invoices, inverse_of: :production_location\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false).order(\"orderby ASC NULLS LAST, name ASC\") }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "estimates",
              "options": {
                "inverse_of": "production_location"
              },
              "raw_options": "inverse_of: :production_location"
            },
            {
              "name": "invoices",
              "options": {
                "inverse_of": "production_location"
              },
              "raw_options": "inverse_of: :production_location"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "proof",
        "name_plural": "proofs",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/proof.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Proof < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :user\n  belongs_to :invoice\n\n  # CREATE INDEX CONCURRENTLY index_invoices_portal_key ON invoices (id ASC, portal_key, voided, deleted) WHERE (voided = FALSE OR voided IS NULL) AND deleted = FALSE\n\n  def asset\n    Asset.where(\n      tenant_id: tenant_id,\n      category: \"Proof\",\n      context_type: \"Proof\",\n      context_id: id,\n    ).first\n  end\n\n  def revision_proofs\n    Proof.where(\n      tenant_id: tenant_id,\n      invoice_id: invoice_id,\n      revision_of_id: id\n    ).order(created_at: :desc)\n  end\n\n  def latest_revision\n    revision = Proof.where(tenant_id: tenant_id,\n                           invoice_id: invoice_id,\n                           revision_of_id: id,\n                           approval_status: nil\n                          ).order(number: :desc).first\n    revision.nil? ? self : revision\n  end\n\n  def self.allowed_extensions\n    %w[pdf jpg jpeg png]\n  end\n\n  def display_status\n    result = \"\"\n    case approval_status\n    when \"approved\"\n      result = \"Approved\"\n    when \"revise\"\n      result = \"Changes Required\"\n    when \"pending\"\n      result = \"Awaiting Review\"\n    end\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "invoice",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "prospect_status_item_contact",
        "name_plural": "prospect_status_item_contacts",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status_item_contact.rb",
        "source": {
          "ruby": "class ProspectStatusItemContact < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :contact\n  belongs_to :prospect_status_item\n\n\n  enum activity_status: {\n    \"In Progress\": 2,\n    \"Completed\": 1,\n    \"Skipped\": 3\n  }\n\n  def trigger_next(current_user)\n    @next_item = prospect_status_item.lower_item\n\n    if @next_item.present?\n      # CURRENT STATUS NEXT ITEM\n      if !ProspectStatusItemContact.where(prospect_status_item_id: @next_item.id, contact_id:  contact_id, tenant_id: id).first\n        prospect_status_item_contact = ProspectStatusItemContact.create(\n          contact_id: contact_id,\n          start_date: Time.zone.now() + (@next_item.start_after_days.try(:days) || 0),\n          due_date: Time.zone.now() + (@next_item.start_after_days.try(:days) || 0) + @next_item.try(:completion_time).days,\n          prospect_status_item_id: @next_item.id,\n          tenant_id: tenant_id,\n          status: 2\n        )\n\n        prospect_status_item_contact.task_generate(current_user) if prospect_status_item_contact.prospect_status_item.item_type == \"Task\"\n        prospect_status_item_contact.meeting_generate(current_user) if prospect_status_item_contact.prospect_status_item.item_type == \"Meeting\"\n      end\n    else\n\n      # GET NEXT AVAILABLE STATUS\n      @next_status = contact.next_available_status\n\n      # FIX IF STATUS HAS NO ITEMS OR STATUS IS HIDDEN IN CURRENT LEAD TYPE\n      if @next_status.present?\n        @next_item = ProspectStatusItem.where(prospect_status_id: @next_status.id, lead_type_id: contact.lead_type_id).first\n\n        c = Contact.find(contact_id)\n        c.prospect_status_id =  @next_status.id\n        c.save\n      end\n\n      if @next_item.present?\n\n\n        if  !ProspectStatusItemContact.where(prospect_status_item_id: @next_item.id, contact_id:  contact_id, tenant_id: tenant_id).first\n          prospect_status_item_contact = ProspectStatusItemContact.create(\n            contact_id: contact_id,\n            start_date: Time.zone.now() + (@next_item.start_after_days.try(:days) || 0),\n            due_date: Time.zone.now() + (@next_item.start_after_days.try(:days) || 0)+ @next_item.try(:completion_time).days,\n            prospect_status_item_id: @next_item.id,\n            tenant_id: tenant_id,\n            status: 2\n          )\n\n          prospect_status_item_contact.task_generate(current_user) if prospect_status_item_contact.prospect_status_item.item_type == \"Task\"\n          prospect_status_item_contact.meeting_generate(current_user) if prospect_status_item_contact.prospect_status_item.item_type == \"Meeting\"\n        end\n\n      end\n\n\n    end\n\n    Contact.find(contact_id).compute_activity_progress\n  end\n\n  def task_generate(current_user)\n    task = Task.new\n    task.status = \"Open\"\n    task.name = prospect_status_item.name\n    task.description = translated_message(current_user, prospect_status_item.description) if prospect_status_item.description\n    task.taskable_type = \"Contact\"\n    task.taskable_id = contact_id\n    task.tenant_id = contact.tenant_id\n    task.prospect_status_item_contact_id = id\n    task.assigned_user_id = contact.try(:sales_rep).try(:user_id) || contact.try(:company).try(:sales_rep).try(:user_id)\n    task.user_id = current_user.id\n    task.start_date = start_date\n    task.end_date = due_date\n    task.save!\n\n    # RECORD ACTIVITY?\n    activity_attrs = {\n      user_id: current_user.id,\n      tenant_id: task.tenant_id,\n      task: task,\n      activity_for: \"task\"\n    }\n\n    activity_attrs = Activity.add_contextual_attribute(activity_attrs, task.taskable)\n\n    Activity.create!(activity_attrs)\n    # END RECORD\n  end\n\n  def meeting_generate(current_user)\n    meeting = Meeting.new\n    meeting.title = prospect_status_item.name\n\n    if prospect_status_item.description\n      meeting.note = translated_message(current_user, prospect_status_item.description)\n    else\n      meeting.note = \" \"\n    end\n\n    meeting.created_at = Time.zone.now\n    meeting.attendees.build(user_id: current_user.id)\n    meeting.attendees.build(contact_id: contact_id)\n\n    meeting.user_id = current_user.id\n    meeting.tenant_id = contact.tenant_id\n    meeting.context_id = contact_id\n    meeting.context_type = \"Contact\"\n    meeting.prospect_status_item_contact_id = id\n\n    meeting.start_date = start_date\n    meeting.end_date = due_date\n    meeting.status = \"draft\"\n\n    # meeting.calendar_needs_update = true\n    # meeting.update_calendar if @meeting.calendar_needs_update\n    # meeting.notify_creator\n\n    meeting.save!\n\n    # RECORD ACTIVITY?\n    activity_attrs = {\n      user_id: current_user.id,\n      tenant_id: meeting.tenant_id,\n      meeting_id: meeting.id,\n      activity_for: \"meeting_created\"\n    }\n    activity_attrs = Activity.add_contextual_attribute(activity_attrs, meeting.context)\n    Activity.create!(activity_attrs)\n    # END RECORD\n  end\n\n  def translated_message(current_user, message)\n    template_merger = TemplateMerger.new(self, current_user, tenant, try(:contact))\n    template_merger.translated_body(message)\n  end\nend",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_item",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "prospect_status_item",
        "name_plural": "prospect_status_items",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status_item.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ProspectStatusItem < ActiveRecord::Base\n  default_scope { order(position: :asc) }\n  acts_as_list scope: %i[lead_type_id prospect_status_id enterprise_id]\n\n  enum item_type: {\n    \"Email\": 0,\n    \"Call\": 1,\n    \"Task\": 2,\n    \"Meeting\": 3\n  }\n\n  belongs_to :enterprise\n  belongs_to :prospect_status\n  belongs_to :lead_type\n  belongs_to :email_template\n  has_many :prospect_status_item_contacts\n\n  # has_one :prospect_status_item_contact, -> (contact) { where(contact_id: contact.id) }\n\n  validates :name, presence: { message: \"Item name can't be blank (required).\" }\n  validates :name, length: { maximum: 250 }\n\n  scope :by_contact, -> (contact) {\n    joins(\"LEFT JOIN prospect_status_item_contacts ON prospect_status_item_contacts.prospect_status_item_id = prospect_status_items.id AND prospect_status_item_contacts.contact_id = #{ contact.id }\")\n  }\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\n\n  def prospect_status_item_contact(contact_id)\n    ProspectStatusItemContact.where(prospect_status_item_id: id, contact_id: contact_id).first\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(position: :asc) }",
          "scopes": [
            {
              "name": "by_contact",
              "scope": "-> (contact) {\n    joins(\"LEFT JOIN prospect_status_item_contacts ON prospect_status_item_contacts.prospect_status_item_id = prospect_status_items.id AND prospect_status_item_contacts.contact_id = #{ contact.id }\")  }"
            }
          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "email_template",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "prospect_status_item_contacts",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: { message: \"Item name can't be blank (required).\" }"
            },
            {
              "name": "name",
              "raw_options": "length: { maximum: 250 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "prospect_status_version",
        "name_plural": "prospect_status_versions",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status_version.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ProspectStatusVersion < ActiveRecord::Base\n  default_scope { order(version_no: :asc) }\n\n  enum status: { Live: 1, Draft: 2, Locked: 3 }\n\n  belongs_to :lead_type\n  has_many :prospect_statuses, dependent: :destroy\n  has_one :prospect_status\n\n  acts_as_list scope: :lead_type, column: \"version_no\"\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(version_no: :asc) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "prospect_status",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_many": [
            {
              "name": "prospect_statuses",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "prospect_status",
        "name_plural": "prospect_statuses",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/prospect_status.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ProspectStatus < ActiveRecord::Base\n  default_scope { order(position: :asc) }\n\n  belongs_to :enterprise\n  belongs_to :tenant, -> { where(enterprise_id: 0, lead_type_id: 0).order(name: :asc) }\n  belongs_to :lead_type\n  belongs_to :prospect_status_version\n  belongs_to :contact\n  has_many :prospect_status_items\n  has_one :enterprise_salestarget\n\n  # rubocop:disable Lint/InterpolationCheck\n  # @Discuss what is this about?\n  acts_as_list scope: 'lead_type_id = #{lead_type_id} AND tenant_id = #{tenant_id} AND prospect_status_version_id = #{prospect_status_version_id} AND enterprise_id = #{enterprise_id}'\n  # rubocop:enable Lint/InterpolationCheck\n\n  validates :name, presence: { message: \"Status name can't be blank (required).\" }\n  validates :name, length: { maximum: 250 }\n\n  validate :check_valid_lead_stage\n\n  def check_valid_lead_stage\n    if lead_type_id != 0 && ProspectStatus.where(lead_type_id: lead_type_id, name: name, prospect_status_version_id: prospect_status_version_id).first\n      errors.add(:name, \"lead stage is already created.\")\n    end\n  end\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\n\n  def sales_target(tenant)\n    Salestarget.where(tenant_id: tenant.id, target_type: 1, name: name, user_id: nil).first\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(position: :asc) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
                "a_lambda": "-> { where(enterprise_id: 0, lead_type_id: 0).order(name: :asc) }"
              },
              "raw_options": "a_lambda: '-> { where(enterprise_id: 0, lead_type_id: 0).order(name: :asc) }'"
            },
            {
              "name": "lead_type",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_version",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "enterprise_salestarget",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_many": [
            {
              "name": "prospect_status_items",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [
            {
              "line": ":check_valid_lead_stage"
            }
          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: { message: \"Status name can't be blank (required).\" }"
            },
            {
              "name": "name",
              "raw_options": "length: { maximum: 250 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "read_mark",
        "name_plural": "read_marks",
        "dsl_file": ""
      },
      {
        "name": "region_config",
        "name_plural": "region_configs",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/region_config.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass RegionConfig < ActiveRecord::Base\n  def self.get_value(option, default=nil)\n    result = nil\n    begin\n      result = RegionConfig.where(option: option).first.try(:value)\n    rescue StandardError\n    end\n    result = default if result.nil?\n    result\n  end\n\n  def self.require_value(option)\n    result = RegionConfig.get_value(option)\n    if result.nil?\n      raise \"Missing required region configuration option #{option}.\"\n    end\n    result\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "report_row",
        "name_plural": "report_rows",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/report_row.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass ReportRow < ActiveRecord::Base\n  belongs_to :report\n  default_scope { order(\"position ASC\") }\n  acts_as_list scope: :report\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(\"position ASC\") }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "report",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "report",
        "name_plural": "reports",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/report.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Report < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  belongs_to :user\n\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n  validates :name, presence: { message: \"Report name cannot be empty!\"}\n  has_many :report_row, -> { order(position: :asc) }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "report_row",
              "options": {
                "a_lambda": "-> { order(position: :asc) }"
              },
              "raw_options": "a_lambda: '-> { order(position: :asc) }'"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            },
            {
              "name": "name",
              "raw_options": "presence: { message: \"Report name cannot be empty!\"}"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_base_tax",
        "name_plural": "sales_base_taxes",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_base_tax.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SalesBaseTax < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { where(deleted: false) }\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_category",
        "name_plural": "sales_categories",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_category.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SalesCategory < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_rep_update",
        "name_plural": "sales_rep_updates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_rep_update.rb",
        "source": {
          "ruby": "class SalesRepUpdate < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  belongs_to :sales_rep, **belongs_to_required\n  validates :sales_rep, presence: { message: \"must exist\" } if rails4?\n\n  def update_contexts\n    target_sales_rep = SalesRep.unscoped.find(sales_rep_id)\n    invoices_query = %Q{\n      UPDATE invoices\n      SET sales_rep_user_id = #{target_sales_rep.user_id || 'NULL'}, location_user_id = #{target_sales_rep.location_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND sales_rep_platform_id = '#{target_sales_rep.platform_id}'\n    }\n\n    estimates_query = %Q{\n      UPDATE estimates\n      SET sales_rep_user_id = #{target_sales_rep.user_id || 'NULL'}, location_user_id = #{target_sales_rep.location_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND sales_rep_platform_id = '#{target_sales_rep.platform_id}'\n    }\n\n    shipments_query = %Q{\n      UPDATE shipments\n      SET sales_rep_user_id = #{target_sales_rep.user_id || 'NULL'}, location_user_id = #{target_sales_rep.location_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND sales_rep_platform_id = '#{target_sales_rep.platform_id}'\n    }\n\n    contacts_query = %Q{\n      UPDATE contacts\n      SET sales_rep_user_id = #{target_sales_rep.user_id || 'NULL'}, location_user_id = #{target_sales_rep.location_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND sales_rep_platform_id = '#{target_sales_rep.platform_id}'\n    }\n\n    companies_query = %Q{\n      UPDATE companies\n      SET sales_rep_user_id = #{target_sales_rep.user_id || 'NULL'}, location_user_id = #{target_sales_rep.location_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND sales_rep_platform_id = '#{target_sales_rep.platform_id}'\n    }\n\n    adjustments_query = %Q{\n      UPDATE adjustments\n      SET sales_rep_user_id = #{target_sales_rep.user_id || 'NULL'}, location_user_id = #{target_sales_rep.location_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND (\n        invoice_id IN (\n          SELECT id\n          FROM invoices\n          WHERE tenant_id = #{tenant.id}\n          AND sales_rep_platform_id = '#{target_sales_rep.platform_id} '\n        )\n        OR\n        company_id IN (\n          SELECT id\n          FROM companies\n          WHERE tenant_id = #{tenant.id}\n          AND sales_rep_platform_id = '#{target_sales_rep.platform_id} '\n        )\n      )\n    }\n\n    ActiveRecord::Base.connection.execute(invoices_query)\n    ActiveRecord::Base.connection.execute(estimates_query)\n    ActiveRecord::Base.connection.execute(contacts_query)\n    ActiveRecord::Base.connection.execute(companies_query)\n    ActiveRecord::Base.connection.execute(adjustments_query)\n\n    delete\n  end\n\n  def self.update_sales_reps\n    SalesRepUpdate.all.order(created_at: :asc).each do |sales_rep_update|\n      sales_rep_update.update_contexts\n    end\n  end\n\n  # SalesRepUpdate.create!(tenant_id: tenant.id, sales_rep_id: sales_rep.id)\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "sales_rep",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            },
            {
              "name": "sales_rep",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_rep",
        "name_plural": "sales_reps",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_rep.rb",
        "source": {
          "ruby": "class SalesRep < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  # default_scope { where(deleted: false) }\n  belongs_to :user\n  belongs_to :location\n\n  has_many :estimates\n  has_many :invoices\n  has_many :shipments\n\n  def first_name\n    name.split(\" \")[0]\n  end\n\n  def send_change_sales_rep_email(host, current_user, context_name, leads)\n    return unless try(:user).present?\n    return unless Platform.is_printsmith?(self)\n\n    email = try(:user).tenant_email(tenant)\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(email) unless test_mode_if_required(email).blank?\n    return unless to_addrs.count > 0\n\n    if Platform.is_printsmith?(current_user)\n      send_mail(host, self, current_user, leads, context_name, to_addrs, \"Print Speak: New #{context_name} Lead Assignment from #{current_user.full_name}\")\n    end\n  end\n\n  def send_mail(host, sale_rep, current_user, leads, context_name, addresses, email_subject, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(\n        addresses,\n        email_subject,\n        Emails::Salesrep.new.change_sales_rep(sale_rep, current_user, context_name, leads, tenant, host),\n        source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  private\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\nend\n",
          "public": "class SalesRep < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  # default_scope { where(deleted: false) }\n  belongs_to :user\n  belongs_to :location\n\n  has_many :estimates\n  has_many :invoices\n  has_many :shipments\n\n  def first_name\n    name.split(\" \")[0]\n  end\n\n  def send_change_sales_rep_email(host, current_user, context_name, leads)\n    return unless try(:user).present?\n    return unless Platform.is_printsmith?(self)\n\n    email = try(:user).tenant_email(tenant)\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(email) unless test_mode_if_required(email).blank?\n    return unless to_addrs.count > 0\n\n    if Platform.is_printsmith?(current_user)\n      send_mail(host, self, current_user, leads, context_name, to_addrs, \"Print Speak: New #{context_name} Lead Assignment from #{current_user.full_name}\")\n    end\n  end\n\n  def send_mail(host, sale_rep, current_user, leads, context_name, addresses, email_subject, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(\n        addresses,\n        email_subject,\n        Emails::Salesrep.new.change_sales_rep(sale_rep, current_user, context_name, leads, tenant, host),\n        source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  ",
          "private": "private\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [

            ],
            "instance": [
              {
                "name": "first_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_change_sales_rep_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, current_user, context_name, leads)"
              },
              {
                "name": "send_mail",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, sale_rep, current_user, leads, context_name, addresses, email_subject, source_email = \"support@printspeak.com\")"
              },
              {
                "name": "test_mode_if_required",
                "scope": "private",
                "class_method": false,
                "arguments": "(email_address)"
              }
            ],
            "instance_public": [
              {
                "name": "first_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_change_sales_rep_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, current_user, context_name, leads)"
              },
              {
                "name": "send_mail",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, sale_rep, current_user, leads, context_name, addresses, email_subject, source_email = \"support@printspeak.com\")"
              }
            ],
            "instance_private": [
              {
                "name": "test_mode_if_required",
                "scope": "private",
                "class_method": false,
                "arguments": "(email_address)"
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "location",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "estimates",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "invoices",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "shipments",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_summary",
        "name_plural": "sales_summaries",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_summary.rb",
        "source": {
          "ruby": "class SalesSummary < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { where(isdeleted: false, deleted: false) }\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  # Indexes\n  # CREATE INDEX CONCURRENTLY index_invoices_tenant_platform_id_voided ON invoices (tenant_id, platform_id, voided, id) WHERE (voided = FALSE OR voided IS NULL);\n  # CREATE INDEX CONCURRENTLY index_account_history_data_source_invoice ON account_history_data (tenant_id, source_invoice_id, platform_id, recordType) WHERE recordType = '1';\n  # CREATE INDEX CONCURRENTLY index_sales_summary_source_account_history_item ON sales_summary_pickups (tenant_id, source_account_history_item_id, source_sales_summary_id, deleted) WHERE deleted = FALSE;\n  # CREATE INDEX CONCURRENTLY index_sales_summaries_tenant_platform_id_not_deleted ON sales_summaries (tenant_id, platform_id, deleted, id) WHERE deleted = FALSE;\n  # CREATE INDEX CONCURRENTLY index_adjustments_affect_sales ON adjustments (affect_sales, deleted, voided, id) WHERE affect_sales = TRUE AND deleted = FALSE AND voided = FALSE;\n  # CREATE INDEX CONCURRENTLY index_invoices_sales_summary_id_pickup_date ON invoices (sales_summary_id, pickup_date) WHERE sales_summary_id IS NOT NULL;\n  # CREATE INDEX CONCURRENTLY index_adjustments_sales_summary_id_posted_date ON adjustments (sales_summary_id, posted_date) WHERE sales_summary_id IS NOT NULL;\n  # CREATE INDEX CONCURRENTLY index_invoices_daily_sales_summary_id_totals ON invoices (daily_sales_summary_id, grand_total, rounded_amount);\n  # CREATE INDEX CONCURRENTLY index_invoices_sales_summary_id_totals ON invoices (sales_summary_id, grand_total, rounded_amount);\n  # CREATE INDEX CONCURRENTLY index_adjustments_daily_sales_summary_id_totals ON adjustments (daily_sales_summary_id, total);\n\n  def is_valid?\n    result = false\n\n    if !isdeleted && !deleted\n      if monthly && !accounting_year.nil?\n        result = true\n      end\n\n      if daily && !daily_accounting_year.nil?\n        result = true\n      end\n    end\n\n    result\n  end\n\n  def perform_closeout\n    return nil if !is_valid?\n\n    now = Time.zone.now\n    now_in_timezone = now.in_time_zone(tenant.time_zone)\n\n    start_date = now\n    end_date = now\n\n    if daily\n      start_date = closeoutdate.to_datetime.in_time_zone(tenant.time_zone).beginning_of_day.utc\n      end_date = closeoutdate.to_datetime.in_time_zone(tenant.time_zone).end_of_day.utc\n    end\n\n    if monthly\n      start_date = closeoutdate.to_datetime.in_time_zone(tenant.time_zone).beginning_of_month.utc\n      end_date = closeoutdate.to_datetime.in_time_zone(tenant.time_zone).end_of_month.utc\n    end\n\n    invoices_platform_conditions = nil\n    if Platform.is_printsmith?(tenant)\n      invoices_platform_conditions = %Q{\n        AND EXISTS (\n          SELECT null\n          FROM account_history_data\n          WHERE account_history_data.tenant_id = #{tenant_id}\n          AND account_history_data.recordType = '1'\n          AND account_history_data.source_invoice_id::TEXT = invoices.platform_id\n          AND EXISTS (\n            SELECT null\n            FROM sales_summary_pickups\n            WHERE sales_summary_pickups.tenant_id = #{tenant_id}\n            AND sales_summary_pickups.deleted = FALSE\n            AND sales_summary_pickups.source_account_history_item_id::TEXT = account_history_data.platform_id\n            AND EXISTS (\n              SELECT null\n              FROM sales_summaries\n              WHERE sales_summaries.tenant_id = #{tenant_id}\n              AND sales_summaries.deleted = FALSE\n              AND sales_summaries.platform_id = sales_summary_pickups.source_sales_summary_id::TEXT\n              AND sales_summaries.id = #{id}\n            )\n          )\n        )\n      }\n    elsif Platform.is_mbe?(tenant)\n      invoices_platform_conditions = %Q{\n        AND pickup_date > #{ActiveRecord::Base::sanitize(start_date)}\n        AND pickup_date <= #{ActiveRecord::Base::sanitize(end_date)}\n      }\n    end\n\n    select_invoices_query = %Q{\n      SELECT invoices.id\n      FROM invoices\n      WHERE invoices.tenant_id = #{tenant_id}\n      AND (\n        invoices.voided = FALSE\n        OR invoices.voided IS NULL\n      )\n      #{invoices_platform_conditions}\n      ORDER BY invoices.id ASC\n    }\n\n    adjustments_platform_conditions = nil\n    if Platform.is_printsmith?(tenant)\n      adjustments_platform_conditions = %Q{\n        AND EXISTS (\n          SELECT null\n          FROM account_history_data\n          WHERE account_history_data.tenant_id = #{tenant_id}\n          AND account_history_data.recordType = '3'\n          AND account_history_data.source_journal_id::TEXT = adjustments.platform_id\n          AND EXISTS (\n            SELECT null\n            FROM sales_summary_pickups\n            WHERE sales_summary_pickups.tenant_id = #{tenant_id}\n            AND sales_summary_pickups.deleted = FALSE\n            AND sales_summary_pickups.source_account_history_item_id::TEXT = account_history_data.platform_id\n            AND EXISTS (\n              SELECT null\n              FROM sales_summaries\n              WHERE sales_summaries.tenant_id = #{tenant_id}\n              AND sales_summaries.deleted = FALSE\n              AND sales_summaries.platform_id = sales_summary_pickups.source_sales_summary_id::TEXT\n              AND sales_summaries.id = #{id}\n            )\n          )\n        )\n      }\n    end\n\n    select_adjustments_query = %Q{\n      SELECT adjustments.id\n      FROM adjustments\n      WHERE adjustments.tenant_id = #{tenant_id}\n      AND adjustments.affect_sales = TRUE\n      AND adjustments.deleted = FALSE\n      AND adjustments.voided = FALSE\n      #{adjustments_platform_conditions}\n      ORDER BY adjustments.id ASC\n    }\n\n    select_shipments_query = %Q{\n      SELECT shipments.id\n      FROM shipments\n      WHERE shipments.tenant_id = #{tenant_id}\n      AND shipments.deleted = FALSE\n      AND shipments.voided = FALSE\n      AND shipment_date > #{ActiveRecord::Base::sanitize(start_date)}\n      AND shipment_date <= #{ActiveRecord::Base::sanitize(end_date)}\n      ORDER BY shipments.id ASC\n    }\n\n\n    self.attempts += 1\n    invoice_values = nil\n\n    if monthly\n      invoice_values = %Q{\n        accounting_month = #{accounting_month},\n        accounting_year = #{accounting_year},\n        sales_summary_id = #{id}\n      }\n    end\n\n    if daily\n      invoice_values = %Q{\n        daily_accounting_day = #{daily_accounting_day},\n        daily_accounting_month = #{daily_accounting_month},\n        daily_accounting_year = #{daily_accounting_year},\n        daily_sales_summary_id = #{id}\n      }\n    end\n\n    if !invoice_values.blank?\n      invoice_ids_result = ActiveRecord::Base.connection.execute(select_invoices_query)\n\n      if invoice_ids_result\n        invoice_ids = invoice_ids_result.map { |i| i[\"id\"].to_i }\n        if invoice_ids.count > 0\n          update_invoices_query = %Q{\n            UPDATE invoices\n            SET #{invoice_values}\n            WHERE invoices.id IN (\n              #{invoice_ids.to_csv}\n            )\n          }\n          ActiveRecord::Base.connection.execute(update_invoices_query)\n\n          self.invoice_count = invoice_ids.count\n          save\n        end\n      end\n    end\n\n    adjustment_values = nil\n\n    if monthly\n      adjustment_values = %Q{\n        accounting_month = #{accounting_month},\n        accounting_year = #{accounting_year},\n        sales_summary_id = #{id}\n      }\n    end\n\n    if daily\n      adjustment_values = %Q{\n        daily_accounting_day = #{daily_accounting_day},\n        daily_accounting_month = #{daily_accounting_month},\n        daily_accounting_year = #{daily_accounting_year},\n        daily_sales_summary_id = #{id}\n      }\n    end\n\n    if !adjustment_values.blank? && Platform.is_printsmith?(tenant)\n      adjustment_ids_result = ActiveRecord::Base.connection.execute(select_adjustments_query)\n\n      if adjustment_ids_result\n        adjustment_ids = adjustment_ids_result.map { |i| i[\"id\"].to_i }\n        if adjustment_ids.count > 0\n          update_adjustments_query = %Q{\n            UPDATE adjustments\n            SET #{adjustment_values}\n            WHERE adjustments.id IN (\n              #{adjustment_ids.to_csv}\n            )\n          }\n\n          ActiveRecord::Base.connection.execute(update_adjustments_query)\n        end\n      end\n    end\n\n    shipment_values = nil\n\n    if monthly\n      shipment_values = %Q{\n        accounting_month = #{accounting_month},\n        accounting_year = #{accounting_year},\n        sales_summary_id = #{id}\n      }\n    end\n\n    if daily\n      shipment_values = %Q{\n        daily_accounting_day = #{daily_accounting_day},\n        daily_accounting_month = #{daily_accounting_month},\n        daily_accounting_year = #{daily_accounting_year},\n        daily_sales_summary_id = #{id}\n      }\n    end\n\n    if !shipment_values.blank?\n      shipment_ids_result = ActiveRecord::Base.connection.execute(select_shipments_query)\n\n      if shipment_ids_result\n        shipment_ids = shipment_ids_result.map { |i| i[\"id\"].to_i }\n        if shipment_ids.count > 0\n          update_shipments_query = %Q{\n            UPDATE shipments\n            SET #{shipment_values}\n            WHERE shipments.id IN (\n              #{shipment_ids.to_csv}\n            )\n          }\n          ActiveRecord::Base.connection.execute(update_shipments_query)\n        end\n      end\n    end\n\n\n    if daily\n      daily_sales_stats = generate_sales_stats\n      daily_sales = daily_sales_stats.try(:[], :total) || 0\n      difference = balanced_sales - daily_sales\n      self.difference = difference\n      if difference.abs <= 100\n        self.complete = true\n        self.accurate = true\n      else\n        self.complete = false\n        if self.attempts <= 10\n          Event.queue(tenant, \"sales_summary_perform_closeout\", data: {sales_summary_id: id}, schedule_date: Time.now + (5.minutes * (self.attempts * self.attempts)), unique_for: [\"scheduled\"])\n        end\n      end\n      save\n    end\n\n    if monthly\n      monthly_sales_stats = generate_sales_stats\n      monthly_sales = 0\n      monthly_sales = monthly_sales_stats.try(:[], :total) || 0\n      difference = balanced_sales - monthly_sales\n      self.difference = difference\n      if difference.abs <= 100\n        self.complete = true\n        self.accurate = true\n      else\n        self.complete = false\n        if self.attempts <= 10\n          Event.queue(tenant, \"sales_summary_perform_closeout\", data: {sales_summary_id: id}, schedule_date: Time.now + (5.minutes * (self.attempts * self.attempts)), unique_for: [\"scheduled\"])\n        end\n      end\n      save\n    end\n\n    nil\n  end\n\n  def generate_sales_stats\n    result = nil\n    now = Time.zone.now\n    now_in_timezone = now.in_time_zone(tenant.time_zone)\n\n    if daily\n      start_date = closeoutdate.to_datetime.in_time_zone(tenant.time_zone).beginning_of_day.utc\n      end_date = closeoutdate.to_datetime.in_time_zone(tenant.time_zone).end_of_day.utc\n\n      daily_invoices_query = %Q{\n        SELECT ROUND(COALESCE(SUM(invoices.grand_total), 0), 2) AS invoice_sales, ROUND(COALESCE(SUM(invoices.rounded_amount), 0), 2) AS markups\n        FROM invoices\n        WHERE invoices.daily_sales_summary_id = #{id}\n      }\n      daily_invoices = ActiveRecord::Base.connection.execute(daily_invoices_query).first\n\n      daily_adjustments_query = %Q{\n        SELECT ROUND(COALESCE(SUM(adjustments.total), 0), 2) AS total, ROUND(COALESCE(SUM(adjustments.markups), 0), 2) AS markups\n        FROM adjustments\n        WHERE adjustments.daily_sales_summary_id = #{id}\n      }\n      daily_adjustments = ActiveRecord::Base.connection.execute(daily_adjustments_query).first\n\n      daily_sales_base_taxes_query = %Q{\n        SELECT ROUND(COALESCE(SUM(CASE WHEN sales_base_taxes.source_type IN (7, 8) THEN (sales_base_taxes.total_taxable + sales_base_taxes.total_non_taxable) ELSE 0 END), 0), 2) AS cash_sales, ROUND(COALESCE(SUM(CASE WHEN sales_base_taxes.source_type = 12 THEN (sales_base_taxes.total_taxable + sales_base_taxes.total_non_taxable) ELSE 0 END), 0), 2) AS finance_charges\n        FROM sales_base_taxes\n        INNER JOIN sales_summaries ON sales_summaries.platform_id = sales_base_taxes.source_sales_base_id::TEXT\n        WHERE sales_base_taxes.tenant_id = #{tenant_id}\n        AND sales_summaries.isdeleted = FALSE\n        AND sales_base_taxes.source_type IN (7, 8, 12)\n        AND sales_summaries.daily = TRUE\n        AND sales_base_taxes.posted_date >= '#{start_date}'::timestamp\n        AND sales_base_taxes.posted_date < ('#{start_date}'::timestamp + interval '1 day')::timestamp\n      }\n      daily_sales_base_taxes = ActiveRecord::Base.connection.execute(daily_sales_base_taxes_query).first\n\n      total_finance_charges = 0.0\n      total_finance_charges = daily_sales_base_taxes[\"finance_charges\"].to_f if !tenant.exclude_non_sales\n\n      result = {\n        invoice_sales: daily_invoices[\"invoice_sales\"].to_f,\n        adjustments: daily_adjustments[\"total\"].to_f - daily_adjustments[\"markups\"].to_f,\n        markups: daily_invoices[\"markups\"].to_f + daily_adjustments[\"markups\"].to_f,\n        cash_sales: daily_sales_base_taxes[\"cash_sales\"].to_f,\n        finance_charges: daily_sales_base_taxes[\"finance_charges\"].to_f,\n        total: daily_invoices[\"invoice_sales\"].to_f + daily_adjustments[\"total\"].to_f + daily_invoices[\"markups\"].to_f + daily_sales_base_taxes[\"cash_sales\"].to_f + total_finance_charges\n      }\n    end\n\n    if monthly\n      first_date = nil\n      last_date = nil\n      last_closeout = nil\n      invoices_accounting_date_condition = \"\"\n      adjustments_accounting_date_condition = \"\"\n      sales_base_tax_accounting_date_condition = \"\"\n\n      if accounting_year == 0\n        invoices_accounting_date_condition = %Q{\n          AND invoices.accounting_month IS NULL\n          AND invoices.accounting_year IS NULL\n        }\n        adjustments_accounting_date_condition = %Q{\n          AND adjustments.accounting_month IS NULL\n          AND adjustments.accounting_year IS NULL\n        }\n        sales_base_tax_accounting_date_condition = %Q{\n          AND sales_summaries.daily = TRUE\n        }\n\n        last_closeout = SalesSummary.most_recent_monthly_closeout(tenant).try(:closeoutdate).try(:to_datetime)\n\n        if last_closeout && now_in_timezone.year == last_closeout.in_time_zone(tenant.time_zone).year && now_in_timezone.month == last_closeout.in_time_zone(tenant.time_zone).month\n          second_to_last_closeout = SalesSummary.second_most_recent_monthly_closeout(tenant).try(:closeoutdate).try(:to_datetime)\n          invoices_accounting_date_condition = %Q{\n            AND (\n              (\n                invoices.accounting_month IS NULL\n                AND invoices.accounting_year IS NULL\n              )\n              OR\n              (\n                invoices.accounting_month = #{now_in_timezone.month}\n                AND invoices.accounting_year = #{now_in_timezone.year}\n              )\n            )\n          }\n          adjustments_accounting_date_condition = %Q{\n            AND (\n              (\n                adjustments.accounting_month IS NULL\n                AND adjustments.accounting_year IS NULL\n              )\n              OR\n              (\n                adjustments.accounting_month = #{now_in_timezone.month}\n                AND adjustments.accounting_year = #{now_in_timezone.year}\n              )\n            )\n          }\n        end\n\n        if second_to_last_closeout\n          first_date = second_to_last_closeout\n        else\n          first_date = now_in_timezone.beginning_of_month.utc\n        end\n        last_date = now_in_timezone.beginning_of_day.utc + 1.day\n      else\n        invoices_accounting_date_condition = %Q{\n          AND invoices.accounting_month = #{accounting_month}\n          AND invoices.accounting_year = #{accounting_year}\n        }\n        adjustments_accounting_date_condition = %Q{\n          AND adjustments.accounting_month = #{accounting_month}\n          AND adjustments.accounting_year = #{accounting_year}\n        }\n        shipments_accounting_date_condition = %Q{\n          AND shipments.accounting_month = #{accounting_month}\n          AND shipments.accounting_year = #{accounting_year}\n        }\n        sales_base_tax_accounting_date_condition = %Q{\n          AND sales_summaries.monthly = TRUE\n          AND sales_base_taxes.source_sales_base_id = #{platform_id.blank? ? 0 : platform_id}\n        }\n\n        invoice_dates_query = %Q{\n          SELECT MIN(invoices.pickup_date) AS first_date, MAX(invoices.pickup_date) AS last_date\n          FROM invoices\n          WHERE invoices.sales_summary_id = #{id}\n        }\n        invoice_dates = ActiveRecord::Base.connection.execute(invoice_dates_query).first\n        if !invoice_dates[\"first_date\"].blank?\n          first_date = invoice_dates[\"first_date\"].to_datetime\n        end\n        if !invoice_dates[\"last_date\"].blank?\n          last_date = invoice_dates[\"last_date\"].to_datetime\n        end\n\n        adjustment_dates_query = %Q{\n          SELECT MIN(adjustments.posted_date) AS first_date, MAX(adjustments.posted_date) AS last_date\n          FROM adjustments\n          WHERE adjustments.sales_summary_id = #{id}\n        }\n        adjustment_dates = ActiveRecord::Base.connection.execute(adjustment_dates_query).first\n        if !adjustment_dates[\"first_date\"].blank? && (first_date.blank? || (!first_date.blank? && adjustment_dates[\"first_date\"].to_datetime < first_date))\n          first_date = adjustment_dates[\"first_date\"].to_datetime\n        end\n        if !adjustment_dates[\"last_date\"].blank? && (last_date.blank? || (!last_date.blank? && adjustment_dates[\"last_date\"].to_datetime > last_date))\n          last_date = adjustment_dates[\"last_date\"].to_datetime\n        end\n\n        if first_date.blank?\n          first_date = closeoutdate.to_datetime\n        end\n\n        if last_date.blank?\n          last_date = closeoutdate.to_datetime\n        end\n      end\n\n      first_date = first_date.in_time_zone(tenant.time_zone).beginning_of_day.utc\n      last_date = last_date.in_time_zone(tenant.time_zone).end_of_day.utc\n\n      daily_stats_query = %Q{\n        SELECT sales_for_date.date AS date,\n               sales.total AS invoice_sales,\n               sales.invoiced_sales AS invoiced_sales,\n               sales.deferred_sales AS deferred_sales,\n               shipments.total AS shipments_total,\n               orders.total AS order_intake,\n               sales.markups AS markups,\n               adjustments.total AS adjustments_total,\n               adjustments.markups AS adjustment_markups,\n               outside_adjustments.total AS outside_adjustments_total,\n               outside_adjustments.markups AS outside_adjustment_markups,\n               base_taxes.cash_sales AS cash_sales,\n               base_taxes.finance_charges AS finance_charges\n        FROM (\n          SELECT sales_for_date AS date\n          FROM GENERATE_SERIES(timestamp '#{first_date}', '#{last_date}', interval '1 day') sales_for_date\n        ) sales_for_date\n        LEFT JOIN LATERAL (\n          SELECT ROUND(COALESCE(SUM(invoices.grand_total), 0), 2) AS total,\n                 ROUND(COALESCE(SUM(invoices.rounded_amount), 0), 2) AS markups,\n                 ROUND(COALESCE(SUM(CASE WHEN #{Invoice.INVOICED} THEN COALESCE(invoices.grand_total, 0) ELSE 0 END), 0), 2) AS invoiced_sales,\n                 ROUND(COALESCE(SUM(CASE WHEN #{Invoice.DEFERRED} THEN COALESCE(invoices.grand_total, 0) ELSE 0 END), 0), 2) AS deferred_sales\n          FROM invoices\n          WHERE invoices.tenant_id = #{tenant_id}\n          AND invoices.voided = FALSE\n          AND invoices.deleted = FALSE\n          #{invoices_accounting_date_condition}\n          AND invoices.pickup_date >= sales_for_date.date::timestamp\n          AND invoices.pickup_date < (sales_for_date.date + interval '1 day')::timestamp\n        ) sales ON TRUE\n        LEFT JOIN LATERAL (\n          SELECT ROUND(COALESCE(SUM(shipments.grand_total), 0), 2) AS total\n          FROM shipments\n          WHERE shipments.tenant_id = #{tenant_id}\n          AND shipments.voided = FALSE\n          AND shipments.deleted = FALSE\n          #{shipments_accounting_date_condition}\n          AND shipments.shipment_date >= sales_for_date.date::timestamp\n          AND shipments.shipment_date < (sales_for_date.date + interval '1 day')::timestamp\n        ) shipments ON TRUE\n        LEFT JOIN LATERAL (\n          SELECT ROUND(COALESCE(SUM(invoices.grand_total), 0), 2) AS total\n          FROM invoices\n          WHERE invoices.tenant_id = #{tenant_id}\n          AND invoices.voided = FALSE\n          AND invoices.deleted = FALSE\n          AND invoices.ordered_date >= sales_for_date.date::timestamp\n          AND invoices.ordered_date < (sales_for_date.date + interval '1 day')::timestamp\n        ) orders ON TRUE\n        LEFT JOIN LATERAL (\n          SELECT ROUND(COALESCE(SUM(adjustments.total), 0), 2) AS total,\n                 ROUND(COALESCE(SUM(adjustments.markups), 0), 2) AS markups\n          FROM adjustments\n          WHERE adjustments.tenant_id = #{tenant_id}\n          AND adjustments.voided = FALSE\n          AND adjustments.deleted = FALSE\n          AND adjustments.affect_sales = TRUE\n          #{adjustments_accounting_date_condition}\n          AND adjustments.posted_date >= sales_for_date.date::timestamp\n          AND adjustments.posted_date < (sales_for_date.date + interval '1 day')::timestamp\n        ) adjustments ON TRUE\n        LEFT JOIN LATERAL (\n          SELECT ROUND(COALESCE(SUM(adjustments.total), 0), 2) AS total,\n                 ROUND(COALESCE(SUM(adjustments.markups), 0), 2) AS markups\n          FROM adjustments\n          WHERE adjustments.tenant_id = #{tenant_id}\n          AND adjustments.voided = FALSE\n          AND adjustments.deleted = FALSE\n          AND adjustments.affect_sales = TRUE\n          #{adjustments_accounting_date_condition}\n          AND adjustments.posted_date >= '#{last_date}'\n          AND adjustments.posted_date < '#{first_date}'\n          AND sales_for_date.date = '#{first_date}'\n        ) outside_adjustments ON TRUE\n        LEFT JOIN LATERAL (\n          SELECT ROUND(COALESCE(SUM(CASE WHEN sales_base_taxes.source_type IN (7, 8) THEN (sales_base_taxes.total_taxable + sales_base_taxes.total_non_taxable) ELSE 0 END), 0), 2) AS cash_sales,\n                 ROUND(COALESCE(SUM(CASE WHEN sales_base_taxes.source_type = 12 THEN (sales_base_taxes.total_taxable + sales_base_taxes.total_non_taxable) ELSE 0 END), 0), 2) AS finance_charges\n          FROM sales_base_taxes\n          INNER JOIN sales_summaries ON sales_summaries.platform_id = sales_base_taxes.source_sales_base_id::TEXT\n          WHERE sales_base_taxes.tenant_id = #{tenant_id}\n          AND sales_summaries.isdeleted = FALSE\n          #{sales_base_tax_accounting_date_condition}\n          AND sales_base_taxes.source_type IN (7, 8, 12)\n          AND sales_base_taxes.posted_date >= sales_for_date.date::timestamp\n          AND sales_base_taxes.posted_date < (sales_for_date.date + interval '1 day')::timestamp\n        ) base_taxes ON TRUE\n      }\n\n      monthly_stats = {\n        invoice_sales: 0,\n        adjustments: 0,\n        markups: 0,\n        cash_sales: 0,\n        finance_charges: 0,\n        total: 0,\n        order_intake: 0,\n        invoiced_sales: 0,\n        deferred_sales: 0,\n        shipments: 0\n      }\n      daily_stat_ids = []\n      daily_stats = ActiveRecord::Base.connection.execute(daily_stats_query)\n      daily_stats.each do |daily_stat|\n        date_in_time_zone = daily_stat[\"date\"].to_datetime.in_time_zone(tenant.time_zone)\n        sales_stat = Statistic.find_or_initialize_by(\n          tenant: tenant,\n          statistic_for: \"PS-DAY\",\n          date: date_in_time_zone.to_date,\n          accounting_month: accounting_month,\n          accounting_year: accounting_year\n        )\n        sales_stat.invoice_sales = daily_stat[\"invoice_sales\"].to_f\n        sales_stat.invoiced_sales = daily_stat[\"invoiced_sales\"].to_f\n        sales_stat.deferred_sales = daily_stat[\"deferred_sales\"].to_f\n        sales_stat.shipments = daily_stat[\"shipments_total\"].to_f\n        sales_stat.order_intake = daily_stat[\"order_intake\"].to_f\n        sales_stat.adjustments = (daily_stat[\"adjustments_total\"].to_f - daily_stat[\"adjustment_markups\"].to_f) + (daily_stat[\"outside_adjustments_total\"].to_f - daily_stat[\"outside_adjustment_markups\"].to_f)\n        sales_stat.markups = daily_stat[\"markups\"].to_f + daily_stat[\"adjustment_markups\"].to_f + daily_stat[\"outside_adjustment_markups\"].to_f\n        sales_stat.cash_sales = daily_stat[\"cash_sales\"].to_f\n        sales_stat.finance_charges = daily_stat[\"finance_charges\"].to_f\n\n        if accounting_year == 0 && date_in_time_zone.to_date == now_in_timezone.to_date\n          begin\n            sales_stat.cash_sales += CashSale.current_non_closed_out_cash_sales(tenant, first_date.in_time_zone(tenant.time_zone), last_date.in_time_zone(tenant.time_zone))\n            sales_stat.finance_charges += FinanceCharge.current_non_closed_out_finance_charges(tenant, first_date.in_time_zone(tenant.time_zone), last_date.in_time_zone(tenant.time_zone))\n          rescue StandardError\n          end\n        end\n\n        if Platform.is_printsmith?(tenant)\n          sales_stat.total = sales_stat.invoice_sales + sales_stat.adjustments + sales_stat.markups + sales_stat.cash_sales\n          sales_stat.total += sales_stat.finance_charges if !tenant.exclude_non_sales\n        elsif Platform.is_mbe?(tenant)\n          sales_stat.total = sales_stat.invoiced_sales + sales_stat.adjustments\n        end\n        sales_stat.save\n        daily_stat_ids << sales_stat.id\n        monthly_stats[:invoice_sales] += sales_stat.invoice_sales\n        monthly_stats[:invoiced_sales] += sales_stat.invoiced_sales\n        monthly_stats[:deferred_sales] += sales_stat.deferred_sales\n        monthly_stats[:shipments] += sales_stat.shipments\n        monthly_stats[:order_intake] += sales_stat.order_intake\n        monthly_stats[:adjustments] += sales_stat.adjustments\n        monthly_stats[:markups] += sales_stat.markups\n        monthly_stats[:cash_sales] += sales_stat.cash_sales\n        monthly_stats[:finance_charges] += sales_stat.finance_charges\n        monthly_stats[:total] += sales_stat.total\n      end\n\n      if accounting_year == 0\n        old_stat_ids = Statistic.where(tenant: tenant, statistic_for: \"PS-DAY\", accounting_month: 0, accounting_year: 0).where.not(id: daily_stat_ids).pluck(:id)\n        if old_stat_ids.count > 0\n          Statistic.where(id: old_stat_ids).delete_all\n        end\n      end\n\n      monthly_sales_stat = Statistic.find_or_initialize_by(\n        tenant: tenant,\n        statistic_for: \"PS-MONTH\",\n        accounting_year: accounting_year,\n        accounting_month: accounting_month\n      )\n\n      monthly_sales_stat.invoice_sales = monthly_stats[:invoice_sales]\n      monthly_sales_stat.invoiced_sales = monthly_stats[:invoiced_sales]\n      monthly_sales_stat.deferred_sales = monthly_stats[:deferred_sales]\n      monthly_sales_stat.shipments = monthly_stats[:shipments]\n      monthly_sales_stat.adjustments = monthly_stats[:adjustments]\n      monthly_sales_stat.markups = monthly_stats[:markups]\n      monthly_sales_stat.cash_sales = monthly_stats[:cash_sales]\n      monthly_sales_stat.finance_charges = monthly_stats[:finance_charges]\n      monthly_sales_stat.total = monthly_stats[:total]\n      monthly_sales_stat.order_intake = monthly_stats[:order_intake]\n      if accounting_year == 0\n        if last_closeout && now_in_timezone.year == last_closeout.in_time_zone(tenant.time_zone).year && now_in_timezone.month == last_closeout.in_time_zone(tenant.time_zone).month\n          monthly_sales_stat.date = now_in_timezone.end_of_month.to_date + 1\n        else\n          monthly_sales_stat.date = now_in_timezone.beginning_of_month.to_date\n        end\n      else\n        monthly_sales_stat.date = Date.strptime(\"1-#{accounting_month}-#{accounting_year}\", \"%d-%m-%Y\")\n      end\n      monthly_sales_stat.save\n\n      result = monthly_stats\n    end\n\n    result\n  end\n\n  def balanced_sales\n    result = (nontaxsales || 0) + (taxablesales || 0)\n    if tenant.exclude_non_sales\n      result = totalsales || 0\n    end\n    result\n  end\n\n  def self.generate_current_month_stats(target_tenant)\n    sales_summary = SalesSummary.new(\n      tenant_id: target_tenant.id,\n      monthly: true,\n      platform_id: 0,\n      accounting_month: 0,\n      accounting_year: 0\n    )\n    sales_summary.generate_sales_stats\n  end\n\n  def self.monthly_closeouts(tenant)\n    where(tenant: tenant).\n      where(monthly: true).\n      order(closeoutdate: :desc)\n  end\n  private_class_method :monthly_closeouts\n\n  def self.most_recent_monthly_closeout(tenant)\n    monthly_closeouts(tenant).limit(1).first\n  end\n\n  def self.second_most_recent_monthly_closeout(tenant)\n    monthly_closeouts(tenant).offset(1).limit(1).first\n  end\n\n  def sales\n    if tenant.exclude_non_sales\n      totalsales.to_f\n    else\n      (nontaxsales + taxablesales).to_f\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(isdeleted: false, deleted: false) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_summary_pickup",
        "name_plural": "sales_summary_pickups",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_summary_pickup.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SalesSummaryPickup < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { where(deleted: false) }\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sales_tag_by_month",
        "name_plural": "sales_tag_by_months",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sales_tag_by_month.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SalesTagByMonth < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope {\n    order(month_date: :desc)\n  }\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(month_date: :desc) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "salestarget",
        "name_plural": "salestargets",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/salestarget.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Salestarget < ActiveRecord::Base\n  extend RailsUpgrade\n\n  enum target_type: { Leads: 1, Accounts: 2, Activity: 3, \"Lead Types\": 4 }\n  belongs_to :user\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  def user_target(user_id)\n    Salestarget.where(tenant_id: tenant_id, target_type: self[:target_type], name: name, user_id: user_id).first.try(:amount)\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "saved_report",
        "name_plural": "saved_reports",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/saved_report.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SavedReport < ActiveRecord::Base\n  has_paper_trail\n\n  belongs_to :tenant\n  belongs_to :enterprise\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "shared_user",
        "name_plural": "shared_users",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/shared_user.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SharedUser < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :user, **belongs_to_required\n  validates :user, presence: { message: \"must exist\" } if rails4?\n\n  belongs_to :shared, class_name: \"User\", foreign_key: :shared_id, **belongs_to_required\n  validates :shared, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "shared",
              "options": {
              },
              "raw_options": "class_name: \"User\", foreign_key: :shared_id, **belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "user",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            },
            {
              "name": "shared",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "shipment",
        "name_plural": "shipments",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/shipment.rb",
        "source": {
          "ruby": "class Shipment < ActiveRecord::Base\n  include ApiLoggable\n  include Excludable\n  include Bookmarkable\n  include Categorizable\n\n  has_many :activities\n  belongs_to :tenant\n  belongs_to :company\n  has_one :contact, class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\"\n\n  has_many :tasks, as: :taskable\n  has_many :phone_calls, as: :phoneable\n  has_many :emails, as: :context\n  has_many :meetings, as: :context\n  has_one :sales_rep_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\"\n\n  belongs_to :pdf\n\n  default_scope { where(deleted: false) }\n  scope :for_tenant, ->(tenant_id) { where(tenant_id: Array(tenant_id).first) }\n  scope :for_dates,  ->(start_date, end_date) { where(shipment_date: start_date..end_date) }\n  scope :needs_pdf, -> { where(\"shipment_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, shipment_date DESC, mbe_tracking ASC\") }\n\n  belongs_to :inquiry\n\n  def name\n    courier_tracking\n  end\n\n  def invoice_number\n    courier_tracking\n  end\n\n  def report_name\n    courier_tracking\n  end\n\n  def mbe_service\n    tenant.enterprise.mbe_services.select { |mbe_service| mbe_service[\"id\"].to_i == mbe_service_id.to_i }.first.try(:[], \"name\") || \"Unknown\"\n  end\n\n  def courier_name\n    tenant.couriers.select { |courier| courier[\"id\"].to_i == courier_id.to_i }.first.try(:[], \"name\") || \"Unknown\"\n  end\n\n  def courier_service\n    tenant.courier_services(courier_id).select { |service| service[\"id\"].to_i == courier_service_id.to_i }.first.try(:[], \"name\") || \"Unknown\"\n  end\n\n  def sales_rep\n    SalesRep.where(\"platform_id = ? AND tenant_id = ?\", sales_rep_platform_id, tenant_id).where(deleted: false).first\n  end\n\n  def notes\n    Note.where(context_type: \"Shipment\", context_id: id)\n  end\n\n  def aggregated_notes\n    notes\n  end\n\n  def aggregated_phone_calls\n    phone_calls\n  end\n\n  def aggregated_tasks\n    tasks\n  end\n\n  def aggregated_meetings\n    meetings\n  end\n\n  def email_messages(search = nil, page = nil, per = nil)\n    Email.get_contextual_email_messages(self, search, page, per)\n  end\n\n  def cogs_percentage\n    result = 0\n    if grand_total != 0 && !grand_total.nil? && total_cost != 0 && !total_cost.nil?\n      result = (total_cost.to_f / grand_total.to_f) * 100\n    end\n    result\n  end\n\n  def invoice\n    result = nil\n    if !source_invoice_platform_id.blank?\n      result = Invoice.where(tenant: tenant, platform_id: source_invoice_platform_id).first\n    end\n    result\n  end\n\n  def parent_invoice\n    Invoice.where(tenant: tenant).where(\"platform_data->>'source_shipment_platform_id' = ?\", platform_id).first\n  end\n\n  def apply_source_tag\n    return if !associations_complete || source.blank?\n    tag_category = TagCategory.where(enterprise_id: tenant.enterprise.id, system_match: source).first\n    if tag_category\n      tag_category.tag_context(self, manual: false)\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [
            {
              "name": "for_tenant",
              "scope": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
            },
            {
              "name": "for_dates",
              "scope": "->(start_date, end_date) { where(shipment_date: start_date..end_date) }"
            },
            {
              "name": "needs_pdf",
              "scope": "-> { where(\"shipment_date > \\'2015-07-01\\'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, shipment_date DESC, mbe_tracking ASC\") }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "pdf",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "inquiry",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "contact",
              "options": {
                "class_name": "Contact",
                "foreign_key": "id",
                "primary_key": "contact_id"
              },
              "raw_options": "class_name: \"Contact\", foreign_key: \"id\", primary_key: \"contact_id\""
            },
            {
              "name": "sales_rep_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "sales_rep_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\""
            }
          ],
          "has_many": [
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tasks",
              "options": {
                "as": "taskable"
              },
              "raw_options": "as: :taskable"
            },
            {
              "name": "phone_calls",
              "options": {
                "as": "phoneable"
              },
              "raw_options": "as: :phoneable"
            },
            {
              "name": "emails",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            },
            {
              "name": "meetings",
              "options": {
                "as": "context"
              },
              "raw_options": "as: :context"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "short_url",
        "name_plural": "short_urls",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/short_url.rb",
        "source": {
          "ruby": "class ShortUrl < ActiveRecord::Base\n  validates_presence_of :url\n  # validates :url, format: URI::regexp(%w[http https])\n  validates_uniqueness_of :slug\n  validates_length_of :slug, within: 3..255, on: :create, message: \"too long\"\n\n  # auto slug generation\n  before_validation :generate_slug\n\n  def generate_slug\n    self.slug = SecureRandom.uuid[0..5] if slug.nil? || slug.empty?\n    true\n  end\n\n  # fast access to the shortened link\n  def short\n    env_letter = RegionConfig.get_value(\"region\")[0, 1]\n    env_letter = \"s\" if Rails.env.staging?\n    \"https://#{env_letter}.pspk.io/u/\" + slug + \" \"\n  end\n\n  # the API\n  def self.shorten(url, slug = \"\")\n    link = ShortUrl.where(url: url, slug: slug).first\n\n    return link.short if link\n\n    link = ShortUrl.new(url: url, slug: slug)\n    return link.short if link.save\n\n    ShortUrl.shorten(url, slug + SecureRandom.uuid[0..2])\n  end\nend",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sms_template_category",
        "name_plural": "sms_template_categories",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sms_template_category.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass SmsTemplateCategory < ActiveRecord::Base\n  enum category: {estimates: 1, orders: 2, sales: 3, campaigns: 5, contacts: 6, companies: 7, comments: 8}\n  belongs_to :sms_template\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "sms_template",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "sms_template",
        "name_plural": "sms_templates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/sms_template.rb",
        "source": {
          "ruby": "class SmsTemplate < ActiveRecord::Base\n  default_scope { order(name: :asc) }\n\n  belongs_to :enterprise\n  belongs_to :tenant\n  belongs_to :user\n  # has_many :sms_template_fields, dependent: :destroy\n  has_many :sms_template_categories, dependent: :destroy\n  belongs_to :wrapper, class_name: \"SmsTemplate\", foreign_key: \"wrapper_id\"\n\n\n\n  before_save :nullify_global_tenant_id\n\n  validates :name, presence: true\n  validates :name, length: { maximum: 250 }\n\n  validates :body, presence: true\n\n  scope :by_category, -> (tenant, categories) { joins(\"LEFT OUTER JOIN sms_template_categories ON sms_template_categories.sms_template_id = sms_templates.id\").where(\"sms_template_categories.category = ?\", categories.to_s.blank? ? 0 : categories.to_s) }\n  scope :by_tenant, -> (tenant) { where(\"sms_templates.tenant_id = ? OR (sms_templates.global = ? AND sms_templates.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).group(\"sms_templates.id\") }\n  scope :by_enterprise, -> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }\n\n  def nullify_global_tenant_id\n    self.tenant_id = nil if global\n  end\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\n\n  def categories\n    sms_template_categories.pluck(:category)\n  end\n\n  def categories=(new_categories)\n    if new_categories.nil?\n      sms_template_categories.destroy_all\n    else\n      new_categories = new_categories.reject { |c| c.blank? }.map(&:to_i)\n      if (new_categories - SmsTemplateCategory.categories.values).empty?\n        sms_template_categories.where.not(category: new_categories).destroy_all\n        old_categories = sms_template_categories.where(category: new_categories).pluck(:category)\n        new_categories.each do |new_category|\n          sms_template_categories << SmsTemplateCategory.create!(category: new_category) unless old_categories.include?(new_category)\n        end\n      end\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(name: :asc) }",
          "scopes": [
            {
              "name": "by_category",
              "scope": "-> (tenant, categories) { joins(\"LEFT OUTER JOIN sms_template_categories ON sms_template_categories.sms_template_id = sms_templates.id\").where(\"sms_template_categories.category = ?\", categories.to_s.blank? ? 0 : categories.to_s) }"
            },
            {
              "name": "by_tenant",
              "scope": "-> (tenant) { where(\"sms_templates.tenant_id = ? OR (sms_templates.global = ? AND sms_templates.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).group(\"sms_templates.id\") }"
            },
            {
              "name": "by_enterprise",
              "scope": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "wrapper",
              "options": {
                "class_name": "SmsTemplate",
                "foreign_key": "wrapper_id"
              },
              "raw_options": "class_name: \"SmsTemplate\", foreign_key: \"wrapper_id\""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "sms_template_categories",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: true"
            },
            {
              "name": "name",
              "raw_options": "length: { maximum: 250 }"
            },
            {
              "name": "body",
              "raw_options": "presence: true"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "statistic",
        "name_plural": "statistics",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/statistic.rb",
        "source": {
          "ruby": "class Statistic < ActiveRecord::Base\n  belongs_to :company\n  belongs_to :user\n  belongs_to :location\n  belongs_to :tenant\n\n  scope :current_accounting_month, -> { where(accounting_year: 0, accounting_month: 0) }\n\n  def needs_save?\n    if !total.nil? || !average.nil? || !count.nil?\n      true\n    else\n      false\n    end\n  end\n\n  def self.generate_statistic_for_day(statistic_for, tenant, target_datetime, &block)\n    needs_recalc = Time.now.in_time_zone(tenant.time_zone) <= target_datetime.end_of_day\n\n    tenant_stat = ::Statistic.find_or_initialize_by(\n      tenant: tenant,\n      statistic_for: \"tenant-#{statistic_for}\",\n      date: target_datetime.to_date\n    )\n    block.call(\"tenant\", tenant, tenant_stat)\n    tenant_stat.needs_recalc = needs_recalc\n    tenant_stat.save if tenant_stat.needs_save?\n\n    users = tenant.users.where(hide: false)\n    users.each do |user|\n      taken_by_stat = ::Statistic.find_or_initialize_by(\n        tenant: tenant,\n        user: user,\n        statistic_for: statistic_for,\n        date: target_datetime.to_date\n      )\n      block.call(\"user\", user, taken_by_stat)\n      taken_by_stat.needs_recalc = needs_recalc\n      taken_by_stat.save if taken_by_stat.needs_save?\n\n      unless tenant.sales_rep_for_locations\n        sales_rep_stat = ::Statistic.find_or_initialize_by(\n          tenant: tenant,\n          sales_rep_user_id: user.id,\n          statistic_for: statistic_for,\n          date: target_datetime.to_date\n        )\n        block.call(\"sales_rep\", user, sales_rep_stat)\n        sales_rep_stat.needs_recalc = needs_recalc\n        sales_rep_stat.save if sales_rep_stat.needs_save?\n      end\n    end\n\n    if tenant.sales_rep_for_locations\n      locations = tenant.locations\n\n      locations.each do |location|\n        location_stat = ::Statistic.find_or_initialize_by(\n          tenant: tenant,\n          location: location,\n          statistic_for: statistic_for,\n          date: target_datetime.to_date\n        )\n        block.call(\"location\", location, location_stat)\n        location_stat.needs_recalc = needs_recalc\n        location_stat.save if location_stat.needs_save?\n      end\n    end\n\n    needs_recalc\n  end\n\n  def self.get_statistic_for_tenant_for_month(statistic_for, tenant, target_datetime)\n    stats = ::Statistic.where(statistic_for: statistic_for, date: target_datetime.beginning_of_month..target_datetime.end_of_month).where.not(user_id: nil)\n    stats = stats.where(tenant: tenant) unless tenant.nil?\n    stat_totals = stats.select(\"sum(total) as tenant_total, avg(average) as tenant_avg, sum(count) as tenant_count\").to_a.first\n    {stat_total: stat_totals.tenant_total, stat_avg: stat_totals.tenant_avg, stat_count: stat_totals.tenant_count}\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "current_accounting_month",
              "scope": "-> { where(accounting_year: 0, accounting_month: 0) }"
            }
          ],
          "belongs_to": [
            {
              "name": "company",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "location",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "suppressed_address",
        "name_plural": "suppressed_addresses",
        "dsl_file": ""
      },
      {
        "name": "tag_category",
        "name_plural": "tag_categories",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tag_category.rb",
        "source": {
          "ruby": "class TagCategory < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :enterprise\n  has_many :contexts, class_name: \"TagCategoryContext\", dependent: :destroy\n  has_many :tags, dependent: :destroy\n\n\n  attr_accessor :global\n\n  default_scope { where(hidden: false, performing_cleanup: false, deleted: false) }\n  scope :by_tenant, -> (tenant) { where(\"(tag_categories.tenant_id = ? OR tag_categories.tenant_id IS NULL) AND tag_categories.enterprise_id = ?\", tenant.id, tenant.enterprise_id) }\n  scope :without_hidden, -> (tenant) { where(\"(tag_categories.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE\") }\n  scope :global_only, -> { where(\"tag_categories.tenant_id IS NULL\") }\n\n  def scan(limit)\n    return 0 if performing_cleanup || deleted || word_matches.split(\",\").count == 0\n    filters = word_matches.split(\",\").map { |s| \"#{s.squish}\" }.reject { |s| s.blank? }.join(\"|\")\n    filters = ActiveRecord::Base::sanitize(\"\\\\y(#{filters})\")\n    limit_remaning = limit\n    contexts.each do |context|\n      break if limit_remaning <= 0\n      target_tenant_ids = [tenant_id]\n      target_tenant_ids = enterprise.tenants.pluck(:id) if tenant_id.nil?\n\n      target_tenant_ids.each do |target_tenant_id|\n        # WorkerDaemon.log(\"  [2]Starting category scan #{self.name}(#{self.id}) for tenant #{target_tenant_id} on #{context.name}\")\n        break if limit_remaning <= 0\n        scan_progress = context.scan_progress[\"#{target_tenant_id}\"]\n\n        if scan_progress.nil?\n          scan_progress = {\n            last_scanned_id: 0,\n            last_scanned_offset: 0,\n            last_scanned: nil\n          }\n        end\n\n        scan_progress = scan_progress.with_indifferent_access\n\n        first_updated_at = nil\n        last_updated_at = Time.now\n        last_id = nil\n        scan_cutoff = scan_progress[:last_scanned].nil? ? \"2014-01-01\" : scan_progress[:last_scanned]\n        objects = \"#{context.name}\".restricted_constantize(PrintSpeak::Application.config.common_context_types)\n        objects = objects.where(tenant_id: target_tenant_id)\n        objects = objects.where(\"#{context.name.pluralize}.source_updated_at >= ?\", scan_cutoff)\n\n        object_count = objects.count\n\n        next if object_count == 0\n\n        objects = objects.where(\"(#{context.name.pluralize}.name ~* #{filters} OR #{context.name.pluralize}.job_descriptions ~* #{filters})\")\n        # WorkerDaemon.log(\"    [3]Object Query Start\")\n        objects = objects.order(source_updated_at: :asc).limit(limit_remaning).offset(scan_progress[:last_scanned_offset]).to_a\n        # WorkerDaemon.log(\"    [3]Object Query Finish\")\n        # WorkerDaemon.log(\"    [4]Updating #{objects.count} objects\")\n        objects.each do |object|\n          real_object = context.name.restricted_constantize(PrintSpeak::Application.config.common_context_types).where(id: object.id).first\n          tag_context(real_object, manual: false) if real_object\n          first_updated_at = object.source_updated_at if first_updated_at.nil?\n          last_updated_at = object.source_updated_at\n          last_id = object.id\n        end\n        # WorkerDaemon.log(\"    [4]Finsihed updating #{objects.count} objects\")\n\n        scan_progress[:last_scanned] = last_updated_at\n        if scan_progress[:last_scanned_id] == last_id\n          scan_progress[:last_scanned] += 1.second\n          scan_progress[:last_scanned_offset] = 0\n        else\n          if first_updated_at == last_updated_at && objects.count > 0\n            scan_progress[:last_scanned_offset] += limit_remaning\n          else\n            scan_progress[:last_scanned_offset] = 0\n          end\n        end\n\n        scan_progress[:last_scanned_id] = last_id\n\n        context.scan_progress[\"#{target_tenant_id}\"] = scan_progress\n        context.save\n\n        limit_remaning -= objects.count\n      end\n    end\n    limit - limit_remaning\n  end\n\n  def cleanup(limit)\n    return 0 unless performing_cleanup\n\n    tag_ids = []\n    if deleted\n      tag_ids = Tag.unscoped.where(tag_category_id: id).limit(limit).pluck(:id)\n    else\n      Tag.unscoped.where(tag_category_id: id, manual: false).where(\"user_id IS NOT NULL\").update_all(manual: true)\n      tag_ids = Tag.unscoped.where(tag_category_id: id, manual: false).limit(limit).pluck(:id)\n    end\n\n    if tag_ids.count > 0\n      Tag.unscoped.where(id: tag_ids).delete_all\n    else\n      if deleted\n        destroy\n      else\n        self.performing_cleanup = false\n        reset_contexts\n        save\n      end\n    end\n\n    tag_ids.count\n  end\n\n  def local_hide(tenant, hidden_state = true)\n    hidden_tenants[tenant.id] = hidden_state\n    save\n  end\n\n  def tag_context(context, user_id: nil, manual: true, parent_tag: nil, deleted: false)\n    if context.id.nil?\n      raise \"You should not create tags for contexts that have not yet been saved to the database.\"\n    end\n\n    parent_tag_id = nil\n    parent_tag_id = parent_tag.id if !parent_tag.nil?\n    tag = Tag.unscoped.find_or_initialize_by(tenant_id: context.tenant_id, taggable: context, tag_category_id: id, parent_id: parent_tag_id)\n    if deleted\n      if !tag.id.nil? && !tag.deleted && (tag.manual || !manual)\n        tag.user_id = user_id if !user_id.nil?\n        tag.deleted = true\n        tag.parent_id = nil\n        tag.manual = manual\n        tag.save\n        Event.queue(tag.tenant, \"bubble_parent_tag\", data: {parent_tag_id: tag.id}) if parent_tag.nil?\n      end\n    else\n      if tag.id.nil? || tag.deleted || !manual\n        tag.user_id = user_id if !user_id.nil?\n        tag.parent_id = parent_tag.id if !parent_tag.nil?\n        tag.deleted = false\n        tag.manual = manual\n        tag.save\n        Event.queue(tag.tenant, \"bubble_parent_tag\", data: {parent_tag_id: tag.id}) if parent_tag.nil?\n      end\n    end\n  end\n\n  def reset_contexts\n    contexts = %w[Estimate Invoice]\n    self.contexts.destroy_all\n    contexts.each do |context|\n      self.contexts.create(name: context)\n    end\n  end\n\n  def self.filter_by_contexts(target_tenant, contexts, category_ids, include = \"1\")\n    context_type = contexts.model.to_s\n    context_type = \"Invoice\" if %w[Sale Order].include?(context_type)\n    table_name = contexts.model.table_name\n    sub_query = %Q{\n      EXISTS (\n        SELECT null\n        FROM tag_categories\n        INNER JOIN tags ON tag_categories.id = tags.tag_category_id\n          AND tags.deleted = FALSE\n        WHERE\n          tag_categories.id IN (#{category_ids.to_csv})\n          AND tag_categories.performing_cleanup = FALSE\n          AND tag_categories.deleted = FALSE\n          AND ( ( tag_categories.tenant_id = #{target_tenant.id} OR tag_categories.tenant_id IS NULL ) AND tag_categories.enterprise_id = #{target_tenant.enterprise_id} )\n          AND tags.tenant_id = #{target_tenant.id}\n          AND tags.taggable_type = '#{context_type}'\n          AND tags.taggable_id = #{table_name}.id\n      )\n    }\n\n    if include == \"1\"\n      contexts.where(sub_query)\n    else\n      contexts.where.not(sub_query)\n    end\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(hidden: false, performing_cleanup: false, deleted: false) }",
          "scopes": [
            {
              "name": "by_tenant",
              "scope": "-> (tenant) { where(\"(tag_categories.tenant_id = ? OR tag_categories.tenant_id IS NULL) AND tag_categories.enterprise_id = ?\", tenant.id, tenant.enterprise_id) }"
            },
            {
              "name": "without_hidden",
              "scope": "-> (tenant) { where(\"(tag_categories.hidden_tenants->>\\'#{tenant.id}\\')::BOOLEAN IS DISTINCT FROM TRUE\") }"
            },
            {
              "name": "global_only",
              "scope": "-> { where(\"tag_categories.tenant_id IS NULL\") }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "contexts",
              "options": {
                "class_name": "TagCategoryContext",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"TagCategoryContext\", dependent: :destroy"
            },
            {
              "name": "tags",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "tag_category_context",
        "name_plural": "tag_category_contexts",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tag_category_context.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass TagCategoryContext < ActiveRecord::Base\n  belongs_to :tag_category\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tag_category",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "tag",
        "name_plural": "tags",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tag.rb",
        "source": {
          "ruby": "class Tag < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :tenant\n  belongs_to :taggable, polymorphic: true\n  belongs_to :tag_category\n  belongs_to :parent, class_name: \"Tag\", foreign_key: \"parent_id\"\n  has_many :children, class_name: \"Tag\", foreign_key: \"parent_id\"\n\n\n\n  default_scope { where(deleted: false) }\n\n  scope :without_hidden, -> (tenant) { joins(:tag_category).where(\"(tag_categories.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE\") }\n\n  def tag_name\n    tag_category.try(:name) || name\n  end\n\n  def bubble\n    return if !tag_category\n    if parent\n      parent.bubble\n    else\n      if taggable.class == Company\n        bubble_to_company_contacts(taggable.id)\n      elsif taggable.class == Contact\n        bubble_to_company(taggable.company_id)\n      elsif taggable.class == Estimate || taggable.class == Invoice || taggable.class == Sale || taggable.class == Order || taggable.class == Shipment || taggable.class == Inquiry\n        bubble_to_contact(taggable.contact_id)\n      elsif taggable.class == Campaign\n        bubble_to_campaign_contacts(taggable.id)\n      end\n      self.bubbled = true\n      save\n    end\n  end\n\n  def self.for_context(context, only_own = false)\n    result = Tag.without_hidden(context.tenant).\n                 where(tenant_id: context.tenant.id, taggable: context).\n                 order(tag_category_id: :desc)\n    result = result.where(parent_id: nil) if only_own\n    result\n  end\n\n  def self.for_context_other(context)\n    Tag.without_hidden(context.tenant)\n       .where(tenant_id: context.tenant.id, taggable: context)\n       .where.not(parent_id: nil)\n       .order(tag_category_id: :desc)\n  end\n\n  def self.bulk_all(context_type, target_tenant, target_ids, category_ids, manual = false)\n    Tag.where(tenant_id: target_tenant.id).\n        where(taggable_type: context_type.to_s, taggable_id: target_ids).\n        where(manual: manual).\n        where(tag_category_id: category_ids)\n  end\n\n  private\n    def bubble_to_contact(contact_id)\n      contact = Contact.unscoped.where(id: contact_id).first\n      if contact\n        tag_category.tag_context(contact, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n        bubble_to_company(contact.company_id)\n      end\n    end\n\n    def bubble_to_company_contacts(company_id)\n      contacts = Contact.unscoped.where(company_id: company_id)\n      contacts.each do |contact|\n        tag_category.tag_context(contact, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n      end\n    end\n\n    def bubble_to_company(company_id)\n      company = Company.unscoped.where(id: company_id).first\n      if company\n        tag_category.tag_context(company, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n      end\n    end\n\n    def bubble_to_campaign_contacts(campaign_id)\n      campaign = Campaign.unscoped.where(id: campaign_id).first\n      if campaign\n        campaign.active_contacts.each do |contact|\n          tag_category.tag_context(contact, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n        end\n      end\n    end\nend\n",
          "public": "class Tag < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :tenant\n  belongs_to :taggable, polymorphic: true\n  belongs_to :tag_category\n  belongs_to :parent, class_name: \"Tag\", foreign_key: \"parent_id\"\n  has_many :children, class_name: \"Tag\", foreign_key: \"parent_id\"\n\n\n\n  default_scope { where(deleted: false) }\n\n  scope :without_hidden, -> (tenant) { joins(:tag_category).where(\"(tag_categories.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE\") }\n\n  def tag_name\n    tag_category.try(:name) || name\n  end\n\n  def bubble\n    return if !tag_category\n    if parent\n      parent.bubble\n    else\n      if taggable.class == Company\n        bubble_to_company_contacts(taggable.id)\n      elsif taggable.class == Contact\n        bubble_to_company(taggable.company_id)\n      elsif taggable.class == Estimate || taggable.class == Invoice || taggable.class == Sale || taggable.class == Order || taggable.class == Shipment || taggable.class == Inquiry\n        bubble_to_contact(taggable.contact_id)\n      elsif taggable.class == Campaign\n        bubble_to_campaign_contacts(taggable.id)\n      end\n      self.bubbled = true\n      save\n    end\n  end\n\n  def self.for_context(context, only_own = false)\n    result = Tag.without_hidden(context.tenant).\n                 where(tenant_id: context.tenant.id, taggable: context).\n                 order(tag_category_id: :desc)\n    result = result.where(parent_id: nil) if only_own\n    result\n  end\n\n  def self.for_context_other(context)\n    Tag.without_hidden(context.tenant)\n       .where(tenant_id: context.tenant.id, taggable: context)\n       .where.not(parent_id: nil)\n       .order(tag_category_id: :desc)\n  end\n\n  def self.bulk_all(context_type, target_tenant, target_ids, category_ids, manual = false)\n    Tag.where(tenant_id: target_tenant.id).\n        where(taggable_type: context_type.to_s, taggable_id: target_ids).\n        where(manual: manual).\n        where(tag_category_id: category_ids)\n  end\n\n  ",
          "private": "private\n    def bubble_to_contact(contact_id)\n      contact = Contact.unscoped.where(id: contact_id).first\n      if contact\n        tag_category.tag_context(contact, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n        bubble_to_company(contact.company_id)\n      end\n    end\n\n    def bubble_to_company_contacts(company_id)\n      contacts = Contact.unscoped.where(company_id: company_id)\n      contacts.each do |contact|\n        tag_category.tag_context(contact, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n      end\n    end\n\n    def bubble_to_company(company_id)\n      company = Company.unscoped.where(id: company_id).first\n      if company\n        tag_category.tag_context(company, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n      end\n    end\n\n    def bubble_to_campaign_contacts(campaign_id)\n      campaign = Campaign.unscoped.where(id: campaign_id).first\n      if campaign\n        campaign.active_contacts.each do |contact|\n          tag_category.tag_context(contact, user_id: user_id, manual: manual, deleted: deleted, parent_tag: self)\n        end\n      end\n    end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "for_context",
                "scope": "public",
                "class_method": true,
                "arguments": "(context, only_own = false)"
              },
              {
                "name": "for_context_other",
                "scope": "public",
                "class_method": true,
                "arguments": "(context)"
              },
              {
                "name": "bulk_all",
                "scope": "public",
                "class_method": true,
                "arguments": "(context_type, target_tenant, target_ids, category_ids, manual = false)"
              }
            ],
            "instance": [
              {
                "name": "tag_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "bubble",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "bubble_to_contact",
                "scope": "private",
                "class_method": false,
                "arguments": "(contact_id)"
              },
              {
                "name": "bubble_to_company_contacts",
                "scope": "private",
                "class_method": false,
                "arguments": "(company_id)"
              },
              {
                "name": "bubble_to_company",
                "scope": "private",
                "class_method": false,
                "arguments": "(company_id)"
              },
              {
                "name": "bubble_to_campaign_contacts",
                "scope": "private",
                "class_method": false,
                "arguments": "(campaign_id)"
              }
            ],
            "instance_public": [
              {
                "name": "tag_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "bubble",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_private": [
              {
                "name": "bubble_to_contact",
                "scope": "private",
                "class_method": false,
                "arguments": "(contact_id)"
              },
              {
                "name": "bubble_to_company_contacts",
                "scope": "private",
                "class_method": false,
                "arguments": "(company_id)"
              },
              {
                "name": "bubble_to_company",
                "scope": "private",
                "class_method": false,
                "arguments": "(company_id)"
              },
              {
                "name": "bubble_to_campaign_contacts",
                "scope": "private",
                "class_method": false,
                "arguments": "(campaign_id)"
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted: false) }",
          "scopes": [
            {
              "name": "without_hidden",
              "scope": "-> (tenant) { joins(:tag_category).where(\"(tag_categories.hidden_tenants->>\\'#{tenant.id}\\')::BOOLEAN IS DISTINCT FROM TRUE\") }"
            }
          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "taggable",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "tag_category",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "parent",
              "options": {
                "class_name": "Tag",
                "foreign_key": "parent_id"
              },
              "raw_options": "class_name: \"Tag\", foreign_key: \"parent_id\""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "children",
              "options": {
                "class_name": "Tag",
                "foreign_key": "parent_id"
              },
              "raw_options": "class_name: \"Tag\", foreign_key: \"parent_id\""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "taken_by_update",
        "name_plural": "taken_by_updates",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/taken_by_update.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass TakenByUpdate < ActiveRecord::Base\n  extend RailsUpgrade\n\n  self.table_name = \"taken_by_updates\"\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  belongs_to :taken_by, **belongs_to_required\n  validates :taken_by, presence: { message: \"must exist\" } if rails4?\n\n  def update_contexts\n    invoices_query = %Q{\n      UPDATE invoices\n      SET taken_by_user_id = #{taken_by.user_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND source_taken_by = #{ActiveRecord::Base::sanitize(taken_by.name)}\n    }\n\n    estimates_query = %Q{\n      UPDATE estimates\n      SET taken_by_user_id = #{taken_by.user_id || 'NULL'}\n      WHERE tenant_id = #{tenant.id}\n      AND source_taken_by = #{ActiveRecord::Base::sanitize(taken_by.name)}\n    }\n\n    if !taken_by.name.blank?\n      ActiveRecord::Base.connection.execute(invoices_query)\n      ActiveRecord::Base.connection.execute(estimates_query)\n    end\n\n    delete\n  end\n\n  def self.update_taken_bys\n    TakenByUpdate.all.order(created_at: :asc).each do |taken_by_update|\n      taken_by_update.update_contexts\n    end\n  end\n\n  # TakenRepUpdate.create!(tenant_id: tenant.id, taken_by_id: taken_by.id)\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "taken_by",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            },
            {
              "name": "taken_by",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "taken_by",
        "name_plural": "taken_bys",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/taken_by.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass TakenBy < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\n\n  belongs_to :user\n  belongs_to :location\n  has_many :estimates\n  has_many :invoices\n\n  scope :with_valid_state, -> { where(\"latest_context_date >= ? OR (latest_context_date IS NULL AND created_at >= ?)\", 24.months.ago, 1.day.ago) }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "with_valid_state",
              "scope": "-> { where(\"latest_context_date >= ? OR (latest_context_date IS NULL AND created_at >= ?)\", 24.months.ago, 1.day.ago) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "location",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "estimates",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "invoices",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "target",
        "name_plural": "targets",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/target.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Target < ActiveRecord::Base\n  enum klass: %i[estimate sale shipment deferred]\n  # enum metric: [:total, :count]\n  belongs_to :tenant\n  belongs_to :location\n  belongs_to :taken_by_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\"\n  belongs_to :sales_rep_user, class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\"\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "location",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "taken_by_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "taken_by_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"taken_by_user_id\""
            },
            {
              "name": "sales_rep_user",
              "options": {
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "sales_rep_user_id"
              },
              "raw_options": "class_name: \"User\", foreign_key: \"id\", primary_key: \"sales_rep_user_id\""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "task_repeat",
        "name_plural": "task_repeats",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/task_repeat.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass TaskRepeat < ActiveRecord::Base\n  belongs_to :task\n  validates_uniqueness_of :task_id\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "task",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "task_type",
        "name_plural": "task_types",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/task_type.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass TaskType < ActiveRecord::Base\n  default_scope {\n    order(name: :asc)\n  }\n  scope :visible, -> (tenant) {\n    joins(\"LEFT JOIN hidden_task_types ON hidden_task_types.task_type_id = task_types.id AND hidden_task_types.tenant_id = #{tenant.id}\")\n    .where(\"hidden_task_types.task_type_id IS NULL\")\n  }\n\n  scope :by_tenant_all, ->(tenant) {\n    where(enterprise_id: tenant.enterprise_id).where(\"task_types.global = ? OR task_types.tenant_id = ?\", true, tenant.id)\n  }\n\n  # CHAIN SCOPE TENANT VISIBLE\n  class << self\n    def tenant(tenant)\n      by_tenant_all(tenant).visible(tenant)\n    end\n  end\n\n  has_many :hidden_task_types, dependent: :destroy\n  belongs_to :tenant\n  belongs_to :enterprise\n  belongs_to :user\n  has_many :tasks\n\n  after_destroy { |record| record.tasks.update_all(task_type_id: nil) }\n\n  # VALIDATIONS\n\n  validates :name, presence: { message: \"Task type name is required.\" }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(name: :asc) }",
          "scopes": [
            {
              "name": "visible",
              "scope": "-> (tenant) {\n    joins(\"LEFT JOIN hidden_task_types ON hidden_task_types.task_type_id = task_types.id AND hidden_task_types.tenant_id = #{tenant.id}\")\n    .where(\"hidden_task_types.task_type_id IS NULL\")  }"
            },
            {
              "name": "by_tenant_all",
              "scope": "->(tenant) {\n    where(enterprise_id: tenant.enterprise_id).where(\"task_types.global = ? OR task_types.tenant_id = ?\", true, tenant.id)  }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "user",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "hidden_task_types",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "tasks",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: { message: \"Task type name is required.\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "task",
        "name_plural": "tasks",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/task.rb",
        "source": {
          "ruby": "class Task < ActiveRecord::Base\n  include ActionView::Helpers::NumberHelper\n\n  acts_as_readable on: :created_at\n  acts_as_commentable\n\n  belongs_to :user, -> { unscope(where: :deleted_at) }\n  belongs_to :tenant\n  has_one :assigned_user, -> { unscope(where: :deleted_at) }, class_name: \"User\", foreign_key: \"id\", primary_key: \"assigned_user_id\"\n  has_many :activities, dependent: :destroy\n  belongs_to :taskable, polymorphic: true\n  belongs_to :task_type\n  belongs_to :task_repeat\n\n  has_many :comments, as: :commentable\n\n  validates :name, presence: { message: \"Task name is required.\" }\n  validates :assigned_user_id, presence: { message: \"Please add a user.\" }\n  validates :end_date, presence: { message: \"Due date is required.\" }\n  validates :start_date, presence: { message: \"Start date is required.\" }\n\n  def related_activities\n    if taskable.class == Estimate\n      Activity.where(\"activities.task_id = ? OR (activities.estimate_id = ? AND activities.task_id IS NULL)\", id, taskable.id)\n              .joins(\"LEFT OUTER JOIN emails ON activities.email_id = emails.id\")\n              .select(\"activities.*\", \"emails.from as email_from\", \"emails.to as email_to\", \"emails.subject as email_subject\")\n              .limit(20)\n    elsif taskable.class == Order\n      Activity.where(\"activities.task_id = ? OR (activities.invoice_id = ? AND activities.task_id IS NULL)\", id, taskable.id)\n              .joins(\"LEFT OUTER JOIN emails ON activities.email_id = emails.id\")\n              .select(\"activities.*\", \"emails.from as email_from\", \"emails.to as email_to\", \"emails.subject as email_subject\")\n              .limit(20)\n    else\n      activities.limit(20)\n    end\n  end\n\n  def send_new_task_email(host)\n    return unless not_a_self_assigned_task\n    return unless assigned_user.tenant_email(tenant) != \"\"\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) unless test_mode_if_required(assigned_user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    return unless to_addrs.count > 0\n\n    send_mail(host, to_addrs, \"Print Speak: New Task Assignment ##{id} #{mode}: #{name} from #{user.full_name}\")\n  end\n\n  def send_task_assignement_change_email(host, changing_user = nil)\n    return unless not_a_self_assigned_task\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) if !assigned_user.nil? && !test_mode_if_required(assigned_user.tenant_email(tenant)).blank? && !(!changing_user.nil? && changing_user.id == assigned_user.id)\n    to_addrs << test_mode_if_required(user.tenant_email(tenant)) unless test_mode_if_required(user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    return unless to_addrs.count > 0\n\n    if changed?\n      if changed.include?(\"assigned_user_id\")\n        send_mail(host, to_addrs, \"Print Speak: Task Assignment change ##{id} #{mode}: #{name} #{assigned_user}\")\n      end\n    end\n  end\n\n  def send_task_status_change_email(host, changing_user = nil)\n    return unless not_a_self_assigned_task\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) if !assigned_user.nil? && !test_mode_if_required(assigned_user.tenant_email(tenant)).blank? && !(!changing_user.nil? && changing_user.id == assigned_user.id)\n    to_addrs << test_mode_if_required(user.tenant_email(tenant)) unless test_mode_if_required(user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    return unless to_addrs.count > 0\n\n    if changed?\n      if changed.include?(\"status\")\n        send_mail(host, to_addrs, \"Print Speak: Task Status ##{id} #{mode}: #{name} #{status}\")\n      end\n    end\n  end\n\n  def send_task_update_email(host)\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) if !assigned_user.nil? && !test_mode_if_required(assigned_user.tenant_email(tenant)).blank?\n    to_addrs << test_mode_if_required(user.tenant_email(tenant)) unless test_mode_if_required(user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    to_addrs = to_addrs.uniq\n\n    return unless to_addrs.count > 0\n\n    send_mail(host, to_addrs, \"Print Speak: Task Update ##{id} #{mode}: #{name}\")\n  end\n\n  def update_calendar(from_gcal = nil)\n    if add_to_calendar && calendar_needs_update\n      require \"google/apis/calendar_v3\"\n\n      context = \"\"\n      summary = \"Task\"\n      assets_string = \"\"\n\n      summary += \" [#{task_type.name}]\" if task_type.try(:name)\n      summary += \": #{name.truncate(100)}\"\n\n      assets_count = Asset.where(context_id: id, context_type: self.class).count\n      assets_string = \"<br/>Attachments: #{assets_count} File#{ assets_count > 1 ? 's' : ''  }\" if assets_count > 0\n\n      event_status = status == \"Cancelled\" ? \"cancelled\" : \"confirmed\"\n\n      event_start = Google::Apis::CalendarV3::EventDateTime.new(date_time: end_date.to_datetime.rfc3339)\n      event_end = Google::Apis::CalendarV3::EventDateTime.new(date_time: (end_date.to_datetime + 15.minutes).rfc3339)\n\n      # GET CONTEXT STRING\n      if try(:taskable).present? && from_gcal.blank?\n        domain = RegionConfig.require_value(\"domain\")\n        context = \"<br/><br/>\"\n        context += \" <strong>#{taskable.class}</strong>: <a href='https://#{domain}/#{taskable.class.to_s.downcase.pluralize }/#{taskable.id}'>\"\n        context += \"##{taskable.try(:invoice_number)} \" if taskable.try(:invoice_number)\n        context += \"#{taskable.try(:name)}</a>\"\n        context += \" [#{ number_to_currency(taskable.try(:grand_total) || 0, precision: 2)}]\" if  taskable.try(:grand_total)\n        context += \"<br/>\"\n        context += assets_string\n      end\n\n      task_description = description\n      task_description = \"\" unless task_description.present?\n\n      event = Google::Apis::CalendarV3::Event.new(\n        summary: summary,\n        description: task_description + context,\n        start: event_start,\n        end: event_end,\n        status: event_status\n      )\n\n      failed = false\n      result_id = nil\n      if user_calendar_entry_id.blank?\n        result_id = user.create_calendar_event(\"primary\", event)\n      else\n        result_id = user.update_calendar_event(\"primary\", user_calendar_entry_id, event)\n      end\n\n      if result_id == \"failed\"\n        failed = true\n      elsif result_id == \"not_found\"\n        failed = true\n        self.user_calendar_entry_id = nil\n      elsif result_id\n        self.user_calendar_entry_id = result_id\n      end\n\n      if !assigned_user.nil? && user.id != assigned_user.id\n        result_id = nil\n        if assigned_user_calendar_entry_id.blank?\n          result_id = assigned_user.create_calendar_event(\"primary\", event)\n        else\n          result_id = assigned_user.update_calendar_event(\"primary\", assigned_user_calendar_entry_id, event)\n        end\n\n        if result_id == \"failed\"\n          failed = true\n        elsif result_id == \"not_found\"\n          failed = true\n          self.assigned_user_calendar_entry_id = nil\n        elsif result_id\n          self.assigned_user_calendar_entry_id = result_id\n        end\n      end\n\n      self.calendar_needs_update = false unless failed\n      save\n    end\n  end\n\n  def send_mail(host, addresses, email_subject, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(addresses, email_subject, Emails::Task.new.new_task(self, tenant, host), source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  def send_task_due_email(host)\n    if assigned_user.try(:email)\n      dest_address = assigned_user.email\n      email_subject = \"Print Speak: Task DUE ##{id} #{mode}: #{name} from #{user.full_name}\"\n      email_body = Emails::Task.new.due_task_today(self, tenant, host)\n\n      Email.ses_send([dest_address], email_subject, email_body)\n    end\n  end\n\n  private\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\n\n  def not_a_self_assigned_task\n    !assigned_user.nil? && user.id != assigned_user.id\n  end\n\n  def add_emails_from_notifications(to_addrs)\n    tenant.visible_users.where(id: notification_ids).each do |notification_user|\n      to_addrs << test_mode_if_required(notification_user.email) unless notification_user.email.blank?\n    end\n\n    to_addrs\n  end\nend\n",
          "public": "class Task < ActiveRecord::Base\n  include ActionView::Helpers::NumberHelper\n\n  acts_as_readable on: :created_at\n  acts_as_commentable\n\n  belongs_to :user, -> { unscope(where: :deleted_at) }\n  belongs_to :tenant\n  has_one :assigned_user, -> { unscope(where: :deleted_at) }, class_name: \"User\", foreign_key: \"id\", primary_key: \"assigned_user_id\"\n  has_many :activities, dependent: :destroy\n  belongs_to :taskable, polymorphic: true\n  belongs_to :task_type\n  belongs_to :task_repeat\n\n  has_many :comments, as: :commentable\n\n  validates :name, presence: { message: \"Task name is required.\" }\n  validates :assigned_user_id, presence: { message: \"Please add a user.\" }\n  validates :end_date, presence: { message: \"Due date is required.\" }\n  validates :start_date, presence: { message: \"Start date is required.\" }\n\n  def related_activities\n    if taskable.class == Estimate\n      Activity.where(\"activities.task_id = ? OR (activities.estimate_id = ? AND activities.task_id IS NULL)\", id, taskable.id)\n              .joins(\"LEFT OUTER JOIN emails ON activities.email_id = emails.id\")\n              .select(\"activities.*\", \"emails.from as email_from\", \"emails.to as email_to\", \"emails.subject as email_subject\")\n              .limit(20)\n    elsif taskable.class == Order\n      Activity.where(\"activities.task_id = ? OR (activities.invoice_id = ? AND activities.task_id IS NULL)\", id, taskable.id)\n              .joins(\"LEFT OUTER JOIN emails ON activities.email_id = emails.id\")\n              .select(\"activities.*\", \"emails.from as email_from\", \"emails.to as email_to\", \"emails.subject as email_subject\")\n              .limit(20)\n    else\n      activities.limit(20)\n    end\n  end\n\n  def send_new_task_email(host)\n    return unless not_a_self_assigned_task\n    return unless assigned_user.tenant_email(tenant) != \"\"\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) unless test_mode_if_required(assigned_user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    return unless to_addrs.count > 0\n\n    send_mail(host, to_addrs, \"Print Speak: New Task Assignment ##{id} #{mode}: #{name} from #{user.full_name}\")\n  end\n\n  def send_task_assignement_change_email(host, changing_user = nil)\n    return unless not_a_self_assigned_task\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) if !assigned_user.nil? && !test_mode_if_required(assigned_user.tenant_email(tenant)).blank? && !(!changing_user.nil? && changing_user.id == assigned_user.id)\n    to_addrs << test_mode_if_required(user.tenant_email(tenant)) unless test_mode_if_required(user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    return unless to_addrs.count > 0\n\n    if changed?\n      if changed.include?(\"assigned_user_id\")\n        send_mail(host, to_addrs, \"Print Speak: Task Assignment change ##{id} #{mode}: #{name} #{assigned_user}\")\n      end\n    end\n  end\n\n  def send_task_status_change_email(host, changing_user = nil)\n    return unless not_a_self_assigned_task\n\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) if !assigned_user.nil? && !test_mode_if_required(assigned_user.tenant_email(tenant)).blank? && !(!changing_user.nil? && changing_user.id == assigned_user.id)\n    to_addrs << test_mode_if_required(user.tenant_email(tenant)) unless test_mode_if_required(user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    return unless to_addrs.count > 0\n\n    if changed?\n      if changed.include?(\"status\")\n        send_mail(host, to_addrs, \"Print Speak: Task Status ##{id} #{mode}: #{name} #{status}\")\n      end\n    end\n  end\n\n  def send_task_update_email(host)\n    to_addrs = []\n    to_addrs << test_mode_if_required(assigned_user.tenant_email(tenant)) if !assigned_user.nil? && !test_mode_if_required(assigned_user.tenant_email(tenant)).blank?\n    to_addrs << test_mode_if_required(user.tenant_email(tenant)) unless test_mode_if_required(user.tenant_email(tenant)).blank?\n\n    to_addrs = add_emails_from_notifications(to_addrs)\n\n    to_addrs = to_addrs.uniq\n\n    return unless to_addrs.count > 0\n\n    send_mail(host, to_addrs, \"Print Speak: Task Update ##{id} #{mode}: #{name}\")\n  end\n\n  def update_calendar(from_gcal = nil)\n    if add_to_calendar && calendar_needs_update\n      require \"google/apis/calendar_v3\"\n\n      context = \"\"\n      summary = \"Task\"\n      assets_string = \"\"\n\n      summary += \" [#{task_type.name}]\" if task_type.try(:name)\n      summary += \": #{name.truncate(100)}\"\n\n      assets_count = Asset.where(context_id: id, context_type: self.class).count\n      assets_string = \"<br/>Attachments: #{assets_count} File#{ assets_count > 1 ? 's' : ''  }\" if assets_count > 0\n\n      event_status = status == \"Cancelled\" ? \"cancelled\" : \"confirmed\"\n\n      event_start = Google::Apis::CalendarV3::EventDateTime.new(date_time: end_date.to_datetime.rfc3339)\n      event_end = Google::Apis::CalendarV3::EventDateTime.new(date_time: (end_date.to_datetime + 15.minutes).rfc3339)\n\n      # GET CONTEXT STRING\n      if try(:taskable).present? && from_gcal.blank?\n        domain = RegionConfig.require_value(\"domain\")\n        context = \"<br/><br/>\"\n        context += \" <strong>#{taskable.class}</strong>: <a href='https://#{domain}/#{taskable.class.to_s.downcase.pluralize }/#{taskable.id}'>\"\n        context += \"##{taskable.try(:invoice_number)} \" if taskable.try(:invoice_number)\n        context += \"#{taskable.try(:name)}</a>\"\n        context += \" [#{ number_to_currency(taskable.try(:grand_total) || 0, precision: 2)}]\" if  taskable.try(:grand_total)\n        context += \"<br/>\"\n        context += assets_string\n      end\n\n      task_description = description\n      task_description = \"\" unless task_description.present?\n\n      event = Google::Apis::CalendarV3::Event.new(\n        summary: summary,\n        description: task_description + context,\n        start: event_start,\n        end: event_end,\n        status: event_status\n      )\n\n      failed = false\n      result_id = nil\n      if user_calendar_entry_id.blank?\n        result_id = user.create_calendar_event(\"primary\", event)\n      else\n        result_id = user.update_calendar_event(\"primary\", user_calendar_entry_id, event)\n      end\n\n      if result_id == \"failed\"\n        failed = true\n      elsif result_id == \"not_found\"\n        failed = true\n        self.user_calendar_entry_id = nil\n      elsif result_id\n        self.user_calendar_entry_id = result_id\n      end\n\n      if !assigned_user.nil? && user.id != assigned_user.id\n        result_id = nil\n        if assigned_user_calendar_entry_id.blank?\n          result_id = assigned_user.create_calendar_event(\"primary\", event)\n        else\n          result_id = assigned_user.update_calendar_event(\"primary\", assigned_user_calendar_entry_id, event)\n        end\n\n        if result_id == \"failed\"\n          failed = true\n        elsif result_id == \"not_found\"\n          failed = true\n          self.assigned_user_calendar_entry_id = nil\n        elsif result_id\n          self.assigned_user_calendar_entry_id = result_id\n        end\n      end\n\n      self.calendar_needs_update = false unless failed\n      save\n    end\n  end\n\n  def send_mail(host, addresses, email_subject, source_email = \"support@printspeak.com\")\n    Thread.new {\n      Email.ses_send(addresses, email_subject, Emails::Task.new.new_task(self, tenant, host), source_email)\n      ActiveRecord::Base.clear_active_connections!\n    }\n  end\n\n  def send_task_due_email(host)\n    if assigned_user.try(:email)\n      dest_address = assigned_user.email\n      email_subject = \"Print Speak: Task DUE ##{id} #{mode}: #{name} from #{user.full_name}\"\n      email_body = Emails::Task.new.due_task_today(self, tenant, host)\n\n      Email.ses_send([dest_address], email_subject, email_body)\n    end\n  end\n\n  ",
          "private": "private\n\n  def test_mode_if_required(email_address)\n    if Rails.env.production?\n      email_address\n    else\n      \"emailtest@printspeak.com\"\n    end\n  end\n\n  def not_a_self_assigned_task\n    !assigned_user.nil? && user.id != assigned_user.id\n  end\n\n  def add_emails_from_notifications(to_addrs)\n    tenant.visible_users.where(id: notification_ids).each do |notification_user|\n      to_addrs << test_mode_if_required(notification_user.email) unless notification_user.email.blank?\n    end\n\n    to_addrs\n  end\nend\n",
          "all_methods": {
            "klass": [

            ],
            "instance": [
              {
                "name": "related_activities",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_new_task_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host)"
              },
              {
                "name": "send_task_assignement_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_task_status_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_task_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host)"
              },
              {
                "name": "update_calendar",
                "scope": "public",
                "class_method": false,
                "arguments": "(from_gcal = nil)"
              },
              {
                "name": "send_mail",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, addresses, email_subject, source_email = \"support@printspeak.com\")"
              },
              {
                "name": "send_task_due_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host)"
              },
              {
                "name": "test_mode_if_required",
                "scope": "private",
                "class_method": false,
                "arguments": "(email_address)"
              },
              {
                "name": "not_a_self_assigned_task",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "add_emails_from_notifications",
                "scope": "private",
                "class_method": false,
                "arguments": "(to_addrs)"
              }
            ],
            "instance_public": [
              {
                "name": "related_activities",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "send_new_task_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host)"
              },
              {
                "name": "send_task_assignement_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_task_status_change_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, changing_user = nil)"
              },
              {
                "name": "send_task_update_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host)"
              },
              {
                "name": "update_calendar",
                "scope": "public",
                "class_method": false,
                "arguments": "(from_gcal = nil)"
              },
              {
                "name": "send_mail",
                "scope": "public",
                "class_method": false,
                "arguments": "(host, addresses, email_subject, source_email = \"support@printspeak.com\")"
              },
              {
                "name": "send_task_due_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(host)"
              }
            ],
            "instance_private": [
              {
                "name": "test_mode_if_required",
                "scope": "private",
                "class_method": false,
                "arguments": "(email_address)"
              },
              {
                "name": "not_a_self_assigned_task",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "add_emails_from_notifications",
                "scope": "private",
                "class_method": false,
                "arguments": "(to_addrs)"
              }
            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
                "a_lambda": "-> { unscope(where: :deleted_at) }"
              },
              "raw_options": "a_lambda: '-> { unscope(where: :deleted_at) }'"
            },
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "taskable",
              "options": {
                "polymorphic": true
              },
              "raw_options": "polymorphic: true"
            },
            {
              "name": "task_type",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "task_repeat",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [
            {
              "name": "assigned_user",
              "options": {
                "a_lambda": "-> { unscope(where: :deleted_at) }",
                "class_name": "User",
                "foreign_key": "id",
                "primary_key": "assigned_user_id"
              },
              "raw_options": "a_lambda: '-> { unscope(where: :deleted_at) }',  class_name: \"User\", foreign_key: \"id\", primary_key: \"assigned_user_id\""
            }
          ],
          "has_many": [
            {
              "name": "activities",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "comments",
              "options": {
                "as": "commentable"
              },
              "raw_options": "as: :commentable"
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: { message: \"Task name is required.\" }"
            },
            {
              "name": "assigned_user_id",
              "raw_options": "presence: { message: \"Please add a user.\" }"
            },
            {
              "name": "end_date",
              "raw_options": "presence: { message: \"Due date is required.\" }"
            },
            {
              "name": "start_date",
              "raw_options": "presence: { message: \"Start date is required.\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "tenant",
        "name_plural": "tenants",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tenant.rb",
        "source": {
          "ruby": "# Check out these methods:\n#  - contextual_email_template\n#  - user_statistics\n#  - unmapped_statistics\n#  - web_to_csv\n#  - sales_tag_to_csv\n#  - links_urls_to_csv\n#  - calculate_company_lifetime_values\n#  - dirty_update\nclass Tenant < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { order(name: :asc) }\n\n  belongs_to :enterprise, **belongs_to_required\n  validates :enterprise, presence: { message: \"must exist\" } if rails4?\n\n  has_and_belongs_to_many :groups\n  has_many :account_history_data, inverse_of: :tenant, class_name: \"AccountHistoryData\"\n  has_many :action_logs, inverse_of: :tenant\n  has_many :activities, inverse_of: :tenant\n  has_many :addresses, inverse_of: :tenant\n  has_many :adjustments, inverse_of: :tenant\n  has_many :api_logs, inverse_of: :tenant\n  has_many :assets, inverse_of: :tenant\n  has_many :background_jobs, inverse_of: :tenant\n  has_many :backups, inverse_of: :tenant\n  has_many :budgets\n  has_many :business_plans\n  has_many :campaigns, inverse_of: :tenant\n  has_many :campaign_calendar_entries, inverse_of: :tenant\n  has_many :campaign_counts, inverse_of: :tenant\n  has_many :cash_sales\n  has_many :comments, inverse_of: :tenant\n  has_many :companies, inverse_of: :tenant\n  has_many :contacts, inverse_of: :tenant\n  has_many :contact_groups, inverse_of: :tenant\n  has_many :contact_lists, inverse_of: :tenant\n  has_many :contact_list_counts, inverse_of: :tenant\n  has_many :contact_list_exclusions, inverse_of: :tenant\n  has_many :deployments, inverse_of: :tenant\n  has_many :emails, inverse_of: :tenant\n  has_many :email_credentials, inverse_of: :tenant\n  has_many :email_templates, inverse_of: :tenant\n  has_many :email_validations, inverse_of: :tenant\n  has_many :estimates, inverse_of: :tenant\n  has_many :estimate_elements, inverse_of: :tenant\n  has_many :etl_settings, inverse_of: :tenant\n  has_many :events, inverse_of: :tenant\n  has_many :event_stats, inverse_of: :tenant\n  has_many :filter_defaults, inverse_of: :tenant\n  has_many :hidden_email_templates, inverse_of: :tenant\n  has_many :hidden_holidays, inverse_of: :tenant\n  has_many :holidays, inverse_of: :tenant\n  has_many :identities, inverse_of: :tenant\n  has_many :imports\n  has_many :inquiries, inverse_of: :tenant\n  has_many :interest_contexts, inverse_of: :tenant\n  has_many :invoices, inverse_of: :tenant\n  has_many :invoice_elements, inverse_of: :tenant\n  has_many :locations, inverse_of: :tenant\n  has_many :logs\n  has_many :meetings, inverse_of: :tenant\n  has_many :metric_results\n  has_many :metrics\n  has_many :next_activities, inverse_of: :tenant\n  has_many :notes, inverse_of: :tenant\n  has_many :shipments, inverse_of: :tenant\n  has_many :orders, inverse_of: :tenant\n  has_many :invoiced_orders, inverse_of: :tenant, class_name: \"Order\" # mbe / for dev\n  has_many :phone_calls\n  has_many :pings, inverse_of: :tenant\n  has_many :pending_attachments, inverse_of: :tenant\n  has_many :phone_calls, inverse_of: :tenant\n  has_many :portal_comments, inverse_of: :tenant\n  has_many :production_locations, inverse_of: :tenant\n  has_many :proofs, inverse_of: :tenant\n  has_many :reports, inverse_of: :tenant\n  has_many :sales, inverse_of: :tenant\n  has_many :sales_base_taxes, inverse_of: :tenant\n  has_many :sales_categories, inverse_of: :tenant\n  has_many :sales_reps, inverse_of: :tenant\n  has_many :sales_rep_updates, inverse_of: :tenant\n  has_many :sales_summaries, inverse_of: :tenant\n  has_many :sales_summary_pickups, inverse_of: :tenant\n  has_many :salestargets, inverse_of: :tenant\n  has_many :saved_reports, inverse_of: :tenant\n  has_many :sms_templates, inverse_of: :tenant\n  has_many :statistics, inverse_of: :tenant\n  has_many :tags, inverse_of: :tenant\n  has_many :tag_categories, inverse_of: :tenant\n  has_many :taken_bys, inverse_of: :tenant\n  has_many :taken_by_updates, inverse_of: :tenant\n  has_many :targets, inverse_of: :tenant\n  has_many :tasks, dependent: :destroy\n  # has_many :task_types, inverse_of: :tenant # TODO investigate/refactor\n  has_many :unsubscribes, inverse_of: :tenant\n  has_many :workflows, inverse_of: :tenant\n  has_many :holidays\n  # has_many :task_types\n  has_many :lead_types\n  has_many :prospect_status_items\n  has_many :notes\n  has_many :meetings\n  has_many :wips\n  has_many :company_metrics\n\n  has_many :next_activities\n  has_many :sales_tag_by_months\n\n  scope :real, -> { enabled.where(training: false, demo: false) }\n  scope :enabled, -> { where(inital_import_complete: true) }\n  scope :disabled, -> { where(inital_import_complete: false) }\n\n  scope :mbe, -> { joins(:enterprise).where(enterprises: {platform_type: \"mbe\"}) }\n  scope :printsmith, -> { joins(:enterprise).where(enterprises: {platform_type: \"printsmith\"}) }\n\n  scope :sales_metrics_range, -> (c_start, c_finish, ly_start, ly_finish) { select(\"id, number, marketing_name, (#{Invoice.select('COALESCE(SUM(grand_total), 0)').where(pickup_date: c_start..c_finish).where('invoices.tenant_id = tenants.id').to_sql}) as sales_py, (#{Invoice.select('COALESCE(COUNT(DISTINCT company_id), 0)').where(pickup_date: c_start..c_finish).where('invoices.tenant_id = tenants.id').to_sql}) as customers_py, (#{Invoice.select('COALESCE(SUM(grand_total), 0)').where(pickup_date: ly_start..ly_finish).where('invoices.tenant_id = tenants.id').to_sql}) as sales_ly, (#{Invoice.select('COALESCE(COUNT(DISTINCT company_id), 0)').where(pickup_date: ly_start..ly_finish).where('invoices.tenant_id = tenants.id').to_sql}) as customers_ly\").where(enterprise_id: 3).where.not(id: 210) }\n\n  # scope :mbehub_connected, -> {\n  #   mbehub.where.not(mbe_username: [nil, \"\"]).\n  #   where.not(mbe_password: [nil, \"\"]).\n  #   where.not(mbe_tenant_id: nil).\n  #   where.not(mbe_multistore_id: nil).\n  #   where.not(mbe_store_id: nil)\n  # }\n\n  validate do |tenant|\n    begin\n      Mail::Address.new(\"#{tenant.marketing_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      tenant.errors[:base] << \"Marketing name contains invalid characters\"\n    end\n  end\n\n  def needs_taken_by_mappings\n    if taken_by_for_locations\n      if locations.where(location_id: nil).count > 0\n        true\n      else\n        false\n      end\n    else\n      if taken_bys.where(user_id: nil).count > 0\n        true\n      else\n        false\n      end\n    end\n  end\n\n  # TODO: @refactor https://app.clickup.com/t/4azpgb\n  def connection\n    @_connection ||= PG.connect(to_db_connection)\n  end\n\n  def ngrok_connector\n    \"#{ngrok_uuid}.#{PrintSpeak::Application.ngrok_domain}\"\n  end\n\n  def display_name\n    tenant_picker_name.blank? ? name : tenant_picker_name\n  end\n\n  def to_s\n    name\n  end\n\n  # TODO: @refactor can a gem do this?\n  def estimate_name_enforce?\n    estimate_name_enforce\n  end\n\n  # TODO: @refactor can a gem do this?\n  def invoice_name_enforce?\n    invoice_name_enforce\n  end\n\n  # TODO: @refactor can a gem do this?\n  def shipment_name_enforce?\n    false\n  end\n\n  def preferred_estimate_name\n    return estimate_name if estimate_name_enforce?\n    estimate_name_default\n  end\n\n  def preferred_invoice_name\n    return invoice_name if invoice_name_enforce?\n    invoice_name_default\n  end\n\n  def preferred_shipment_name\n    \"\"\n  end\n\n  # TODO: @decorator @presenter\n  def estimate_name_default_friendly\n    URI.unescape(estimate_name_default) if estimate_name_default\n  end\n\n  def estimate_name_list_friendly\n    return estimate_name_list.split(\",\").map { |z| \"#{URI.unescape(z)}\" } if estimate_name_list\n    \"\"\n  end\n\n  def estimate_name_friendly\n    return URI.unescape(estimate_name) if estimate_name\n    \"\"\n  end\n\n  def invoice_name_default_friendly\n    URI.unescape(invoice_name_default) if invoice_name_default\n  end\n\n  def invoice_name_list_friendly\n    return invoice_name_list.split(\",\").map { |z| \"#{URI.unescape(z)}\" } if invoice_name_list\n    \"\"\n  end\n\n  def invoice_name_friendly\n    return URI.unescape(invoice_name) if invoice_name\n    \"\"\n  end\n\n  def use_printsmith_api_v3?\n    return true if (printsmith_api_version == \"v3.0\" || printsmith_api_version == \"no such service\" || printsmith_api_version.blank?) && enforce_old_printsmith_api == false\n    false\n  end\n\n  def sms_allowed?\n    return true if sms_send_number.present? && use_sms.present?\n    false\n  end\n\n  def last_successful_import_date(resource_type)\n    send(resource_type).order(\"updated_at DESC\").first.try(:updated_at) || Date.new(1900, 1, 1)\n  end\n\n  def ngrok_config_yml\n    <<~EOY\n      pprof_addr: 127.0.0.1:4041\n      server_addr: #{PrintSpeak::Application.ngrok_tunnel}\n      authtoken: #{ngrok_authtoken}\n      tunnels:\n        db:\n          proto: pg\n          addr: #{printsmith_local_port || \"5432\"}\n          remote_addr: #{ngrok_remote_addr}\n          crt: c:\\\\ngrok\\\\#{ngrok_uuid}.crt\n          key: c:\\\\ngrok\\\\#{ngrok_uuid}.key.insecure\n        admin:\n          proto: http\n          bind_tls: false\n          addr: 9191\n          hostname: #{ngrok_connector}\n    EOY\n  end\n\n  def change_to_time_zone(time)\n    time.asctime.in_time_zone(time_zone)\n  end\n\n  # These will be replaced with a day or month depending on if the tenant is set for day or month first\n  # %%DM the day or month zero padded (%d or %m)\n  # %%_DM the day or month blank padded (%e or %_m)\n  # %%-DM the day or month no padded (%-d or %-m)\n  def local_strftime(time, format = \"%%DM-%%DM-%Y\", default_value = I18n.t(\"invalid\"))\n    result = default_value\n\n    day = !display_month_first\n    format = day_month_replacement(format, day)\n    day = !day\n    format = day_month_replacement(format, day)\n    result =   time.in_time_zone(time_zone).strftime(format) unless time.nil?\n\n    result\n  end\n\n  def day_month_replacement(format = \"\", day = true)\n    result = format\n    match = format.match(/%%([_-]?)DM/)\n    if match\n      variation = match.captures.first\n      case variation\n      when \"-\"\n        result = format.sub(match.to_s, day ? \"%-d\" : \"%-m\")\n      when \"_\"\n        result = format.sub(match.to_s, day ? \"%e\" : \"%-m\")\n      else\n        result = format.sub(match.to_s, day ? \"%d\" : \"%m\")\n      end\n    end\n    result\n  end\n\n  def date_format(stftime_format = true)\n    if stftime_format\n      display_month_first ? \"%m-%d-%Y\" : \"%d-%m-%Y\"\n    else\n      display_month_first ? \"MM-DD-YYYY\" : \"DD-MM-YYYY\"\n    end\n  end\n\n  def parse_datetime(datetime)\n    result = nil\n\n    begin\n      if display_month_first\n        result = DateTime.strptime(datetime, \"%m-%d-%Y %l:%M %p\")\n      else\n        result = DateTime.strptime(datetime, \"%d-%m-%Y %l:%M %p\")\n      end\n    rescue StandardError\n    end\n\n    result\n  end\n\n  def parse_date(date)\n    result = nil\n\n    begin\n      if display_month_first\n        result = DateTime.strptime(date, \"%m-%d-%Y\").to_date\n      else\n        result = DateTime.strptime(date, \"%d-%m-%Y\").to_date\n      end\n    rescue StandardError\n    end\n\n    result\n  end\n\n  def backup_config\n    if backup_api_key.blank?\n      self.backup_api_key = SecureRandom.hex(32)\n      save\n    end\n    backup_password = backup_api_key\n    backup_password = Rails.application.secrets.build_update_http_basic_password if backup_password.blank?\n\n    config = Hash.new\n    config[\"Times\"] = [{Hour: 22, Minute: 30, Second: 0}]\n    config[\"TenantId\"] = id\n    config[\"Updater\"] = {Url: Rails.application.routes.url_helpers.url_for(controller: :builds, action: :update, only_path: false), User: \"update\", Password: backup_password}\n    config[\"NotifyAPI\"] = Rails.application.routes.url_helpers.url_for(controller: :backups, action: :create, only_path: false)\n    config[\"LocalPath\"] = local_path\n    config[\"PgDumpPath\"] = pgdump_path\n    config[\"BackupFolder\"] = backup_path\n    config[\"RetryInterval\"] = 60\n    config[\"MaxAgeInDays\"] = 30\n    config[\"Database\"] = {Host: \"127.0.0.1\", Port: printsmith_local_port || \"5432\", Name: printsmith_database, User: printsmith_username, Password: printsmith_password}\n    config[\"S3\"] = {Region: s3_region, Bucket: s3_bucket, AccessKey: s3_access_key, ClientSecret: s3_client_secret}\n    config[\"HoneybadgerKey\"] = Rails.env.production? ? \"1912fcf8\" : \"\"\n    config\n  end\n\n  def cogs_color(cogs)\n    result = \"grey\"\n\n    if Platform.is_printsmith?(self)\n      if cogs <= cog_green_threshold\n        result = \"green\"\n      elsif cogs > cog_green_threshold && cogs <= cog_orange_threshold\n        result = \"orange\"\n      elsif cogs > cog_orange_threshold\n        result = \"red\"\n      end\n    else\n      if cogs <= cog_orange_threshold\n        result = \"red\"\n      elsif cogs > cog_orange_threshold && cogs <= cog_green_threshold\n        result = \"orange\"\n      elsif cogs > cog_green_threshold\n        result = \"green\"\n      end\n    end\n\n    result\n  end\n\n  def cogs_panel_color(cogs)\n    result = \"default\"\n\n    if Platform.is_printsmith?(self)\n      if cogs <= cog_green_threshold\n        result = \"success\"\n      elsif cogs > cog_green_threshold && cogs <= cog_orange_threshold\n        result = \"orange\"\n      elsif cogs > cog_orange_threshold\n        result = \"danger\"\n      end\n    else\n      if cogs <= cog_orange_threshold\n        result = \"danger\"\n      elsif cogs >  cog_orange_threshold && cogs <= cog_green_threshold\n        result = \"orange\"\n      elsif cogs > cog_green_threshold\n        result = \"success\"\n      end\n    end\n\n    result\n  end\n\n  def default_identity\n    Identity.where(tenant_id: id, default: true).first\n  end\n\n  def due_campaigns\n    due_campaigns = []\n    scheduled_campaigns = Campaign.require_selected_enterprise(self).without_hidden(self).scheduled(self).where(enterprise_id: enterprise_id).where(\"(tenant_id = ? OR global = ?)\", id, true).to_a\n    scheduled_campaigns.each do |campaign|\n      due_campaigns << campaign if campaign.due_today(self)\n    end\n\n    due_campaigns\n  end\n\n  def due_campaigns_color\n    result = \"primary\"\n\n    red = false\n    green = false\n\n    due_campaigns.each do |campaign|\n      if campaign.schedule_auto_send && !campaign.awaiting_approval(self)\n        green = true\n      else\n        red = true\n      end\n    end\n\n    if red && green\n      result = \"orange\"\n    elsif red\n      result = \"red\"\n    elsif green\n      result = \"green\"\n    end\n\n    result\n  end\n\n  def financial_months\n    (1..12).to_a.rotate(financial_year_start_month - 1)\n  end\n\n  # GET THE RIGHT YEAR GIVEN A CURRENT MONTH AND A SET FINANCIAL YEARR\n  def financial_year_of(month, year)\n    # CONDITIONS\n    # AU[7,6] .. for values between 1-6\n    not_overlaping_months_in_year = (month < financial_year_start_month and financial_year_start_month > financial_year_end_month)\n    # US[1,12] .. for all values\n    straight_months_in_year = (month >= financial_year_start_month and financial_year_start_month < financial_year_end_month)\n\n    if not_overlaping_months_in_year or straight_months_in_year\n      year\n    else\n      year-1\n    end\n  end\n\n  def month_dates_for_financial_year(financial_year)\n    result = []\n    financial_months.each do |month|\n      result << \"#{self.financial_year_of(month, financial_year.to_i)}-#{month}-01\"\n    end\n    result\n  end\n\n  def current_forecast\n    current_fy_months =  month_dates_for_financial_year(FinancialYear.new(self).year)\n    sales = SalesSummary.where(tenant: self, monthly: true).where(\"closeoutdate > ?\", current_fy_months[0]).order(:closeoutdate)\n    ytd_sales = exclude_non_sales ? sales.sum(:totalsales) : sales.sum(\"nontaxsales + taxablesales\")\n    remaining_budget = current_budget.nil? ? 0 : current_budget.remaining_yearly_budget\n    total = ytd_sales + remaining_budget\n  end\n\n  def financial_year_from_date(date)\n    # NOT WORKING\n    FinancialYear.new(self).year(Time.new(date.year, date.month, date.day, 0, 0, 0, Time.now.in_time_zone(time_zone).strftime(\"%:z\")).to_date)\n  end\n\n  def current_budget(year = nil)\n    if year.present?\n      budgets.where(financial_year: FinancialYear.new(self).year(Time.new(year, 1, 1, 0, 0, 0, Time.now.in_time_zone(time_zone).strftime(\"%:z\")).to_date)).first\n    else\n      budgets.where(financial_year: FinancialYear.new(self).year(Time.now.in_time_zone(time_zone).to_date)).first\n    end\n  end\n\n  def setup_ngrok\n    auth = {username: Rails.application.secrets.ngrok_username, password: Rails.application.secrets.ngrok_password}\n\n    if ngrok_uuid.blank?\n      self.ngrok_uuid = SecureRandom.uuid\n      save\n    end\n\n    if ngrok_authtoken.blank?\n      url    = \"https://api.ngrok.com/credentials\"\n      body   = {\"description\" => \"Print Speak API\"}\n      result = HTTParty.post(url, basic_auth: auth, headers: {\"Ngrok-Version\" => \"0\"} , body: body).parsed_response\n      self.ngrok_authtoken = result[\"token\"]\n      save\n    end\n\n    if ngrok_remote_addr.blank?\n      url    = \"https://api.ngrok.com/reserved_addrs\"\n      body   = {\"region\" => RegionConfig.require_value(\"region\")}\n      result = HTTParty.post(url, basic_auth: auth, headers: {\"Ngrok-Version\" => \"0\"} , body: body).parsed_response\n      self.ngrok_remote_addr = result[\"addr\"]\n      save\n    end\n\n    root_ca = OpenSSL::X509::Certificate.new(File.read(\"#{Rails.root}/.ca/ca.crt\"))\n\n    needs_cert = ngrok_crt.blank? || ngrok_key.blank?\n    if !needs_cert\n      begin\n        cert = OpenSSL::X509::Certificate.new(ngrok_crt)\n        key = OpenSSL::PKey::RSA.new(ngrok_key)\n        needs_cert = true unless cert.check_private_key(key) && cert.verify(root_ca.public_key)\n      rescue StandardError\n        needs_cert = true\n      end\n    end\n\n    if needs_cert\n      root_key = OpenSSL::PKey::RSA.new(Rails.application.secrets.ngrok_ca_key)\n\n      key = OpenSSL::PKey::RSA.new(4096)\n      cert = OpenSSL::X509::Certificate.new\n      cert.version = 2\n      cert.serial = \"0x#{ngrok_uuid.tr('-', '')}\".hex\n      cert.subject = OpenSSL::X509::Name.parse(\"/C=USA/O=etcd-ca/OU=#{ngrok_uuid}/CN=127.0.0.1\")\n      cert.issuer = root_ca.subject\n      cert.public_key = key.public_key\n      cert.not_before = Time.now\n      cert.not_after = root_ca.not_after\n      ef = OpenSSL::X509::ExtensionFactory.new\n      ef.subject_certificate = cert\n      ef.issuer_certificate = root_ca\n      cert.add_extension(ef.create_extension(\"extendedKeyUsage\", \"clientAuth,serverAuth\", false))\n      cert.add_extension(ef.create_extension(\"subjectKeyIdentifier\", \"hash\", false))\n      cert.add_extension(ef.create_extension(\"authorityKeyIdentifier\", \"keyid:always\", false))\n      cert.add_extension(ef.create_extension(\"subjectAltName\", \"IP: 127.0.0.1\", false))\n      cert.sign(root_key, OpenSSL::Digest.new(\"SHA256\"))\n\n      self.ngrok_crt = cert.to_pem\n      self.ngrok_key = key.to_pem\n    end\n\n    save\n  end\n\n  def admin_test_emails\n    users.where(role: \"Admin\").pluck(:test_email).map { |s| s unless s.try(:strip).blank? }.compact.uniq\n  end\n\n  def users\n    enterprise.users.where(tenant_id: id)\n  end\n\n  def primary_users\n    users.where(\"users.parent_id = users.id\")\n  end\n\n  def visible_users\n    if enterprise.show_multi_users\n      users.where(role: %w[User Admin])\n    else\n      primary_users.where(role: %w[User Admin])\n    end\n  end\n\n  def user_inboxes(users = nil)\n    result = EmailInbox.none\n\n    users = primary_users if users.nil?\n    if users && users.count > 0\n      query = %Q{\n        SELECT id, address, users, users_array->>'user_id' AS user_id\n        FROM inboxes, json_array_elements(users::json) users_array\n        WHERE json_typeof(users::json) = 'array'\n        AND users_array->>'user_id' IN (#{users.pluck(:id).map { |s| \"'#{s}'\" }.to_csv})\n        AND users_array->>'tenant_id' = '#{id}'\n      }\n      result = EmailInbox.find_by_sql(query)\n    end\n\n    result\n  end\n\n  def test_emails\n    result = []\n\n    result = test_email.split(\",\").map { |s| s.try(:strip) }.compact.uniq unless test_email.try(:strip).blank?\n\n    result = admin_test_emails if result.count == 0\n\n    result\n  end\n\n  def banner\n    Asset.where(id: banner_id, enterprise_id: enterprise_id, category: \"Banner\").first\n  end\n\n  def wanted_skip_weekend\n    date_after_days_skip_weekend(wanted_days || 0)\n  end\n\n  def follow_skip_weekend\n    date_after_days_skip_weekend(follow_up_days || 0)\n  end\n\n  def reorder_skip_weekend\n    date_after_days_skip_weekend(reorder_days)\n  end\n\n  def contextual_email_template(klass)\n    template_ids = EmailTemplate.by_tenant(self).pluck(:id)\n    result = 0\n\n    if klass == Estimate\n      result = estimate_email_template\n      result = enterprise.default_estimate_emailt_id if result.nil? || result == 0\n    elsif klass == Order\n      result = order_email_template\n      result = enterprise.default_order_emailt_id if result.nil? || result == 0\n    elsif klass == Sale\n      result = sale_email_template\n      result = enterprise.default_sale_emailt_id if result.nil? || result == 0\n    elsif klass == Contact\n      result = contact_email_template\n      result = enterprise.default_contact_emailt_id if (result.nil? || result == 0)\n    elsif klass == Company\n      result = company_email_template\n      result = enterprise.default_company_emailt_id if result.nil? || result == 0\n    elsif klass == Inquiry\n      result = inquiry_email_template\n      result = enterprise.default_inquiry_emailt_id if result.nil? || result == 0\n    end\n\n    result = 0 unless template_ids.include?(result)\n\n    result = enterprise.default_email_template_id if result.nil? || result == 0\n\n    result\n  end\n\n  def contacts_matching_email(email_address)\n    clean_email = Email.clean_email(email_address)\n\n    result = Contact.none\n    if !clean_email.blank?\n      result = Contact.where(tenant_id: id).where(\"LOWER(TRIM(contacts.email)) = ?\", clean_email)\n    end\n\n    result\n  end\n\n  def unsubscribe_email_addresses(addresses, type, data: {}, ignore_id: 0)\n    if !addresses.try(:count).nil? && addresses.try(:count) > 0\n      addresses.each do |address|\n        contacts = Contact.where(tenant_id: id).where(\"LOWER(TRIM(email)) = ?\", address.downcase) unless address.blank?\n        contacts.each do |contact|\n          next if contact.id == ignore_id\n          contact.unsubscribe(type, data: data, propagate: false)\n        end\n      end\n    end\n  end\n\n  def ranked_user_statistics(statistic_for, start_date, end_date)\n    user_type = \"user\"\n    name_select = \"users.first_name, users.last_name\"\n    stats = visible_users\n    if sales_rep_for_locations && !statistic_for.index(/location/).nil?\n      user_type = \"location\"\n      name_select = \"locations.name\"\n      stats = locations\n    end\n\n    stats.select(\"#{user_type}s.id, #{name_select}, COALESCE(SUM(statistics.total),0) AS total, rank() OVER (ORDER BY COALESCE(SUM(statistics.total),0) DESC, #{user_type}s.id ASC) AS position\").\n          joins(\"LEFT OUTER JOIN statistics ON #{user_type}s.id = statistics.#{user_type}_id AND statistics.tenant_id = #{id} AND statistics.date BETWEEN '#{start_date.to_date}' AND '#{end_date.to_date}' AND statistics.statistic_for = '#{statistic_for}'\").\n          group(\"#{user_type}s.id\").\n          reorder(\"position ASC\")\n  end\n\n  def user_statistics(statistic_for, start_date, end_date)\n    user_type = \"user\"\n    ids = visible_users.pluck(:id)\n    if sales_rep_for_locations && !statistic_for.index(/location/).nil?\n      user_type = \"location\"\n      ids = locations.pluck(:id)\n    end\n\n    result = Statistic.none\n    if ids.count > 0\n      result = Statistic.where(tenant_id: id, statistic_for: statistic_for, date: start_date..end_date).where(\"statistics.#{user_type}_id IN (?)\", ids)\n    end\n\n    result\n  end\n\n  def unmapped_statistics(statistic_for, start_date, end_date)\n    user_type = \"user\"\n    ids = visible_users.pluck(:id)\n    if sales_rep_for_locations && !statistic_for.index(/location/).nil?\n      user_type = \"location\"\n      ids = locations.pluck(:id)\n    end\n\n    result = Statistic.none\n    if ids.count > 0\n      result = Statistic.where(tenant_id: id, statistic_for: statistic_for, date: start_date..end_date).where(\"statistics.#{user_type}_id NOT IN (?) or statistics.#{user_type}_id IS NULL\", ids)\n    end\n\n    result\n  end\n\n  def task_types\n    TaskType.tenant(self)\n  end\n\n  def admin_addresses\n    addresses = []\n    admin_users = primary_users.where(role: \"Admin\")\n    admin_users.each do |admin_user|\n      email_addr = admin_user.email\n      email_addr = admin_user.default_alias if !admin_user.default_alias.blank?\n      addresses << email_addr if !email_addr.blank?\n    end\n    addresses\n  end\n\n  def full_address\n    %Q{#{ApplicationController.helpers.combined_address(address_1, address_2)}, #{suburb} #{state}, #{postcode} }\n  end\n\n  def date_after_days_skip_weekend(days_number)\n    now = Time.zone.now.in_time_zone(time_zone)\n    date_helper = DateHelper.new(@start_date, @end_date, self)\n\n    initial_days_number = days_number\n    business_days = date_helper.business_days_between(now, now + initial_days_number.days)\n\n\n    while business_days <= initial_days_number\n      days_number += 1\n      business_days = date_helper.business_days_between(now, now + days_number.days)\n    end\n\n    # LOOP +1 RETURNING DATE UNTIL IT IS NOT A HOLIDAY\n    end_date_is_holiday = true\n\n    while end_date_is_holiday\n      holiday = Holiday.tenant(self).where('holiday_dates.date': now + days_number.days)\n\n      holiday.present? ? days_number += 1 : end_date_is_holiday = false\n    end\n\n    now + days_number.days\n  end\n\n  def self.web_to_csv(data)\n    CSV.generate(col_sep: enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Centre\", \"No. of Companies\", \"Orders #\", \"Sales\", \"Orders LY#\", \"Sales LY\", \"Avg. Order\"]\n      csv << desired_columns\n      data.map do |tenant|\n        csv << [\n          \"#{ tenant[:tenant_name] }\",\n          \"#{ tenant[:companies].try(:count) || 0 }\",\n          \"#{ tenant[:companies].map { |c| c['invoice_count'].to_i }.sum }\",\n          \"$#{ tenant[:companies].map { |c| c['invoice_value'].to_f }.sum }\",\n          \"#{ tenant[:companies].map { |c| c['invoice_count_ly'].to_i }.sum }\",\n          \"$#{ tenant[:companies].map { |c| c['invoice_value_ly'].to_f }.sum }\",\n          \"$#{ tenant[:companies].map { |c| c['invoice_value'].to_f }.sum / tenant[:companies].map { |c| c['invoice_count'].to_i }.sum }\",\n        ]\n      end\n    end\n  end\n\n  def self.sales_tag_to_csv(data)\n    CSV.generate(col_sep: enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Centre\", \"No. of Companies\", \"# of Invoices\", \"Tagged Sales\", \"# of Invoices LY\", \"Tagged Sales LY\", \"Avg. Order\"]\n      csv << desired_columns\n      data.map do |tenant|\n        csv << [\n          \"#{ tenant[:tenant_name] }\",\n          \"#{ tenant[:total_company_count] }\",\n          \"#{ tenant[:total_invoice_count] }\",\n          \"$#{ tenant[:total_sales] }\",\n          \"#{ tenant[:total_invoice_count_ly] }\",\n          \"$#{ tenant[:total_sales_ly] }\",\n          \"$#{ tenant[:avg_order] }\",\n        ]\n      end\n    end\n  end\n\n  def self.links_urls_to_csv(data, enterprise)\n    CSV.generate(col_sep: enterprise.csv_col_sep) do |csv|\n      csv << [I18n.t(\"platform.tenant_number\", mbe: Platform.is_mbe?(enterprise)), I18n.t(\"platform.tenant_name\", mbe: Platform.is_mbe?(enterprise)),\n             \"Blog\", \"Facebook\", \"Twitter\", \"Instagram\", \"Pinterest\", \"Youtube\", \"LinkedIn\", I18n.t(\"website_url\"), I18n.t(\"request_quote_url\")]\n      data.map do |tenant|\n        csv << [\n          \"#{tenant.number}\",\n          \"#{tenant.name}\",\n          \"#{tenant.blog}\",\n          \"#{tenant.facebook}\",\n          \"#{tenant.twitter}\",\n          \"#{tenant.instagram}\",\n          \"#{tenant.pinterest}\",\n          \"#{tenant.youtube}\",\n          \"#{tenant.linked_in}\",\n          \"#{tenant.website_url}\",\n          \"#{tenant.request_quote_url}\",\n        ]\n      end\n    end\n  end\n\n  def self.sales_metrics_to_csv(data)\n    CSV.generate do |csv|\n      headers = [\"\", \"\", \"Sales\", \"\", \"\", \"Customers\", \"\", \"\", \"Customer Avg\"]\n      csv << headers\n      columns = [\"Tenant Name\", \"Tenant Number\", \"Apr to Mar 2020\", \"Apr to Mar 2021\", \"Diff\", \"Apr to Mar 2020\", \"Apr to Mar 2021\", \"Churn\", \"Apr to Mar 2020\", \"Apr to Mar 2021\", \"Diff\"]\n      csv << columns\n      data.map do |tenant|\n        sales_diff = (tenant.sales_py - tenant.sales_ly).round(0)\n        customer_churn = tenant.customers_py - tenant.customers_ly\n        per_customer_ly =  tenant.customers_ly > 0 ? (tenant.sales_ly / tenant.customers_ly).round(0) : 0\n        per_customer_py = tenant.customers_py > 0 ? (tenant.sales_py / tenant.customers_py).round(0) : 0\n        per_customer_diff = per_customer_py - per_customer_ly\n        csv << [\n          \"#{tenant.marketing_name}\",\n          \"#{tenant.number}\",\n          \"#{tenant.sales_ly.to_i}\",\n          \"#{tenant.sales_py.to_i}\",\n          \"#{sales_diff.round(0)}\",\n          \"#{tenant.customers_ly}\",\n          \"#{tenant.customers_py}\",\n          \"#{customer_churn}\",\n          \"#{per_customer_ly}\",\n          \"#{per_customer_py}\",\n          \"#{per_customer_diff}\",\n        ]\n      end\n    end\n  end\n\n  def calculate_company_lifetime_values\n    begin\n      companies = self.companies.where(needs_lifetime_value_recalc: true).order(\"rolling_12_month_rank asc\").limit(10)\n\n      if exclude_non_sales.nil?\n        self.exclude_non_sales = false\n      end\n\n      companies.each do |company|\n        account_id = company.platform_id\n        account_history_ids = AccountHistoryData.where(tenant: self, source_account_id: account_id).order(platform_id: :asc).pluck(:platform_id).to_csv\n\n        if !account_history_ids.empty?\n          total = 0\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_1).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_2).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_3).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_4).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_5).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_6).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_7).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_8).first[\"sum\"].to_f\n          total -= connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids).lifetime_value_9).first[\"sum\"].to_f\n          company.lifetime_value = total\n        end\n\n        company.needs_lifetime_value_recalc = false\n        company.save\n      end\n    rescue PG::ConnectionBad => e\n      # IGNORE, COMMON FOR CONNECTIONS TO BE DOWN AS REMOTE SYSTEMS ARE UNRELIABLE\n    rescue StandardError => e\n      raise e\n    end\n  end\n\n  def dirty_update\n    begin\n      Printsmith::Import::Invoice.new(self, 50, connection).perform_dirty_update\n      Printsmith::Import::Estimate.new(self, 50, connection).perform_dirty_update\n      Printsmith::Import::Invoice.new(self, 50, connection).perform_dirty_skip_pdf_update\n      Printsmith::Import::Estimate.new(self, 50, connection).perform_dirty_skip_pdf_update\n\n    rescue ActiveRecord::StatementInvalid\n    rescue PG::UnableToSend => e\n    rescue PG::ConnectionBad => e\n    rescue StandardError => e\n      # raise error if something other then connection issue\n      raise e\n    end\n  end\n\n  def address_blacklist\n    blacklist = []\n\n    if !email_blacklist.blank?\n      email_blacklist.lines.each do |address|\n        if address.include?(\"@\")\n          clean_address = Email.clean_email(address)\n          blacklist << clean_address if !clean_address.blank?\n        end\n      end\n    end\n\n    if !enterprise.email_blacklist.blank?\n      enterprise.email_blacklist.lines.each do |address|\n        if address.include?(\"@\")\n          clean_address = Email.clean_email(address)\n          blacklist << clean_address if !clean_address.blank?\n        end\n      end\n    end\n\n    blacklist.compact.uniq\n  end\n\n  def domain_blacklist\n    blacklist = []\n\n    if !email_blacklist.blank?\n      email_blacklist.lines.each do |domain|\n        if !domain.include?(\"@\")\n          blacklist << domain.strip if !domain.strip.blank?\n        end\n      end\n    end\n\n    if !enterprise.email_blacklist.blank?\n      enterprise.email_blacklist.lines.each do |domain|\n        if !domain.include?(\"@\")\n          blacklist << domain.strip if !domain.strip.blank?\n        end\n      end\n    end\n\n    blacklist.compact.uniq\n  end\n\n  def prospect_statuses\n    ProspectStatus.where(lead_type_id: 0, tenant_id: id, prospect_status_version_id: 0).order(name: :asc).all\n  end\n\n  def available_lead_types\n    if use_new_lead\n      LeadType.by_tenant(self)\n    else\n      available_old_lead_types\n    end\n  end\n\n  def available_old_lead_types\n    LeadType.by_tenant_old(self)\n  end\n\n  def used_archived_lead_types\n    LeadType.by_tenant_archived(self)\n  end\n\n  def default_lead_type\n    if use_new_lead && default_lead_type_id && show_lead_types\n      default_lead_type = default_lead_type_id\n    elsif use_new_lead && available_lead_types.where(is_default: true).first\n      default_lead_type = available_lead_types.where(is_default: true).first.id\n    elsif !use_new_lead\n      default_lead_type = available_lead_types.where(name: \"New\").first.try(:id)\n    end\n\n    lead_type = available_lead_types.where(id: default_lead_type).first || available_lead_types.first\n  end\n\n  def platform_lead_sources\n    if !Platform.is_mbe?(self)\n      lead_sources\n    else\n      LeadSource.where(enterprise_id: enterprise_id).pluck(:name).join(\",\").to_s\n    end\n  end\n\n  def couriers\n    result = {}\n\n    if platform_data && platform_data[\"couriers\"]\n      result = platform_data[\"couriers\"]\n    end\n\n    result\n  end\n\n  def courier_services(courier_id)\n    couriers.select { |courier| courier[\"id\"].to_i == courier_id.to_i }.first.try(:[], \"services\") || []\n  end\n\n  private\n\n  def to_db_connection\n    # \"connect_timeout=5 user=#{printsmith_username} password=#{printsmith_password} port=#{printsmith_port} host=#{printsmith_ip} dbname=#{printsmith_database} sslmode=verify-ca sslrootcert=#{Rails.root}/.ca/ca.crt\"\n    \"connect_timeout=5 user=#{printsmith_username} password=#{printsmith_password} port=#{printsmith_port} host=#{printsmith_ip} dbname=#{printsmith_database} sslmode=prefer sslrootcert=#{Rails.root}/.ca/ca.crt\"\n\n    # if Rails.env.production?\n    #   \"user=#{printsmith_username} password=#{printsmith_password} port=#{printsmith_port} host=#{printsmith_ip} dbname=#{printsmith_database} sslmode=prefer sslrootcert=#{Rails.root}/.ca/ca.crt\"\n    # else\n    #   \"user=postgres password=PrintSmith^2012 port=5432 host=localhost dbname=printsmith_db\"\n    # end\n  end\nend\n",
          "public": "# Check out these methods:\n#  - contextual_email_template\n#  - user_statistics\n#  - unmapped_statistics\n#  - web_to_csv\n#  - sales_tag_to_csv\n#  - links_urls_to_csv\n#  - calculate_company_lifetime_values\n#  - dirty_update\nclass Tenant < ActiveRecord::Base\n  extend RailsUpgrade\n\n  default_scope { order(name: :asc) }\n\n  belongs_to :enterprise, **belongs_to_required\n  validates :enterprise, presence: { message: \"must exist\" } if rails4?\n\n  has_and_belongs_to_many :groups\n  has_many :account_history_data, inverse_of: :tenant, class_name: \"AccountHistoryData\"\n  has_many :action_logs, inverse_of: :tenant\n  has_many :activities, inverse_of: :tenant\n  has_many :addresses, inverse_of: :tenant\n  has_many :adjustments, inverse_of: :tenant\n  has_many :api_logs, inverse_of: :tenant\n  has_many :assets, inverse_of: :tenant\n  has_many :background_jobs, inverse_of: :tenant\n  has_many :backups, inverse_of: :tenant\n  has_many :budgets\n  has_many :business_plans\n  has_many :campaigns, inverse_of: :tenant\n  has_many :campaign_calendar_entries, inverse_of: :tenant\n  has_many :campaign_counts, inverse_of: :tenant\n  has_many :cash_sales\n  has_many :comments, inverse_of: :tenant\n  has_many :companies, inverse_of: :tenant\n  has_many :contacts, inverse_of: :tenant\n  has_many :contact_groups, inverse_of: :tenant\n  has_many :contact_lists, inverse_of: :tenant\n  has_many :contact_list_counts, inverse_of: :tenant\n  has_many :contact_list_exclusions, inverse_of: :tenant\n  has_many :deployments, inverse_of: :tenant\n  has_many :emails, inverse_of: :tenant\n  has_many :email_credentials, inverse_of: :tenant\n  has_many :email_templates, inverse_of: :tenant\n  has_many :email_validations, inverse_of: :tenant\n  has_many :estimates, inverse_of: :tenant\n  has_many :estimate_elements, inverse_of: :tenant\n  has_many :etl_settings, inverse_of: :tenant\n  has_many :events, inverse_of: :tenant\n  has_many :event_stats, inverse_of: :tenant\n  has_many :filter_defaults, inverse_of: :tenant\n  has_many :hidden_email_templates, inverse_of: :tenant\n  has_many :hidden_holidays, inverse_of: :tenant\n  has_many :holidays, inverse_of: :tenant\n  has_many :identities, inverse_of: :tenant\n  has_many :imports\n  has_many :inquiries, inverse_of: :tenant\n  has_many :interest_contexts, inverse_of: :tenant\n  has_many :invoices, inverse_of: :tenant\n  has_many :invoice_elements, inverse_of: :tenant\n  has_many :locations, inverse_of: :tenant\n  has_many :logs\n  has_many :meetings, inverse_of: :tenant\n  has_many :metric_results\n  has_many :metrics\n  has_many :next_activities, inverse_of: :tenant\n  has_many :notes, inverse_of: :tenant\n  has_many :shipments, inverse_of: :tenant\n  has_many :orders, inverse_of: :tenant\n  has_many :invoiced_orders, inverse_of: :tenant, class_name: \"Order\" # mbe / for dev\n  has_many :phone_calls\n  has_many :pings, inverse_of: :tenant\n  has_many :pending_attachments, inverse_of: :tenant\n  has_many :phone_calls, inverse_of: :tenant\n  has_many :portal_comments, inverse_of: :tenant\n  has_many :production_locations, inverse_of: :tenant\n  has_many :proofs, inverse_of: :tenant\n  has_many :reports, inverse_of: :tenant\n  has_many :sales, inverse_of: :tenant\n  has_many :sales_base_taxes, inverse_of: :tenant\n  has_many :sales_categories, inverse_of: :tenant\n  has_many :sales_reps, inverse_of: :tenant\n  has_many :sales_rep_updates, inverse_of: :tenant\n  has_many :sales_summaries, inverse_of: :tenant\n  has_many :sales_summary_pickups, inverse_of: :tenant\n  has_many :salestargets, inverse_of: :tenant\n  has_many :saved_reports, inverse_of: :tenant\n  has_many :sms_templates, inverse_of: :tenant\n  has_many :statistics, inverse_of: :tenant\n  has_many :tags, inverse_of: :tenant\n  has_many :tag_categories, inverse_of: :tenant\n  has_many :taken_bys, inverse_of: :tenant\n  has_many :taken_by_updates, inverse_of: :tenant\n  has_many :targets, inverse_of: :tenant\n  has_many :tasks, dependent: :destroy\n  # has_many :task_types, inverse_of: :tenant # TODO investigate/refactor\n  has_many :unsubscribes, inverse_of: :tenant\n  has_many :workflows, inverse_of: :tenant\n  has_many :holidays\n  # has_many :task_types\n  has_many :lead_types\n  has_many :prospect_status_items\n  has_many :notes\n  has_many :meetings\n  has_many :wips\n  has_many :company_metrics\n\n  has_many :next_activities\n  has_many :sales_tag_by_months\n\n  scope :real, -> { enabled.where(training: false, demo: false) }\n  scope :enabled, -> { where(inital_import_complete: true) }\n  scope :disabled, -> { where(inital_import_complete: false) }\n\n  scope :mbe, -> { joins(:enterprise).where(enterprises: {platform_type: \"mbe\"}) }\n  scope :printsmith, -> { joins(:enterprise).where(enterprises: {platform_type: \"printsmith\"}) }\n\n  scope :sales_metrics_range, -> (c_start, c_finish, ly_start, ly_finish) { select(\"id, number, marketing_name, (#{Invoice.select('COALESCE(SUM(grand_total), 0)').where(pickup_date: c_start..c_finish).where('invoices.tenant_id = tenants.id').to_sql}) as sales_py, (#{Invoice.select('COALESCE(COUNT(DISTINCT company_id), 0)').where(pickup_date: c_start..c_finish).where('invoices.tenant_id = tenants.id').to_sql}) as customers_py, (#{Invoice.select('COALESCE(SUM(grand_total), 0)').where(pickup_date: ly_start..ly_finish).where('invoices.tenant_id = tenants.id').to_sql}) as sales_ly, (#{Invoice.select('COALESCE(COUNT(DISTINCT company_id), 0)').where(pickup_date: ly_start..ly_finish).where('invoices.tenant_id = tenants.id').to_sql}) as customers_ly\").where(enterprise_id: 3).where.not(id: 210) }\n\n  # scope :mbehub_connected, -> {\n  #   mbehub.where.not(mbe_username: [nil, \"\"]).\n  #   where.not(mbe_password: [nil, \"\"]).\n  #   where.not(mbe_tenant_id: nil).\n  #   where.not(mbe_multistore_id: nil).\n  #   where.not(mbe_store_id: nil)\n  # }\n\n  validate do |tenant|\n    begin\n      Mail::Address.new(\"#{tenant.marketing_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      tenant.errors[:base] << \"Marketing name contains invalid characters\"\n    end\n  end\n\n  def needs_taken_by_mappings\n    if taken_by_for_locations\n      if locations.where(location_id: nil).count > 0\n        true\n      else\n        false\n      end\n    else\n      if taken_bys.where(user_id: nil).count > 0\n        true\n      else\n        false\n      end\n    end\n  end\n\n  # TODO: @refactor https://app.clickup.com/t/4azpgb\n  def connection\n    @_connection ||= PG.connect(to_db_connection)\n  end\n\n  def ngrok_connector\n    \"#{ngrok_uuid}.#{PrintSpeak::Application.ngrok_domain}\"\n  end\n\n  def display_name\n    tenant_picker_name.blank? ? name : tenant_picker_name\n  end\n\n  def to_s\n    name\n  end\n\n  # TODO: @refactor can a gem do this?\n  def estimate_name_enforce?\n    estimate_name_enforce\n  end\n\n  # TODO: @refactor can a gem do this?\n  def invoice_name_enforce?\n    invoice_name_enforce\n  end\n\n  # TODO: @refactor can a gem do this?\n  def shipment_name_enforce?\n    false\n  end\n\n  def preferred_estimate_name\n    return estimate_name if estimate_name_enforce?\n    estimate_name_default\n  end\n\n  def preferred_invoice_name\n    return invoice_name if invoice_name_enforce?\n    invoice_name_default\n  end\n\n  def preferred_shipment_name\n    \"\"\n  end\n\n  # TODO: @decorator @presenter\n  def estimate_name_default_friendly\n    URI.unescape(estimate_name_default) if estimate_name_default\n  end\n\n  def estimate_name_list_friendly\n    return estimate_name_list.split(\",\").map { |z| \"#{URI.unescape(z)}\" } if estimate_name_list\n    \"\"\n  end\n\n  def estimate_name_friendly\n    return URI.unescape(estimate_name) if estimate_name\n    \"\"\n  end\n\n  def invoice_name_default_friendly\n    URI.unescape(invoice_name_default) if invoice_name_default\n  end\n\n  def invoice_name_list_friendly\n    return invoice_name_list.split(\",\").map { |z| \"#{URI.unescape(z)}\" } if invoice_name_list\n    \"\"\n  end\n\n  def invoice_name_friendly\n    return URI.unescape(invoice_name) if invoice_name\n    \"\"\n  end\n\n  def use_printsmith_api_v3?\n    return true if (printsmith_api_version == \"v3.0\" || printsmith_api_version == \"no such service\" || printsmith_api_version.blank?) && enforce_old_printsmith_api == false\n    false\n  end\n\n  def sms_allowed?\n    return true if sms_send_number.present? && use_sms.present?\n    false\n  end\n\n  def last_successful_import_date(resource_type)\n    send(resource_type).order(\"updated_at DESC\").first.try(:updated_at) || Date.new(1900, 1, 1)\n  end\n\n  def ngrok_config_yml\n    <<~EOY\n      pprof_addr: 127.0.0.1:4041\n      server_addr: #{PrintSpeak::Application.ngrok_tunnel}\n      authtoken: #{ngrok_authtoken}\n      tunnels:\n        db:\n          proto: pg\n          addr: #{printsmith_local_port || \"5432\"}\n          remote_addr: #{ngrok_remote_addr}\n          crt: c:\\\\ngrok\\\\#{ngrok_uuid}.crt\n          key: c:\\\\ngrok\\\\#{ngrok_uuid}.key.insecure\n        admin:\n          proto: http\n          bind_tls: false\n          addr: 9191\n          hostname: #{ngrok_connector}\n    EOY\n  end\n\n  def change_to_time_zone(time)\n    time.asctime.in_time_zone(time_zone)\n  end\n\n  # These will be replaced with a day or month depending on if the tenant is set for day or month first\n  # %%DM the day or month zero padded (%d or %m)\n  # %%_DM the day or month blank padded (%e or %_m)\n  # %%-DM the day or month no padded (%-d or %-m)\n  def local_strftime(time, format = \"%%DM-%%DM-%Y\", default_value = I18n.t(\"invalid\"))\n    result = default_value\n\n    day = !display_month_first\n    format = day_month_replacement(format, day)\n    day = !day\n    format = day_month_replacement(format, day)\n    result =   time.in_time_zone(time_zone).strftime(format) unless time.nil?\n\n    result\n  end\n\n  def day_month_replacement(format = \"\", day = true)\n    result = format\n    match = format.match(/%%([_-]?)DM/)\n    if match\n      variation = match.captures.first\n      case variation\n      when \"-\"\n        result = format.sub(match.to_s, day ? \"%-d\" : \"%-m\")\n      when \"_\"\n        result = format.sub(match.to_s, day ? \"%e\" : \"%-m\")\n      else\n        result = format.sub(match.to_s, day ? \"%d\" : \"%m\")\n      end\n    end\n    result\n  end\n\n  def date_format(stftime_format = true)\n    if stftime_format\n      display_month_first ? \"%m-%d-%Y\" : \"%d-%m-%Y\"\n    else\n      display_month_first ? \"MM-DD-YYYY\" : \"DD-MM-YYYY\"\n    end\n  end\n\n  def parse_datetime(datetime)\n    result = nil\n\n    begin\n      if display_month_first\n        result = DateTime.strptime(datetime, \"%m-%d-%Y %l:%M %p\")\n      else\n        result = DateTime.strptime(datetime, \"%d-%m-%Y %l:%M %p\")\n      end\n    rescue StandardError\n    end\n\n    result\n  end\n\n  def parse_date(date)\n    result = nil\n\n    begin\n      if display_month_first\n        result = DateTime.strptime(date, \"%m-%d-%Y\").to_date\n      else\n        result = DateTime.strptime(date, \"%d-%m-%Y\").to_date\n      end\n    rescue StandardError\n    end\n\n    result\n  end\n\n  def backup_config\n    if backup_api_key.blank?\n      self.backup_api_key = SecureRandom.hex(32)\n      save\n    end\n    backup_password = backup_api_key\n    backup_password = Rails.application.secrets.build_update_http_basic_password if backup_password.blank?\n\n    config = Hash.new\n    config[\"Times\"] = [{Hour: 22, Minute: 30, Second: 0}]\n    config[\"TenantId\"] = id\n    config[\"Updater\"] = {Url: Rails.application.routes.url_helpers.url_for(controller: :builds, action: :update, only_path: false), User: \"update\", Password: backup_password}\n    config[\"NotifyAPI\"] = Rails.application.routes.url_helpers.url_for(controller: :backups, action: :create, only_path: false)\n    config[\"LocalPath\"] = local_path\n    config[\"PgDumpPath\"] = pgdump_path\n    config[\"BackupFolder\"] = backup_path\n    config[\"RetryInterval\"] = 60\n    config[\"MaxAgeInDays\"] = 30\n    config[\"Database\"] = {Host: \"127.0.0.1\", Port: printsmith_local_port || \"5432\", Name: printsmith_database, User: printsmith_username, Password: printsmith_password}\n    config[\"S3\"] = {Region: s3_region, Bucket: s3_bucket, AccessKey: s3_access_key, ClientSecret: s3_client_secret}\n    config[\"HoneybadgerKey\"] = Rails.env.production? ? \"1912fcf8\" : \"\"\n    config\n  end\n\n  def cogs_color(cogs)\n    result = \"grey\"\n\n    if Platform.is_printsmith?(self)\n      if cogs <= cog_green_threshold\n        result = \"green\"\n      elsif cogs > cog_green_threshold && cogs <= cog_orange_threshold\n        result = \"orange\"\n      elsif cogs > cog_orange_threshold\n        result = \"red\"\n      end\n    else\n      if cogs <= cog_orange_threshold\n        result = \"red\"\n      elsif cogs > cog_orange_threshold && cogs <= cog_green_threshold\n        result = \"orange\"\n      elsif cogs > cog_green_threshold\n        result = \"green\"\n      end\n    end\n\n    result\n  end\n\n  def cogs_panel_color(cogs)\n    result = \"default\"\n\n    if Platform.is_printsmith?(self)\n      if cogs <= cog_green_threshold\n        result = \"success\"\n      elsif cogs > cog_green_threshold && cogs <= cog_orange_threshold\n        result = \"orange\"\n      elsif cogs > cog_orange_threshold\n        result = \"danger\"\n      end\n    else\n      if cogs <= cog_orange_threshold\n        result = \"danger\"\n      elsif cogs >  cog_orange_threshold && cogs <= cog_green_threshold\n        result = \"orange\"\n      elsif cogs > cog_green_threshold\n        result = \"success\"\n      end\n    end\n\n    result\n  end\n\n  def default_identity\n    Identity.where(tenant_id: id, default: true).first\n  end\n\n  def due_campaigns\n    due_campaigns = []\n    scheduled_campaigns = Campaign.require_selected_enterprise(self).without_hidden(self).scheduled(self).where(enterprise_id: enterprise_id).where(\"(tenant_id = ? OR global = ?)\", id, true).to_a\n    scheduled_campaigns.each do |campaign|\n      due_campaigns << campaign if campaign.due_today(self)\n    end\n\n    due_campaigns\n  end\n\n  def due_campaigns_color\n    result = \"primary\"\n\n    red = false\n    green = false\n\n    due_campaigns.each do |campaign|\n      if campaign.schedule_auto_send && !campaign.awaiting_approval(self)\n        green = true\n      else\n        red = true\n      end\n    end\n\n    if red && green\n      result = \"orange\"\n    elsif red\n      result = \"red\"\n    elsif green\n      result = \"green\"\n    end\n\n    result\n  end\n\n  def financial_months\n    (1..12).to_a.rotate(financial_year_start_month - 1)\n  end\n\n  # GET THE RIGHT YEAR GIVEN A CURRENT MONTH AND A SET FINANCIAL YEARR\n  def financial_year_of(month, year)\n    # CONDITIONS\n    # AU[7,6] .. for values between 1-6\n    not_overlaping_months_in_year = (month < financial_year_start_month and financial_year_start_month > financial_year_end_month)\n    # US[1,12] .. for all values\n    straight_months_in_year = (month >= financial_year_start_month and financial_year_start_month < financial_year_end_month)\n\n    if not_overlaping_months_in_year or straight_months_in_year\n      year\n    else\n      year-1\n    end\n  end\n\n  def month_dates_for_financial_year(financial_year)\n    result = []\n    financial_months.each do |month|\n      result << \"#{self.financial_year_of(month, financial_year.to_i)}-#{month}-01\"\n    end\n    result\n  end\n\n  def current_forecast\n    current_fy_months =  month_dates_for_financial_year(FinancialYear.new(self).year)\n    sales = SalesSummary.where(tenant: self, monthly: true).where(\"closeoutdate > ?\", current_fy_months[0]).order(:closeoutdate)\n    ytd_sales = exclude_non_sales ? sales.sum(:totalsales) : sales.sum(\"nontaxsales + taxablesales\")\n    remaining_budget = current_budget.nil? ? 0 : current_budget.remaining_yearly_budget\n    total = ytd_sales + remaining_budget\n  end\n\n  def financial_year_from_date(date)\n    # NOT WORKING\n    FinancialYear.new(self).year(Time.new(date.year, date.month, date.day, 0, 0, 0, Time.now.in_time_zone(time_zone).strftime(\"%:z\")).to_date)\n  end\n\n  def current_budget(year = nil)\n    if year.present?\n      budgets.where(financial_year: FinancialYear.new(self).year(Time.new(year, 1, 1, 0, 0, 0, Time.now.in_time_zone(time_zone).strftime(\"%:z\")).to_date)).first\n    else\n      budgets.where(financial_year: FinancialYear.new(self).year(Time.now.in_time_zone(time_zone).to_date)).first\n    end\n  end\n\n  def setup_ngrok\n    auth = {username: Rails.application.secrets.ngrok_username, password: Rails.application.secrets.ngrok_password}\n\n    if ngrok_uuid.blank?\n      self.ngrok_uuid = SecureRandom.uuid\n      save\n    end\n\n    if ngrok_authtoken.blank?\n      url    = \"https://api.ngrok.com/credentials\"\n      body   = {\"description\" => \"Print Speak API\"}\n      result = HTTParty.post(url, basic_auth: auth, headers: {\"Ngrok-Version\" => \"0\"} , body: body).parsed_response\n      self.ngrok_authtoken = result[\"token\"]\n      save\n    end\n\n    if ngrok_remote_addr.blank?\n      url    = \"https://api.ngrok.com/reserved_addrs\"\n      body   = {\"region\" => RegionConfig.require_value(\"region\")}\n      result = HTTParty.post(url, basic_auth: auth, headers: {\"Ngrok-Version\" => \"0\"} , body: body).parsed_response\n      self.ngrok_remote_addr = result[\"addr\"]\n      save\n    end\n\n    root_ca = OpenSSL::X509::Certificate.new(File.read(\"#{Rails.root}/.ca/ca.crt\"))\n\n    needs_cert = ngrok_crt.blank? || ngrok_key.blank?\n    if !needs_cert\n      begin\n        cert = OpenSSL::X509::Certificate.new(ngrok_crt)\n        key = OpenSSL::PKey::RSA.new(ngrok_key)\n        needs_cert = true unless cert.check_private_key(key) && cert.verify(root_ca.public_key)\n      rescue StandardError\n        needs_cert = true\n      end\n    end\n\n    if needs_cert\n      root_key = OpenSSL::PKey::RSA.new(Rails.application.secrets.ngrok_ca_key)\n\n      key = OpenSSL::PKey::RSA.new(4096)\n      cert = OpenSSL::X509::Certificate.new\n      cert.version = 2\n      cert.serial = \"0x#{ngrok_uuid.tr('-', '')}\".hex\n      cert.subject = OpenSSL::X509::Name.parse(\"/C=USA/O=etcd-ca/OU=#{ngrok_uuid}/CN=127.0.0.1\")\n      cert.issuer = root_ca.subject\n      cert.public_key = key.public_key\n      cert.not_before = Time.now\n      cert.not_after = root_ca.not_after\n      ef = OpenSSL::X509::ExtensionFactory.new\n      ef.subject_certificate = cert\n      ef.issuer_certificate = root_ca\n      cert.add_extension(ef.create_extension(\"extendedKeyUsage\", \"clientAuth,serverAuth\", false))\n      cert.add_extension(ef.create_extension(\"subjectKeyIdentifier\", \"hash\", false))\n      cert.add_extension(ef.create_extension(\"authorityKeyIdentifier\", \"keyid:always\", false))\n      cert.add_extension(ef.create_extension(\"subjectAltName\", \"IP: 127.0.0.1\", false))\n      cert.sign(root_key, OpenSSL::Digest.new(\"SHA256\"))\n\n      self.ngrok_crt = cert.to_pem\n      self.ngrok_key = key.to_pem\n    end\n\n    save\n  end\n\n  def admin_test_emails\n    users.where(role: \"Admin\").pluck(:test_email).map { |s| s unless s.try(:strip).blank? }.compact.uniq\n  end\n\n  def users\n    enterprise.users.where(tenant_id: id)\n  end\n\n  def primary_users\n    users.where(\"users.parent_id = users.id\")\n  end\n\n  def visible_users\n    if enterprise.show_multi_users\n      users.where(role: %w[User Admin])\n    else\n      primary_users.where(role: %w[User Admin])\n    end\n  end\n\n  def user_inboxes(users = nil)\n    result = EmailInbox.none\n\n    users = primary_users if users.nil?\n    if users && users.count > 0\n      query = %Q{\n        SELECT id, address, users, users_array->>'user_id' AS user_id\n        FROM inboxes, json_array_elements(users::json) users_array\n        WHERE json_typeof(users::json) = 'array'\n        AND users_array->>'user_id' IN (#{users.pluck(:id).map { |s| \"'#{s}'\" }.to_csv})\n        AND users_array->>'tenant_id' = '#{id}'\n      }\n      result = EmailInbox.find_by_sql(query)\n    end\n\n    result\n  end\n\n  def test_emails\n    result = []\n\n    result = test_email.split(\",\").map { |s| s.try(:strip) }.compact.uniq unless test_email.try(:strip).blank?\n\n    result = admin_test_emails if result.count == 0\n\n    result\n  end\n\n  def banner\n    Asset.where(id: banner_id, enterprise_id: enterprise_id, category: \"Banner\").first\n  end\n\n  def wanted_skip_weekend\n    date_after_days_skip_weekend(wanted_days || 0)\n  end\n\n  def follow_skip_weekend\n    date_after_days_skip_weekend(follow_up_days || 0)\n  end\n\n  def reorder_skip_weekend\n    date_after_days_skip_weekend(reorder_days)\n  end\n\n  def contextual_email_template(klass)\n    template_ids = EmailTemplate.by_tenant(self).pluck(:id)\n    result = 0\n\n    if klass == Estimate\n      result = estimate_email_template\n      result = enterprise.default_estimate_emailt_id if result.nil? || result == 0\n    elsif klass == Order\n      result = order_email_template\n      result = enterprise.default_order_emailt_id if result.nil? || result == 0\n    elsif klass == Sale\n      result = sale_email_template\n      result = enterprise.default_sale_emailt_id if result.nil? || result == 0\n    elsif klass == Contact\n      result = contact_email_template\n      result = enterprise.default_contact_emailt_id if (result.nil? || result == 0)\n    elsif klass == Company\n      result = company_email_template\n      result = enterprise.default_company_emailt_id if result.nil? || result == 0\n    elsif klass == Inquiry\n      result = inquiry_email_template\n      result = enterprise.default_inquiry_emailt_id if result.nil? || result == 0\n    end\n\n    result = 0 unless template_ids.include?(result)\n\n    result = enterprise.default_email_template_id if result.nil? || result == 0\n\n    result\n  end\n\n  def contacts_matching_email(email_address)\n    clean_email = Email.clean_email(email_address)\n\n    result = Contact.none\n    if !clean_email.blank?\n      result = Contact.where(tenant_id: id).where(\"LOWER(TRIM(contacts.email)) = ?\", clean_email)\n    end\n\n    result\n  end\n\n  def unsubscribe_email_addresses(addresses, type, data: {}, ignore_id: 0)\n    if !addresses.try(:count).nil? && addresses.try(:count) > 0\n      addresses.each do |address|\n        contacts = Contact.where(tenant_id: id).where(\"LOWER(TRIM(email)) = ?\", address.downcase) unless address.blank?\n        contacts.each do |contact|\n          next if contact.id == ignore_id\n          contact.unsubscribe(type, data: data, propagate: false)\n        end\n      end\n    end\n  end\n\n  def ranked_user_statistics(statistic_for, start_date, end_date)\n    user_type = \"user\"\n    name_select = \"users.first_name, users.last_name\"\n    stats = visible_users\n    if sales_rep_for_locations && !statistic_for.index(/location/).nil?\n      user_type = \"location\"\n      name_select = \"locations.name\"\n      stats = locations\n    end\n\n    stats.select(\"#{user_type}s.id, #{name_select}, COALESCE(SUM(statistics.total),0) AS total, rank() OVER (ORDER BY COALESCE(SUM(statistics.total),0) DESC, #{user_type}s.id ASC) AS position\").\n          joins(\"LEFT OUTER JOIN statistics ON #{user_type}s.id = statistics.#{user_type}_id AND statistics.tenant_id = #{id} AND statistics.date BETWEEN '#{start_date.to_date}' AND '#{end_date.to_date}' AND statistics.statistic_for = '#{statistic_for}'\").\n          group(\"#{user_type}s.id\").\n          reorder(\"position ASC\")\n  end\n\n  def user_statistics(statistic_for, start_date, end_date)\n    user_type = \"user\"\n    ids = visible_users.pluck(:id)\n    if sales_rep_for_locations && !statistic_for.index(/location/).nil?\n      user_type = \"location\"\n      ids = locations.pluck(:id)\n    end\n\n    result = Statistic.none\n    if ids.count > 0\n      result = Statistic.where(tenant_id: id, statistic_for: statistic_for, date: start_date..end_date).where(\"statistics.#{user_type}_id IN (?)\", ids)\n    end\n\n    result\n  end\n\n  def unmapped_statistics(statistic_for, start_date, end_date)\n    user_type = \"user\"\n    ids = visible_users.pluck(:id)\n    if sales_rep_for_locations && !statistic_for.index(/location/).nil?\n      user_type = \"location\"\n      ids = locations.pluck(:id)\n    end\n\n    result = Statistic.none\n    if ids.count > 0\n      result = Statistic.where(tenant_id: id, statistic_for: statistic_for, date: start_date..end_date).where(\"statistics.#{user_type}_id NOT IN (?) or statistics.#{user_type}_id IS NULL\", ids)\n    end\n\n    result\n  end\n\n  def task_types\n    TaskType.tenant(self)\n  end\n\n  def admin_addresses\n    addresses = []\n    admin_users = primary_users.where(role: \"Admin\")\n    admin_users.each do |admin_user|\n      email_addr = admin_user.email\n      email_addr = admin_user.default_alias if !admin_user.default_alias.blank?\n      addresses << email_addr if !email_addr.blank?\n    end\n    addresses\n  end\n\n  def full_address\n    %Q{#{ApplicationController.helpers.combined_address(address_1, address_2)}, #{suburb} #{state}, #{postcode} }\n  end\n\n  def date_after_days_skip_weekend(days_number)\n    now = Time.zone.now.in_time_zone(time_zone)\n    date_helper = DateHelper.new(@start_date, @end_date, self)\n\n    initial_days_number = days_number\n    business_days = date_helper.business_days_between(now, now + initial_days_number.days)\n\n\n    while business_days <= initial_days_number\n      days_number += 1\n      business_days = date_helper.business_days_between(now, now + days_number.days)\n    end\n\n    # LOOP +1 RETURNING DATE UNTIL IT IS NOT A HOLIDAY\n    end_date_is_holiday = true\n\n    while end_date_is_holiday\n      holiday = Holiday.tenant(self).where('holiday_dates.date': now + days_number.days)\n\n      holiday.present? ? days_number += 1 : end_date_is_holiday = false\n    end\n\n    now + days_number.days\n  end\n\n  def self.web_to_csv(data)\n    CSV.generate(col_sep: enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Centre\", \"No. of Companies\", \"Orders #\", \"Sales\", \"Orders LY#\", \"Sales LY\", \"Avg. Order\"]\n      csv << desired_columns\n      data.map do |tenant|\n        csv << [\n          \"#{ tenant[:tenant_name] }\",\n          \"#{ tenant[:companies].try(:count) || 0 }\",\n          \"#{ tenant[:companies].map { |c| c['invoice_count'].to_i }.sum }\",\n          \"$#{ tenant[:companies].map { |c| c['invoice_value'].to_f }.sum }\",\n          \"#{ tenant[:companies].map { |c| c['invoice_count_ly'].to_i }.sum }\",\n          \"$#{ tenant[:companies].map { |c| c['invoice_value_ly'].to_f }.sum }\",\n          \"$#{ tenant[:companies].map { |c| c['invoice_value'].to_f }.sum / tenant[:companies].map { |c| c['invoice_count'].to_i }.sum }\",\n        ]\n      end\n    end\n  end\n\n  def self.sales_tag_to_csv(data)\n    CSV.generate(col_sep: enterprise.csv_col_sep) do |csv|\n      desired_columns = [\"Centre\", \"No. of Companies\", \"# of Invoices\", \"Tagged Sales\", \"# of Invoices LY\", \"Tagged Sales LY\", \"Avg. Order\"]\n      csv << desired_columns\n      data.map do |tenant|\n        csv << [\n          \"#{ tenant[:tenant_name] }\",\n          \"#{ tenant[:total_company_count] }\",\n          \"#{ tenant[:total_invoice_count] }\",\n          \"$#{ tenant[:total_sales] }\",\n          \"#{ tenant[:total_invoice_count_ly] }\",\n          \"$#{ tenant[:total_sales_ly] }\",\n          \"$#{ tenant[:avg_order] }\",\n        ]\n      end\n    end\n  end\n\n  def self.links_urls_to_csv(data, enterprise)\n    CSV.generate(col_sep: enterprise.csv_col_sep) do |csv|\n      csv << [I18n.t(\"platform.tenant_number\", mbe: Platform.is_mbe?(enterprise)), I18n.t(\"platform.tenant_name\", mbe: Platform.is_mbe?(enterprise)),\n             \"Blog\", \"Facebook\", \"Twitter\", \"Instagram\", \"Pinterest\", \"Youtube\", \"LinkedIn\", I18n.t(\"website_url\"), I18n.t(\"request_quote_url\")]\n      data.map do |tenant|\n        csv << [\n          \"#{tenant.number}\",\n          \"#{tenant.name}\",\n          \"#{tenant.blog}\",\n          \"#{tenant.facebook}\",\n          \"#{tenant.twitter}\",\n          \"#{tenant.instagram}\",\n          \"#{tenant.pinterest}\",\n          \"#{tenant.youtube}\",\n          \"#{tenant.linked_in}\",\n          \"#{tenant.website_url}\",\n          \"#{tenant.request_quote_url}\",\n        ]\n      end\n    end\n  end\n\n  def self.sales_metrics_to_csv(data)\n    CSV.generate do |csv|\n      headers = [\"\", \"\", \"Sales\", \"\", \"\", \"Customers\", \"\", \"\", \"Customer Avg\"]\n      csv << headers\n      columns = [\"Tenant Name\", \"Tenant Number\", \"Apr to Mar 2020\", \"Apr to Mar 2021\", \"Diff\", \"Apr to Mar 2020\", \"Apr to Mar 2021\", \"Churn\", \"Apr to Mar 2020\", \"Apr to Mar 2021\", \"Diff\"]\n      csv << columns\n      data.map do |tenant|\n        sales_diff = (tenant.sales_py - tenant.sales_ly).round(0)\n        customer_churn = tenant.customers_py - tenant.customers_ly\n        per_customer_ly =  tenant.customers_ly > 0 ? (tenant.sales_ly / tenant.customers_ly).round(0) : 0\n        per_customer_py = tenant.customers_py > 0 ? (tenant.sales_py / tenant.customers_py).round(0) : 0\n        per_customer_diff = per_customer_py - per_customer_ly\n        csv << [\n          \"#{tenant.marketing_name}\",\n          \"#{tenant.number}\",\n          \"#{tenant.sales_ly.to_i}\",\n          \"#{tenant.sales_py.to_i}\",\n          \"#{sales_diff.round(0)}\",\n          \"#{tenant.customers_ly}\",\n          \"#{tenant.customers_py}\",\n          \"#{customer_churn}\",\n          \"#{per_customer_ly}\",\n          \"#{per_customer_py}\",\n          \"#{per_customer_diff}\",\n        ]\n      end\n    end\n  end\n\n  def calculate_company_lifetime_values\n    begin\n      companies = self.companies.where(needs_lifetime_value_recalc: true).order(\"rolling_12_month_rank asc\").limit(10)\n\n      if exclude_non_sales.nil?\n        self.exclude_non_sales = false\n      end\n\n      companies.each do |company|\n        account_id = company.platform_id\n        account_history_ids = AccountHistoryData.where(tenant: self, source_account_id: account_id).order(platform_id: :asc).pluck(:platform_id).to_csv\n\n        if !account_history_ids.empty?\n          total = 0\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_1).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_2).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_3).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_4).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_5).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_6).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_7).first[\"sum\"].to_f\n          total += connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids, exclude_non_sales).lifetime_value_8).first[\"sum\"].to_f\n          total -= connection.exec(Queries::CompanyLifetimeValueQuery.new(account_id, account_history_ids).lifetime_value_9).first[\"sum\"].to_f\n          company.lifetime_value = total\n        end\n\n        company.needs_lifetime_value_recalc = false\n        company.save\n      end\n    rescue PG::ConnectionBad => e\n      # IGNORE, COMMON FOR CONNECTIONS TO BE DOWN AS REMOTE SYSTEMS ARE UNRELIABLE\n    rescue StandardError => e\n      raise e\n    end\n  end\n\n  def dirty_update\n    begin\n      Printsmith::Import::Invoice.new(self, 50, connection).perform_dirty_update\n      Printsmith::Import::Estimate.new(self, 50, connection).perform_dirty_update\n      Printsmith::Import::Invoice.new(self, 50, connection).perform_dirty_skip_pdf_update\n      Printsmith::Import::Estimate.new(self, 50, connection).perform_dirty_skip_pdf_update\n\n    rescue ActiveRecord::StatementInvalid\n    rescue PG::UnableToSend => e\n    rescue PG::ConnectionBad => e\n    rescue StandardError => e\n      # raise error if something other then connection issue\n      raise e\n    end\n  end\n\n  def address_blacklist\n    blacklist = []\n\n    if !email_blacklist.blank?\n      email_blacklist.lines.each do |address|\n        if address.include?(\"@\")\n          clean_address = Email.clean_email(address)\n          blacklist << clean_address if !clean_address.blank?\n        end\n      end\n    end\n\n    if !enterprise.email_blacklist.blank?\n      enterprise.email_blacklist.lines.each do |address|\n        if address.include?(\"@\")\n          clean_address = Email.clean_email(address)\n          blacklist << clean_address if !clean_address.blank?\n        end\n      end\n    end\n\n    blacklist.compact.uniq\n  end\n\n  def domain_blacklist\n    blacklist = []\n\n    if !email_blacklist.blank?\n      email_blacklist.lines.each do |domain|\n        if !domain.include?(\"@\")\n          blacklist << domain.strip if !domain.strip.blank?\n        end\n      end\n    end\n\n    if !enterprise.email_blacklist.blank?\n      enterprise.email_blacklist.lines.each do |domain|\n        if !domain.include?(\"@\")\n          blacklist << domain.strip if !domain.strip.blank?\n        end\n      end\n    end\n\n    blacklist.compact.uniq\n  end\n\n  def prospect_statuses\n    ProspectStatus.where(lead_type_id: 0, tenant_id: id, prospect_status_version_id: 0).order(name: :asc).all\n  end\n\n  def available_lead_types\n    if use_new_lead\n      LeadType.by_tenant(self)\n    else\n      available_old_lead_types\n    end\n  end\n\n  def available_old_lead_types\n    LeadType.by_tenant_old(self)\n  end\n\n  def used_archived_lead_types\n    LeadType.by_tenant_archived(self)\n  end\n\n  def default_lead_type\n    if use_new_lead && default_lead_type_id && show_lead_types\n      default_lead_type = default_lead_type_id\n    elsif use_new_lead && available_lead_types.where(is_default: true).first\n      default_lead_type = available_lead_types.where(is_default: true).first.id\n    elsif !use_new_lead\n      default_lead_type = available_lead_types.where(name: \"New\").first.try(:id)\n    end\n\n    lead_type = available_lead_types.where(id: default_lead_type).first || available_lead_types.first\n  end\n\n  def platform_lead_sources\n    if !Platform.is_mbe?(self)\n      lead_sources\n    else\n      LeadSource.where(enterprise_id: enterprise_id).pluck(:name).join(\",\").to_s\n    end\n  end\n\n  def couriers\n    result = {}\n\n    if platform_data && platform_data[\"couriers\"]\n      result = platform_data[\"couriers\"]\n    end\n\n    result\n  end\n\n  def courier_services(courier_id)\n    couriers.select { |courier| courier[\"id\"].to_i == courier_id.to_i }.first.try(:[], \"services\") || []\n  end\n\n  ",
          "private": "private\n\n  def to_db_connection\n    # \"connect_timeout=5 user=#{printsmith_username} password=#{printsmith_password} port=#{printsmith_port} host=#{printsmith_ip} dbname=#{printsmith_database} sslmode=verify-ca sslrootcert=#{Rails.root}/.ca/ca.crt\"\n    \"connect_timeout=5 user=#{printsmith_username} password=#{printsmith_password} port=#{printsmith_port} host=#{printsmith_ip} dbname=#{printsmith_database} sslmode=prefer sslrootcert=#{Rails.root}/.ca/ca.crt\"\n\n    # if Rails.env.production?\n    #   \"user=#{printsmith_username} password=#{printsmith_password} port=#{printsmith_port} host=#{printsmith_ip} dbname=#{printsmith_database} sslmode=prefer sslrootcert=#{Rails.root}/.ca/ca.crt\"\n    # else\n    #   \"user=postgres password=PrintSmith^2012 port=5432 host=localhost dbname=printsmith_db\"\n    # end\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "web_to_csv",
                "scope": "public",
                "class_method": true,
                "arguments": "(data)"
              },
              {
                "name": "sales_tag_to_csv",
                "scope": "public",
                "class_method": true,
                "arguments": "(data)"
              },
              {
                "name": "links_urls_to_csv",
                "scope": "public",
                "class_method": true,
                "arguments": "(data, enterprise)"
              },
              {
                "name": "sales_metrics_to_csv",
                "scope": "public",
                "class_method": true,
                "arguments": "(data)"
              }
            ],
            "instance": [
              {
                "name": "needs_taken_by_mappings",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "connection",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "ngrok_connector",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "display_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "to_s",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_enforce?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_enforce?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shipment_name_enforce?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "preferred_estimate_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "preferred_invoice_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "preferred_shipment_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_default_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_list_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_default_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_list_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "use_printsmith_api_v3?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sms_allowed?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "last_successful_import_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(resource_type)"
              },
              {
                "name": "ngrok_config_yml",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "change_to_time_zone",
                "scope": "public",
                "class_method": false,
                "arguments": "(time)"
              },
              {
                "name": "local_strftime",
                "scope": "public",
                "class_method": false,
                "arguments": "(time, format = \"%%DM-%%DM-%Y\", default_value = I18n.t(\"invalid\"))"
              },
              {
                "name": "day_month_replacement",
                "scope": "public",
                "class_method": false,
                "arguments": "(format = \"\", day = true)"
              },
              {
                "name": "date_format",
                "scope": "public",
                "class_method": false,
                "arguments": "(stftime_format = true)"
              },
              {
                "name": "parse_datetime",
                "scope": "public",
                "class_method": false,
                "arguments": "(datetime)"
              },
              {
                "name": "parse_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(date)"
              },
              {
                "name": "backup_config",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "cogs_color",
                "scope": "public",
                "class_method": false,
                "arguments": "(cogs)"
              },
              {
                "name": "cogs_panel_color",
                "scope": "public",
                "class_method": false,
                "arguments": "(cogs)"
              },
              {
                "name": "default_identity",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "due_campaigns",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "due_campaigns_color",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "financial_months",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "financial_year_of",
                "scope": "public",
                "class_method": false,
                "arguments": "(month, year)"
              },
              {
                "name": "month_dates_for_financial_year",
                "scope": "public",
                "class_method": false,
                "arguments": "(financial_year)"
              },
              {
                "name": "current_forecast",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "financial_year_from_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(date)"
              },
              {
                "name": "current_budget",
                "scope": "public",
                "class_method": false,
                "arguments": "(year = nil)"
              },
              {
                "name": "setup_ngrok",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "admin_test_emails",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "primary_users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "visible_users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "user_inboxes",
                "scope": "public",
                "class_method": false,
                "arguments": "(users = nil)"
              },
              {
                "name": "test_emails",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "banner",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "wanted_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "follow_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "reorder_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "contextual_email_template",
                "scope": "public",
                "class_method": false,
                "arguments": "(klass)"
              },
              {
                "name": "contacts_matching_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(email_address)"
              },
              {
                "name": "unsubscribe_email_addresses",
                "scope": "public",
                "class_method": false,
                "arguments": "(addresses, type, data: {}, ignore_id: 0)"
              },
              {
                "name": "ranked_user_statistics",
                "scope": "public",
                "class_method": false,
                "arguments": "(statistic_for, start_date, end_date)"
              },
              {
                "name": "user_statistics",
                "scope": "public",
                "class_method": false,
                "arguments": "(statistic_for, start_date, end_date)"
              },
              {
                "name": "unmapped_statistics",
                "scope": "public",
                "class_method": false,
                "arguments": "(statistic_for, start_date, end_date)"
              },
              {
                "name": "task_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "admin_addresses",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "full_address",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "date_after_days_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": "(days_number)"
              },
              {
                "name": "calculate_company_lifetime_values",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "dirty_update",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "address_blacklist",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "domain_blacklist",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "prospect_statuses",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "available_lead_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "available_old_lead_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "used_archived_lead_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "default_lead_type",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "platform_lead_sources",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "couriers",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "courier_services",
                "scope": "public",
                "class_method": false,
                "arguments": "(courier_id)"
              },
              {
                "name": "to_db_connection",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "needs_taken_by_mappings",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "connection",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "ngrok_connector",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "display_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "to_s",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_enforce?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_enforce?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shipment_name_enforce?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "preferred_estimate_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "preferred_invoice_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "preferred_shipment_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_default_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_list_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "estimate_name_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_default_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_list_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "invoice_name_friendly",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "use_printsmith_api_v3?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sms_allowed?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "last_successful_import_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(resource_type)"
              },
              {
                "name": "ngrok_config_yml",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "change_to_time_zone",
                "scope": "public",
                "class_method": false,
                "arguments": "(time)"
              },
              {
                "name": "local_strftime",
                "scope": "public",
                "class_method": false,
                "arguments": "(time, format = \"%%DM-%%DM-%Y\", default_value = I18n.t(\"invalid\"))"
              },
              {
                "name": "day_month_replacement",
                "scope": "public",
                "class_method": false,
                "arguments": "(format = \"\", day = true)"
              },
              {
                "name": "date_format",
                "scope": "public",
                "class_method": false,
                "arguments": "(stftime_format = true)"
              },
              {
                "name": "parse_datetime",
                "scope": "public",
                "class_method": false,
                "arguments": "(datetime)"
              },
              {
                "name": "parse_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(date)"
              },
              {
                "name": "backup_config",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "cogs_color",
                "scope": "public",
                "class_method": false,
                "arguments": "(cogs)"
              },
              {
                "name": "cogs_panel_color",
                "scope": "public",
                "class_method": false,
                "arguments": "(cogs)"
              },
              {
                "name": "default_identity",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "due_campaigns",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "due_campaigns_color",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "financial_months",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "financial_year_of",
                "scope": "public",
                "class_method": false,
                "arguments": "(month, year)"
              },
              {
                "name": "month_dates_for_financial_year",
                "scope": "public",
                "class_method": false,
                "arguments": "(financial_year)"
              },
              {
                "name": "current_forecast",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "financial_year_from_date",
                "scope": "public",
                "class_method": false,
                "arguments": "(date)"
              },
              {
                "name": "current_budget",
                "scope": "public",
                "class_method": false,
                "arguments": "(year = nil)"
              },
              {
                "name": "setup_ngrok",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "admin_test_emails",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "primary_users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "visible_users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "user_inboxes",
                "scope": "public",
                "class_method": false,
                "arguments": "(users = nil)"
              },
              {
                "name": "test_emails",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "banner",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "wanted_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "follow_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "reorder_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "contextual_email_template",
                "scope": "public",
                "class_method": false,
                "arguments": "(klass)"
              },
              {
                "name": "contacts_matching_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(email_address)"
              },
              {
                "name": "unsubscribe_email_addresses",
                "scope": "public",
                "class_method": false,
                "arguments": "(addresses, type, data: {}, ignore_id: 0)"
              },
              {
                "name": "ranked_user_statistics",
                "scope": "public",
                "class_method": false,
                "arguments": "(statistic_for, start_date, end_date)"
              },
              {
                "name": "user_statistics",
                "scope": "public",
                "class_method": false,
                "arguments": "(statistic_for, start_date, end_date)"
              },
              {
                "name": "unmapped_statistics",
                "scope": "public",
                "class_method": false,
                "arguments": "(statistic_for, start_date, end_date)"
              },
              {
                "name": "task_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "admin_addresses",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "full_address",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "date_after_days_skip_weekend",
                "scope": "public",
                "class_method": false,
                "arguments": "(days_number)"
              },
              {
                "name": "calculate_company_lifetime_values",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "dirty_update",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "address_blacklist",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "domain_blacklist",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "prospect_statuses",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "available_lead_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "available_old_lead_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "used_archived_lead_types",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "default_lead_type",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "platform_lead_sources",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "couriers",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "courier_services",
                "scope": "public",
                "class_method": false,
                "arguments": "(courier_id)"
              }
            ],
            "instance_private": [
              {
                "name": "to_db_connection",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(name: :asc) }",
          "scopes": [
            {
              "name": "real",
              "scope": "-> { enabled.where(training: false, demo: false) }"
            },
            {
              "name": "enabled",
              "scope": "-> { where(inital_import_complete: true) }"
            },
            {
              "name": "disabled",
              "scope": "-> { where(inital_import_complete: false) }"
            },
            {
              "name": "mbe",
              "scope": "-> { joins(:enterprise).where(enterprises: {platform_type: \"mbe\"}) }"
            },
            {
              "name": "printsmith",
              "scope": "-> { joins(:enterprise).where(enterprises: {platform_type: \"printsmith\"}) }"
            },
            {
              "name": "sales_metrics_range",
              "scope": "-> (c_start, c_finish, ly_start, ly_finish) { select(\"id, number, marketing_name, (#{Invoice.select(\\'COALESCE(SUM(grand_total), 0)\\').where(pickup_date: c_start..c_finish).where(\\'invoices.tenant_id = tenants.id\\').to_sql}) as sales_py, (#{Invoice.select(\\'COALESCE(COUNT(DISTINCT company_id), 0)\\').where(pickup_date: c_start..c_finish).where(\\'invoices.tenant_id = tenants.id\\').to_sql}) as customers_py, (#{Invoice.select(\\'COALESCE(SUM(grand_total), 0)\\').where(pickup_date: ly_start..ly_finish).where(\\'invoices.tenant_id = tenants.id\\').to_sql}) as sales_ly, (#{Invoice.select(\\'COALESCE(COUNT(DISTINCT company_id), 0)\\').where(pickup_date: ly_start..ly_finish).where(\\'invoices.tenant_id = tenants.id\\').to_sql}) as customers_ly\").where(enterprise_id: 3).where.not(id: 210) }"
            }
          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "account_history_data",
              "options": {
                "inverse_of": "tenant",
                "class_name": "AccountHistoryData"
              },
              "raw_options": "inverse_of: :tenant, class_name: \"AccountHistoryData\""
            },
            {
              "name": "action_logs",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "activities",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "addresses",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "adjustments",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "api_logs",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "assets",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "background_jobs",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "backups",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "budgets",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "business_plans",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "campaigns",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "campaign_calendar_entries",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "campaign_counts",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "cash_sales",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "comments",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "companies",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "contacts",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "contact_groups",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "contact_lists",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "contact_list_counts",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "contact_list_exclusions",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "deployments",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "emails",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "email_credentials",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "email_templates",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "email_validations",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "estimates",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "estimate_elements",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "etl_settings",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "events",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "event_stats",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "filter_defaults",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "hidden_email_templates",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "hidden_holidays",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "holidays",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "identities",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "imports",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "inquiries",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "interest_contexts",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "invoices",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "invoice_elements",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "locations",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "logs",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "meetings",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "metric_results",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "metrics",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "next_activities",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "notes",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "shipments",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "orders",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "invoiced_orders",
              "options": {
                "inverse_of": "tenant",
                "class_name": "Order"
              },
              "raw_options": "inverse_of: :tenant, class_name: \"Order\" # mbe / for dev"
            },
            {
              "name": "phone_calls",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "pings",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "pending_attachments",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "phone_calls",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "portal_comments",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "production_locations",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "proofs",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "reports",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales_base_taxes",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales_categories",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales_reps",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales_rep_updates",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales_summaries",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sales_summary_pickups",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "salestargets",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "saved_reports",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "sms_templates",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "statistics",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "tags",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "tag_categories",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "taken_bys",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "taken_by_updates",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "targets",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "tasks",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "unsubscribes",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "workflows",
              "options": {
                "inverse_of": "tenant"
              },
              "raw_options": "inverse_of: :tenant"
            },
            {
              "name": "holidays",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "lead_types",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "prospect_status_items",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "notes",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "meetings",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "wips",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "company_metrics",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "next_activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "sales_tag_by_months",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "groups",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "enterprise",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "token",
        "name_plural": "tokens",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/token.rb",
        "source": {
          "ruby": "class Token < ActiveRecord::Base\n  belongs_to :user, required: true\n  validates :user, presence: { message: \"must exist\" }\n\n  attr_encrypted :access_token, key: Base64.decode64(Rails.application.secrets.credentials_secret_key || ENV[\"CREDENTIALS_SECRET_KEY\"])\n  attr_encrypted :refresh_token, key: Base64.decode64(Rails.application.secrets.credentials_secret_key || ENV[\"CREDENTIALS_SECRET_KEY\"])\n\n  def self.authenticate(*args)\n    ActionController.HttpAuthentication::Token.authenticate(*args)\n  end\n\n  def to_params\n    {\"refresh_token\" => refresh_token,\n     \"client_id\" => Rails.application.secrets.google_client_id,\n     \"client_secret\" => Rails.application.secrets.google_client_secret,\n     \"grant_type\" => \"refresh_token\"}\n  end\n\n  def request_token_from_google\n    url = URI(\"https://accounts.google.com/o/oauth2/token\")\n    result = nil\n    begin\n      result = Net::HTTP.post_form(url, to_params)\n    rescue StandardError\n      # TODO this will hide the SSL error, but it is something we should still fix\n    end\n    result\n  end\n\n  def refresh!\n    response = request_token_from_google\n    token_user = User.unscoped.where(id: user_id).first\n    case response\n    when Net::HTTPOK\n      data = JSON.parse(response.body)\n      if !data[\"access_token\"].nil?\n        token_user.update_attributes(last_token_refresh_time: Time.now, email_notifications: \"\") if token_user\n        update_attributes(access_token: data[\"access_token\"], expires_at: Time.now + (data[\"expires_in\"].to_i / 2).seconds)\n      end\n    when Net::HTTPClientError\n      data = JSON.parse(response.body)\n      token_user.update_attributes(email_notifications: \"Email no longer authorized\") if token_user\n      destroy if data[\"error\"] == \"invalid_grant\"\n    end\n  end\n\n  def expired?\n    expires_at < Time.now || access_token.blank?\n  end\n\n  def fresh_token\n    refresh! if expired?\n    access_token\n  end\n\n  def authorization\n    require \"signet/oauth_2/client\"\n    Signet::OAuth2::Client.new(\n      authorization_uri: \"https://accounts.google.com/o/oauth2/auth\",\n      token_credential_uri: \"https://www.googleapis.com/oauth2/v3/token\",\n      client_id: Rails.application.secrets.google_client_id,\n      client_secret: Rails.application.secrets.google_client_secret,\n      access_token: fresh_token,\n      expires_at: expires_at\n    )\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "user",
              "options": {
                "required": true
              },
              "raw_options": "required: true"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "user",
              "raw_options": "presence: { message: \"must exist\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "tracker_hit",
        "name_plural": "tracker_hits",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tracker_hit.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass TrackerHit < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tracker, **belongs_to_required\n  validates :tracker, presence: { message: \"must exist\" } if rails4?\n\n  scope :no_unsub_links, -> { where(\"trackers.path NOT LIKE ?\", \"%unsubscribe%\") }\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "no_unsub_links",
              "scope": "-> { where(\"trackers.path NOT LIKE ?\", \"%unsubscribe%\") }"
            }
          ],
          "belongs_to": [
            {
              "name": "tracker",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tracker",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "tracker",
        "name_plural": "trackers",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/tracker.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Tracker < ActiveRecord::Base\n  enum method: %i[image url asset]\n\n  has_and_belongs_to_many :campaign_messages, -> { uniq }\n  has_and_belongs_to_many :emails, -> { uniq }\n  has_many :hits, class_name: \"TrackerHit\", dependent: :destroy\n\n  scope :no_unsub_links, -> { where(\"trackers.path NOT LIKE ?\", \"%unsubscribe%\") }\n\n  def self.new_tracker(path, type = :url)\n    uuid = Base64.urlsafe_encode64(SecureRandom.uuid)\n    Tracker.create(uuid: uuid, method: type, path: path)\n  end\n\n  def generated_url\n    \"#{PrintSpeak::Application.root_url}tracker/#{uuid}\"\n  end\n\n  def hit(user_agent, referer, browser = nil)\n    browser = Browser.new(\"\") if browser.nil?\n    hits.build(user_agent: user_agent, referer: referer, bot: browser.bot?, browser_modern: browser.modern?, browser: browser.name, device: browser.device.name, platform: browser.platform.name)\n    save\n  end\n\n  def self.unsubscribe_url(url_id)\n    \"#{PrintSpeak::Application.root_url}email_unsubscribe/#{url_id}\"\n  end\n\n  def self.view_email_url(url_id)\n    \"#{PrintSpeak::Application.root_url}email_view/#{url_id}\"\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [
            {
              "name": "no_unsub_links",
              "scope": "-> { where(\"trackers.path NOT LIKE ?\", \"%unsubscribe%\") }"
            }
          ],
          "belongs_to": [

          ],
          "has_one": [

          ],
          "has_many": [
            {
              "name": "hits",
              "options": {
                "class_name": "TrackerHit",
                "dependent": "destroy"
              },
              "raw_options": "class_name: \"TrackerHit\", dependent: :destroy"
            }
          ],
          "has_and_belongs_to_many": [
            {
              "name": "campaign_messages",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            },
            {
              "name": "emails",
              "options": {
              },
              "raw_options": "a_lambda: '-> { uniq }'"
            }
          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "unsubscribe",
        "name_plural": "unsubscribes",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/unsubscribe.rb",
        "source": {
          "ruby": "class Unsubscribe < ActiveRecord::Base\n  belongs_to :tenant\n  belongs_to :contact\n\n  # CREATE INDEX CONCURRENTLY index_unsubscribes_tenant_contact_type_email_fixed ON unsubscribes(tenant_id, contact_id, unsub_type, email, LOWER(TRIM(email)), fixed) WHERE fixed = FALSE;\n  # CREATE INDEX CONCURRENTLY index_unsubscribes_tenant_contact_type_email_not_fixed ON unsubscribes(tenant_id, contact_id, unsub_type, email, LOWER(TRIM(email)), fixed) WHERE fixed = TRUE;\n  # CREATE INDEX CONCURRENTLY index_contacts_tenant_not_unsubbed ON contacts (tenant_id) WHERE temp = FALSE AND deleted = FALSE AND unsubscribed = FALSE;\n  # CREATE INDEX CONCURRENTLY index_contacts_tenant_not_unsubbed_with_email ON contacts (tenant_id, id, rolling_12_month_sales DESC NULLS LAST, first_name, company_id, deleted, email, temp, unsubscribed) WHERE temp = FALSE AND deleted = FALSE AND unsubscribed = FALSE AND email ~~ '%@%';\n  # CREATE INDEX CONCURRENTLY index_contacts_company_sales_name_not_unsubbed ON contacts (tenant_id, company_id, rolling_12_month_sales DESC NULLS LAST, first_name, temp, deleted, unsubscribed, id) WHERE temp = FALSE AND deleted = FALSE AND unsubscribed = FALSE;\n  # CREATE INDEX CONCURRENTLY index_contacts_email_validations_not_unsubbed ON contacts (tenant_id, needs_email_validation, company_id, tenant_id, unsubscribed, deleted, temp) WHERE deleted = FALSE AND unsubscribed = FALSE;\n  # CREATE INDEX CONCURRENTLY index_contacts_tenant_unsubbed ON contacts (tenant_id, unsubscribed, id) WHERE unsubscribed = TRUE;\n  # CREATE INDEX CONCURRENTLY index_contacts_tenant_deleted_stats ON contacts (tenant_id, deleted, id, email, company_id, latest_order_date, source_created_at, unsubscribed);\n\n  def propagate(data={})\n    contacts = tenant.contacts_matching_email(email)\n    contacts.each do |contact|\n      next if contact.id == contact_id\n      contact.unsubscribe(unsub_type, data: data, propagate: false)\n    end\n  end\n\n  def fix(new_email, current_user)\n    contact_ids = []\n    if Unsubscribe.definitions[unsub_type][:propagates] == true\n      unsubs = matching_unsubscribes\n      unsubs.each do |unsub|\n        unsub.fixed = true\n        unsub.fixed_by_user_id = current_user.try(:id) || 0\n        unsub.save\n        contact_ids << unsub.contact_id\n      end\n    else\n      self.fixed = true\n      self.fixed_by_user_id = current_user.try(:id) || 0\n      save\n      contact_ids << contact_id\n    end\n\n    if contact_ids.count > 0\n      if unsub_type == \"soft_bounce\" || unsub_type == \"hard_bounce\"\n        campaign_message_ids = CampaignMessage.where(contact_id: contact_ids, sent: true, failed: true, fixed: false).pluck(:id)\n        if campaign_message_ids.count > 0\n          CampaignMessage.where(id: campaign_message_ids).update_all(fixed: true)\n          CampaignMessage.where(parent_message_id: campaign_message_ids).update_all(fixed: true)\n        end\n      elsif unsub_type.start_with?(\"validation_\")\n        EmailValidation.where(contact_id: contact_ids, fixed: false).update_all(fixed: true)\n      end\n\n      unsubbed_contact_ids = Unsubscribe.where(tenant_id: tenant_id, contact_id: contact_ids, fixed: false).pluck(:contact_id)\n      cleared_contact_ids = contact_ids - unsubbed_contact_ids\n      if cleared_contact_ids.count > 0\n        cleared_contacts = Contact.where(id: cleared_contact_ids, tenant_id: tenant.id)\n        cleared_contacts.each do |cleared_contact|\n          cleared_contact.unsubscribed = false\n          cleared_contact.remote_update_required = TRUE\n          if Unsubscribe.definitions[unsub_type][:fixable] == :reverify\n            cleared_contact.needs_email_validation = true\n            cleared_contact.email_validation_attempts = -1\n          end\n          cleared_contact.save\n        end\n      end\n    end\n  end\n\n  def matching_unsubscribes\n    clean_email = Email.clean_email(email)\n\n    result = Unsubscribe.none\n    if !clean_email.blank?\n      result = Unsubscribe.where(tenant_id: tenant_id, unsub_type: unsub_type, fixed: false).where(\"LOWER(TRIM(unsubscribes.email)) = ?\", clean_email)\n    end\n\n    result\n  end\n\n  def self.email_address(tenant, email_address, type, data: {})\n    if Unsubscribe.definitions[type][:propagates] == false\n      raise \"Unsubscribe by email is only allowed for types that should propagate\"\n    end\n    contact = tenant.contacts_matching_email(email_address).first\n    if contact\n      contact.unsubscribe(type, data: data)\n    end\n  end\n\n  def self.on_suppression_list?(tenant, email_address)\n    result = false\n\n    unsub = Unsubscribe.where(tenant_id: tenant.id, unsub_type: \"suppression_list\", email: Email.clean_email(email_address)).first\n    if unsub\n      result = true\n    end\n\n    result\n  end\n\n  def self.definitions\n    result = {\n      \"soft_bounce\" => {\n        name: \"Soft Bounced\",\n        desc: \"This email address has soft bounced 3 times\",\n        fixable: :reverify,\n        propagates: true\n      },\n      \"hard_bounce\" => {\n        name: \"Hard Bounced\",\n        desc: \"This email address has hard bounced\",\n        fixable: :new_email,\n        propagates: true\n      },\n      \"bad_email\" => {\n        name: \"Bad Email\",\n        desc: \"A prevously used bad email was set for this contact\",\n        fixable: :any_email,\n        propagates: false\n      },\n      \"contact_manual\" => {\n        name: \"PrintSpeak Do Not Mail\",\n        desc: \"This email address is marked as do not mail by a PrintSpeak user\",\n        fixable: :any_email,\n        propagates: false\n      },\n      \"contact_vision\" => {\n        name: \"Vision Do Not Mail\",\n        desc: \"This contact is marked as do not mail in Vision\",\n        fixable: :any_email,\n        propagates: false\n      },\n      \"company_vision\" => {\n        name: \"Company Do Not Mail\",\n        desc: \"The company is marked as do not mail in Vision\",\n        fixable: :company,\n        propagates: false\n      },\n      \"suppression_list\" => {\n        name: \"Suppression List\",\n        desc: \"This email address is on a suppression list\",\n        fixable: :new_email,\n        propagates: true\n      },\n      \"complaint\" => {\n        name: \"Complaint\",\n        desc: \"A complaint was received from this email address\",\n        fixable: :none,\n        propagates: true\n      },\n      \"unsubscribed_none\" => {\n        name: \"Unsubscribed\",\n        desc: \"No reason was given\",\n        fixable: :none,\n        propagates: true\n      }\n    }\n    EmailValidation.undeliverable_codes.each do |code|\n      fixable = :any_email\n      reverify_list = %w[\n        validation_email_disabled\n        validation_p_email_disabled\n        validation_p_unknown_email\n        validation_p_relay_error\n        validation_domain_error\n        validation_dead_server\n        validation_syntax_error\n        validation_error\n        validation_p_error\n        validation_invalid_syntax\n      ]\n\n      if reverify_list.include?(code)\n        fixable = :reverify\n      end\n\n      result[\"validation_#{code}\"] = {\n        name: \"Validation Failure\",\n        desc: \"Validation Failed: #{EmailValidation.desc(code)}\",\n        fixable: fixable,\n        propagates: true\n      }\n    end\n    Unsubscribe.manual_reasons.each do |code, desc|\n      result[\"unsubscribed_#{code}\"] = {\n        name: \"Unsubscribed\",\n        desc: \"Unsubscribed: #{desc}\",\n        fixable: :none,\n        propagates: true\n      }\n    end\n    result\n  end\n\n  def self.names_with_codes(exclude_codes = [])\n    merged_reasons = []\n\n    definitions = Unsubscribe.definitions.map do |key, value|\n      {name: value[:name], codes: [key]} if !exclude_codes.include?(key)\n    end\n\n    definitions.compact.each do |unsub_reason|\n      found = false\n      merged_reasons.each do |merged_reason|\n        if merged_reason[:name] == unsub_reason[:name]\n          found = true\n          merged_reason[:codes] << unsub_reason[:codes].first\n          break\n        end\n      end\n\n      if !found\n        reason = unsub_reason\n        reason[:value] = unsub_reason[:name].downcase.tr(\" \", \"_\")\n        merged_reasons << reason\n      end\n    end\n    merged_reasons\n  end\n\n  def self.manual_reasons\n    {\n      'not_relevant': \"Content is not relevant\",\n      'email_too_often': \"You are emailing me too often\",\n      'never_signed_up': \"I never signed up for this email\",\n    }\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "contact",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [

          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "user",
        "name_plural": "users",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/user.rb",
        "source": {
          "ruby": "class User < ActiveRecord::Base\n  acts_as_reader\n\n  default_scope { where(deleted_at: nil) }\n\n  require \"google/apis/calendar_v3\"\n\n  attr_accessor :skip_username_validation\n  attr_accessor :skip_password_validation\n  attr_accessor :skip_admin_validation\n  attr_accessor :update_from_primary\n  attr_accessor :updated_roles\n  attr_accessor :taken_by_ids\n\n  before_save :ensure_parent\n  after_save :sync\n\n  validate :username_unique\n  # validates :username, presence: true\n  # validates_uniqueness_of :username, if: \"username.present?\", message: \"This username has been taken.\", unless: :skip_username_validation\n\n  validates :password, length: { minimum: 8, message: \"8+ characters\" }, unless: :skip_password_validation\n  validates_confirmation_of :password, message: \"should match New Password\", unless: :skip_password_validation\n\n  validates :password, format: {with:   /((?:(?=.*\\d)).*)/x, message: \"1 digit\" }, unless: :skip_password_validation\n  validates :password, format: {with:   /((?:(?=.*[a-z])).*)/x, message: \"1 lowercase letter\" }, unless: :skip_password_validation\n  validates :password, format: {with:   /((?:(?=.*[A-Z])).*)/x, message: \"1 uppercase letter\" }, unless: :skip_password_validation\n  validates :password, format: {with:   /((?:(?=.*\\W)).*)/x, message: \"1 special character\" }, unless: :skip_password_validation\n\n  # These only validate during admin registration\n  with_options({on: :admin}) do |for_admin|\n    for_admin.validates :first_name, presence: { message: \"First name required.\" }, unless: :skip_admin_validation\n    for_admin.validates :last_name, presence: { message: \"Last name required.\" }, unless: :skip_admin_validation\n    for_admin.validates :username, presence: { message: \"Cannot be blank.\" }, unless: :skip_admin_validation\n    for_admin.validates :password, presence: { message: \"Password is mandatory.\" }, unless: :skip_admin_validation\n  end\n\n  with_options({on: :sso}) do |for_sso|\n    for_sso.validates :first_name, presence: { message: \"First name required.\" }\n    for_sso.validates :last_name, presence: { message: \"Last name required.\" }\n  end\n\n  devise :database_authenticatable,\n         :rememberable,\n         :trackable,\n         :timeoutable,\n         :lockable\n\n  belongs_to :enterprise, required: true\n  validates :enterprise, presence: { message: \"must exist\" }\n  belongs_to :tenant, required: true\n  validates :tenant, presence: { message: \"must exist\" }\n\n  has_one :token\n\n  has_many :phone_calls\n  has_many :emails\n  has_many :activities\n  has_many :taken_bys\n  has_many :sales_reps\n  has_many :target_results\n  has_many :estimates, through: :taken_bys\n  has_many :invoices, through: :taken_bys\n  has_many :campaigns\n  has_many :statistics\n  has_many :shared_users, dependent: :destroy\n  has_many :email_aliases, dependent: :destroy\n  has_many :holidays\n  has_many :notes\n  has_many :adjustments,  foreign_key: \"sales_rep_user_id\", primary_key: \"id\"\n  has_many :filter_defaults\n  has_many :meetings\n\n  validate do |user|\n    user.errors[:base] << \"Banner merge field missing in email signature\" if !user.banner.nil? && !user.email_signature.include?(\"{{banner}}\")\n    begin\n      Mail::Address.new(\"#{user.display_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      user.errors[:base] << \"Display name contains invalid characters\"\n    end\n  end\n\n  before_validation do\n    self.banner_id = 0 if banner.nil?\n    self.number = number.gsub(/[^0-9]/, \"\") if attribute_present?(\"number\")\n  end\n\n  def username_unique\n    matching_users = User.unscoped.where(username: actual_username).where.not(id: id).count\n    if matching_users > 0\n      errors.add(:username, \"must be unique\")\n    end\n  end\n\n  def to_s\n    full_name\n  end\n\n  def banner\n    Asset.where(id: banner_id, enterprise_id: enterprise_id, category: \"Banner\").first\n  end\n\n  def email_signature_merged(target_tenant)\n    return \"\" if email_signature.nil?\n    banner_html = \"\"\n    selected_banner = banner\n    selected_banner = primary_tenant.banner if selected_banner.nil? && !primary_tenant.nil?\n    selected_banner = enterprise.banner if selected_banner.nil?\n    if selected_banner\n      banner_link = selected_banner.meta_link(target_tenant)\n      banner_html = %Q{<img src=\"#{selected_banner.url}\" width=\"500\" style=\"display:block;width:100%;max-width:500px\" class=\"img-flag\" />}\n      if !banner_link.blank?\n        banner_html = %Q{<a href=\"#{banner_link}\">#{banner_html}</a>}\n      end\n    end\n    email_signature.gsub(\"{{banner}}\", banner_html)\n  end\n\n  def email_name\n    display_name.blank? ? full_name : display_name\n  end\n\n  def full_name\n    [first_name, last_name].compact.join(\" \")\n  end\n\n  def tenants\n    result = Tenant.none\n\n    if is_super_user? || is_enterprise_user? || is_super_reader?\n      result = enterprise.tenants\n    else\n      tenant_ids = User.where(enterprise: enterprise, parent_id: parent_id).pluck(:tenant_id)\n      result = Tenant.where(enterprise: enterprise, id: tenant_ids) if tenant_ids.count > 0\n    end\n\n    result\n  end\n\n  def can_access_tenant?(tenant_id)\n    tenants.exists?(tenant_id)\n  end\n\n  def can_access_reports?\n    hide_reports.blank?\n  end\n\n  def can_view_business_plan?\n    business_plan || is_super_user?\n  end\n\n  def users\n    User.unscoped.where(parent_id: parent_id)\n  end\n\n  def username\n    if is_primary? || id.nil?\n      actual_username\n    else\n      primary.username\n    end\n  end\n\n  def actual_username\n    read_attribute(:username)\n  end\n\n  def is_sso?\n    Platform.is_mbe?(tenant) && platform_id.present?\n  end\n\n  def is_primary?\n    parent_id == id\n  end\n\n  def primary\n    User.unscoped.where(id: parent_id).first\n  end\n\n  def primary_tenant\n    if is_super_user? || is_enterprise_user? || is_super_reader?\n      enterprise.default_tenant\n    else\n      primary.tenant\n    end\n  end\n\n  def add_tenant(target_tenant)\n    return nil if is_super_user? || is_enterprise_user? || is_super_reader? || target_tenant.enterprise_id != enterprise_id || !deleted_at.nil?\n\n    user = User.unscoped.find_or_initialize_by(tenant_id: target_tenant.id, enterprise_id: target_tenant.enterprise.id, parent_id: id)\n    if user.id.nil? || (user && !user.deleted_at.nil?)\n      user.username = SecureRandom.hex\n      user.update_from_primary = true\n      user.skip_username_validation = true\n      user.skip_password_validation = true\n      user.skip_admin_validation = true\n      user.deleted_at = nil\n      if !user.save\n        raise \"Failed to save user! Parent ID #{id}\"\n      end\n    end\n    user\n  end\n\n  def remove_tenant(target_tenant)\n    return if is_super_user? || is_enterprise_user? || is_super_reader? || target_tenant.enterprise_id != enterprise_id\n\n    user = User.unscoped.where(tenant_id: target_tenant.id, parent_id: id).first\n    if user\n      if user.is_primary?\n        new_primary_tenant = user.tenants.where.not(id: user.tenant_id).order(\"tenants.name ASC\").first\n        set_primary_tenant(new_primary_tenant)\n      end\n      user.destroy\n    end\n  end\n\n  def set_primary_tenant(target_tenant)\n    user = User.unscoped.where(tenant_id: target_tenant.id, parent_id: id).first\n    if user && !user.is_primary?\n      primary_user = primary\n      user.username = primary_user.username\n      primary_user.username = SecureRandom.hex\n      user.skip_username_validation = true\n      user.skip_password_validation = true\n      user.skip_admin_validation = true\n      primary_user.skip_password_validation = true\n      primary_user.skip_admin_validation = true\n      if !primary_user.save\n        raise \"Could not save primary user when setting primary tenant! User id #{primary_user.id}\"\n      end\n      if !user.save\n        raise \"Could not save user when setting primary tenant! User id #{user.id}\"\n      end\n      User.unscoped.where(parent_id: primary.id).update_all(parent_id: user.id)\n    end\n  end\n\n  def email_inbox(target_tenant = nil)\n    result = nil\n    target_tenant = primary_tenant if target_tenant.nil?\n    if id && target_tenant.id\n      query = %Q{\n        SELECT id, address, users\n        FROM inboxes\n        WHERE users @> '[{\"user_id\": #{id}, \"tenant_id\": #{target_tenant.id}}]'::jsonb;\n      }\n      result = EmailInbox.find_by_sql(query).first\n    end\n    result\n  end\n\n  def email\n    return nil if Rails.env.test?\n    return nil if id.blank?\n\n    email_inbox.try(:address)\n  end\n\n  def email_remove(target_tenant = nil)\n    target_tenant = primary_tenant if target_tenant.nil?\n    if id && target_tenant.id\n      Token.destroy_all(user_id: id)\n      inbox = email_inbox(target_tenant)\n      if !inbox.nil? && !inbox.users.nil?\n        writeInbox = EmailInboxWrite.find(inbox.id)\n        writeInbox.users.delete_if { |user_info| user_info[\"user_id\"] == id && user_info[\"tenant_id\"] == target_tenant.id }\n        writeInbox.save\n      end\n      EmailCredential.destroy_all(user_id: id)\n    end\n    self.email_notifications = \"\"\n    save\n  end\n\n  def tenant_email(target_tenant)\n    result = nil\n\n    if target_tenant.use_smtp\n      creds = email_creds(target_tenant)\n      result = creds.smtp_username if creds && !creds.smtp_username.blank?\n    else\n      if id\n        result = email_inbox.try(:address) unless Rails.env.test?\n      end\n    end\n\n    result\n  end\n\n  def is_user?\n    role == \"User\" ? true : false\n  end\n\n  def is_admin?\n    role == \"Admin\" || is_enterprise_user? ? true : false\n  end\n\n  def is_super_reader?\n    role == \"Super Reader\" ? true : false\n  end\n\n  def is_enterprise_user?\n    role == \"Enterprise User\" || is_super_user? || is_master_user? ? true : false\n  end\n\n  def is_super_user?\n    role == \"Super User\" || is_master_user? ? true : false\n  end\n\n  def is_master_user?\n    role == \"Master User\" ? true : false\n  end\n\n  def self.enterprise_users\n    User.where(role: [\"Master User\", \"Super User\", \"Enterprise User\"])\n  end\n\n  def can_send_email?\n    !hide && !is_super_user? && !is_enterprise_user? && !is_super_reader?\n  end\n\n  def can_become?(target_user)\n    result = false\n    if is_super_user? && !target_user.is_super_user?\n      result = true\n    elsif is_enterprise_user? && !target_user.is_super_user? && !target_user.is_enterprise_user? && (!primary_tenant.nil? && !target_user.primary_tenant.nil? && target_user.primary_tenant.enterprise_id == primary_tenant.enterprise_id)\n      result = true\n    end\n    result\n  end\n\n  def becomable_users\n    result = User.none\n\n    becomable_roles = []\n    becomable_roles += [\"User\", \"Super Reader\", \"Admin\"] if is_enterprise_user?\n    becomable_roles += [\"Enterprise User\"] if is_super_user?\n\n    result = enterprise.visible_users.where(role: becomable_roles) if becomable_roles.count > 0\n\n    result\n  end\n\n  def is_valid_ip?(ip_address)\n    return true if ip_whitelist.blank?\n    valid_addresses = ip_whitelist.split(\",\").map(&:strip)\n    valid_addresses.include?(ip_address)\n  end\n\n  def self.tenant_admin_settable_roles\n    valid_roles.find_all { |role| role.to_s.match(/\\Atenant_/) }\n  end\n\n  def calendar\n    Calendar.where(\"? = ANY(user_ids)\", id).first\n  end\n\n  def create_calendar_event(calendar_id, event, send_updates: nil)\n    result_id = nil\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        event.color_id = task_calendar_color if Array(1..11).include?(task_calendar_color)\n        response = calendar_service.insert_event(calendar_id, event, send_notifications: send_updates)\n        result_id = response.id\n      rescue StandardError\n        result_id = \"failed\"\n      end\n    end\n    result_id\n  end\n\n  def update_calendar_event(calendar_id, event_id, event, send_updates: nil)\n    result_id = nil\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        event.color_id = task_calendar_color if Array(1..11).include?(task_calendar_color)\n        response = calendar_service.patch_event(calendar_id, event_id, event, send_notifications: send_updates)\n        result_id = response.id\n      rescue Google::Apis::ClientError => e\n        result_id = \"failed\"\n        result_id = \"not_found\" if e.status_code == 404\n      rescue StandardError\n        result_id = \"failed\"\n      end\n    end\n    result_id\n  end\n\n  def get_calendar_event(calendar_id, event_id)\n    result = nil\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        result = calendar_service.get_event(calendar_id, event_id)\n      rescue Google::Apis::ClientError => e\n        if e.status_code == 404\n          result = \"not_found\"\n        end\n      end\n    end\n    result\n  end\n\n  def delete_calendar_event(calendar_id, event_id, send_updates: nil)\n    result = false\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        calendar_service.delete_event(calendar_id, event_id, send_notifications: send_updates)\n        result = true\n      rescue Google::Apis::ClientError\n        result = true\n      rescue StandardError\n        CalendarEntryDeletion.find_or_create_by(user_id: id, calendar_ident: calendar_id, entry_ident: event_id, send_updates: send_updates)\n      end\n    end\n    result\n  end\n\n  def shared_user_ids\n    shared_users.pluck(:shared_id)\n  end\n\n  def shared_users=(new_shared_users)\n    if new_shared_users.nil?\n      shared_users.destroy_all\n    else\n      new_shared_users = new_shared_users.reject { |c| c.blank? }.map(&:to_i)\n      shared_users.where.not(shared_id: new_shared_users).destroy_all\n      old_shared_users = shared_users.where(shared_id: new_shared_users).pluck(:shared_id)\n      new_shared_users.each do |new_shared_user|\n        shared_users << SharedUser.create!(user_id: id, shared_id: new_shared_user) unless old_shared_users.include?(new_shared_user)\n      end\n    end\n  end\n\n  def email_ready?(target_tenant)\n    result = false\n\n    if target_tenant.use_smtp\n      creds = email_creds(target_tenant)\n      result = creds && !(creds.smtp_server.blank? || creds.smtp_username.blank? || creds.smtp_password.blank? || creds.smtp_port.nil?)\n    else\n      result = !token.blank?\n    end\n\n    result\n  end\n\n  def email_creds(target_tenant)\n    result = EmailCredential.where(user_id: id, tenant_id: target_tenant.id, enterprise_id: target_tenant.enterprise_id).try(:first)\n\n    result = EmailCredential.new if result.nil?\n\n    result\n  end\n\n  def salestarget(type, target_name, tenant)\n    Salestarget.where(target_type: type, name: target_name, tenant_id: tenant.id, user_id: nil)\n    .joins(\"LEFT OUTER JOIN salestargets sta ON sta.tenant_id = salestargets.tenant_id AND sta.name = salestargets.name AND sta.target_type = salestargets.target_type AND sta.user_id = #{id}\")\n    .select(\"salestargets.*\", \"sta.amount as user_amount\")\n    .group(\"salestargets.id\", \"sta.id\").first\n  end\n\n  private\n\n  def ensure_parent\n    if parent_id.nil?\n      self.parent_id = id\n    end\n  end\n\n  def sync\n    if !parent_id.nil?\n      source_user = self\n      if update_from_primary\n        source_user = primary\n      end\n\n      if source_user.nil?\n        raise \"No source user for sync! Parent ID #{id}\"\n      end\n\n      User.unscoped.where(parent_id: parent_id).update_all(\n        enterprise_id: source_user.enterprise_id,\n        platform_id: source_user.platform_id,\n        platform_data: source_user.platform_data,\n        hide: source_user.hide,\n        role: source_user.role,\n        sso_onboarding: source_user.sso_onboarding,\n        first_name: source_user.first_name,\n        last_name: source_user.last_name,\n        manual_email: source_user.manual_email,\n        test_email: source_user.test_email,\n        sms_test_number: source_user.sms_test_number,\n        ip_whitelist: source_user.ip_whitelist,\n        eula_accepted_at: source_user.eula_accepted_at,\n        encrypted_password: source_user.encrypted_password\n      )\n    else\n      update_column(:parent_id, id)\n    end\n  end\nend\n",
          "public": "class User < ActiveRecord::Base\n  acts_as_reader\n\n  default_scope { where(deleted_at: nil) }\n\n  require \"google/apis/calendar_v3\"\n\n  attr_accessor :skip_username_validation\n  attr_accessor :skip_password_validation\n  attr_accessor :skip_admin_validation\n  attr_accessor :update_from_primary\n  attr_accessor :updated_roles\n  attr_accessor :taken_by_ids\n\n  before_save :ensure_parent\n  after_save :sync\n\n  validate :username_unique\n  # validates :username, presence: true\n  # validates_uniqueness_of :username, if: \"username.present?\", message: \"This username has been taken.\", unless: :skip_username_validation\n\n  validates :password, length: { minimum: 8, message: \"8+ characters\" }, unless: :skip_password_validation\n  validates_confirmation_of :password, message: \"should match New Password\", unless: :skip_password_validation\n\n  validates :password, format: {with:   /((?:(?=.*\\d)).*)/x, message: \"1 digit\" }, unless: :skip_password_validation\n  validates :password, format: {with:   /((?:(?=.*[a-z])).*)/x, message: \"1 lowercase letter\" }, unless: :skip_password_validation\n  validates :password, format: {with:   /((?:(?=.*[A-Z])).*)/x, message: \"1 uppercase letter\" }, unless: :skip_password_validation\n  validates :password, format: {with:   /((?:(?=.*\\W)).*)/x, message: \"1 special character\" }, unless: :skip_password_validation\n\n  # These only validate during admin registration\n  with_options({on: :admin}) do |for_admin|\n    for_admin.validates :first_name, presence: { message: \"First name required.\" }, unless: :skip_admin_validation\n    for_admin.validates :last_name, presence: { message: \"Last name required.\" }, unless: :skip_admin_validation\n    for_admin.validates :username, presence: { message: \"Cannot be blank.\" }, unless: :skip_admin_validation\n    for_admin.validates :password, presence: { message: \"Password is mandatory.\" }, unless: :skip_admin_validation\n  end\n\n  with_options({on: :sso}) do |for_sso|\n    for_sso.validates :first_name, presence: { message: \"First name required.\" }\n    for_sso.validates :last_name, presence: { message: \"Last name required.\" }\n  end\n\n  devise :database_authenticatable,\n         :rememberable,\n         :trackable,\n         :timeoutable,\n         :lockable\n\n  belongs_to :enterprise, required: true\n  validates :enterprise, presence: { message: \"must exist\" }\n  belongs_to :tenant, required: true\n  validates :tenant, presence: { message: \"must exist\" }\n\n  has_one :token\n\n  has_many :phone_calls\n  has_many :emails\n  has_many :activities\n  has_many :taken_bys\n  has_many :sales_reps\n  has_many :target_results\n  has_many :estimates, through: :taken_bys\n  has_many :invoices, through: :taken_bys\n  has_many :campaigns\n  has_many :statistics\n  has_many :shared_users, dependent: :destroy\n  has_many :email_aliases, dependent: :destroy\n  has_many :holidays\n  has_many :notes\n  has_many :adjustments,  foreign_key: \"sales_rep_user_id\", primary_key: \"id\"\n  has_many :filter_defaults\n  has_many :meetings\n\n  validate do |user|\n    user.errors[:base] << \"Banner merge field missing in email signature\" if !user.banner.nil? && !user.email_signature.include?(\"{{banner}}\")\n    begin\n      Mail::Address.new(\"#{user.display_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      user.errors[:base] << \"Display name contains invalid characters\"\n    end\n  end\n\n  before_validation do\n    self.banner_id = 0 if banner.nil?\n    self.number = number.gsub(/[^0-9]/, \"\") if attribute_present?(\"number\")\n  end\n\n  def username_unique\n    matching_users = User.unscoped.where(username: actual_username).where.not(id: id).count\n    if matching_users > 0\n      errors.add(:username, \"must be unique\")\n    end\n  end\n\n  def to_s\n    full_name\n  end\n\n  def banner\n    Asset.where(id: banner_id, enterprise_id: enterprise_id, category: \"Banner\").first\n  end\n\n  def email_signature_merged(target_tenant)\n    return \"\" if email_signature.nil?\n    banner_html = \"\"\n    selected_banner = banner\n    selected_banner = primary_tenant.banner if selected_banner.nil? && !primary_tenant.nil?\n    selected_banner = enterprise.banner if selected_banner.nil?\n    if selected_banner\n      banner_link = selected_banner.meta_link(target_tenant)\n      banner_html = %Q{<img src=\"#{selected_banner.url}\" width=\"500\" style=\"display:block;width:100%;max-width:500px\" class=\"img-flag\" />}\n      if !banner_link.blank?\n        banner_html = %Q{<a href=\"#{banner_link}\">#{banner_html}</a>}\n      end\n    end\n    email_signature.gsub(\"{{banner}}\", banner_html)\n  end\n\n  def email_name\n    display_name.blank? ? full_name : display_name\n  end\n\n  def full_name\n    [first_name, last_name].compact.join(\" \")\n  end\n\n  def tenants\n    result = Tenant.none\n\n    if is_super_user? || is_enterprise_user? || is_super_reader?\n      result = enterprise.tenants\n    else\n      tenant_ids = User.where(enterprise: enterprise, parent_id: parent_id).pluck(:tenant_id)\n      result = Tenant.where(enterprise: enterprise, id: tenant_ids) if tenant_ids.count > 0\n    end\n\n    result\n  end\n\n  def can_access_tenant?(tenant_id)\n    tenants.exists?(tenant_id)\n  end\n\n  def can_access_reports?\n    hide_reports.blank?\n  end\n\n  def can_view_business_plan?\n    business_plan || is_super_user?\n  end\n\n  def users\n    User.unscoped.where(parent_id: parent_id)\n  end\n\n  def username\n    if is_primary? || id.nil?\n      actual_username\n    else\n      primary.username\n    end\n  end\n\n  def actual_username\n    read_attribute(:username)\n  end\n\n  def is_sso?\n    Platform.is_mbe?(tenant) && platform_id.present?\n  end\n\n  def is_primary?\n    parent_id == id\n  end\n\n  def primary\n    User.unscoped.where(id: parent_id).first\n  end\n\n  def primary_tenant\n    if is_super_user? || is_enterprise_user? || is_super_reader?\n      enterprise.default_tenant\n    else\n      primary.tenant\n    end\n  end\n\n  def add_tenant(target_tenant)\n    return nil if is_super_user? || is_enterprise_user? || is_super_reader? || target_tenant.enterprise_id != enterprise_id || !deleted_at.nil?\n\n    user = User.unscoped.find_or_initialize_by(tenant_id: target_tenant.id, enterprise_id: target_tenant.enterprise.id, parent_id: id)\n    if user.id.nil? || (user && !user.deleted_at.nil?)\n      user.username = SecureRandom.hex\n      user.update_from_primary = true\n      user.skip_username_validation = true\n      user.skip_password_validation = true\n      user.skip_admin_validation = true\n      user.deleted_at = nil\n      if !user.save\n        raise \"Failed to save user! Parent ID #{id}\"\n      end\n    end\n    user\n  end\n\n  def remove_tenant(target_tenant)\n    return if is_super_user? || is_enterprise_user? || is_super_reader? || target_tenant.enterprise_id != enterprise_id\n\n    user = User.unscoped.where(tenant_id: target_tenant.id, parent_id: id).first\n    if user\n      if user.is_primary?\n        new_primary_tenant = user.tenants.where.not(id: user.tenant_id).order(\"tenants.name ASC\").first\n        set_primary_tenant(new_primary_tenant)\n      end\n      user.destroy\n    end\n  end\n\n  def set_primary_tenant(target_tenant)\n    user = User.unscoped.where(tenant_id: target_tenant.id, parent_id: id).first\n    if user && !user.is_primary?\n      primary_user = primary\n      user.username = primary_user.username\n      primary_user.username = SecureRandom.hex\n      user.skip_username_validation = true\n      user.skip_password_validation = true\n      user.skip_admin_validation = true\n      primary_user.skip_password_validation = true\n      primary_user.skip_admin_validation = true\n      if !primary_user.save\n        raise \"Could not save primary user when setting primary tenant! User id #{primary_user.id}\"\n      end\n      if !user.save\n        raise \"Could not save user when setting primary tenant! User id #{user.id}\"\n      end\n      User.unscoped.where(parent_id: primary.id).update_all(parent_id: user.id)\n    end\n  end\n\n  def email_inbox(target_tenant = nil)\n    result = nil\n    target_tenant = primary_tenant if target_tenant.nil?\n    if id && target_tenant.id\n      query = %Q{\n        SELECT id, address, users\n        FROM inboxes\n        WHERE users @> '[{\"user_id\": #{id}, \"tenant_id\": #{target_tenant.id}}]'::jsonb;\n      }\n      result = EmailInbox.find_by_sql(query).first\n    end\n    result\n  end\n\n  def email\n    return nil if Rails.env.test?\n    return nil if id.blank?\n\n    email_inbox.try(:address)\n  end\n\n  def email_remove(target_tenant = nil)\n    target_tenant = primary_tenant if target_tenant.nil?\n    if id && target_tenant.id\n      Token.destroy_all(user_id: id)\n      inbox = email_inbox(target_tenant)\n      if !inbox.nil? && !inbox.users.nil?\n        writeInbox = EmailInboxWrite.find(inbox.id)\n        writeInbox.users.delete_if { |user_info| user_info[\"user_id\"] == id && user_info[\"tenant_id\"] == target_tenant.id }\n        writeInbox.save\n      end\n      EmailCredential.destroy_all(user_id: id)\n    end\n    self.email_notifications = \"\"\n    save\n  end\n\n  def tenant_email(target_tenant)\n    result = nil\n\n    if target_tenant.use_smtp\n      creds = email_creds(target_tenant)\n      result = creds.smtp_username if creds && !creds.smtp_username.blank?\n    else\n      if id\n        result = email_inbox.try(:address) unless Rails.env.test?\n      end\n    end\n\n    result\n  end\n\n  def is_user?\n    role == \"User\" ? true : false\n  end\n\n  def is_admin?\n    role == \"Admin\" || is_enterprise_user? ? true : false\n  end\n\n  def is_super_reader?\n    role == \"Super Reader\" ? true : false\n  end\n\n  def is_enterprise_user?\n    role == \"Enterprise User\" || is_super_user? || is_master_user? ? true : false\n  end\n\n  def is_super_user?\n    role == \"Super User\" || is_master_user? ? true : false\n  end\n\n  def is_master_user?\n    role == \"Master User\" ? true : false\n  end\n\n  def self.enterprise_users\n    User.where(role: [\"Master User\", \"Super User\", \"Enterprise User\"])\n  end\n\n  def can_send_email?\n    !hide && !is_super_user? && !is_enterprise_user? && !is_super_reader?\n  end\n\n  def can_become?(target_user)\n    result = false\n    if is_super_user? && !target_user.is_super_user?\n      result = true\n    elsif is_enterprise_user? && !target_user.is_super_user? && !target_user.is_enterprise_user? && (!primary_tenant.nil? && !target_user.primary_tenant.nil? && target_user.primary_tenant.enterprise_id == primary_tenant.enterprise_id)\n      result = true\n    end\n    result\n  end\n\n  def becomable_users\n    result = User.none\n\n    becomable_roles = []\n    becomable_roles += [\"User\", \"Super Reader\", \"Admin\"] if is_enterprise_user?\n    becomable_roles += [\"Enterprise User\"] if is_super_user?\n\n    result = enterprise.visible_users.where(role: becomable_roles) if becomable_roles.count > 0\n\n    result\n  end\n\n  def is_valid_ip?(ip_address)\n    return true if ip_whitelist.blank?\n    valid_addresses = ip_whitelist.split(\",\").map(&:strip)\n    valid_addresses.include?(ip_address)\n  end\n\n  def self.tenant_admin_settable_roles\n    valid_roles.find_all { |role| role.to_s.match(/\\Atenant_/) }\n  end\n\n  def calendar\n    Calendar.where(\"? = ANY(user_ids)\", id).first\n  end\n\n  def create_calendar_event(calendar_id, event, send_updates: nil)\n    result_id = nil\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        event.color_id = task_calendar_color if Array(1..11).include?(task_calendar_color)\n        response = calendar_service.insert_event(calendar_id, event, send_notifications: send_updates)\n        result_id = response.id\n      rescue StandardError\n        result_id = \"failed\"\n      end\n    end\n    result_id\n  end\n\n  def update_calendar_event(calendar_id, event_id, event, send_updates: nil)\n    result_id = nil\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        event.color_id = task_calendar_color if Array(1..11).include?(task_calendar_color)\n        response = calendar_service.patch_event(calendar_id, event_id, event, send_notifications: send_updates)\n        result_id = response.id\n      rescue Google::Apis::ClientError => e\n        result_id = \"failed\"\n        result_id = \"not_found\" if e.status_code == 404\n      rescue StandardError\n        result_id = \"failed\"\n      end\n    end\n    result_id\n  end\n\n  def get_calendar_event(calendar_id, event_id)\n    result = nil\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        result = calendar_service.get_event(calendar_id, event_id)\n      rescue Google::Apis::ClientError => e\n        if e.status_code == 404\n          result = \"not_found\"\n        end\n      end\n    end\n    result\n  end\n\n  def delete_calendar_event(calendar_id, event_id, send_updates: nil)\n    result = false\n    if token && !token.fresh_token.blank?\n      calendar_service = Google::Apis::CalendarV3::CalendarService.new\n      calendar_service.authorization = token.authorization\n      begin\n        calendar_service.delete_event(calendar_id, event_id, send_notifications: send_updates)\n        result = true\n      rescue Google::Apis::ClientError\n        result = true\n      rescue StandardError\n        CalendarEntryDeletion.find_or_create_by(user_id: id, calendar_ident: calendar_id, entry_ident: event_id, send_updates: send_updates)\n      end\n    end\n    result\n  end\n\n  def shared_user_ids\n    shared_users.pluck(:shared_id)\n  end\n\n  def shared_users=(new_shared_users)\n    if new_shared_users.nil?\n      shared_users.destroy_all\n    else\n      new_shared_users = new_shared_users.reject { |c| c.blank? }.map(&:to_i)\n      shared_users.where.not(shared_id: new_shared_users).destroy_all\n      old_shared_users = shared_users.where(shared_id: new_shared_users).pluck(:shared_id)\n      new_shared_users.each do |new_shared_user|\n        shared_users << SharedUser.create!(user_id: id, shared_id: new_shared_user) unless old_shared_users.include?(new_shared_user)\n      end\n    end\n  end\n\n  def email_ready?(target_tenant)\n    result = false\n\n    if target_tenant.use_smtp\n      creds = email_creds(target_tenant)\n      result = creds && !(creds.smtp_server.blank? || creds.smtp_username.blank? || creds.smtp_password.blank? || creds.smtp_port.nil?)\n    else\n      result = !token.blank?\n    end\n\n    result\n  end\n\n  def email_creds(target_tenant)\n    result = EmailCredential.where(user_id: id, tenant_id: target_tenant.id, enterprise_id: target_tenant.enterprise_id).try(:first)\n\n    result = EmailCredential.new if result.nil?\n\n    result\n  end\n\n  def salestarget(type, target_name, tenant)\n    Salestarget.where(target_type: type, name: target_name, tenant_id: tenant.id, user_id: nil)\n    .joins(\"LEFT OUTER JOIN salestargets sta ON sta.tenant_id = salestargets.tenant_id AND sta.name = salestargets.name AND sta.target_type = salestargets.target_type AND sta.user_id = #{id}\")\n    .select(\"salestargets.*\", \"sta.amount as user_amount\")\n    .group(\"salestargets.id\", \"sta.id\").first\n  end\n\n  ",
          "private": "private\n\n  def ensure_parent\n    if parent_id.nil?\n      self.parent_id = id\n    end\n  end\n\n  def sync\n    if !parent_id.nil?\n      source_user = self\n      if update_from_primary\n        source_user = primary\n      end\n\n      if source_user.nil?\n        raise \"No source user for sync! Parent ID #{id}\"\n      end\n\n      User.unscoped.where(parent_id: parent_id).update_all(\n        enterprise_id: source_user.enterprise_id,\n        platform_id: source_user.platform_id,\n        platform_data: source_user.platform_data,\n        hide: source_user.hide,\n        role: source_user.role,\n        sso_onboarding: source_user.sso_onboarding,\n        first_name: source_user.first_name,\n        last_name: source_user.last_name,\n        manual_email: source_user.manual_email,\n        test_email: source_user.test_email,\n        sms_test_number: source_user.sms_test_number,\n        ip_whitelist: source_user.ip_whitelist,\n        eula_accepted_at: source_user.eula_accepted_at,\n        encrypted_password: source_user.encrypted_password\n      )\n    else\n      update_column(:parent_id, id)\n    end\n  end\nend\n",
          "all_methods": {
            "klass": [
              {
                "name": "enterprise_users",
                "scope": "public",
                "class_method": true,
                "arguments": ""
              },
              {
                "name": "tenant_admin_settable_roles",
                "scope": "public",
                "class_method": true,
                "arguments": ""
              }
            ],
            "instance": [
              {
                "name": "username_unique",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "to_s",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "banner",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_signature_merged",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "email_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "full_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tenants",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_access_tenant?",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenant_id)"
              },
              {
                "name": "can_access_reports?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_view_business_plan?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "username",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "actual_username",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_sso?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_primary?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "primary",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "primary_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "add_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "remove_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "set_primary_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "email_inbox",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "email",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_remove",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "tenant_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "is_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_admin?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_super_reader?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_enterprise_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_super_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_master_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_send_email?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_become?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_user)"
              },
              {
                "name": "becomable_users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_valid_ip?",
                "scope": "public",
                "class_method": false,
                "arguments": "(ip_address)"
              },
              {
                "name": "calendar",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "create_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event, send_updates: nil)"
              },
              {
                "name": "update_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event_id, event, send_updates: nil)"
              },
              {
                "name": "get_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event_id)"
              },
              {
                "name": "delete_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event_id, send_updates: nil)"
              },
              {
                "name": "shared_user_ids",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shared_users=",
                "scope": "public",
                "class_method": false,
                "arguments": "(new_shared_users)"
              },
              {
                "name": "email_ready?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "email_creds",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "salestarget",
                "scope": "public",
                "class_method": false,
                "arguments": "(type, target_name, tenant)"
              },
              {
                "name": "ensure_parent",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sync",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ],
            "instance_public": [
              {
                "name": "username_unique",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "to_s",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "banner",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_signature_merged",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "email_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "full_name",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "tenants",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_access_tenant?",
                "scope": "public",
                "class_method": false,
                "arguments": "(tenant_id)"
              },
              {
                "name": "can_access_reports?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_view_business_plan?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "username",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "actual_username",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_sso?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_primary?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "primary",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "primary_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "add_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "remove_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "set_primary_tenant",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "email_inbox",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "email",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "email_remove",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant = nil)"
              },
              {
                "name": "tenant_email",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "is_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_admin?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_super_reader?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_enterprise_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_super_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_master_user?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_send_email?",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "can_become?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_user)"
              },
              {
                "name": "becomable_users",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "is_valid_ip?",
                "scope": "public",
                "class_method": false,
                "arguments": "(ip_address)"
              },
              {
                "name": "calendar",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "create_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event, send_updates: nil)"
              },
              {
                "name": "update_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event_id, event, send_updates: nil)"
              },
              {
                "name": "get_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event_id)"
              },
              {
                "name": "delete_calendar_event",
                "scope": "public",
                "class_method": false,
                "arguments": "(calendar_id, event_id, send_updates: nil)"
              },
              {
                "name": "shared_user_ids",
                "scope": "public",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "shared_users=",
                "scope": "public",
                "class_method": false,
                "arguments": "(new_shared_users)"
              },
              {
                "name": "email_ready?",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "email_creds",
                "scope": "public",
                "class_method": false,
                "arguments": "(target_tenant)"
              },
              {
                "name": "salestarget",
                "scope": "public",
                "class_method": false,
                "arguments": "(type, target_name, tenant)"
              }
            ],
            "instance_private": [
              {
                "name": "ensure_parent",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              },
              {
                "name": "sync",
                "scope": "private",
                "class_method": false,
                "arguments": ""
              }
            ]
          }
        },
        "dsl": {
          "default_scope": "{ where(deleted_at: nil) }",
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "enterprise",
              "options": {
                "required": true
              },
              "raw_options": "required: true"
            },
            {
              "name": "tenant",
              "options": {
                "required": true
              },
              "raw_options": "required: true"
            }
          ],
          "has_one": [
            {
              "name": "token",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_many": [
            {
              "name": "phone_calls",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "emails",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "activities",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "taken_bys",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "sales_reps",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "target_results",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "estimates",
              "options": {
                "through": "taken_bys"
              },
              "raw_options": "through: :taken_bys"
            },
            {
              "name": "invoices",
              "options": {
                "through": "taken_bys"
              },
              "raw_options": "through: :taken_bys"
            },
            {
              "name": "campaigns",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "statistics",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "shared_users",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "email_aliases",
              "options": {
                "dependent": "destroy"
              },
              "raw_options": "dependent: :destroy"
            },
            {
              "name": "holidays",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "notes",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "adjustments",
              "options": {
                "foreign_key": "sales_rep_user_id",
                "primary_key": "id"
              },
              "raw_options": "foreign_key: \"sales_rep_user_id\", primary_key: \"id\""
            },
            {
              "name": "filter_defaults",
              "options": {
              },
              "raw_options": ""
            },
            {
              "name": "meetings",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [
            {
              "line": ":username_unique"
            }
          ],
          "validates_on": [
            {
              "name": "password",
              "raw_options": "length: { minimum: 8, message: \"8+ characters\" }, unless: :skip_password_validation"
            },
            {
              "name": "password",
              "raw_options": "format: {with:   /((?:(?=.*\\d)).*)/x, message: \"1 digit\" }, unless: :skip_password_validation"
            },
            {
              "name": "password",
              "raw_options": "format: {with:   /((?:(?=.*[a-z])).*)/x, message: \"1 lowercase letter\" }, unless: :skip_password_validation"
            },
            {
              "name": "password",
              "raw_options": "format: {with:   /((?:(?=.*[A-Z])).*)/x, message: \"1 uppercase letter\" }, unless: :skip_password_validation"
            },
            {
              "name": "password",
              "raw_options": "format: {with:   /((?:(?=.*\\W)).*)/x, message: \"1 special character\" }, unless: :skip_password_validation"
            },
            {
              "name": "enterprise",
              "raw_options": "presence: { message: \"must exist\" }"
            },
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "version",
        "name_plural": "versions",
        "dsl_file": ""
      },
      {
        "name": "wip",
        "name_plural": "wips",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/wip.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Wip < ActiveRecord::Base\n  extend RailsUpgrade\n\n  belongs_to :tenant, **belongs_to_required\n  validates :tenant, presence: { message: \"must exist\" } if rails4?\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": null,
          "scopes": [

          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": "**belongs_to_required"
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "tenant",
              "raw_options": "presence: { message: \"must exist\" } if rails4?"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      },
      {
        "name": "workflow",
        "name_plural": "workflows",
        "dsl_file": "/Users/davidcruwys/dev/printspeak/printspeak-master/app/models/workflow.rb",
        "source": {
          "ruby": "# frozen_string_literal: true\n\nclass Workflow < ActiveRecord::Base\n  default_scope { order(name: :asc) }\n\n  belongs_to :tenant\n\n  before_save :nullify_global_tenant_id\n\n  validates :name, presence: { message: \"Workflow name can't be blank (required).\" }\n  validates :name, length: { maximum: 250 }\n\n  scope :by_tenant, -> (tenant) { where(\"workflows.tenant_id = ? OR (workflows.global = ? AND workflows.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).group(\"workflows.id\") }\n  scope :by_enterprise, -> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }\n\n  def nullify_global_tenant_id\n    self.tenant_id = nil if global\n  end\n\n  def user\n    User.unscoped.where(id: user_id).try(:first) unless user_id.nil?\n  end\nend\n",
          "public": null,
          "private": null,
          "all_methods": {
            "klass": [

            ],
            "instance": [

            ],
            "instance_public": [

            ],
            "instance_private": [

            ]
          }
        },
        "dsl": {
          "default_scope": "{ order(name: :asc) }",
          "scopes": [
            {
              "name": "by_tenant",
              "scope": "-> (tenant) { where(\"workflows.tenant_id = ? OR (workflows.global = ? AND workflows.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).group(\"workflows.id\") }"
            },
            {
              "name": "by_enterprise",
              "scope": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
            }
          ],
          "belongs_to": [
            {
              "name": "tenant",
              "options": {
              },
              "raw_options": ""
            }
          ],
          "has_one": [

          ],
          "has_many": [

          ],
          "has_and_belongs_to_many": [

          ],
          "validate_on": [

          ],
          "validates_on": [
            {
              "name": "name",
              "raw_options": "presence: { message: \"Workflow name can't be blank (required).\" }"
            },
            {
              "name": "name",
              "raw_options": "length: { maximum: 250 }"
            }
          ]
        },
        "todo": {
          "after_destroy": [

          ],
          "before_save": [

          ],
          "after_save": [

          ],
          "before_create": [

          ],
          "after_create": [

          ],
          "enum": [

          ],
          "attr_encrypted": [

          ],
          "validates_uniqueness_of": [

          ],
          "validates_confirmation_of": [

          ],
          "attr_accessor": [

          ],
          "attr_reader": [

          ],
          "attr_writer": [

          ]
        }
      }
    ],
    "dictionary": [
      {
        "name": "id",
        "type": "bigint",
        "label": "Id",
        "segment": "data",
        "models": [
          "account_history_datum",
          "action_log",
          "activity",
          "address",
          "adjustment",
          "affiliation",
          "api_log",
          "asset",
          "background_job_result",
          "background_job",
          "backup",
          "badges_sash",
          "bookmark",
          "budget_month",
          "budget",
          "build",
          "business_plan_marketing_activity",
          "business_plan_sales_investment",
          "business_plan",
          "calendar_entry",
          "calendar_entry_deletion",
          "calendar",
          "campaign_calendar_entry",
          "campaign_count",
          "campaign_exclusion",
          "campaign_group",
          "campaign_message",
          "campaign",
          "cash_drawer",
          "clearbit_quotum",
          "comment",
          "company",
          "company_metric",
          "contact_group",
          "contact_list_count",
          "contact_list_exclusion",
          "contact_list_rule",
          "contact_list",
          "contact",
          "country",
          "country_state",
          "deployment",
          "email_alias",
          "email_credential",
          "email_delivery",
          "email_message_activity",
          "email_soft_bounce",
          "email_status",
          "email_tag",
          "email_template_category",
          "email_template_field",
          "email_template_value",
          "email_template",
          "email_validation_reset_contact_id",
          "email_validation",
          "email",
          "enterprise_business_welcome",
          "enterprise_salestarget",
          "enterprise_togglefield",
          "enterprise",
          "estimate_element",
          "estimate",
          "etl_setting",
          "event_stat",
          "event",
          "exclusion",
          "filter_default",
          "group",
          "hidden_email_template",
          "hidden_holiday",
          "hidden_lead_type",
          "hidden_task_type",
          "holiday_date",
          "holiday",
          "identity",
          "inquiry",
          "inquiry_attachment",
          "interest_category",
          "interest_context",
          "interest",
          "invoice_element",
          "invoice",
          "job_stat",
          "lead_source",
          "lead_type",
          "list",
          "location",
          "marketing_group",
          "meeting_attendee",
          "meeting",
          "news",
          "next_activity",
          "note",
          "original_user",
          "pdf",
          "pending_attachment",
          "phone_call",
          "portal_comment",
          "production_location",
          "proof",
          "prospect_status_item_contact",
          "prospect_status_item",
          "prospect_status_version",
          "prospect_status",
          "read_mark",
          "region_config",
          "report_row",
          "report",
          "sales_base_tax",
          "sales_category",
          "sales_rep_update",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "sales_tag_by_month",
          "salestarget",
          "saved_report",
          "shared_user",
          "shipment",
          "short_url",
          "sms_template_category",
          "sms_template",
          "statistic",
          "suppressed_address",
          "tag_category",
          "tag_category_context",
          "tag",
          "taken_by_update",
          "taken_by",
          "target",
          "task_repeat",
          "task_type",
          "task",
          "tenant",
          "token",
          "tracker_hit",
          "tracker",
          "unsubscribe",
          "user",
          "version",
          "wip",
          "workflow"
        ],
        "model_count": 142,
        "types": [
          "bigint",
          "bigserial"
        ],
        "type_count": 2
      },
      {
        "name": "source_account_id",
        "type": "integer",
        "label": "Source Account",
        "segment": "id",
        "models": [
          "account_history_datum",
          "adjustment",
          "contact",
          "estimate",
          "invoice"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "company_id",
        "type": "integer",
        "label": "Company",
        "segment": "id",
        "models": [
          "account_history_datum",
          "activity",
          "address",
          "adjustment",
          "company_metric",
          "contact_group",
          "contact",
          "estimate",
          "inquiry",
          "invoice",
          "shipment",
          "statistic",
          "workflow"
        ],
        "model_count": 13,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "balance",
        "type": "decimal",
        "label": "Balance",
        "segment": "data",
        "models": [
          "account_history_datum",
          "company"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "currentagingbucket",
        "type": "integer",
        "label": "Currentagingbucket",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "custpo",
        "type": "string",
        "label": "Custpo",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "finalpaychecknumber",
        "type": "string",
        "label": "Finalpaychecknumber",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "finalpaypaymethod",
        "type": "string",
        "label": "Finalpaypaymethod",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "finalpayrefnumber",
        "type": "string",
        "label": "Finalpayrefnumber",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "finalpaytotal",
        "type": "decimal",
        "label": "Finalpaytotal",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "finalpaymentdate",
        "type": "datetime",
        "label": "Finalpaymentdate",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "financecharge",
        "type": "integer",
        "label": "Financecharge",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_invoice_id",
        "type": "integer",
        "label": "Source Invoice",
        "segment": "id",
        "models": [
          "account_history_datum",
          "adjustment",
          "estimate",
          "invoice"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_id",
        "type": "integer",
        "label": "Invoice",
        "segment": "id",
        "models": [
          "account_history_datum",
          "activity",
          "adjustment",
          "invoice_element",
          "proof"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "invoicenumber",
        "type": "string",
        "label": "Invoicenumber",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "source_journal_id",
        "type": "integer",
        "label": "Source Journal",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "adjustment_id",
        "type": "integer",
        "label": "Adjustment",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "memoforcedtaxadded",
        "type": "boolean",
        "label": "Memoforcedtaxadded",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "memoforcedtaxremoval",
        "type": "boolean",
        "label": "Memoforcedtaxremoval",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "name",
        "type": "text",
        "label": "Name",
        "segment": "data",
        "models": [
          "account_history_datum",
          "address",
          "background_job_result",
          "background_job",
          "build",
          "business_plan_sales_investment",
          "business_plan",
          "campaign_group",
          "campaign",
          "company",
          "contact_list",
          "country",
          "country_state",
          "deployment",
          "email_tag",
          "email_template_field",
          "email_template",
          "enterprise",
          "estimate",
          "group",
          "holiday",
          "identity",
          "inquiry_attachment",
          "interest_category",
          "interest",
          "invoice",
          "lead_source",
          "lead_type",
          "list",
          "location",
          "marketing_group",
          "portal_comment",
          "production_location",
          "proof",
          "prospect_status_item",
          "prospect_status",
          "report",
          "sales_category",
          "sales_rep",
          "salestarget",
          "saved_report",
          "sms_template",
          "tag_category",
          "tag_category_context",
          "tag",
          "taken_by",
          "task_type",
          "task",
          "tenant",
          "workflow"
        ],
        "model_count": 50,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "ordernodisplay",
        "type": "string",
        "label": "Ordernodisplay",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "partialpayamount",
        "type": "decimal",
        "label": "Partialpayamount",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaychecknumber",
        "type": "string",
        "label": "Partialpaychecknumber",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaycnt",
        "type": "decimal",
        "label": "Partialpaycnt",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaypaymethod",
        "type": "string",
        "label": "Partialpaypaymethod",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaypaydate",
        "type": "datetime",
        "label": "Partialpaypaydate",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "partialpayrefnumber",
        "type": "string",
        "label": "Partialpayrefnumber",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaytotal",
        "type": "decimal",
        "label": "Partialpaytotal",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "paymentduedate",
        "type": "datetime",
        "label": "Paymentduedate",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "posteddate",
        "type": "datetime",
        "label": "Posteddate",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "recordtype",
        "type": "string",
        "label": "Recordtype",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "refundtotal",
        "type": "decimal",
        "label": "Refundtotal",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "storenum",
        "type": "string",
        "label": "Storenum",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "storenumber",
        "type": "string",
        "label": "Storenumber",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "subtotalposted",
        "type": "decimal",
        "label": "Subtotalposted",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "total",
        "type": "decimal",
        "label": "Total",
        "segment": "data",
        "models": [
          "account_history_datum",
          "adjustment",
          "budget_month",
          "sales_base_tax",
          "statistic",
          "target"
        ],
        "model_count": 6,
        "types": [
          "decimal",
          "integer"
        ],
        "type_count": 2
      },
      {
        "name": "usersalesname",
        "type": "string",
        "label": "Usersalesname",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "webreferenceid",
        "type": "integer",
        "label": "Webreferenceid",
        "segment": "data",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "finalpaycct_id",
        "type": "integer",
        "label": "Finalpaycct",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "finalpaymentcreditcard_id",
        "type": "integer",
        "label": "Finalpaymentcreditcard",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaycct_id",
        "type": "integer",
        "label": "Partialpaycct",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "partialpaymentcreditcard_id",
        "type": "integer",
        "label": "Partialpaymentcreditcard",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "totaltax_id",
        "type": "integer",
        "label": "Totaltax",
        "segment": "id",
        "models": [
          "account_history_datum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "created_at",
        "type": "datetime",
        "label": "Created At",
        "segment": "stamp",
        "models": [
          "account_history_datum",
          "action_log",
          "activity",
          "address",
          "adjustment",
          "api_log",
          "asset",
          "background_job_result",
          "background_job",
          "backup",
          "badges_sash",
          "bookmark",
          "budget_month",
          "budget",
          "build",
          "business_plan_sales_investment",
          "campaign_message",
          "campaign",
          "cash_drawer",
          "comment",
          "company",
          "contact_group",
          "contact_list",
          "contact",
          "deployment",
          "email_credential",
          "email_status",
          "email_tag",
          "email_template",
          "email_validation",
          "email",
          "enterprise",
          "estimate_element",
          "estimate",
          "etl_setting",
          "event_stat",
          "event",
          "exclusion",
          "group",
          "holiday",
          "identity",
          "inquiry",
          "interest_context",
          "invoice_element",
          "invoice",
          "list",
          "location",
          "marketing_group",
          "meeting",
          "news",
          "next_activity",
          "note",
          "original_user",
          "pdf",
          "pending_attachment",
          "phone_call",
          "portal_comment",
          "production_location",
          "proof",
          "prospect_status",
          "sales_base_tax",
          "sales_category",
          "sales_rep_update",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "saved_report",
          "shipment",
          "short_url",
          "sms_template",
          "statistic",
          "tag_category",
          "taken_by_update",
          "taken_by",
          "task_repeat",
          "task",
          "tenant",
          "token",
          "tracker_hit",
          "tracker",
          "unsubscribe",
          "user",
          "version",
          "wip",
          "workflow"
        ],
        "model_count": 85,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "updated_at",
        "type": "datetime",
        "label": "Updated At",
        "segment": "data",
        "models": [
          "account_history_datum",
          "action_log",
          "activity",
          "address",
          "adjustment",
          "api_log",
          "asset",
          "background_job_result",
          "background_job",
          "backup",
          "bookmark",
          "budget_month",
          "budget",
          "build",
          "business_plan_sales_investment",
          "campaign_message",
          "campaign",
          "cash_drawer",
          "comment",
          "company",
          "contact_group",
          "contact_list",
          "contact",
          "deployment",
          "email_credential",
          "email_status",
          "email_tag",
          "email_template",
          "email_validation",
          "email",
          "enterprise",
          "estimate_element",
          "estimate",
          "etl_setting",
          "event_stat",
          "event",
          "exclusion",
          "group",
          "holiday",
          "identity",
          "inquiry",
          "interest_context",
          "invoice_element",
          "invoice",
          "list",
          "location",
          "marketing_group",
          "meeting",
          "news",
          "next_activity",
          "note",
          "original_user",
          "pdf",
          "pending_attachment",
          "phone_call",
          "portal_comment",
          "production_location",
          "proof",
          "prospect_status",
          "sales_base_tax",
          "sales_category",
          "sales_rep_update",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "saved_report",
          "shipment",
          "short_url",
          "sms_template",
          "statistic",
          "tag_category",
          "taken_by_update",
          "taken_by",
          "task_repeat",
          "task",
          "tenant",
          "token",
          "tracker_hit",
          "tracker",
          "unsubscribe",
          "user",
          "wip",
          "workflow"
        ],
        "model_count": 83,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "tenant_id",
        "type": "integer",
        "label": "Tenant",
        "segment": "id",
        "models": [
          "account_history_datum",
          "action_log",
          "activity",
          "address",
          "adjustment",
          "affiliation",
          "api_log",
          "asset",
          "background_job_result",
          "background_job",
          "backup",
          "budget",
          "business_plan_marketing_activity",
          "business_plan_sales_investment",
          "business_plan",
          "campaign_calendar_entry",
          "campaign_count",
          "campaign_message",
          "campaign",
          "cash_drawer",
          "comment",
          "company",
          "company_metric",
          "contact_group",
          "contact_list_count",
          "contact_list_exclusion",
          "contact_list",
          "contact",
          "deployment",
          "email_credential",
          "email_soft_bounce",
          "email_tag",
          "email_template_value",
          "email_template",
          "email_validation",
          "email",
          "estimate_element",
          "estimate",
          "etl_setting",
          "event_stat",
          "event",
          "filter_default",
          "groups_tenant",
          "hidden_email_template",
          "hidden_holiday",
          "hidden_lead_type",
          "hidden_task_type",
          "holiday",
          "identity",
          "inquiry",
          "interest_context",
          "invoice_element",
          "invoice",
          "lead_type",
          "list",
          "location",
          "meeting",
          "next_activity",
          "note",
          "pending_attachment",
          "phone_call",
          "portal_comment",
          "production_location",
          "proof",
          "prospect_status_item_contact",
          "prospect_status_item",
          "prospect_status",
          "report",
          "sales_base_tax",
          "sales_category",
          "sales_rep_update",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "sales_tag_by_month",
          "salestarget",
          "saved_report",
          "shipment",
          "sms_template",
          "statistic",
          "suppressed_address",
          "tag_category",
          "tag",
          "taken_by_update",
          "taken_by",
          "target",
          "task_type",
          "task",
          "token",
          "unsubscribe",
          "user",
          "wip",
          "workflow"
        ],
        "model_count": 93,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_id",
        "type": "integer",
        "label": "Printsmith",
        "segment": "id",
        "models": [
          "account_history_datum",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "estimate",
          "invoice",
          "pdf",
          "production_location",
          "sales_base_tax",
          "sales_category",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup"
        ],
        "model_count": 15,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "deleted",
        "type": "boolean",
        "label": "Deleted",
        "segment": "data",
        "models": [
          "account_history_datum",
          "activity",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "email",
          "estimate",
          "invoice",
          "note",
          "production_location",
          "sales_base_tax",
          "sales_category",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "shipment",
          "tag_category",
          "tag"
        ],
        "model_count": 20,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "dirty",
        "type": "boolean",
        "label": "Dirty",
        "segment": "data",
        "models": [
          "account_history_datum",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "estimate",
          "invoice",
          "production_location",
          "sales_base_tax",
          "sales_category",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "shipment"
        ],
        "model_count": 15,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "ready",
        "type": "boolean",
        "label": "Ready",
        "segment": "data",
        "models": [
          "account_history_datum",
          "adjustment",
          "contact",
          "estimate",
          "invoice",
          "sales_summary_pickup"
        ],
        "model_count": 6,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "associations_complete",
        "type": "boolean",
        "label": "Associations Complete",
        "segment": "data",
        "models": [
          "account_history_datum",
          "adjustment",
          "contact",
          "estimate",
          "invoice",
          "sales_base_tax",
          "sales_summary_pickup",
          "shipment"
        ],
        "model_count": 8,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "assocation_checks",
        "type": "integer",
        "label": "Assocation Checks",
        "segment": "data",
        "models": [
          "account_history_datum",
          "adjustment",
          "contact",
          "estimate",
          "invoice",
          "sales_summary_pickup"
        ],
        "model_count": 6,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_created_at",
        "type": "datetime",
        "label": "Source Created At",
        "segment": "data",
        "models": [
          "account_history_datum",
          "activity",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "estimate",
          "invoice",
          "production_location",
          "sales_base_tax",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "shipment",
          "tenant"
        ],
        "model_count": 16,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "source_updated_at",
        "type": "datetime",
        "label": "Source Updated At",
        "segment": "data",
        "models": [
          "account_history_datum",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "estimate",
          "invoice",
          "production_location",
          "sales_base_tax",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "shipment",
          "tenant"
        ],
        "model_count": 15,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "platform_id",
        "type": "string",
        "label": "Platform",
        "segment": "id_variant",
        "models": [
          "account_history_datum",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "estimate",
          "invoice",
          "pdf",
          "production_location",
          "sales_base_tax",
          "sales_category",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "shipment",
          "taken_by",
          "user"
        ],
        "model_count": 18,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "platform_data",
        "type": "jsonb",
        "label": "Platform Data",
        "segment": "data",
        "models": [
          "account_history_datum",
          "address",
          "adjustment",
          "cash_drawer",
          "company",
          "contact",
          "enterprise",
          "estimate",
          "invoice",
          "pdf",
          "production_location",
          "sales_base_tax",
          "sales_category",
          "sales_rep",
          "sales_summary",
          "sales_summary_pickup",
          "shipment",
          "taken_by",
          "tenant",
          "user"
        ],
        "model_count": 20,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "user_id",
        "type": "integer",
        "label": "User",
        "segment": "id",
        "models": [
          "action_log",
          "activity",
          "affiliation",
          "api_log",
          "background_job_result",
          "background_job",
          "bookmark",
          "business_plan_sales_investment",
          "calendar_entry_deletion",
          "calendar",
          "campaign_calendar_entry",
          "campaign",
          "comment",
          "email_alias",
          "email_credential",
          "email_tag",
          "email_template",
          "email",
          "exclusion",
          "filter_default",
          "holiday",
          "inquiry",
          "interest_context",
          "interest",
          "list",
          "meeting_attendee",
          "meeting",
          "note",
          "original_user",
          "phone_call",
          "portal_comment",
          "proof",
          "prospect_status",
          "report",
          "sales_rep",
          "salestarget",
          "shared_user",
          "sms_template",
          "statistic",
          "tag",
          "taken_by",
          "task_type",
          "task",
          "token",
          "workflow"
        ],
        "model_count": 45,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sales_rep_user_id",
        "type": "integer",
        "label": "Sales Rep User",
        "segment": "id",
        "models": [
          "action_log",
          "adjustment",
          "company",
          "contact",
          "estimate",
          "invoice",
          "shipment",
          "statistic",
          "target"
        ],
        "model_count": 9,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "location_id",
        "type": "integer",
        "label": "Location",
        "segment": "id",
        "models": [
          "action_log",
          "sales_rep",
          "statistic",
          "taken_by",
          "target"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "action",
        "type": "string",
        "label": "Action",
        "segment": "data",
        "models": [
          "action_log"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "context_id",
        "type": "integer",
        "label": "Context",
        "segment": "id",
        "models": [
          "action_log",
          "api_log",
          "asset",
          "bookmark",
          "email",
          "exclusion",
          "filter_default",
          "interest_context",
          "meeting",
          "next_activity",
          "note",
          "portal_comment"
        ],
        "model_count": 12,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "context_type",
        "type": "string",
        "label": "Context Type",
        "segment": "data",
        "models": [
          "action_log",
          "api_log",
          "asset",
          "bookmark",
          "email",
          "exclusion",
          "filter_default",
          "interest_context",
          "meeting",
          "next_activity",
          "note",
          "portal_comment"
        ],
        "model_count": 12,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "element_id",
        "type": "integer",
        "label": "Element",
        "segment": "id",
        "models": [
          "activity",
          "email_template_value",
          "estimate_element",
          "invoice_element"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "element_type",
        "type": "string",
        "label": "Element Type",
        "segment": "data",
        "models": [
          "activity",
          "email_template_value",
          "estimate_element",
          "invoice_element"
        ],
        "model_count": 4,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "contact_id",
        "type": "integer",
        "label": "Contact",
        "segment": "id",
        "models": [
          "activity",
          "campaign_exclusion",
          "campaign_message",
          "contact_groups_contact",
          "contact_list_exclusion",
          "contact_lists_contact",
          "email_validation",
          "estimate",
          "inquiry",
          "invoice",
          "meeting_attendee",
          "next_activity",
          "phone_call",
          "prospect_status_item_contact",
          "shipment",
          "unsubscribe"
        ],
        "model_count": 16,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_id",
        "type": "integer",
        "label": "Estimate",
        "segment": "id",
        "models": [
          "activity",
          "estimate_element"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "phone_call_id",
        "type": "integer",
        "label": "Phone Call",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "task_id",
        "type": "integer",
        "label": "Task",
        "segment": "id",
        "models": [
          "activity",
          "task_repeat"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "email_id",
        "type": "integer",
        "label": "Email",
        "segment": "id",
        "models": [
          "activity",
          "email_tags_email",
          "email",
          "emails_tracker"
        ],
        "model_count": 4,
        "types": [
          "integer",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "comment_id",
        "type": "integer",
        "label": "Comment",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "order_id",
        "type": "integer",
        "label": "Order",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sale_id",
        "type": "integer",
        "label": "Sale",
        "segment": "id",
        "models": [
          "activity",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "tracker_id",
        "type": "integer",
        "label": "Tracker",
        "segment": "id",
        "models": [
          "activity",
          "asset",
          "campaign_messages_tracker",
          "emails_tracker",
          "tracker_hit"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "email_message_id",
        "type": "integer",
        "label": "Email Message",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "note_id",
        "type": "integer",
        "label": "Note",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "activity_for",
        "type": "string",
        "label": "Activity For",
        "segment": "data",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "hide",
        "type": "boolean",
        "label": "Hide",
        "segment": "data",
        "models": [
          "activity",
          "user"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_id",
        "type": "integer",
        "label": "Campaign",
        "segment": "id",
        "models": [
          "activity",
          "campaign_calendar_entry",
          "campaign_count",
          "campaign_exclusion",
          "campaign_message",
          "campaigns_contact_list"
        ],
        "model_count": 6,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_message_id",
        "type": "integer",
        "label": "Campaign Message",
        "segment": "id",
        "models": [
          "activity",
          "campaign_messages_tracker"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "parent_contact_id",
        "type": "integer",
        "label": "Parent Contact",
        "segment": "id",
        "models": [
          "activity",
          "campaign_message",
          "contact",
          "estimate",
          "invoice"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_comment_id",
        "type": "integer",
        "label": "Portal Comment",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "meeting_id",
        "type": "integer",
        "label": "Meeting",
        "segment": "id",
        "models": [
          "activity",
          "meeting_attendee"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_id",
        "type": "integer",
        "label": "Inquiry",
        "segment": "id",
        "models": [
          "activity",
          "estimate",
          "inquiry_attachment",
          "invoice",
          "shipment",
          "task"
        ],
        "model_count": 6,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "shipment_id",
        "type": "integer",
        "label": "Shipment",
        "segment": "id",
        "models": [
          "activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "city",
        "type": "string",
        "label": "City",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "country",
        "type": "string",
        "label": "Country",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "manualchange",
        "type": "boolean",
        "label": "Manualchange",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "state",
        "type": "string",
        "label": "State",
        "segment": "data",
        "models": [
          "address",
          "holiday",
          "identity",
          "tenant"
        ],
        "model_count": 4,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "street1",
        "type": "string",
        "label": "Street1",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "street2",
        "type": "string",
        "label": "Street2",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "street3",
        "type": "string",
        "label": "Street3",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "webid",
        "type": "string",
        "label": "Webid",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "zip",
        "type": "string",
        "label": "Zip",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "zone",
        "type": "string",
        "label": "Zone",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "latitude",
        "type": "float",
        "label": "Latitude",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "float"
        ],
        "type_count": 1
      },
      {
        "name": "longitude",
        "type": "float",
        "label": "Longitude",
        "segment": "data",
        "models": [
          "address"
        ],
        "model_count": 1,
        "types": [
          "float"
        ],
        "type_count": 1
      },
      {
        "name": "external_id",
        "type": "string",
        "label": "External",
        "segment": "id_variant",
        "models": [
          "address",
          "company",
          "contact",
          "invoice",
          "pdf",
          "sales_rep",
          "taken_by",
          "user"
        ],
        "model_count": 8,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "affect_sales",
        "type": "boolean",
        "label": "Affect Sales",
        "segment": "data",
        "models": [
          "adjustment"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "posted_date",
        "type": "datetime",
        "label": "Posted Date",
        "segment": "data",
        "models": [
          "adjustment",
          "sales_base_tax"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "final_payment_date",
        "type": "datetime",
        "label": "Final Payment Date",
        "segment": "data",
        "models": [
          "adjustment"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "voided",
        "type": "boolean",
        "label": "Voided",
        "segment": "data",
        "models": [
          "adjustment",
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 4,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "accounting_month",
        "type": "integer",
        "label": "Accounting Month",
        "segment": "data",
        "models": [
          "adjustment",
          "invoice",
          "sales_summary",
          "shipment",
          "statistic"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "accounting_year",
        "type": "integer",
        "label": "Accounting Year",
        "segment": "data",
        "models": [
          "adjustment",
          "invoice",
          "sales_summary",
          "shipment",
          "statistic"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "description",
        "type": "string",
        "label": "Description",
        "segment": "data",
        "models": [
          "adjustment",
          "background_job_result",
          "background_job",
          "calendar_entry",
          "campaign",
          "contact_list",
          "inquiry",
          "lead_type",
          "list",
          "proof",
          "prospect_status_item",
          "shipment",
          "tag_category",
          "task"
        ],
        "model_count": 14,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "comment",
        "type": "string",
        "label": "Comment",
        "segment": "data",
        "models": [
          "adjustment",
          "comment"
        ],
        "model_count": 2,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "source_sales_rep",
        "type": "string",
        "label": "Source Sales Rep",
        "segment": "data",
        "models": [
          "adjustment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "reference_number",
        "type": "string",
        "label": "Reference Number",
        "segment": "data",
        "models": [
          "adjustment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_refreshed_at",
        "type": "datetime",
        "label": "Last Refreshed At",
        "segment": "data",
        "models": [
          "adjustment",
          "company",
          "estimate",
          "invoice"
        ],
        "model_count": 4,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_refreshed_version",
        "type": "integer",
        "label": "Last Refreshed Version",
        "segment": "data",
        "models": [
          "adjustment",
          "company"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "location_user_id",
        "type": "integer",
        "label": "Location User",
        "segment": "id",
        "models": [
          "adjustment",
          "company",
          "contact",
          "estimate",
          "inquiry",
          "invoice",
          "target"
        ],
        "model_count": 7,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sales_summary_id",
        "type": "integer",
        "label": "Sales Summary",
        "segment": "id",
        "models": [
          "adjustment",
          "invoice",
          "sales_summary_pickup",
          "shipment"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "daily_accounting_day",
        "type": "integer",
        "label": "Daily Accounting Day",
        "segment": "data",
        "models": [
          "adjustment",
          "invoice",
          "sales_summary",
          "shipment"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "daily_accounting_month",
        "type": "integer",
        "label": "Daily Accounting Month",
        "segment": "data",
        "models": [
          "adjustment",
          "invoice",
          "sales_summary",
          "shipment"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "daily_accounting_year",
        "type": "integer",
        "label": "Daily Accounting Year",
        "segment": "data",
        "models": [
          "adjustment",
          "invoice",
          "sales_summary",
          "shipment"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "daily_sales_summary_id",
        "type": "integer",
        "label": "Daily Sales Summary",
        "segment": "id",
        "models": [
          "adjustment",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "total_less_non_sales",
        "type": "decimal",
        "label": "Total Less Non Sales",
        "segment": "data",
        "models": [
          "adjustment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "markups",
        "type": "decimal",
        "label": "Markups",
        "segment": "data",
        "models": [
          "adjustment",
          "sales_summary",
          "statistic"
        ],
        "model_count": 3,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "discounts",
        "type": "decimal",
        "label": "Discounts",
        "segment": "data",
        "models": [
          "adjustment",
          "sales_summary"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "shipping",
        "type": "decimal",
        "label": "Shipping",
        "segment": "data",
        "models": [
          "adjustment",
          "sales_category",
          "sales_summary"
        ],
        "model_count": 3,
        "types": [
          "decimal",
          "boolean"
        ],
        "type_count": 2
      },
      {
        "name": "primary",
        "type": "boolean",
        "label": "Primary",
        "segment": "data",
        "models": [
          "affiliation"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "url",
        "type": "string",
        "label": "Url",
        "segment": "data",
        "models": [
          "api_log",
          "inquiry_attachment",
          "short_url"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "body",
        "type": "jsonb",
        "label": "Body",
        "segment": "data",
        "models": [
          "api_log",
          "campaign",
          "email_template",
          "email",
          "enterprise_business_welcome",
          "news",
          "phone_call",
          "portal_comment",
          "sms_template"
        ],
        "model_count": 9,
        "types": [
          "jsonb",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "response_message",
        "type": "string",
        "label": "Response Message",
        "segment": "data",
        "models": [
          "api_log"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "retry_count",
        "type": "integer",
        "label": "Retry Count",
        "segment": "data",
        "models": [
          "api_log"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "status",
        "type": "string",
        "label": "Status",
        "segment": "data",
        "models": [
          "api_log",
          "background_job",
          "campaign",
          "company",
          "email_status",
          "estimate",
          "event",
          "lead_type",
          "meeting_attendee",
          "meeting",
          "next_activity",
          "portal_comment",
          "prospect_status_item_contact",
          "prospect_status_version",
          "shipment",
          "task"
        ],
        "model_count": 16,
        "types": [
          "string",
          "integer",
          "text"
        ],
        "type_count": 3
      },
      {
        "name": "category",
        "type": "string",
        "label": "Category",
        "segment": "data",
        "models": [
          "asset",
          "contact_list_rule",
          "email_template_category",
          "sms_template_category"
        ],
        "model_count": 4,
        "types": [
          "string",
          "text",
          "integer"
        ],
        "type_count": 3
      },
      {
        "name": "file_name",
        "type": "string",
        "label": "File Name",
        "segment": "data",
        "models": [
          "asset",
          "pending_attachment"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "file_hash",
        "type": "string",
        "label": "File Hash",
        "segment": "data",
        "models": [
          "asset"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "content_type",
        "type": "string",
        "label": "Content Type",
        "segment": "data",
        "models": [
          "asset"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "enterprise_id",
        "type": "integer",
        "label": "Enterprise",
        "segment": "id",
        "models": [
          "asset",
          "business_plan_marketing_activity",
          "campaign_group",
          "campaign",
          "contact_list",
          "countries_enterprise",
          "email_credential",
          "email_template",
          "email_validation",
          "enterprise_business_welcome",
          "enterprise_salestarget",
          "enterprise_togglefield",
          "group",
          "holiday",
          "interest_category",
          "lead_source",
          "lead_type",
          "list",
          "marketing_group",
          "news",
          "prospect_status_item",
          "prospect_status",
          "salestarget",
          "saved_report",
          "sms_template",
          "tag_category",
          "task_type",
          "tenant",
          "user",
          "workflow"
        ],
        "model_count": 30,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "archived",
        "type": "boolean",
        "label": "Archived",
        "segment": "data",
        "models": [
          "asset",
          "email_template"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "meta_data",
        "type": "jsonb",
        "label": "Meta Data",
        "segment": "data",
        "models": [
          "asset",
          "company",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "global",
        "type": "boolean",
        "label": "Global",
        "segment": "data",
        "models": [
          "asset",
          "business_plan_marketing_activity",
          "campaign",
          "contact_list",
          "email_template",
          "holiday",
          "lead_type",
          "list",
          "news",
          "report",
          "sms_template",
          "task_type",
          "workflow"
        ],
        "model_count": 13,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "job_hash",
        "type": "string",
        "label": "Job Hash",
        "segment": "data",
        "models": [
          "background_job_result",
          "background_job"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "job_type",
        "type": "string",
        "label": "Job Type",
        "segment": "data",
        "models": [
          "background_job_result",
          "background_job"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "status_view",
        "type": "string",
        "label": "Status View",
        "segment": "data",
        "models": [
          "background_job_result",
          "background_job"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "completed_view",
        "type": "string",
        "label": "Completed View",
        "segment": "data",
        "models": [
          "background_job_result",
          "background_job"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "data",
        "type": "jsonb",
        "label": "Data",
        "segment": "data",
        "models": [
          "background_job_result",
          "background_job",
          "event_stat",
          "event",
          "saved_report",
          "unsubscribe"
        ],
        "model_count": 6,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "result",
        "type": "jsonb",
        "label": "Result",
        "segment": "data",
        "models": [
          "background_job_result",
          "background_job"
        ],
        "model_count": 2,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "expires_at",
        "type": "datetime",
        "label": "Expires At",
        "segment": "data",
        "models": [
          "background_job_result",
          "token"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "complete",
        "type": "boolean",
        "label": "Complete",
        "segment": "data",
        "models": [
          "background_job",
          "pending_attachment",
          "sales_summary"
        ],
        "model_count": 3,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "completed_at",
        "type": "datetime",
        "label": "Completed At",
        "segment": "data",
        "models": [
          "background_job",
          "task"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "filename",
        "type": "string",
        "label": "Filename",
        "segment": "data",
        "models": [
          "backup"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "success",
        "type": "boolean",
        "label": "Success",
        "segment": "data",
        "models": [
          "backup"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "badge_id",
        "type": "integer",
        "label": "Badge",
        "segment": "id",
        "models": [
          "badges_sash"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sash_id",
        "type": "integer",
        "label": "Sash",
        "segment": "id",
        "models": [
          "badges_sash",
          "user"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "notified_user",
        "type": "boolean",
        "label": "Notified User",
        "segment": "data",
        "models": [
          "badges_sash"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "budget_id",
        "type": "integer",
        "label": "Budget",
        "segment": "id",
        "models": [
          "budget_month"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "month_date",
        "type": "date",
        "label": "Month Date",
        "segment": "data",
        "models": [
          "budget_month",
          "sales_tag_by_month"
        ],
        "model_count": 2,
        "types": [
          "date"
        ],
        "type_count": 1
      },
      {
        "name": "enterprise_total",
        "type": "integer",
        "label": "Enterprise Total",
        "segment": "data",
        "models": [
          "budget_month"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year",
        "type": "integer",
        "label": "Financial Year",
        "segment": "data",
        "models": [
          "budget",
          "business_plan",
          "enterprise_business_welcome",
          "statistic"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "comp_perc",
        "type": "integer",
        "label": "Comp Perc",
        "segment": "data",
        "models": [
          "budget"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "enterprise_comp_perc",
        "type": "integer",
        "label": "Enterprise Comp Perc",
        "segment": "data",
        "models": [
          "budget"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "os",
        "type": "text",
        "label": "Os",
        "segment": "data",
        "models": [
          "build",
          "deployment"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "checksum",
        "type": "text",
        "label": "Checksum",
        "segment": "data",
        "models": [
          "build",
          "deployment"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "title",
        "type": "string",
        "label": "Title",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity",
          "comment",
          "meeting",
          "news",
          "note"
        ],
        "model_count": 5,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "quarter_1",
        "type": "decimal",
        "label": "Quarter 1",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity",
          "business_plan_sales_investment"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "quarter_2",
        "type": "decimal",
        "label": "Quarter 2",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity",
          "business_plan_sales_investment"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "quarter_3",
        "type": "decimal",
        "label": "Quarter 3",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity",
          "business_plan_sales_investment"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "quarter_4",
        "type": "decimal",
        "label": "Quarter 4",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity",
          "business_plan_sales_investment"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "percentage",
        "type": "decimal",
        "label": "Percentage",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "max_cap",
        "type": "decimal",
        "label": "Max Cap",
        "segment": "data",
        "models": [
          "business_plan_marketing_activity"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "business_plan_id",
        "type": "integer",
        "label": "Business Plan",
        "segment": "id",
        "models": [
          "business_plan_marketing_activity",
          "business_plan_sales_investment"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "growth_target",
        "type": "integer",
        "label": "Growth Target",
        "segment": "data",
        "models": [
          "business_plan"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "win_back_target",
        "type": "integer",
        "label": "Win Back Target",
        "segment": "data",
        "models": [
          "business_plan"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "ten_companies",
        "type": "jsonb",
        "label": "Ten Companies",
        "segment": "data",
        "models": [
          "business_plan"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_id",
        "type": "integer",
        "label": "Calendar",
        "segment": "id",
        "models": [
          "calendar_entry"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "entry_ident",
        "type": "text",
        "label": "Entry Ident",
        "segment": "data",
        "models": [
          "calendar_entry",
          "calendar_entry_deletion"
        ],
        "model_count": 2,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "start_time",
        "type": "datetime",
        "label": "Start Time",
        "segment": "data",
        "models": [
          "calendar_entry"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "end_time",
        "type": "datetime",
        "label": "End Time",
        "segment": "data",
        "models": [
          "calendar_entry"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "summary",
        "type": "text",
        "label": "Summary",
        "segment": "data",
        "models": [
          "calendar_entry",
          "meeting"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "updated",
        "type": "boolean",
        "label": "Updated",
        "segment": "data",
        "models": [
          "calendar_entry"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_ident",
        "type": "string",
        "label": "Calendar Ident",
        "segment": "data",
        "models": [
          "calendar_entry_deletion",
          "calendar"
        ],
        "model_count": 2,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "send_updates",
        "type": "boolean",
        "label": "Send Updates",
        "segment": "data",
        "models": [
          "calendar_entry_deletion"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "last_sync",
        "type": "datetime",
        "label": "Last Sync",
        "segment": "data",
        "models": [
          "calendar"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "next_sync_token",
        "type": "text",
        "label": "Next Sync Token",
        "segment": "data",
        "models": [
          "calendar"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "timezone",
        "type": "text",
        "label": "Timezone",
        "segment": "data",
        "models": [
          "calendar"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "user_ids",
        "type": "integer",
        "label": "User Ids",
        "segment": "data",
        "models": [
          "calendar"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_entry_id",
        "type": "string",
        "label": "Calendar Entry",
        "segment": "id_variant",
        "models": [
          "campaign_calendar_entry"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "date",
        "type": "datetime",
        "label": "Date",
        "segment": "data",
        "models": [
          "campaign_calendar_entry",
          "holiday_date",
          "statistic",
          "suppressed_address",
          "wip"
        ],
        "model_count": 5,
        "types": [
          "datetime",
          "date",
          "string"
        ],
        "type_count": 3
      },
      {
        "name": "total_count",
        "type": "integer",
        "label": "Total Count",
        "segment": "data",
        "models": [
          "campaign_count",
          "contact_list_count"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "primary_id",
        "type": "integer",
        "label": "Primary",
        "segment": "id",
        "models": [
          "campaign_group"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_ids",
        "type": "integer",
        "label": "Campaign Ids",
        "segment": "data",
        "models": [
          "campaign_group",
          "marketing_group"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "opened",
        "type": "boolean",
        "label": "Opened",
        "segment": "data",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "sent",
        "type": "boolean",
        "label": "Sent",
        "segment": "data",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "failed",
        "type": "boolean",
        "label": "Failed",
        "segment": "data",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "note",
        "type": "text",
        "label": "Note",
        "segment": "data",
        "models": [
          "campaign_message",
          "meeting_attendee",
          "meeting"
        ],
        "model_count": 3,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "parent_message_id",
        "type": "integer",
        "label": "Parent Message",
        "segment": "id",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sent_date",
        "type": "datetime",
        "label": "Sent Date",
        "segment": "data",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "failed_reason",
        "type": "string",
        "label": "Failed Reason",
        "segment": "data",
        "models": [
          "campaign_message",
          "email"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "unsubscribed",
        "type": "boolean",
        "label": "Unsubscribed",
        "segment": "data",
        "models": [
          "campaign_message",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "sent_message_id",
        "type": "string",
        "label": "Sent Message",
        "segment": "id_variant",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "complaint",
        "type": "string",
        "label": "Complaint",
        "segment": "data",
        "models": [
          "campaign_message"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "delivered",
        "type": "boolean",
        "label": "Delivered",
        "segment": "data",
        "models": [
          "campaign_message",
          "shipment"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "fixed",
        "type": "boolean",
        "label": "Fixed",
        "segment": "data",
        "models": [
          "campaign_message",
          "email_validation",
          "unsubscribe"
        ],
        "model_count": 3,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "method",
        "type": "integer",
        "label": "Method",
        "segment": "data",
        "models": [
          "campaign",
          "tracker"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "subject",
        "type": "text",
        "label": "Subject",
        "segment": "data",
        "models": [
          "campaign",
          "email_template",
          "email",
          "phone_call"
        ],
        "model_count": 4,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "email_template_id",
        "type": "integer",
        "label": "Email Template",
        "segment": "id",
        "models": [
          "campaign",
          "email_template_category",
          "email_template_field",
          "hidden_email_template",
          "prospect_status_item"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "parent_id",
        "type": "integer",
        "label": "Parent",
        "segment": "id",
        "models": [
          "campaign",
          "email_validation",
          "tag",
          "user"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "test",
        "type": "boolean",
        "label": "Test",
        "segment": "data",
        "models": [
          "campaign",
          "email"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "identity_id",
        "type": "integer",
        "label": "Identity",
        "segment": "id",
        "models": [
          "campaign",
          "location"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "scheduled",
        "type": "boolean",
        "label": "Scheduled",
        "segment": "data",
        "models": [
          "campaign",
          "next_activity"
        ],
        "model_count": 2,
        "types": [
          "boolean",
          "datetime"
        ],
        "type_count": 2
      },
      {
        "name": "schedule_weekday",
        "type": "integer",
        "label": "Schedule Weekday",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "scheduled_at",
        "type": "datetime",
        "label": "Scheduled At",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_week",
        "type": "integer",
        "label": "Schedule Week",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_hour",
        "type": "integer",
        "label": "Schedule Hour",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "allow_override",
        "type": "boolean",
        "label": "Allow Override",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "test_confirmed",
        "type": "boolean",
        "label": "Test Confirmed",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "clear_exclusions",
        "type": "boolean",
        "label": "Clear Exclusions",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "hidden_tenants",
        "type": "jsonb",
        "label": "Hidden Tenants",
        "segment": "data",
        "models": [
          "campaign",
          "tag_category"
        ],
        "model_count": 2,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "enterprise_campaign",
        "type": "boolean",
        "label": "Enterprise Campaign",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "selected_tenants",
        "type": "integer",
        "label": "Selected Tenants",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "test_emails",
        "type": "string",
        "label": "Test Emails",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "global_hide",
        "type": "boolean",
        "label": "Global Hide",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "paused",
        "type": "boolean",
        "label": "Paused",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_date",
        "type": "datetime",
        "label": "Schedule Date",
        "segment": "data",
        "models": [
          "campaign",
          "event"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_interval_type",
        "type": "string",
        "label": "Schedule Interval Type",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_interval",
        "type": "integer",
        "label": "Schedule Interval",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_day_lock",
        "type": "string",
        "label": "Schedule Day Lock",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "schedule_auto_send",
        "type": "boolean",
        "label": "Schedule Auto Send",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "auto_send_tenants",
        "type": "integer",
        "label": "Auto Send Tenants",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "alerts",
        "type": "jsonb",
        "label": "Alerts",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "approvals",
        "type": "jsonb",
        "label": "Approvals",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "auto_send_throttle_override",
        "type": "boolean",
        "label": "Auto Send Throttle Override",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "auto_approve",
        "type": "boolean",
        "label": "Auto Approve",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "skips",
        "type": "jsonb",
        "label": "Skips",
        "segment": "data",
        "models": [
          "campaign"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "contact_list_id",
        "type": "integer",
        "label": "Contact List",
        "segment": "id",
        "models": [
          "campaigns_contact_list",
          "contact_list_count",
          "contact_list_exclusion",
          "contact_list_rule",
          "contact_lists_contact"
        ],
        "model_count": 5,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "amount",
        "type": "decimal",
        "label": "Amount",
        "segment": "data",
        "models": [
          "cash_drawer",
          "enterprise_salestarget",
          "salestarget"
        ],
        "model_count": 3,
        "types": [
          "decimal",
          "integer"
        ],
        "type_count": 2
      },
      {
        "name": "arbalance",
        "type": "decimal",
        "label": "Arbalance",
        "segment": "data",
        "models": [
          "cash_drawer",
          "sales_summary"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "cardcount",
        "type": "integer",
        "label": "Cardcount",
        "segment": "data",
        "models": [
          "cash_drawer",
          "sales_summary"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "cardtotal",
        "type": "decimal",
        "label": "Cardtotal",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "cashtotal",
        "type": "decimal",
        "label": "Cashtotal",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "changefund",
        "type": "decimal",
        "label": "Changefund",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "checkcount",
        "type": "integer",
        "label": "Checkcount",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "checktotal",
        "type": "decimal",
        "label": "Checktotal",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "fund",
        "type": "decimal",
        "label": "Fund",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "held",
        "type": "boolean",
        "label": "Held",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "lastcloseoutdate",
        "type": "datetime",
        "label": "Lastcloseoutdate",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "laststartupdate",
        "type": "datetime",
        "label": "Laststartupdate",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "paidouts",
        "type": "decimal",
        "label": "Paidouts",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "prevarbalance",
        "type": "decimal",
        "label": "Prevarbalance",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "transactiondate",
        "type": "datetime",
        "label": "Transactiondate",
        "segment": "data",
        "models": [
          "cash_drawer"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "klass",
        "type": "string",
        "label": "Klass",
        "segment": "data",
        "models": [
          "clearbit_quotum",
          "etl_setting",
          "target"
        ],
        "model_count": 3,
        "types": [
          "string",
          "integer"
        ],
        "type_count": 2
      },
      {
        "name": "used",
        "type": "integer",
        "label": "Used",
        "segment": "data",
        "models": [
          "clearbit_quotum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "max",
        "type": "integer",
        "label": "Max",
        "segment": "data",
        "models": [
          "clearbit_quotum"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "start_date",
        "type": "datetime",
        "label": "Start Date",
        "segment": "data",
        "models": [
          "clearbit_quotum",
          "meeting",
          "prospect_status_item_contact",
          "task"
        ],
        "model_count": 4,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "end_date",
        "type": "datetime",
        "label": "End Date",
        "segment": "data",
        "models": [
          "clearbit_quotum",
          "meeting",
          "task"
        ],
        "model_count": 3,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "commentable_id",
        "type": "integer",
        "label": "Commentable",
        "segment": "id",
        "models": [
          "comment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "commentable_type",
        "type": "string",
        "label": "Commentable Type",
        "segment": "data",
        "models": [
          "comment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "exclude_from_analysis",
        "type": "boolean",
        "label": "Exclude From Analysis",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "walk_in",
        "type": "boolean",
        "label": "Walk In",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "avg_conversion_ratio",
        "type": "decimal",
        "label": "Avg Conversion Ratio",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "mtd_sales",
        "type": "decimal",
        "label": "Mtd Sales",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "ytd_sales",
        "type": "decimal",
        "label": "Ytd Sales",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "needs_recalc",
        "type": "boolean",
        "label": "Needs Recalc",
        "segment": "data",
        "models": [
          "company",
          "statistic"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "sales_hash",
        "type": "hstore",
        "label": "Sales Hash",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "hstore"
        ],
        "type_count": 1
      },
      {
        "name": "mtd_rank",
        "type": "integer",
        "label": "Mtd Rank",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "ytd_rank",
        "type": "integer",
        "label": "Ytd Rank",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "ly_rank",
        "type": "integer",
        "label": "Ly Rank",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_rank",
        "type": "integer",
        "label": "Rolling 12 Month Rank",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "ly_sales",
        "type": "decimal",
        "label": "Ly Sales",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_sales",
        "type": "decimal",
        "label": "Rolling 12 Month Sales",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "prospect",
        "type": "boolean",
        "label": "Prospect",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "account_type",
        "type": "string",
        "label": "Account Type",
        "segment": "data",
        "models": [
          "company",
          "contact_list"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_rank_ly",
        "type": "integer",
        "label": "Rolling 12 Month Rank Ly",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_sales_ly",
        "type": "decimal",
        "label": "Rolling 12 Month Sales Ly",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "source_billtoaddress_id",
        "type": "integer",
        "label": "Source Billtoaddress",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_billtocontact_id",
        "type": "integer",
        "label": "Source Billtocontact",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_salesrep_id",
        "type": "integer",
        "label": "Source Salesrep",
        "segment": "id",
        "models": [
          "company",
          "contact",
          "invoice",
          "shipment"
        ],
        "model_count": 4,
        "types": [
          "integer",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "source_shiptoaddress_id",
        "type": "integer",
        "label": "Source Shiptoaddress",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_contact_id",
        "type": "integer",
        "label": "Source Contact",
        "segment": "id",
        "models": [
          "company",
          "estimate",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_shippingmode_id",
        "type": "integer",
        "label": "Source Shippingmode",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_taxtable_id",
        "type": "integer",
        "label": "Source Taxtable",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_do_not_mail",
        "type": "boolean",
        "label": "Marketing Do Not Mail",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "needs_avg_conversion_ratio",
        "type": "boolean",
        "label": "Needs Avg Conversion Ratio",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "last_clearbit_data_fetch_date",
        "type": "datetime",
        "label": "Last Clearbit Data Fetch Date",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_cogs",
        "type": "decimal",
        "label": "Rolling 12 Month Cogs",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "last_order_date",
        "type": "datetime",
        "label": "Last Order Date",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "growth_percentage",
        "type": "decimal",
        "label": "Growth Percentage",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "lifetime_value",
        "type": "decimal",
        "label": "Lifetime Value",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "needs_lifetime_value_recalc",
        "type": "boolean",
        "label": "Needs Lifetime Value Recalc",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "oldest_interaction",
        "type": "datetime",
        "label": "Oldest Interaction",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_1_month_sales",
        "type": "decimal",
        "label": "Rolling 1 Month Sales",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "order_count",
        "type": "integer",
        "label": "Order Count",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "cache_data",
        "type": "jsonb",
        "label": "Cache Data",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "last_viewed",
        "type": "datetime",
        "label": "Last Viewed",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "has_clearbit_data",
        "type": "boolean",
        "label": "Has Clearbit Data",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "clearbit_data",
        "type": "jsonb",
        "label": "Clearbit Data",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "custom_data",
        "type": "jsonb",
        "label": "Custom Data",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "account_payable_id",
        "type": "integer",
        "label": "Account Payable",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "phone",
        "type": "string",
        "label": "Phone",
        "segment": "data",
        "models": [
          "company",
          "contact_group",
          "contact",
          "identity",
          "inquiry",
          "phone_call",
          "tenant",
          "user"
        ],
        "model_count": 8,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "master_account",
        "type": "string",
        "label": "Master Account",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "lead_source",
        "type": "string",
        "label": "Lead Source",
        "segment": "data",
        "models": [
          "company",
          "contact",
          "inquiry"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "lead_source_2",
        "type": "string",
        "label": "Lead Source 2",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_contact",
        "type": "datetime",
        "label": "Last Contact",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_email_sent",
        "type": "datetime",
        "label": "Last Email Sent",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_email_received",
        "type": "datetime",
        "label": "Last Email Received",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_phone_call",
        "type": "datetime",
        "label": "Last Phone Call",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_rank_ly_ly",
        "type": "integer",
        "label": "Rolling 12 Month Rank Ly Ly",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_sales_ly_ly",
        "type": "decimal",
        "label": "Rolling 12 Month Sales Ly Ly",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_rank_ly_previous",
        "type": "integer",
        "label": "Rolling 12 Month Rank Ly Previous",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "rolling_12_month_sales_ly_previous",
        "type": "decimal",
        "label": "Rolling 12 Month Sales Ly Previous",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "account_note",
        "type": "string",
        "label": "Account Note",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "job_note",
        "type": "string",
        "label": "Job Note",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "credit_limit",
        "type": "decimal",
        "label": "Credit Limit",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "account_created_date",
        "type": "datetime",
        "label": "Account Created Date",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "account_display_id",
        "type": "string",
        "label": "Account Display",
        "segment": "id_variant",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "business_type_code",
        "type": "string",
        "label": "Business Type Code",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "company_created_date",
        "type": "datetime",
        "label": "Company Created Date",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "web",
        "type": "boolean",
        "label": "Web",
        "segment": "data",
        "models": [
          "company",
          "estimate",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "no_notifications",
        "type": "boolean",
        "label": "No Notifications",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "remote_sales_rep_update",
        "type": "boolean",
        "label": "Remote Sales Rep Update",
        "segment": "data",
        "models": [
          "company",
          "contact",
          "estimate",
          "invoice"
        ],
        "model_count": 4,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "last_pickup_date",
        "type": "datetime",
        "label": "Last Pickup Date",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "single_sale_only_at",
        "type": "datetime",
        "label": "Single Sale Only At",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "remote_lead_source_update",
        "type": "boolean",
        "label": "Remote Lead Source Update",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "send_invoice_ap_contact",
        "type": "boolean",
        "label": "Send Invoice Ap Contact",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "primary_contact_id",
        "type": "integer",
        "label": "Primary Contact",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "prospect_status_id",
        "type": "integer",
        "label": "Prospect Status",
        "segment": "id",
        "models": [
          "company",
          "contact",
          "enterprise_salestarget",
          "prospect_status_item"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "prospect_sentiment",
        "type": "integer",
        "label": "Prospect Sentiment",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_address_id",
        "type": "integer",
        "label": "Invoice Address",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "statement_address_id",
        "type": "integer",
        "label": "Statement Address",
        "segment": "id",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "est_spend",
        "type": "integer",
        "label": "Est Spend",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "conv_prob",
        "type": "integer",
        "label": "Conv Prob",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "remote_account_update",
        "type": "boolean",
        "label": "Remote Account Update",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "lead_type_id",
        "type": "integer",
        "label": "Lead Type",
        "segment": "id",
        "models": [
          "company",
          "contact",
          "enterprise_salestarget",
          "hidden_lead_type",
          "inquiry",
          "prospect_status_item",
          "prospect_status_version",
          "prospect_status"
        ],
        "model_count": 8,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "created_ps",
        "type": "boolean",
        "label": "Created Ps",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "walk_in_lead_transfer_initial",
        "type": "boolean",
        "label": "Walk In Lead Transfer Initial",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "walk_in_lead_transfer_to",
        "type": "boolean",
        "label": "Walk In Lead Transfer To",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "last_meeting",
        "type": "datetime",
        "label": "Last Meeting",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_center",
        "type": "boolean",
        "label": "Mbe Center",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "b2b",
        "type": "boolean",
        "label": "B2b",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_id",
        "type": "string",
        "label": "Mbe",
        "segment": "id_variant",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "is_lead",
        "type": "boolean",
        "label": "Is Lead",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_privilege",
        "type": "boolean",
        "label": "Mbe Privilege",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "first_sale_at",
        "type": "datetime",
        "label": "First Sale At",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "sales_rep_platform_id",
        "type": "string",
        "label": "Sales Rep Platform",
        "segment": "id_variant",
        "models": [
          "company",
          "contact",
          "estimate",
          "inquiry",
          "invoice",
          "shipment"
        ],
        "model_count": 6,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "tmp_data",
        "type": "jsonb",
        "label": "Tmp Data",
        "segment": "data",
        "models": [
          "company",
          "contact",
          "estimate",
          "inquiry",
          "invoice",
          "shipment"
        ],
        "model_count": 6,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "last_sale_order_date",
        "type": "datetime",
        "label": "Last Sale Order Date",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_sale_pickup_date",
        "type": "datetime",
        "label": "Last Sale Pickup Date",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_shipment_date",
        "type": "datetime",
        "label": "Last Shipment Date",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_lapsed_date",
        "type": "datetime",
        "label": "Last Lapsed Date",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "propagate_sales_reps",
        "type": "boolean",
        "label": "Propagate Sales Reps",
        "segment": "data",
        "models": [
          "company"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_rank",
        "type": "integer",
        "label": "Financial Year Rank",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_sales",
        "type": "decimal",
        "label": "Financial Year Sales",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_cogs",
        "type": "decimal",
        "label": "Financial Year Cogs",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_rank_ly",
        "type": "integer",
        "label": "Financial Year Rank Ly",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_sales_ly",
        "type": "decimal",
        "label": "Financial Year Sales Ly",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_rank_ly_ly",
        "type": "integer",
        "label": "Financial Year Rank Ly Ly",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_sales_ly_ly",
        "type": "decimal",
        "label": "Financial Year Sales Ly Ly",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "growth_percentage_financial_year",
        "type": "decimal",
        "label": "Growth Percentage Financial Year",
        "segment": "data",
        "models": [
          "company",
          "contact"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "report_month",
        "type": "date",
        "label": "Report Month",
        "segment": "data",
        "models": [
          "company_metric"
        ],
        "model_count": 1,
        "types": [
          "date"
        ],
        "type_count": 1
      },
      {
        "name": "report_series",
        "type": "string",
        "label": "Report Series",
        "segment": "data",
        "models": [
          "company_metric"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "first_name",
        "type": "string",
        "label": "First Name",
        "segment": "data",
        "models": [
          "contact_group",
          "contact",
          "inquiry",
          "user"
        ],
        "model_count": 4,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_name",
        "type": "string",
        "label": "Last Name",
        "segment": "data",
        "models": [
          "contact_group",
          "contact",
          "inquiry",
          "user"
        ],
        "model_count": 4,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "email",
        "type": "string",
        "label": "Email",
        "segment": "data",
        "models": [
          "contact_group",
          "contact",
          "email_alias",
          "unsubscribe"
        ],
        "model_count": 4,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_count",
        "type": "integer",
        "label": "Estimate Count",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_count",
        "type": "integer",
        "label": "Invoice Count",
        "segment": "data",
        "models": [
          "contact_group",
          "sales_summary"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_total",
        "type": "decimal",
        "label": "Estimate Total",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_total",
        "type": "decimal",
        "label": "Invoice Total",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "first_estimate",
        "type": "datetime",
        "label": "First Estimate",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "first_invoice",
        "type": "datetime",
        "label": "First Invoice",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_estimate",
        "type": "datetime",
        "label": "Last Estimate",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_invoice",
        "type": "datetime",
        "label": "Last Invoice",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "count",
        "type": "integer",
        "label": "Count",
        "segment": "data",
        "models": [
          "contact_group",
          "statistic"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sales_total",
        "type": "hstore",
        "label": "Sales Total",
        "segment": "data",
        "models": [
          "contact_group"
        ],
        "model_count": 1,
        "types": [
          "hstore"
        ],
        "type_count": 1
      },
      {
        "name": "contact_group_id",
        "type": "integer",
        "label": "Contact Group",
        "segment": "id",
        "models": [
          "contact_groups_contact",
          "estimate",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "generate_duration",
        "type": "decimal",
        "label": "Generate Duration",
        "segment": "data",
        "models": [
          "contact_list_count"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "operand",
        "type": "text",
        "label": "Operand",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "value",
        "type": "text",
        "label": "Value",
        "segment": "data",
        "models": [
          "contact_list_rule",
          "email_template_value",
          "region_config"
        ],
        "model_count": 3,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "value2",
        "type": "text",
        "label": "Value2",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "modifier",
        "type": "text",
        "label": "Modifier",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "modifier_operand",
        "type": "text",
        "label": "Modifier Operand",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "modifier_value",
        "type": "text",
        "label": "Modifier Value",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "modifier_value2",
        "type": "text",
        "label": "Modifier Value2",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "negate",
        "type": "boolean",
        "label": "Negate",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "sales_rep_id",
        "type": "integer",
        "label": "Sales Rep",
        "segment": "id",
        "models": [
          "contact_list_rule",
          "sales_rep_update"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "taken_by_id",
        "type": "integer",
        "label": "Taken By",
        "segment": "id",
        "models": [
          "contact_list_rule",
          "estimate",
          "invoice",
          "taken_by_update"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "modifier2",
        "type": "string",
        "label": "Modifier2",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "modifier2_operand",
        "type": "string",
        "label": "Modifier2 Operand",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "modifier2_value",
        "type": "string",
        "label": "Modifier2 Value",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "modifier2_value2",
        "type": "string",
        "label": "Modifier2 Value2",
        "segment": "data",
        "models": [
          "contact_list_rule"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "segment": "data",
        "models": [
          "contact_list"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "colour",
        "type": "string",
        "label": "Colour",
        "segment": "data",
        "models": [
          "contact_list"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "hide_from_tenant",
        "type": "boolean",
        "label": "Hide From Tenant",
        "segment": "data",
        "models": [
          "contact_list"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "gender",
        "type": "string",
        "label": "Gender",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "temp",
        "type": "boolean",
        "label": "Temp",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "source_address_id",
        "type": "integer",
        "label": "Source Address",
        "segment": "id",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "remote_update_required",
        "type": "boolean",
        "label": "Remote Update Required",
        "segment": "data",
        "models": [
          "contact",
          "estimate",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "in_group",
        "type": "boolean",
        "label": "In Group",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "mobile",
        "type": "string",
        "label": "Mobile",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "fax",
        "type": "string",
        "label": "Fax",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "home_phone",
        "type": "string",
        "label": "Home Phone",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "twitter",
        "type": "string",
        "label": "Twitter",
        "segment": "data",
        "models": [
          "contact",
          "identity",
          "tenant"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "other",
        "type": "string",
        "label": "Other",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "facebook",
        "type": "string",
        "label": "Facebook",
        "segment": "data",
        "models": [
          "contact",
          "identity",
          "tenant"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "website",
        "type": "string",
        "label": "Website",
        "segment": "data",
        "models": [
          "contact",
          "identity",
          "tenant"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "buy_frequency",
        "type": "float",
        "label": "Buy Frequency",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "float"
        ],
        "type_count": 1
      },
      {
        "name": "days_outside_buy_freq",
        "type": "integer",
        "label": "Days Outside Buy Freq",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_unsubscribe",
        "type": "boolean",
        "label": "Marketing Unsubscribe",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "latest_order_date",
        "type": "datetime",
        "label": "Latest Order Date",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_unsubscribe_reason",
        "type": "string",
        "label": "Marketing Unsubscribe Reason",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "on_suppression_list",
        "type": "boolean",
        "label": "On Suppression List",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "address_id",
        "type": "integer",
        "label": "Address",
        "segment": "id",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "average_invoice",
        "type": "decimal",
        "label": "Average Invoice",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "guessed_gender",
        "type": "string",
        "label": "Guessed Gender",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "guessed_gender_confidence",
        "type": "decimal",
        "label": "Guessed Gender Confidence",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "bounced_email_addresses",
        "type": "string",
        "label": "Bounced Email Addresses",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "prefix",
        "type": "string",
        "label": "Prefix",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "suffix",
        "type": "string",
        "label": "Suffix",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "needs_email_remap",
        "type": "boolean",
        "label": "Needs Email Remap",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "job_title",
        "type": "string",
        "label": "Job Title",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "next_activity_date",
        "type": "date",
        "label": "Next Activity Date",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "date"
        ],
        "type_count": 1
      },
      {
        "name": "next_activity_type",
        "type": "string",
        "label": "Next Activity Type",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "use_contact_address",
        "type": "boolean",
        "label": "Use Contact Address",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "needs_email_validation",
        "type": "boolean",
        "label": "Needs Email Validation",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "source_inquiry_id",
        "type": "integer",
        "label": "Source Inquiry",
        "segment": "id",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "email_validation_attempts",
        "type": "integer",
        "label": "Email Validation Attempts",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "next_activity",
        "type": "jsonb",
        "label": "Next Activity",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "oldest_rolling_12_invoice",
        "type": "datetime",
        "label": "Oldest Rolling 12 Invoice",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "oldest_rolling_12_ly_invoice",
        "type": "datetime",
        "label": "Oldest Rolling 12 Ly Invoice",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "oldest_rolling_12_ly_ly_invoice",
        "type": "datetime",
        "label": "Oldest Rolling 12 Ly Ly Invoice",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "oldest_rolling_1_invoice",
        "type": "datetime",
        "label": "Oldest Rolling 1 Invoice",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "old_prospect_status_id",
        "type": "integer",
        "label": "Old Prospect Status",
        "segment": "id",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "lead_created_at",
        "type": "datetime",
        "label": "Lead Created At",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "do_not_sms",
        "type": "boolean",
        "label": "Do Not Sms",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "privacy_data",
        "type": "jsonb",
        "label": "Privacy Data",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "do_not_sms_reply",
        "type": "string",
        "label": "Do Not Sms Reply",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "potential",
        "type": "integer",
        "label": "Potential",
        "segment": "data",
        "models": [
          "contact"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "country_id",
        "type": "integer",
        "label": "Country",
        "segment": "id",
        "models": [
          "countries_enterprise",
          "country_state"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "holiday_id",
        "type": "integer",
        "label": "Holiday",
        "segment": "id",
        "models": [
          "country_states_holiday",
          "hidden_holiday",
          "holiday_date"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "country_state_id",
        "type": "integer",
        "label": "Country State",
        "segment": "id",
        "models": [
          "country_states_holiday"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "version",
        "type": "text",
        "label": "Version",
        "segment": "data",
        "models": [
          "deployment"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "built_on",
        "type": "text",
        "label": "Built On",
        "segment": "data",
        "models": [
          "deployment"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "address",
        "type": "text",
        "label": "Address",
        "segment": "data",
        "models": [
          "deployment",
          "email_validation"
        ],
        "model_count": 2,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "platform",
        "type": "string",
        "label": "Platform",
        "segment": "data",
        "models": [
          "email_credential",
          "tracker_hit"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "credentials",
        "type": "jsonb",
        "label": "Credentials",
        "segment": "data",
        "models": [
          "email_credential"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "message",
        "type": "jsonb",
        "label": "Message",
        "segment": "data",
        "models": [
          "email_delivery",
          "meeting",
          "note"
        ],
        "model_count": 3,
        "types": [
          "jsonb",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "email_inbox_id",
        "type": "integer",
        "label": "Email Inbox",
        "segment": "id",
        "models": [
          "email_message_activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_email_message_id",
        "type": "integer",
        "label": "Last Email Message",
        "segment": "id",
        "models": [
          "email_message_activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_scan",
        "type": "datetime",
        "label": "Last Scan",
        "segment": "data",
        "models": [
          "email_message_activity"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "forward_scan_id",
        "type": "integer",
        "label": "Forward Scan",
        "segment": "id",
        "models": [
          "email_message_activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "reverse_scan_id",
        "type": "integer",
        "label": "Reverse Scan",
        "segment": "id",
        "models": [
          "email_message_activity"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "email_address",
        "type": "string",
        "label": "Email Address",
        "segment": "data",
        "models": [
          "email_soft_bounce",
          "email_status",
          "meeting_attendee",
          "suppressed_address"
        ],
        "model_count": 4,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "soft_bounce_count",
        "type": "integer",
        "label": "Soft Bounce Count",
        "segment": "data",
        "models": [
          "email_soft_bounce"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "info",
        "type": "text",
        "label": "Info",
        "segment": "data",
        "models": [
          "email_status"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "label_id",
        "type": "string",
        "label": "Label",
        "segment": "id_variant",
        "models": [
          "email_tag"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "label_type",
        "type": "string",
        "label": "Label Type",
        "segment": "data",
        "models": [
          "email_tag"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "email_tag_id",
        "type": "integer",
        "label": "Email Tag",
        "segment": "id",
        "models": [
          "email_tags_email"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "required",
        "type": "boolean",
        "label": "Required",
        "segment": "data",
        "models": [
          "email_template_field"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "email_template_field_id",
        "type": "integer",
        "label": "Email Template Field",
        "segment": "id",
        "models": [
          "email_template_value"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "key",
        "type": "text",
        "label": "Key",
        "segment": "data",
        "models": [
          "email_template",
          "estimate",
          "invoice",
          "pdf",
          "shipment"
        ],
        "model_count": 5,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "shell",
        "type": "boolean",
        "label": "Shell",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "wrapper_id",
        "type": "integer",
        "label": "Wrapper",
        "segment": "id",
        "models": [
          "email_template",
          "sms_template"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "hidden",
        "type": "boolean",
        "label": "Hidden",
        "segment": "data",
        "models": [
          "email_template",
          "tag_category"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "auto_cc",
        "type": "boolean",
        "label": "Auto Cc",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "auto_cc_sales_rep",
        "type": "boolean",
        "label": "Auto Cc Sales Rep",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "production_location_id",
        "type": "integer",
        "label": "Production Location",
        "segment": "id",
        "models": [
          "email_template",
          "estimate",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_attach",
        "type": "boolean",
        "label": "Default Attach",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "copied_email_template_id",
        "type": "integer",
        "label": "Copied Email Template",
        "segment": "id",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "copied_similarity",
        "type": "integer",
        "label": "Copied Similarity",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "copied_root_email_template_id",
        "type": "integer",
        "label": "Copied Root Email Template",
        "segment": "id",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "copied_depth",
        "type": "integer",
        "label": "Copied Depth",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "root_similarity",
        "type": "integer",
        "label": "Root Similarity",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "use_roboto",
        "type": "boolean",
        "label": "Use Roboto",
        "segment": "data",
        "models": [
          "email_template"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "code",
        "type": "string",
        "label": "Code",
        "segment": "data",
        "models": [
          "email_validation"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "rescan_needed",
        "type": "boolean",
        "label": "Rescan Needed",
        "segment": "data",
        "models": [
          "email_validation"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "pending_rescan",
        "type": "boolean",
        "label": "Pending Rescan",
        "segment": "data",
        "models": [
          "email_validation"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "to",
        "type": "text",
        "label": "To",
        "segment": "data",
        "models": [
          "email",
          "phone_call"
        ],
        "model_count": 2,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "from",
        "type": "text",
        "label": "From",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "read",
        "type": "boolean",
        "label": "Read",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "from_user_id",
        "type": "integer",
        "label": "From User",
        "segment": "id",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "to_user_id",
        "type": "integer",
        "label": "To User",
        "segment": "id",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "direction",
        "type": "string",
        "label": "Direction",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "thread_id",
        "type": "string",
        "label": "Thread",
        "segment": "id_variant",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "processed",
        "type": "boolean",
        "label": "Processed",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "labels",
        "type": "text",
        "label": "Labels",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "sending_as_user_id",
        "type": "integer",
        "label": "Sending As User",
        "segment": "id",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "cc",
        "type": "string",
        "label": "Cc",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "attachment_uuid",
        "type": "string",
        "label": "Attachment Uuid",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "bcc",
        "type": "string",
        "label": "Bcc",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "message_id",
        "type": "string",
        "label": "Message",
        "segment": "id_variant",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "error_backoff",
        "type": "datetime",
        "label": "Error Backoff",
        "segment": "data",
        "models": [
          "email"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "bulk",
        "type": "boolean",
        "label": "Bulk",
        "segment": "data",
        "models": [
          "email",
          "pending_attachment"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "prospect_status_item_contact_id",
        "type": "integer",
        "label": "Prospect Status Item Contact",
        "segment": "id",
        "models": [
          "email",
          "meeting",
          "phone_call",
          "task"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "items",
        "type": "integer",
        "label": "Items",
        "segment": "data",
        "models": [
          "enterprise_salestarget",
          "salestarget"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "field",
        "type": "string",
        "label": "Field",
        "segment": "data",
        "models": [
          "enterprise_togglefield"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "read_only",
        "type": "boolean",
        "label": "Read Only",
        "segment": "data",
        "models": [
          "enterprise_togglefield"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_eula",
        "type": "boolean",
        "label": "Show Eula",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "eula_body",
        "type": "text",
        "label": "Eula Body",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "setup_user",
        "type": "string",
        "label": "Setup User",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "setup_password",
        "type": "string",
        "label": "Setup Password",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_test_address",
        "type": "string",
        "label": "Campaign Test Address",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "unsubscribe_template",
        "type": "text",
        "label": "Unsubscribe Template",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "banner_id",
        "type": "integer",
        "label": "Banner",
        "segment": "id",
        "models": [
          "enterprise",
          "tenant",
          "user"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_email_template_id",
        "type": "integer",
        "label": "Default Email Template",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_approval_address",
        "type": "string",
        "label": "Campaign Approval Address",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "intercom_app_id",
        "type": "string",
        "label": "Intercom App",
        "segment": "id_variant",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "freshchat_token",
        "type": "string",
        "label": "Freshchat Token",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "portal_estimate_comment_template_id",
        "type": "integer",
        "label": "Portal Estimate Comment Template",
        "segment": "id",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_estimate_approved_template_id",
        "type": "integer",
        "label": "Portal Estimate Approved Template",
        "segment": "id",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_estimate_canceled_template_id",
        "type": "integer",
        "label": "Portal Estimate Canceled Template",
        "segment": "id",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_estimate_copy",
        "type": "text",
        "label": "Portal Estimate Copy",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "default_company_emailt_id",
        "type": "integer",
        "label": "Default Company Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_contact_emailt_id",
        "type": "integer",
        "label": "Default Contact Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_estimate_emailt_id",
        "type": "integer",
        "label": "Default Estimate Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_order_emailt_id",
        "type": "integer",
        "label": "Default Order Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_sale_emailt_id",
        "type": "integer",
        "label": "Default Sale Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "currency_locale",
        "type": "string",
        "label": "Currency Locale",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "statement_template_name",
        "type": "text",
        "label": "Statement Template Name",
        "segment": "data",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "statement_template",
        "type": "text",
        "label": "Statement Template",
        "segment": "data",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "pdf_gen_link",
        "type": "text",
        "label": "Pdf Gen Link",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "default_salestarget_amount",
        "type": "integer",
        "label": "Default Salestarget Amount",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_salestarget_number",
        "type": "integer",
        "label": "Default Salestarget Number",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "deleted_at",
        "type": "datetime",
        "label": "Deleted At",
        "segment": "data",
        "models": [
          "enterprise",
          "estimate",
          "invoice",
          "user"
        ],
        "model_count": 4,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "api_token",
        "type": "string",
        "label": "Api Token",
        "segment": "data",
        "models": [
          "enterprise",
          "user"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_inquiry_emailt_id",
        "type": "integer",
        "label": "Default Inquiry Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "connection_type",
        "type": "string",
        "label": "Connection Type",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "locale",
        "type": "string",
        "label": "Locale",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "portal_proof_comment_template_id",
        "type": "integer",
        "label": "Portal Proof Comment Template",
        "segment": "id",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_proof_approved_template_id",
        "type": "integer",
        "label": "Portal Proof Approved Template",
        "segment": "id",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_proof_copy",
        "type": "text",
        "label": "Portal Proof Copy",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "brand_colors",
        "type": "jsonb",
        "label": "Brand Colors",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "platform_type",
        "type": "string",
        "label": "Platform Type",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_roboto_font",
        "type": "boolean",
        "label": "Default Roboto Font",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "agi_brand",
        "type": "boolean",
        "label": "Agi Brand",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_language",
        "type": "boolean",
        "label": "Show Language",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "default_shipment_emailt_id",
        "type": "integer",
        "label": "Default Shipment Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "show_multi_users",
        "type": "boolean",
        "label": "Show Multi Users",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "platform_name",
        "type": "string",
        "label": "Platform Name",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "tenant_create_identities",
        "type": "boolean",
        "label": "Tenant Create Identities",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "tenant_edit_identities",
        "type": "boolean",
        "label": "Tenant Edit Identities",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "tenant_ses_verification",
        "type": "boolean",
        "label": "Tenant Ses Verification",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "default_tenant_id",
        "type": "integer",
        "label": "Default Tenant",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "enabled_lang",
        "type": "string",
        "label": "Enabled Lang",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "email_blacklist",
        "type": "text",
        "label": "Email Blacklist",
        "segment": "data",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "api_base_url",
        "type": "string",
        "label": "Api Base Url",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "api_base_token",
        "type": "string",
        "label": "Api Base Token",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "api_username",
        "type": "string",
        "label": "Api Username",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "api_password",
        "type": "string",
        "label": "Api Password",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_marketing_name_base",
        "type": "string",
        "label": "Default Marketing Name Base",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_website_base",
        "type": "string",
        "label": "Default Website Base",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_facebook",
        "type": "string",
        "label": "Default Facebook",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_twitter",
        "type": "string",
        "label": "Default Twitter",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_instagram",
        "type": "string",
        "label": "Default Instagram",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_youtube",
        "type": "string",
        "label": "Default Youtube",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_linked_in",
        "type": "string",
        "label": "Default Linked In",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "csv_col_sep",
        "type": "string",
        "label": "Csv Col Sep",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "currency_decimal",
        "type": "string",
        "label": "Currency Decimal",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "business_welcome",
        "type": "text",
        "label": "Business Welcome",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "business_growth",
        "type": "integer",
        "label": "Business Growth",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_proof_emailt_id",
        "type": "integer",
        "label": "Default Proof Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_revision_emailt_id",
        "type": "integer",
        "label": "Default Revision Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_proof_reminder_emailt_id",
        "type": "integer",
        "label": "Default Proof Reminder Emailt",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "starter_pack_url",
        "type": "string",
        "label": "Starter Pack Url",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "online_help_url",
        "type": "string",
        "label": "Online Help Url",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "user_signature_template",
        "type": "text",
        "label": "User Signature Template",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "proof_banner_id",
        "type": "integer",
        "label": "Proof Banner",
        "segment": "id",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_banner",
        "type": "string",
        "label": "Marketing Banner",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "docs_second",
        "type": "boolean",
        "label": "Docs Second",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "default_blog",
        "type": "string",
        "label": "Default Blog",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_request_quote",
        "type": "string",
        "label": "Default Request Quote",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default_pinterest",
        "type": "string",
        "label": "Default Pinterest",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_section_url",
        "type": "string",
        "label": "Marketing Section Url",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "job_titles",
        "type": "string",
        "label": "Job Titles",
        "segment": "data",
        "models": [
          "enterprise",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "business_primary_focus",
        "type": "string",
        "label": "Business Primary Focus",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "bs_benchmark_revenue",
        "type": "decimal",
        "label": "Bs Benchmark Revenue",
        "segment": "data",
        "models": [
          "enterprise"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "grand_total",
        "type": "decimal",
        "label": "Grand Total",
        "segment": "data",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "on_pending_list",
        "type": "boolean",
        "label": "On Pending List",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "wanted_by",
        "type": "datetime",
        "label": "Wanted By",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "off_pending_date",
        "type": "datetime",
        "label": "Off Pending Date",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "reorder_date",
        "type": "datetime",
        "label": "Reorder Date",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "salesrep_id",
        "type": "integer",
        "label": "Salesrep",
        "segment": "id",
        "models": [
          "estimate",
          "inquiry",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "notes_id",
        "type": "integer",
        "label": "Notes",
        "segment": "id",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "special_instructions_id",
        "type": "integer",
        "label": "Special Instructions",
        "segment": "id",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "documentlocation_id",
        "type": "integer",
        "label": "Documentlocation",
        "segment": "id",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "total_cost",
        "type": "decimal",
        "label": "Total Cost",
        "segment": "data",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "source_taken_by",
        "type": "string",
        "label": "Source Taken By",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "created_by",
        "type": "string",
        "label": "Created By",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "customer_po",
        "type": "string",
        "label": "Customer Po",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_notes",
        "type": "text",
        "label": "Estimate Notes",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "text",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "invoice_number",
        "type": "string",
        "label": "Invoice Number",
        "segment": "data",
        "models": [
          "estimate",
          "inquiry",
          "invoice"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "price_sub_total",
        "type": "decimal",
        "label": "Price Sub Total",
        "segment": "data",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "price_total",
        "type": "decimal",
        "label": "Price Total",
        "segment": "data",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "costed",
        "type": "boolean",
        "label": "Costed",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "firm_wanted_by_date",
        "type": "boolean",
        "label": "Firm Wanted By Date",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "source_estimate_id",
        "type": "integer",
        "label": "Source Estimate",
        "segment": "id",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "converted_invoice_id",
        "type": "integer",
        "label": "Converted Invoice",
        "segment": "id",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "converted_invoice_number",
        "type": "integer",
        "label": "Converted Invoice Number",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_estimate_number",
        "type": "integer",
        "label": "Source Estimate Number",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_invoice_number",
        "type": "integer",
        "label": "Source Invoice Number",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "actioned",
        "type": "boolean",
        "label": "Actioned",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "tax",
        "type": "decimal",
        "label": "Tax",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "grand_total_inc_tax",
        "type": "decimal",
        "label": "Grand Total Inc Tax",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "overdue_actioned",
        "type": "boolean",
        "label": "Overdue Actioned",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "needs_pdf",
        "type": "boolean",
        "label": "Needs Pdf",
        "segment": "data",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "ordered_date",
        "type": "datetime",
        "label": "Ordered Date",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "public_token",
        "type": "string",
        "label": "Public Token",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "instructions",
        "type": "text",
        "label": "Instructions",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "workflow_status",
        "type": "string",
        "label": "Workflow Status",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "follow_up_date",
        "type": "datetime",
        "label": "Follow Up Date",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "follow_up_count",
        "type": "integer",
        "label": "Follow Up Count",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "reason",
        "type": "string",
        "label": "Reason",
        "segment": "data",
        "models": [
          "estimate",
          "suppressed_address"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "pdf_id",
        "type": "integer",
        "label": "Pdf",
        "segment": "id",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "rounded_amount",
        "type": "decimal",
        "label": "Rounded Amount",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "taken_by_user_id",
        "type": "integer",
        "label": "Taken By User",
        "segment": "id",
        "models": [
          "estimate",
          "invoice",
          "target"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "report_name",
        "type": "string",
        "label": "Report Name",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "pdf_error_count",
        "type": "integer",
        "label": "Pdf Error Count",
        "segment": "data",
        "models": [
          "estimate",
          "invoice",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "retry_location_update",
        "type": "boolean",
        "label": "Retry Location Update",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "archived_at",
        "type": "datetime",
        "label": "Archived At",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "archived_user_id",
        "type": "integer",
        "label": "Archived User",
        "segment": "id",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "retry_archive",
        "type": "boolean",
        "label": "Retry Archive",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "reason_value",
        "type": "string",
        "label": "Reason Value",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "dirty_skip_pdf",
        "type": "boolean",
        "label": "Dirty Skip Pdf",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "job_descriptions",
        "type": "text",
        "label": "Job Descriptions",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "proof_by",
        "type": "datetime",
        "label": "Proof By",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "holdstate_id",
        "type": "integer",
        "label": "Holdstate",
        "segment": "id",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_key",
        "type": "string",
        "label": "Portal Key",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "approval_status",
        "type": "string",
        "label": "Approval Status",
        "segment": "data",
        "models": [
          "estimate",
          "proof"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "remote_proof_by_update",
        "type": "boolean",
        "label": "Remote Proof By Update",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "retry_convert_update",
        "type": "boolean",
        "label": "Retry Convert Update",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_auto",
        "type": "boolean",
        "label": "Inquiry Auto",
        "segment": "data",
        "models": [
          "estimate"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "converted",
        "type": "boolean",
        "label": "Converted",
        "segment": "data",
        "models": [
          "estimate",
          "invoice"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "last_created_at",
        "type": "string",
        "label": "Last Created At",
        "segment": "data",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_updated_at",
        "type": "string",
        "label": "Last Updated At",
        "segment": "data",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_created_id",
        "type": "integer",
        "label": "Last Created",
        "segment": "id",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_updated_id",
        "type": "integer",
        "label": "Last Updated",
        "segment": "id",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_created_count",
        "type": "integer",
        "label": "Last Created Count",
        "segment": "data",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_updated_count",
        "type": "integer",
        "label": "Last Updated Count",
        "segment": "data",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_created_offset",
        "type": "integer",
        "label": "Last Created Offset",
        "segment": "data",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_updated_offset",
        "type": "integer",
        "label": "Last Updated Offset",
        "segment": "data",
        "models": [
          "etl_setting"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "event_type",
        "type": "string",
        "label": "Event Type",
        "segment": "data",
        "models": [
          "event_stat",
          "event"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "duration",
        "type": "decimal",
        "label": "Duration",
        "segment": "data",
        "models": [
          "event_stat"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "source",
        "type": "string",
        "label": "Source",
        "segment": "data",
        "models": [
          "event_stat",
          "event",
          "shipment"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "section",
        "type": "string",
        "label": "Section",
        "segment": "data",
        "models": [
          "filter_default"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "group_type",
        "type": "string",
        "label": "Group Type",
        "segment": "data",
        "models": [
          "group"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "default",
        "type": "boolean",
        "label": "Default",
        "segment": "data",
        "models": [
          "group",
          "identity",
          "location"
        ],
        "model_count": 3,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "group_id",
        "type": "integer",
        "label": "Group",
        "segment": "id",
        "models": [
          "groups_tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "task_type_id",
        "type": "integer",
        "label": "Task Type",
        "segment": "id",
        "models": [
          "hidden_task_type",
          "task"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "year",
        "type": "integer",
        "label": "Year",
        "segment": "data",
        "models": [
          "holiday",
          "statistic",
          "target"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "month",
        "type": "integer",
        "label": "Month",
        "segment": "data",
        "models": [
          "holiday",
          "statistic",
          "target"
        ],
        "model_count": 3,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "day",
        "type": "integer",
        "label": "Day",
        "segment": "data",
        "models": [
          "holiday",
          "statistic"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "email_marketing",
        "type": "string",
        "label": "Email Marketing",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "contact_name",
        "type": "string",
        "label": "Contact Name",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_validated",
        "type": "datetime",
        "label": "Last Validated",
        "segment": "data",
        "models": [
          "identity"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "address_1",
        "type": "string",
        "label": "Address 1",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "address_2",
        "type": "string",
        "label": "Address 2",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "suburb",
        "type": "string",
        "label": "Suburb",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "postcode",
        "type": "string",
        "label": "Postcode",
        "segment": "data",
        "models": [
          "identity",
          "inquiry",
          "tenant"
        ],
        "model_count": 3,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "business_hours",
        "type": "text",
        "label": "Business Hours",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_name",
        "type": "string",
        "label": "Marketing Name",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "holiday_last_day",
        "type": "string",
        "label": "Holiday Last Day",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "holiday_returning",
        "type": "string",
        "label": "Holiday Returning",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "website_url",
        "type": "string",
        "label": "Website Url",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "request_quote_url",
        "type": "string",
        "label": "Request Quote Url",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "instagram",
        "type": "string",
        "label": "Instagram",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "pinterest",
        "type": "string",
        "label": "Pinterest",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "review_url",
        "type": "string",
        "label": "Review Url",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "number",
        "type": "string",
        "label": "Number",
        "segment": "data",
        "models": [
          "identity",
          "proof",
          "tenant"
        ],
        "model_count": 3,
        "types": [
          "string",
          "integer"
        ],
        "type_count": 2
      },
      {
        "name": "blog",
        "type": "string",
        "label": "Blog",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "linked_in",
        "type": "string",
        "label": "Linked In",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "youtube",
        "type": "string",
        "label": "Youtube",
        "segment": "data",
        "models": [
          "identity",
          "tenant"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "email_status",
        "type": "text",
        "label": "Email Status",
        "segment": "data",
        "models": [
          "identity"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "from_name",
        "type": "string",
        "label": "From Name",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "from_email",
        "type": "string",
        "label": "From Email",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "pinned",
        "type": "boolean",
        "label": "Pinned",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "priority",
        "type": "integer",
        "label": "Priority",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_type",
        "type": "integer",
        "label": "Inquiry Type",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "company_name",
        "type": "string",
        "label": "Company Name",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "replied",
        "type": "datetime",
        "label": "Replied",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "active_inquiry",
        "type": "boolean",
        "label": "Active Inquiry",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_status",
        "type": "integer",
        "label": "Inquiry Status",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "notification_ids",
        "type": "string",
        "label": "Notification Ids",
        "segment": "data",
        "models": [
          "inquiry",
          "task"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "lost_reason",
        "type": "string",
        "label": "Lost Reason",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "unique_id",
        "type": "integer",
        "label": "Unique",
        "segment": "id",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "has_asset",
        "type": "boolean",
        "label": "Has Asset",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_identifier",
        "type": "integer",
        "label": "Inquiry Identifier",
        "segment": "data",
        "models": [
          "inquiry"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "interest_type",
        "type": "integer",
        "label": "Interest Type",
        "segment": "data",
        "models": [
          "interest_category",
          "interest_context"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "interest_id",
        "type": "integer",
        "label": "Interest",
        "segment": "id",
        "models": [
          "interest_context"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "interest_category_id",
        "type": "integer",
        "label": "Interest Category",
        "segment": "id",
        "models": [
          "interest"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "completed",
        "type": "boolean",
        "label": "Completed",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "pickup_date",
        "type": "datetime",
        "label": "Pickup Date",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "amount_due",
        "type": "decimal",
        "label": "Amount Due",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "reorder_followed_up",
        "type": "datetime",
        "label": "Reorder Followed Up",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "remote_po_update",
        "type": "boolean",
        "label": "Remote Po Update",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "proof_approval_status",
        "type": "string",
        "label": "Proof Approval Status",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "proof_approved_id",
        "type": "integer",
        "label": "Proof Approved",
        "segment": "id",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "proof_id",
        "type": "integer",
        "label": "Proof",
        "segment": "id",
        "models": [
          "invoice",
          "portal_comment"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_invoice_external_id",
        "type": "string",
        "label": "Source Invoice External",
        "segment": "id_variant",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_type",
        "type": "integer",
        "label": "Invoice Type",
        "segment": "data",
        "models": [
          "invoice"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "job_name",
        "type": "string",
        "label": "Job Name",
        "segment": "data",
        "models": [
          "job_stat"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "job_id",
        "type": "integer",
        "label": "Job",
        "segment": "id",
        "models": [
          "job_stat"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "job_start",
        "type": "datetime",
        "label": "Job Start",
        "segment": "data",
        "models": [
          "job_stat"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "job_end",
        "type": "datetime",
        "label": "Job End",
        "segment": "data",
        "models": [
          "job_stat"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "exception_type",
        "type": "string",
        "label": "Exception Type",
        "segment": "data",
        "models": [
          "job_stat"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "exception_message",
        "type": "string",
        "label": "Exception Message",
        "segment": "data",
        "models": [
          "job_stat"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "lead_status_visibility",
        "type": "integer",
        "label": "Lead Status Visibility",
        "segment": "data",
        "models": [
          "lead_type"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "active_status_version",
        "type": "integer",
        "label": "Active Status Version",
        "segment": "data",
        "models": [
          "lead_type"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "is_default",
        "type": "boolean",
        "label": "Is Default",
        "segment": "data",
        "models": [
          "lead_type"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "filter",
        "type": "jsonb",
        "label": "Filter",
        "segment": "data",
        "models": [
          "list"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "site_wide",
        "type": "boolean",
        "label": "Site Wide",
        "segment": "data",
        "models": [
          "list",
          "workflow"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "email_template_ids",
        "type": "integer",
        "label": "Email Template Ids",
        "segment": "data",
        "models": [
          "marketing_group"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "excluded_campaign_ids",
        "type": "integer",
        "label": "Excluded Campaign Ids",
        "segment": "data",
        "models": [
          "marketing_group"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "excluded_email_template_ids",
        "type": "integer",
        "label": "Excluded Email Template Ids",
        "segment": "data",
        "models": [
          "marketing_group"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "custom_time_zone",
        "type": "text",
        "label": "Custom Time Zone",
        "segment": "data",
        "models": [
          "meeting_attendee"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "user_calendar_entry_id",
        "type": "integer",
        "label": "User Calendar Entry",
        "segment": "id",
        "models": [
          "meeting_attendee",
          "meeting",
          "task"
        ],
        "model_count": 3,
        "types": [
          "integer",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "location",
        "type": "text",
        "label": "Location",
        "segment": "data",
        "models": [
          "meeting"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_needs_update",
        "type": "boolean",
        "label": "Calendar Needs Update",
        "segment": "data",
        "models": [
          "meeting",
          "task"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "reminder_sent",
        "type": "boolean",
        "label": "Reminder Sent",
        "segment": "data",
        "models": [
          "meeting"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "prospect_status_item_id",
        "type": "integer",
        "label": "Prospect Status Item",
        "segment": "id",
        "models": [
          "note",
          "prospect_status_item_contact"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "target_user_id",
        "type": "integer",
        "label": "Target User",
        "segment": "id",
        "models": [
          "original_user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "uuid",
        "type": "string",
        "label": "Uuid",
        "segment": "data",
        "models": [
          "original_user",
          "pending_attachment",
          "tracker"
        ],
        "model_count": 3,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "page_count",
        "type": "integer",
        "label": "Page Count",
        "segment": "data",
        "models": [
          "pdf"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "path",
        "type": "string",
        "label": "Path",
        "segment": "data",
        "models": [
          "pending_attachment",
          "tracker"
        ],
        "model_count": 2,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "inline",
        "type": "boolean",
        "label": "Inline",
        "segment": "data",
        "models": [
          "pending_attachment"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "needs_asset",
        "type": "jsonb",
        "label": "Needs Asset",
        "segment": "data",
        "models": [
          "pending_attachment"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "error",
        "type": "string",
        "label": "Error",
        "segment": "data",
        "models": [
          "pending_attachment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "warn",
        "type": "string",
        "label": "Warn",
        "segment": "data",
        "models": [
          "pending_attachment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "phoneable_id",
        "type": "integer",
        "label": "Phoneable",
        "segment": "id",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "phoneable_type",
        "type": "string",
        "label": "Phoneable Type",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "call_date",
        "type": "datetime",
        "label": "Call Date",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "call_type",
        "type": "string",
        "label": "Call Type",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "twillio_message_sid",
        "type": "string",
        "label": "Twillio Message Sid",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "sms_status",
        "type": "string",
        "label": "Sms Status",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "test_number",
        "type": "string",
        "label": "Test Number",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "twillio_message",
        "type": "string",
        "label": "Twillio Message",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "sms_reply",
        "type": "string",
        "label": "Sms Reply",
        "segment": "data",
        "models": [
          "phone_call"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_key",
        "type": "string",
        "label": "Printsmith Key",
        "segment": "data",
        "models": [
          "production_location"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "orderby",
        "type": "integer",
        "label": "Orderby",
        "segment": "data",
        "models": [
          "production_location"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "asset_data",
        "type": "jsonb",
        "label": "Asset Data",
        "segment": "data",
        "models": [
          "proof"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "revision_of_id",
        "type": "integer",
        "label": "Revision Of",
        "segment": "id",
        "models": [
          "proof"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "revision_count",
        "type": "integer",
        "label": "Revision Count",
        "segment": "data",
        "models": [
          "proof"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "approval_date",
        "type": "datetime",
        "label": "Approval Date",
        "segment": "data",
        "models": [
          "proof"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "due_date",
        "type": "datetime",
        "label": "Due Date",
        "segment": "data",
        "models": [
          "prospect_status_item_contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "completion_date",
        "type": "datetime",
        "label": "Completion Date",
        "segment": "data",
        "models": [
          "prospect_status_item_contact"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "position",
        "type": "integer",
        "label": "Position",
        "segment": "data",
        "models": [
          "prospect_status_item",
          "prospect_status",
          "report_row",
          "task"
        ],
        "model_count": 4,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "item_type",
        "type": "integer",
        "label": "Item Type",
        "segment": "data",
        "models": [
          "prospect_status_item",
          "version"
        ],
        "model_count": 2,
        "types": [
          "integer",
          "string"
        ],
        "type_count": 2
      },
      {
        "name": "start_after_days",
        "type": "integer",
        "label": "Start After Days",
        "segment": "data",
        "models": [
          "prospect_status_item"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "completion_time",
        "type": "integer",
        "label": "Completion Time",
        "segment": "data",
        "models": [
          "prospect_status_item"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "version_no",
        "type": "integer",
        "label": "Version No",
        "segment": "data",
        "models": [
          "prospect_status_version"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "prospect_status_version_id",
        "type": "integer",
        "label": "Prospect Status Version",
        "segment": "id",
        "models": [
          "prospect_status"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "readable_id",
        "type": "integer",
        "label": "Readable",
        "segment": "id",
        "models": [
          "read_mark"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "readable_type",
        "type": "string",
        "label": "Readable Type",
        "segment": "data",
        "models": [
          "read_mark"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "reader_id",
        "type": "integer",
        "label": "Reader",
        "segment": "id",
        "models": [
          "read_mark"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "reader_type",
        "type": "string",
        "label": "Reader Type",
        "segment": "data",
        "models": [
          "read_mark"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "timestamp",
        "type": "datetime",
        "label": "Timestamp",
        "segment": "data",
        "models": [
          "read_mark"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "option",
        "type": "text",
        "label": "Option",
        "segment": "data",
        "models": [
          "region_config"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "columns",
        "type": "integer",
        "label": "Columns",
        "segment": "data",
        "models": [
          "report_row"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "report_id",
        "type": "integer",
        "label": "Report",
        "segment": "id",
        "models": [
          "report_row"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_type",
        "type": "integer",
        "label": "Source Type",
        "segment": "data",
        "models": [
          "sales_base_tax"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sales_base_id",
        "type": "integer",
        "label": "Sales Base",
        "segment": "id",
        "models": [
          "sales_base_tax"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_sales_base_id",
        "type": "integer",
        "label": "Source Sales Base",
        "segment": "id",
        "models": [
          "sales_base_tax"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "total_tax",
        "type": "decimal",
        "label": "Total Tax",
        "segment": "data",
        "models": [
          "sales_base_tax"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "total_non_taxable",
        "type": "decimal",
        "label": "Total Non Taxable",
        "segment": "data",
        "models": [
          "sales_base_tax"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "total_taxable",
        "type": "decimal",
        "label": "Total Taxable",
        "segment": "data",
        "models": [
          "sales_base_tax"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "glaccount",
        "type": "string",
        "label": "Glaccount",
        "segment": "data",
        "models": [
          "sales_category"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "interest",
        "type": "boolean",
        "label": "Interest",
        "segment": "data",
        "models": [
          "sales_category"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "nonsale",
        "type": "boolean",
        "label": "Nonsale",
        "segment": "data",
        "models": [
          "sales_category"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "salescatid",
        "type": "integer",
        "label": "Salescatid",
        "segment": "data",
        "models": [
          "sales_category"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "latest_context_date",
        "type": "datetime",
        "label": "Latest Context Date",
        "segment": "data",
        "models": [
          "sales_rep",
          "taken_by"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "auto_mapped",
        "type": "boolean",
        "label": "Auto Mapped",
        "segment": "data",
        "models": [
          "sales_rep",
          "taken_by"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "add_in_table_list",
        "type": "boolean",
        "label": "Add In Table List",
        "segment": "data",
        "models": [
          "sales_rep"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "arcard",
        "type": "decimal",
        "label": "Arcard",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "arcash",
        "type": "decimal",
        "label": "Arcash",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "archarge",
        "type": "decimal",
        "label": "Archarge",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "archeck",
        "type": "decimal",
        "label": "Archeck",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "bankdeposit",
        "type": "decimal",
        "label": "Bankdeposit",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "closeoutdate",
        "type": "datetime",
        "label": "Closeoutdate",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "composite",
        "type": "boolean",
        "label": "Composite",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "datarepaired",
        "type": "boolean",
        "label": "Datarepaired",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "depositbalance",
        "type": "decimal",
        "label": "Depositbalance",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "draw",
        "type": "decimal",
        "label": "Draw",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "employees",
        "type": "decimal",
        "label": "Employees",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "enddate",
        "type": "datetime",
        "label": "Enddate",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "fmaccount",
        "type": "decimal",
        "label": "Fmaccount",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "forfeitdeposits",
        "type": "decimal",
        "label": "Forfeitdeposits",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "invoicetotal",
        "type": "decimal",
        "label": "Invoicetotal",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "isdeleted",
        "type": "boolean",
        "label": "Isdeleted",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "newdeposits",
        "type": "decimal",
        "label": "Newdeposits",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "nontaxreceipts",
        "type": "decimal",
        "label": "Nontaxreceipts",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "nontaxsales",
        "type": "decimal",
        "label": "Nontaxsales",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "numperiods",
        "type": "integer",
        "label": "Numperiods",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "onaccount",
        "type": "decimal",
        "label": "Onaccount",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "onaccountbalance",
        "type": "decimal",
        "label": "Onaccountbalance",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "otherhours",
        "type": "decimal",
        "label": "Otherhours",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "poscard",
        "type": "decimal",
        "label": "Poscard",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "poscash",
        "type": "decimal",
        "label": "Poscash",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "poscheck",
        "type": "decimal",
        "label": "Poscheck",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "presshours",
        "type": "decimal",
        "label": "Presshours",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "productionhours",
        "type": "decimal",
        "label": "Productionhours",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "refundchecks",
        "type": "decimal",
        "label": "Refundchecks",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "returndeposits",
        "type": "decimal",
        "label": "Returndeposits",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "shiftcloseout",
        "type": "boolean",
        "label": "Shiftcloseout",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "squarefeet",
        "type": "integer",
        "label": "Squarefeet",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "taxonreceipts",
        "type": "decimal",
        "label": "Taxonreceipts",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "taxonsales",
        "type": "decimal",
        "label": "Taxonsales",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "taxablereceipts",
        "type": "decimal",
        "label": "Taxablereceipts",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "taxablesales",
        "type": "decimal",
        "label": "Taxablesales",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totaldeletes",
        "type": "decimal",
        "label": "Totaldeletes",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totalmemos",
        "type": "decimal",
        "label": "Totalmemos",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totalnosalememos",
        "type": "decimal",
        "label": "Totalnosalememos",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totalother",
        "type": "decimal",
        "label": "Totalother",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totalreceipts",
        "type": "decimal",
        "label": "Totalreceipts",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totalsales",
        "type": "decimal",
        "label": "Totalsales",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "totalvoid",
        "type": "decimal",
        "label": "Totalvoid",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "variance",
        "type": "decimal",
        "label": "Variance",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "wiptotaldone",
        "type": "decimal",
        "label": "Wiptotaldone",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "wiptotalest",
        "type": "decimal",
        "label": "Wiptotalest",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "wiptotalinv",
        "type": "decimal",
        "label": "Wiptotalinv",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "daily",
        "type": "boolean",
        "label": "Daily",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "monthly",
        "type": "boolean",
        "label": "Monthly",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "applydeposits",
        "type": "decimal",
        "label": "Applydeposits",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "accounting_day",
        "type": "integer",
        "label": "Accounting Day",
        "segment": "data",
        "models": [
          "sales_summary",
          "statistic"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "accurate",
        "type": "boolean",
        "label": "Accurate",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "difference",
        "type": "decimal",
        "label": "Difference",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "avg_sale",
        "type": "decimal",
        "label": "Avg Sale",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "attempts",
        "type": "integer",
        "label": "Attempts",
        "segment": "data",
        "models": [
          "sales_summary"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_account_history_item_id",
        "type": "integer",
        "label": "Source Account History Item",
        "segment": "id",
        "models": [
          "sales_summary_pickup"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "account_history_item_id",
        "type": "integer",
        "label": "Account History Item",
        "segment": "id",
        "models": [
          "sales_summary_pickup"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "source_sales_summary_id",
        "type": "integer",
        "label": "Source Sales Summary",
        "segment": "id",
        "models": [
          "sales_summary_pickup"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "boolean",
        "type": "boolean",
        "label": "Boolean",
        "segment": "data",
        "models": [
          "sales_summary_pickup"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "integer",
        "type": "integer",
        "label": "Integer",
        "segment": "data",
        "models": [
          "sales_summary_pickup"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "total_sales",
        "type": "integer",
        "label": "Total Sales",
        "segment": "data",
        "models": [
          "sales_tag_by_month",
          "statistic"
        ],
        "model_count": 2,
        "types": [
          "integer",
          "decimal"
        ],
        "type_count": 2
      },
      {
        "name": "total_invoice_count",
        "type": "integer",
        "label": "Total Invoice Count",
        "segment": "data",
        "models": [
          "sales_tag_by_month"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "total_companies",
        "type": "integer",
        "label": "Total Companies",
        "segment": "data",
        "models": [
          "sales_tag_by_month"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "tags_data",
        "type": "jsonb",
        "label": "Tags Data",
        "segment": "data",
        "models": [
          "sales_tag_by_month"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "update_required",
        "type": "boolean",
        "label": "Update Required",
        "segment": "data",
        "models": [
          "sales_tag_by_month"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "target_type",
        "type": "integer",
        "label": "Target Type",
        "segment": "data",
        "models": [
          "salestarget"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "ytd",
        "type": "jsonb",
        "label": "Ytd",
        "segment": "data",
        "models": [
          "saved_report"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "report_type",
        "type": "string",
        "label": "Report Type",
        "segment": "data",
        "models": [
          "saved_report"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "shared_id",
        "type": "integer",
        "label": "Shared",
        "segment": "id",
        "models": [
          "shared_user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "shipment_type",
        "type": "string",
        "label": "Shipment Type",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_tracking",
        "type": "string",
        "label": "Mbe Tracking",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "courier_tracking",
        "type": "string",
        "label": "Courier Tracking",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "courier_weight",
        "type": "decimal",
        "label": "Courier Weight",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "shipment_date",
        "type": "datetime",
        "label": "Shipment Date",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "source_account_platform_id",
        "type": "string",
        "label": "Source Account Platform",
        "segment": "id_variant",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "source_invoice_platform_id",
        "type": "string",
        "label": "Source Invoice Platform",
        "segment": "id_variant",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "association_checks",
        "type": "integer",
        "label": "Association Checks",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_service_id",
        "type": "integer",
        "label": "Mbe Service",
        "segment": "id",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "packge_type_id",
        "type": "integer",
        "label": "Packge Type",
        "segment": "id",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "goods_type_id",
        "type": "integer",
        "label": "Goods Type",
        "segment": "id",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "courier_id",
        "type": "integer",
        "label": "Courier",
        "segment": "id",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "courier_service_id",
        "type": "integer",
        "label": "Courier Service",
        "segment": "id",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "delivered_date",
        "type": "datetime",
        "label": "Delivered Date",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "not_to_invoice",
        "type": "boolean",
        "label": "Not To Invoice",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "price_freight",
        "type": "decimal",
        "label": "Price Freight",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "price_freight_vat",
        "type": "decimal",
        "label": "Price Freight Vat",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "freight_cost",
        "type": "decimal",
        "label": "Freight Cost",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "total_freight_cost",
        "type": "decimal",
        "label": "Total Freight Cost",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_cost",
        "type": "decimal",
        "label": "Mbe Cost",
        "segment": "data",
        "models": [
          "shipment"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "slug",
        "type": "string",
        "label": "Slug",
        "segment": "data",
        "models": [
          "short_url"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "clicked",
        "type": "integer",
        "label": "Clicked",
        "segment": "data",
        "models": [
          "short_url"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sms_template_id",
        "type": "integer",
        "label": "Sms Template",
        "segment": "id",
        "models": [
          "sms_template_category"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "rank",
        "type": "integer",
        "label": "Rank",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "average",
        "type": "decimal",
        "label": "Average",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "statistic_for",
        "type": "string",
        "label": "Statistic For",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_year",
        "type": "integer",
        "label": "Calendar Year",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_month",
        "type": "integer",
        "label": "Calendar Month",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "calendar_day",
        "type": "integer",
        "label": "Calendar Day",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_sales",
        "type": "decimal",
        "label": "Invoice Sales",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "cash_sales",
        "type": "decimal",
        "label": "Cash Sales",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "adjustments",
        "type": "decimal",
        "label": "Adjustments",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "department_cash_sales",
        "type": "decimal",
        "label": "Department Cash Sales",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "finance_charges",
        "type": "decimal",
        "label": "Finance Charges",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "order_intake",
        "type": "decimal",
        "label": "Order Intake",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "shipments",
        "type": "decimal",
        "label": "Shipments",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "invoiced_sales",
        "type": "decimal",
        "label": "Invoiced Sales",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "deferred_sales",
        "type": "decimal",
        "label": "Deferred Sales",
        "segment": "data",
        "models": [
          "statistic"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "ignore",
        "type": "boolean",
        "label": "Ignore",
        "segment": "data",
        "models": [
          "suppressed_address"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "word_matches",
        "type": "string",
        "label": "Word Matches",
        "segment": "data",
        "models": [
          "tag_category"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "up_to_date",
        "type": "boolean",
        "label": "Up To Date",
        "segment": "data",
        "models": [
          "tag_category"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "performing_cleanup",
        "type": "boolean",
        "label": "Performing Cleanup",
        "segment": "data",
        "models": [
          "tag_category"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "system_match",
        "type": "string",
        "label": "System Match",
        "segment": "data",
        "models": [
          "tag_category"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "tag_category_id",
        "type": "integer",
        "label": "Tag Category",
        "segment": "id",
        "models": [
          "tag_category_context",
          "tag"
        ],
        "model_count": 2,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_scanned_id",
        "type": "integer",
        "label": "Last Scanned",
        "segment": "id",
        "models": [
          "tag_category_context"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_scanned_offset",
        "type": "integer",
        "label": "Last Scanned Offset",
        "segment": "data",
        "models": [
          "tag_category_context"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_scanned",
        "type": "datetime",
        "label": "Last Scanned",
        "segment": "data",
        "models": [
          "tag_category_context"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "scan_progress",
        "type": "jsonb",
        "label": "Scan Progress",
        "segment": "data",
        "models": [
          "tag_category_context"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "taggable_id",
        "type": "integer",
        "label": "Taggable",
        "segment": "id",
        "models": [
          "tag"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "taggable_type",
        "type": "string",
        "label": "Taggable Type",
        "segment": "data",
        "models": [
          "tag"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "manual",
        "type": "boolean",
        "label": "Manual",
        "segment": "data",
        "models": [
          "tag"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "bubbled",
        "type": "boolean",
        "label": "Bubbled",
        "segment": "data",
        "models": [
          "tag"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "repeat_type",
        "type": "string",
        "label": "Repeat Type",
        "segment": "data",
        "models": [
          "task_repeat"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mode",
        "type": "string",
        "label": "Mode",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "taskable_id",
        "type": "integer",
        "label": "Taskable",
        "segment": "id",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "taskable_type",
        "type": "string",
        "label": "Taskable Type",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "assigned_user_id",
        "type": "integer",
        "label": "Assigned User",
        "segment": "id",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "add_to_calendar",
        "type": "boolean",
        "label": "Add To Calendar",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "assigned_user_calendar_entry_id",
        "type": "string",
        "label": "Assigned User Calendar Entry",
        "segment": "id_variant",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "final_comment",
        "type": "text",
        "label": "Final Comment",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "portal_task",
        "type": "boolean",
        "label": "Portal Task",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "notify_due",
        "type": "boolean",
        "label": "Notify Due",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "notify_due_email_sent",
        "type": "boolean",
        "label": "Notify Due Email Sent",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "notify_date",
        "type": "datetime",
        "label": "Notify Date",
        "segment": "data",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "task_repeat_id",
        "type": "integer",
        "label": "Task Repeat",
        "segment": "id",
        "models": [
          "task"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_ip",
        "type": "string",
        "label": "Printsmith Ip",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_username",
        "type": "string",
        "label": "Printsmith Username",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_password",
        "type": "string",
        "label": "Printsmith Password",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_database",
        "type": "string",
        "label": "Printsmith Database",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "inital_import_complete",
        "type": "boolean",
        "label": "Inital Import Complete",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "allow_access",
        "type": "boolean",
        "label": "Allow Access",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "disable_import",
        "type": "boolean",
        "label": "Disable Import",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "time_zone",
        "type": "string",
        "label": "Time Zone",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "connection_success_counter",
        "type": "integer",
        "label": "Connection Success Counter",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "connection_failure_counter",
        "type": "integer",
        "label": "Connection Failure Counter",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_connection_failure_at",
        "type": "datetime",
        "label": "Last Connection Failure At",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "connection_status",
        "type": "boolean",
        "label": "Connection Status",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_start_day",
        "type": "integer",
        "label": "Financial Year Start Day",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_start_month",
        "type": "integer",
        "label": "Financial Year Start Month",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_end_day",
        "type": "integer",
        "label": "Financial Year End Day",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "financial_year_end_month",
        "type": "integer",
        "label": "Financial Year End Month",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_name",
        "type": "string",
        "label": "Estimate Name",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok",
        "type": "boolean",
        "label": "Ngrok",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_port",
        "type": "integer",
        "label": "Printsmith Port",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "report_url",
        "type": "string",
        "label": "Report Url",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_name",
        "type": "string",
        "label": "Invoice Name",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_authtoken",
        "type": "string",
        "label": "Ngrok Authtoken",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_remote_addr",
        "type": "string",
        "label": "Ngrok Remote Addr",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_uuid",
        "type": "string",
        "label": "Ngrok Uuid",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "s3_region",
        "type": "text",
        "label": "S3 Region",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "s3_bucket",
        "type": "text",
        "label": "S3 Bucket",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "s3_access_key",
        "type": "text",
        "label": "S3 Access Key",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "s3_client_secret",
        "type": "text",
        "label": "S3 Client Secret",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_views",
        "type": "integer",
        "label": "Estimate Views",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "wanted_by_adjustments",
        "type": "integer",
        "label": "Wanted By Adjustments",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "needs_backup",
        "type": "boolean",
        "label": "Needs Backup",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "multi_location",
        "type": "boolean",
        "label": "Multi Location",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "taken_by_for_locations",
        "type": "boolean",
        "label": "Taken By For Locations",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "sales_rep_for_locations",
        "type": "boolean",
        "label": "Sales Rep For Locations",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "training",
        "type": "boolean",
        "label": "Training",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "beta_tester",
        "type": "boolean",
        "label": "Beta Tester",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_version",
        "type": "string",
        "label": "Printsmith Version",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "pgdump_path",
        "type": "text",
        "label": "Pgdump Path",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "backup_path",
        "type": "text",
        "label": "Backup Path",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "local_path",
        "type": "text",
        "label": "Local Path",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "last_accounting_month",
        "type": "integer",
        "label": "Last Accounting Month",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "last_accounting_year",
        "type": "integer",
        "label": "Last Accounting Year",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_unsubscribe_source_id",
        "type": "integer",
        "label": "Marketing Unsubscribe Source",
        "segment": "id",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "default_email_to_test_send",
        "type": "boolean",
        "label": "Default Email To Test Send",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "display_month_first",
        "type": "boolean",
        "label": "Display Month First",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_email_template",
        "type": "integer",
        "label": "Estimate Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "sale_email_template",
        "type": "integer",
        "label": "Sale Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "order_email_template",
        "type": "integer",
        "label": "Order Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "contact_email_template",
        "type": "integer",
        "label": "Contact Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_needs_restart",
        "type": "boolean",
        "label": "Ngrok Needs Restart",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "most_recent_monthly_closeout_date",
        "type": "date",
        "label": "Most Recent Monthly Closeout Date",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "date"
        ],
        "type_count": 1
      },
      {
        "name": "company_email_template",
        "type": "integer",
        "label": "Company Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "hide_from_ladders",
        "type": "boolean",
        "label": "Hide From Ladders",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_cogs",
        "type": "boolean",
        "label": "Show Cogs",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_min_resend_days",
        "type": "integer",
        "label": "Campaign Min Resend Days",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "cog_green_threshold",
        "type": "decimal",
        "label": "Cog Green Threshold",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "cog_orange_threshold",
        "type": "decimal",
        "label": "Cog Orange Threshold",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_version",
        "type": "string",
        "label": "Ngrok Version",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_tcp_online",
        "type": "boolean",
        "label": "Ngrok Tcp Online",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_http_online",
        "type": "boolean",
        "label": "Ngrok Http Online",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "week_start",
        "type": "boolean",
        "label": "Week Start",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "allow_production_features_on_staging",
        "type": "boolean",
        "label": "Allow Production Features On Staging",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "campaign_monitor_client_id",
        "type": "text",
        "label": "Campaign Monitor Client",
        "segment": "id_variant",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "wanted_days",
        "type": "integer",
        "label": "Wanted Days",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "tenant_picker_name",
        "type": "string",
        "label": "Tenant Picker Name",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_crt",
        "type": "text",
        "label": "Ngrok Crt",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "ngrok_key",
        "type": "text",
        "label": "Ngrok Key",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "demo",
        "type": "boolean",
        "label": "Demo",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_api_token",
        "type": "string",
        "label": "Printsmith Api Token",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "exclude_non_sales",
        "type": "boolean",
        "label": "Exclude Non Sales",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_name_list",
        "type": "string",
        "label": "Estimate Name List",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_name_list",
        "type": "string",
        "label": "Invoice Name List",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_name_default",
        "type": "string",
        "label": "Estimate Name Default",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_name_default",
        "type": "string",
        "label": "Invoice Name Default",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_api_version",
        "type": "string",
        "label": "Printsmith Api Version",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "estimate_name_enforce",
        "type": "boolean",
        "label": "Estimate Name Enforce",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "invoice_name_enforce",
        "type": "boolean",
        "label": "Invoice Name Enforce",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "test_email",
        "type": "string",
        "label": "Test Email",
        "segment": "data",
        "models": [
          "tenant",
          "user"
        ],
        "model_count": 2,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "enforce_old_printsmith_api",
        "type": "boolean",
        "label": "Enforce Old Printsmith Api",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_company_tags",
        "type": "boolean",
        "label": "Show Company Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_contacts_tags",
        "type": "boolean",
        "label": "Show Contacts Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_estimates_tags",
        "type": "boolean",
        "label": "Show Estimates Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_orders_tags",
        "type": "boolean",
        "label": "Show Orders Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_sales_tags",
        "type": "boolean",
        "label": "Show Sales Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "last_sales_report_start",
        "type": "datetime",
        "label": "Last Sales Report Start",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_sales_report_finish",
        "type": "datetime",
        "label": "Last Sales Report Finish",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "monitor_counters",
        "type": "jsonb",
        "label": "Monitor Counters",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "printsmith_local_port",
        "type": "string",
        "label": "Printsmith Local Port",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "account_history_trigger",
        "type": "boolean",
        "label": "Account History Trigger",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "owner_open_date",
        "type": "datetime",
        "label": "Owner Open Date",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "use_complex_cost",
        "type": "boolean",
        "label": "Use Complex Cost",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "use_smtp",
        "type": "boolean",
        "label": "Use Smtp",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "lead_sources",
        "type": "string",
        "label": "Lead Sources",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "pay_url",
        "type": "string",
        "label": "Pay Url",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "auto_self_bcc",
        "type": "boolean",
        "label": "Auto Self Bcc",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "reorder_days",
        "type": "integer",
        "label": "Reorder Days",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "use_sms",
        "type": "boolean",
        "label": "Use Sms",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "sms_send_number",
        "type": "string",
        "label": "Sms Send Number",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "show_sales",
        "type": "boolean",
        "label": "Show Sales",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "budget_lock",
        "type": "boolean",
        "label": "Budget Lock",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "lead_to_psv",
        "type": "boolean",
        "label": "Lead To Psv",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "s3_key_created",
        "type": "datetime",
        "label": "S3 Key Created",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "backup_api_key",
        "type": "string",
        "label": "Backup Api Key",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "show_inquiries",
        "type": "boolean",
        "label": "Show Inquiries",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "default_inquiry_user_id",
        "type": "integer",
        "label": "Default Inquiry User",
        "segment": "id",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "allow_email_validation",
        "type": "boolean",
        "label": "Allow Email Validation",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_email_template",
        "type": "integer",
        "label": "Inquiry Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_auto_assign_estimate",
        "type": "boolean",
        "label": "Inquiry Auto Assign Estimate",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "portal_proof_approved_production_location_id",
        "type": "integer",
        "label": "Portal Proof Approved Production Location",
        "segment": "id",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "portal_proof_amended_production_location_id",
        "type": "integer",
        "label": "Portal Proof Amended Production Location",
        "segment": "id",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_refresh_token",
        "type": "string",
        "label": "Mbe Refresh Token",
        "segment": "data",
        "models": [
          "tenant",
          "user"
        ],
        "model_count": 2,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "mbe_refresh_token_expire_at",
        "type": "datetime",
        "label": "Mbe Refresh Token Expire At",
        "segment": "data",
        "models": [
          "tenant",
          "user"
        ],
        "model_count": 2,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_access_token",
        "type": "string",
        "label": "Mbe Access Token",
        "segment": "data",
        "models": [
          "tenant",
          "user"
        ],
        "model_count": 2,
        "types": [
          "string",
          "text"
        ],
        "type_count": 2
      },
      {
        "name": "mbe_access_token_expire_at",
        "type": "datetime",
        "label": "Mbe Access Token Expire At",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_tenant_id",
        "type": "string",
        "label": "Mbe Tenant",
        "segment": "id_variant",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_multistore_id",
        "type": "string",
        "label": "Mbe Multistore",
        "segment": "id_variant",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_store_id",
        "type": "string",
        "label": "Mbe Store",
        "segment": "id_variant",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "address_3",
        "type": "string",
        "label": "Address 3",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_username",
        "type": "string",
        "label": "Mbe Username",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_password",
        "type": "string",
        "label": "Mbe Password",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "show_lead_types",
        "type": "boolean",
        "label": "Show Lead Types",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "use_new_lead",
        "type": "boolean",
        "label": "Use New Lead",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "default_lead_type_id",
        "type": "integer",
        "label": "Default Lead Type",
        "segment": "id",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_api_base_url",
        "type": "string",
        "label": "Mbe Api Base Url",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "mbe_api_basic_auth_token",
        "type": "string",
        "label": "Mbe Api Basic Auth Token",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "shipment_email_template",
        "type": "integer",
        "label": "Shipment Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "inquiry_notifications",
        "type": "jsonb",
        "label": "Inquiry Notifications",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "jsonb"
        ],
        "type_count": 1
      },
      {
        "name": "show_shipments_tags",
        "type": "boolean",
        "label": "Show Shipments Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "show_inquiries_tags",
        "type": "boolean",
        "label": "Show Inquiries Tags",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "leads_notify",
        "type": "boolean",
        "label": "Leads Notify",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "business_plan",
        "type": "boolean",
        "label": "Business Plan",
        "segment": "data",
        "models": [
          "tenant",
          "user"
        ],
        "model_count": 2,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "follow_up_days",
        "type": "integer",
        "label": "Follow Up Days",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "follow_up_sync",
        "type": "boolean",
        "label": "Follow Up Sync",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "new_proof_email_template",
        "type": "integer",
        "label": "New Proof Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "revision_proof_email_template",
        "type": "integer",
        "label": "Revision Proof Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "proof_reminder_email_template",
        "type": "integer",
        "label": "Proof Reminder Email Template",
        "segment": "data",
        "models": [
          "tenant"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "access_token",
        "type": "string",
        "label": "Access Token",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "refresh_token",
        "type": "string",
        "label": "Refresh Token",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "sync_token",
        "type": "string",
        "label": "Sync Token",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "gmail_sync_token",
        "type": "string",
        "label": "Gmail Sync Token",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "gmail_history_id",
        "type": "string",
        "label": "Gmail History",
        "segment": "id_variant",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "encrypted_access_token",
        "type": "string",
        "label": "Encrypted Access Token",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "encrypted_access_token_iv",
        "type": "string",
        "label": "Encrypted Access Token Iv",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "encrypted_refresh_token",
        "type": "string",
        "label": "Encrypted Refresh Token",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "encrypted_refresh_token_iv",
        "type": "string",
        "label": "Encrypted Refresh Token Iv",
        "segment": "data",
        "models": [
          "token"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "user_agent",
        "type": "text",
        "label": "User Agent",
        "segment": "data",
        "models": [
          "tracker_hit"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "referer",
        "type": "text",
        "label": "Referer",
        "segment": "data",
        "models": [
          "tracker_hit"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "bot",
        "type": "boolean",
        "label": "Bot",
        "segment": "data",
        "models": [
          "tracker_hit"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "browser_modern",
        "type": "boolean",
        "label": "Browser Modern",
        "segment": "data",
        "models": [
          "tracker_hit"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "browser",
        "type": "string",
        "label": "Browser",
        "segment": "data",
        "models": [
          "tracker_hit"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "device",
        "type": "string",
        "label": "Device",
        "segment": "data",
        "models": [
          "tracker_hit"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "unsub_type",
        "type": "string",
        "label": "Unsub Type",
        "segment": "data",
        "models": [
          "unsubscribe"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "fixed_by_user_id",
        "type": "integer",
        "label": "Fixed By User",
        "segment": "id",
        "models": [
          "unsubscribe"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "manual_email",
        "type": "string",
        "label": "Manual Email",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "encrypted_password",
        "type": "string",
        "label": "Encrypted Password",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "reset_password_token",
        "type": "string",
        "label": "Reset Password Token",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "reset_password_sent_at",
        "type": "datetime",
        "label": "Reset Password Sent At",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "remember_created_at",
        "type": "datetime",
        "label": "Remember Created At",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "sign_in_count",
        "type": "integer",
        "label": "Sign In Count",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "current_sign_in_at",
        "type": "datetime",
        "label": "Current Sign In At",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "last_sign_in_at",
        "type": "datetime",
        "label": "Last Sign In At",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "current_sign_in_ip",
        "type": "string",
        "label": "Current Sign In Ip",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_sign_in_ip",
        "type": "string",
        "label": "Last Sign In Ip",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "username",
        "type": "string",
        "label": "Username",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "roles_mask",
        "type": "integer",
        "label": "Roles Mask",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "gmail_username",
        "type": "string",
        "label": "Gmail Username",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "gmail_password",
        "type": "string",
        "label": "Gmail Password",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "email_signature",
        "type": "text",
        "label": "Email Signature",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "settings",
        "type": "hstore",
        "label": "Settings",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "hstore"
        ],
        "type_count": 1
      },
      {
        "name": "role",
        "type": "string",
        "label": "Role",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "task_calendar_color",
        "type": "integer",
        "label": "Task Calendar Color",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "display_name",
        "type": "string",
        "label": "Display Name",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "ip_whitelist",
        "type": "string",
        "label": "Ip Whitelist",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "level",
        "type": "integer",
        "label": "Level",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "current_date_for_ui",
        "type": "date",
        "label": "Current Date For Ui",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "date"
        ],
        "type_count": 1
      },
      {
        "name": "marketing_calendar_events",
        "type": "boolean",
        "label": "Marketing Calendar Events",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "eula_accepted_at",
        "type": "datetime",
        "label": "Eula Accepted At",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "default_alias",
        "type": "string",
        "label": "Default Alias",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "lock_sales_rep",
        "type": "boolean",
        "label": "Lock Sales Rep",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "add_task_to_my_calendar",
        "type": "boolean",
        "label": "Add Task To My Calendar",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "smtp_server",
        "type": "string",
        "label": "Smtp Server",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "smtp_port",
        "type": "integer",
        "label": "Smtp Port",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "smtp_username",
        "type": "string",
        "label": "Smtp Username",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "smtp_password",
        "type": "string",
        "label": "Smtp Password",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "hide_reports",
        "type": "boolean",
        "label": "Hide Reports",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "email_notifications",
        "type": "string",
        "label": "Email Notifications",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "sms_test_number",
        "type": "string",
        "label": "Sms Test Number",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "last_token_refresh_time",
        "type": "datetime",
        "label": "Last Token Refresh Time",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "failed_attempts",
        "type": "integer",
        "label": "Failed Attempts",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "unlock_token",
        "type": "string",
        "label": "Unlock Token",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "locked_at",
        "type": "datetime",
        "label": "Locked At",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "datetime"
        ],
        "type_count": 1
      },
      {
        "name": "sso_onboarding",
        "type": "boolean",
        "label": "Sso Onboarding",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "hide_leads",
        "type": "boolean",
        "label": "Hide Leads",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "home_today",
        "type": "boolean",
        "label": "Home Today",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "lock_set_default",
        "type": "boolean",
        "label": "Lock Set Default",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "bs_job_title",
        "type": "string",
        "label": "Bs Job Title",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "bs_years_exp",
        "type": "date",
        "label": "Bs Years Exp",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "date"
        ],
        "type_count": 1
      },
      {
        "name": "bs_complete_sell",
        "type": "boolean",
        "label": "Bs Complete Sell",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "boolean"
        ],
        "type_count": 1
      },
      {
        "name": "bs_primary_sale",
        "type": "string",
        "label": "Bs Primary Sale",
        "segment": "data",
        "models": [
          "user"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "item_id",
        "type": "integer",
        "label": "Item",
        "segment": "id",
        "models": [
          "version"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "event",
        "type": "string",
        "label": "Event",
        "segment": "data",
        "models": [
          "version"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "whodunnit",
        "type": "string",
        "label": "Whodunnit",
        "segment": "data",
        "models": [
          "version"
        ],
        "model_count": 1,
        "types": [
          "string"
        ],
        "type_count": 1
      },
      {
        "name": "object",
        "type": "text",
        "label": "Object",
        "segment": "data",
        "models": [
          "version"
        ],
        "model_count": 1,
        "types": [
          "text"
        ],
        "type_count": 1
      },
      {
        "name": "wip_value",
        "type": "decimal",
        "label": "Wip Value",
        "segment": "data",
        "models": [
          "wip"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "wip_count",
        "type": "integer",
        "label": "Wip Count",
        "segment": "data",
        "models": [
          "wip"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "completed_wip_value",
        "type": "decimal",
        "label": "Completed Wip Value",
        "segment": "data",
        "models": [
          "wip"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "completed_wip_count",
        "type": "integer",
        "label": "Completed Wip Count",
        "segment": "data",
        "models": [
          "wip"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      },
      {
        "name": "total_wip_value",
        "type": "decimal",
        "label": "Total Wip Value",
        "segment": "data",
        "models": [
          "wip"
        ],
        "model_count": 1,
        "types": [
          "decimal"
        ],
        "type_count": 1
      },
      {
        "name": "total_wip_count",
        "type": "integer",
        "label": "Total Wip Count",
        "segment": "data",
        "models": [
          "wip"
        ],
        "model_count": 1,
        "types": [
          "integer"
        ],
        "type_count": 1
      }
    ]
  },
  "database": {
    "tables": [
      {
        "name": "account_history_data",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "source_account_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "balance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "currentagingbucket",
            "type": "integer"
          },
          {
            "name": "custpo",
            "type": "string"
          },
          {
            "name": "finalpaychecknumber",
            "type": "string"
          },
          {
            "name": "finalpaypaymethod",
            "type": "string"
          },
          {
            "name": "finalpayrefnumber",
            "type": "string"
          },
          {
            "name": "finalpaytotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "finalpaymentdate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "financecharge",
            "type": "integer"
          },
          {
            "name": "source_invoice_id",
            "type": "integer"
          },
          {
            "name": "invoice_id",
            "type": "integer"
          },
          {
            "name": "invoicenumber",
            "type": "string"
          },
          {
            "name": "source_journal_id",
            "type": "integer"
          },
          {
            "name": "adjustment_id",
            "type": "integer"
          },
          {
            "name": "memoforcedtaxadded",
            "type": "boolean",
            "default": false
          },
          {
            "name": "memoforcedtaxremoval",
            "type": "boolean",
            "default": false
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "ordernodisplay",
            "type": "string"
          },
          {
            "name": "partialpayamount",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "partialpaychecknumber",
            "type": "string"
          },
          {
            "name": "partialpaycnt",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "partialpaypaymethod",
            "type": "string"
          },
          {
            "name": "partialpaypaydate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "partialpayrefnumber",
            "type": "string"
          },
          {
            "name": "partialpaytotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "paymentduedate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "posteddate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "recordtype",
            "type": "string"
          },
          {
            "name": "refundtotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "storenum",
            "type": "string"
          },
          {
            "name": "storenumber",
            "type": "string"
          },
          {
            "name": "subtotalposted",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "usersalesname",
            "type": "string"
          },
          {
            "name": "webreferenceid",
            "type": "integer"
          },
          {
            "name": "finalpaycct_id",
            "type": "integer"
          },
          {
            "name": "finalpaymentcreditcard_id",
            "type": "integer"
          },
          {
            "name": "partialpaycct_id",
            "type": "integer"
          },
          {
            "name": "partialpaymentcreditcard_id",
            "type": "integer"
          },
          {
            "name": "totaltax_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "ready",
            "type": "boolean",
            "default": false
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "assocation_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "account_history_data_tenant_id_source_invoice_id_idx",
            "fields": [
              "tenant_id",
              "source_invoice_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_account_history_data_on_printsmith_id",
            "fields": [
              "printsmith_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_account_history_data_on_source_account_id",
            "fields": [
              "source_account_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_account_history_data_on_source_journal_id",
            "fields": [
              "source_journal_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_account_history_data_source_invoice",
            "fields": [
              "tenant_id",
              "source_invoice_id",
              "printsmith_id",
              "recordtype"
            ],
            "where": "((recordtype)::text = '1'::text)",
            "using": "btree"
          },
          {
            "name": "index_account_history_data_tenant_source_account",
            "fields": [
              "source_account_id",
              "tenant_id",
              "printsmith_id",
              "deleted"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "action_logs",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "location_id",
            "type": "integer"
          },
          {
            "name": "action",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_action_logs_on_action",
            "fields": [
              "action"
            ],
            "using": "btree"
          },
          {
            "name": "index_action_logs_on_location_id",
            "fields": [
              "location_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_action_logs_on_sales_rep_user_id",
            "fields": [
              "sales_rep_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_action_logs_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_action_logs_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "activities",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "element_id",
            "type": "integer"
          },
          {
            "name": "element_type",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "estimate_id",
            "type": "integer"
          },
          {
            "name": "invoice_id",
            "type": "integer"
          },
          {
            "name": "phone_call_id",
            "type": "integer"
          },
          {
            "name": "task_id",
            "type": "integer"
          },
          {
            "name": "email_id",
            "type": "integer"
          },
          {
            "name": "comment_id",
            "type": "integer"
          },
          {
            "name": "order_id",
            "type": "integer"
          },
          {
            "name": "sale_id",
            "type": "integer"
          },
          {
            "name": "tracker_id",
            "type": "integer"
          },
          {
            "name": "email_message_id",
            "type": "integer"
          },
          {
            "name": "note_id",
            "type": "integer"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "activity_for",
            "type": "string"
          },
          {
            "name": "hide",
            "type": "boolean",
            "default": false
          },
          {
            "name": "campaign_id",
            "type": "integer"
          },
          {
            "name": "campaign_message_id",
            "type": "integer"
          },
          {
            "name": "parent_contact_id",
            "type": "integer"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "portal_comment_id",
            "type": "integer"
          },
          {
            "name": "meeting_id",
            "type": "integer"
          },
          {
            "name": "inquiry_id",
            "type": "integer"
          },
          {
            "name": "shipment_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "activities_tenant_id_source_created_at_idx",
            "fields": [
              "tenant_id",
              "source_created_at"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "((hide = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "activity_test",
            "fields": [
              "tenant_id",
              "source_created_at"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "((estimate_id IS NOT NULL) AND (invoice_id IS NULL))",
            "using": "btree"
          },
          {
            "name": "activity_test2",
            "fields": [
              "tenant_id",
              "source_created_at"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "(invoice_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_activities_campaign_opened",
            "fields": [
              "tenant_id",
              "activity_for",
              "campaign_id",
              "campaign_message_id",
              "tracker_id",
              "source_created_at",
              "hide",
              "deleted"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "(((activity_for)::text = 'campaign_opened'::text) AND (NOT hide) AND (NOT deleted))",
            "using": "btree"
          },
          {
            "name": "index_activities_campaign_opened_aggregated",
            "fields": [
              "tenant_id",
              "activity_for",
              "campaign_id",
              "source_created_at",
              "hide",
              "deleted"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "(((activity_for)::text = 'campaign_opened_aggregated'::text) AND (NOT hide) AND (NOT deleted))",
            "using": "btree"
          },
          {
            "name": "index_activities_for_email_company",
            "fields": [
              "activity_for",
              "email_id",
              "tenant_id",
              "company_id",
              "source_created_at",
              "hide"
            ],
            "where": "(((activity_for)::text = 'email'::text) AND (email_id IS NOT NULL) AND (company_id IS NOT NULL) AND (hide = false))",
            "using": "btree"
          },
          {
            "name": "index_activities_for_email_contact",
            "fields": [
              "activity_for",
              "email_id",
              "tenant_id",
              "contact_id",
              "source_created_at",
              "hide"
            ],
            "where": "(((activity_for)::text = 'email'::text) AND (email_id IS NOT NULL) AND (contact_id IS NOT NULL) AND (hide = false))",
            "using": "btree"
          },
          {
            "name": "index_activities_new",
            "fields": [
              "tenant_id",
              "source_created_at",
              "created_at",
              "deleted",
              "hide",
              "activity_for"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_activity_for",
            "fields": [
              "activity_for"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_activity_for_email",
            "fields": [
              "activity_for"
            ],
            "where": "((activity_for)::text = 'email'::text)",
            "using": "btree"
          },
          {
            "name": "index_activities_on_activity_for_phone_call",
            "fields": [
              "activity_for"
            ],
            "where": "((activity_for)::text = 'phone_call'::text)",
            "using": "btree"
          },
          {
            "name": "index_activities_on_company_id",
            "fields": [
              "company_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_deleted",
            "fields": [
              "deleted"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_email_id",
            "fields": [
              "email_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_estimate_id",
            "fields": [
              "estimate_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_invoice_id",
            "fields": [
              "invoice_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_phone_call_id",
            "fields": [
              "phone_call_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_shipment_id",
            "fields": [
              "tenant_id",
              "shipment_id",
              "hide",
              "deleted"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_source_created_at",
            "fields": [
              "source_created_at"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "using": "btree"
          },
          {
            "name": "index_activities_on_task_id",
            "fields": [
              "task_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_on_tenant_source_created_at_estimate",
            "fields": [
              "tenant_id",
              "source_created_at"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "((estimate_id IS NOT NULL) AND (invoice_id IS NULL))",
            "using": "btree"
          },
          {
            "name": "index_activities_on_tenant_source_created_at_invoice",
            "fields": [
              "tenant_id",
              "source_created_at"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "(invoice_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_activities_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_activities_tenant_company_contact_estimate",
            "fields": [
              "tenant_id",
              "company_id",
              "contact_id",
              "estimate_id",
              "id"
            ],
            "where": "(estimate_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_activities_tenant_company_contact_invoice",
            "fields": [
              "tenant_id",
              "company_id",
              "contact_id",
              "invoice_id",
              "id"
            ],
            "where": "(invoice_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_activities_tenant_estiamte_invoice_source_created",
            "fields": [
              "tenant_id",
              "source_created_at",
              "estimate_id",
              "invoice_id",
              "company_id",
              "contact_id",
              "id"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "((estimate_id IS NOT NULL) AND (invoice_id IS NULL))",
            "using": "btree"
          },
          {
            "name": "index_activities_tenant_invoice_source_created",
            "fields": [
              "tenant_id",
              "source_created_at",
              "invoice_id",
              "company_id",
              "contact_id",
              "id"
            ],
            "order": {
              "source_created_at": "desc"
            },
            "where": "(invoice_id IS NOT NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "addresses",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "city",
            "type": "string"
          },
          {
            "name": "country",
            "type": "string"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "manualchange",
            "type": "boolean"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "state",
            "type": "string"
          },
          {
            "name": "street1",
            "type": "string"
          },
          {
            "name": "street2",
            "type": "string"
          },
          {
            "name": "street3",
            "type": "string"
          },
          {
            "name": "webid",
            "type": "string"
          },
          {
            "name": "zip",
            "type": "string"
          },
          {
            "name": "zone",
            "type": "string"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "latitude",
            "type": "float"
          },
          {
            "name": "longitude",
            "type": "float"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_addresses_on_company_id",
            "fields": [
              "company_id"
            ],
            "using": "btree"
          },
          {
            "name": "printsmith_id",
            "fields": [
              "printsmith_id",
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_addresses",
            "fields": [
              "platform_id",
              "printsmith_id",
              "external_id",
              "id"
            ],
            "where": "(platform_id IS NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "adjustments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "total",
            "type": "decimal"
          },
          {
            "name": "invoice_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "ready",
            "type": "boolean",
            "default": false
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "assocation_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "source_account_id",
            "type": "integer"
          },
          {
            "name": "source_invoice_id",
            "type": "integer"
          },
          {
            "name": "affect_sales",
            "type": "boolean",
            "default": false
          },
          {
            "name": "posted_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "final_payment_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "voided",
            "type": "boolean",
            "default": false
          },
          {
            "name": "accounting_month",
            "type": "integer"
          },
          {
            "name": "accounting_year",
            "type": "integer"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "comment",
            "type": "string"
          },
          {
            "name": "source_sales_rep",
            "type": "string"
          },
          {
            "name": "reference_number",
            "type": "string"
          },
          {
            "name": "last_refreshed_at",
            "type": "datetime"
          },
          {
            "name": "last_refreshed_version",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "sales_summary_id",
            "type": "integer"
          },
          {
            "name": "daily_accounting_day",
            "type": "integer"
          },
          {
            "name": "daily_accounting_month",
            "type": "integer"
          },
          {
            "name": "daily_accounting_year",
            "type": "integer"
          },
          {
            "name": "daily_sales_summary_id",
            "type": "integer"
          },
          {
            "name": "total_less_non_sales",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "markups",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "discounts",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "shipping",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "adjustments_dirty_index",
            "fields": [
              "tenant_id"
            ],
            "where": "(dirty = true)",
            "using": "btree"
          },
          {
            "name": "adjustments_refresh_index",
            "fields": [
              "tenant_id",
              "last_refreshed_at",
              "last_refreshed_version"
            ],
            "using": "btree"
          },
          {
            "name": "index_adjustments_accounting_month_year",
            "fields": [
              "tenant_id",
              "accounting_month",
              "accounting_year",
              "posted_date",
              "total",
              "voided",
              "deleted"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_adjustments_affect_sales",
            "fields": [
              "affect_sales",
              "deleted",
              "voided",
              "id"
            ],
            "where": "((affect_sales = true) AND (deleted = false) AND (voided = false))",
            "using": "btree"
          },
          {
            "name": "index_adjustments_affect_sales_invoice_id",
            "fields": [
              "tenant_id",
              "invoice_id",
              "affect_sales",
              "total",
              "deleted",
              "voided",
              "id"
            ],
            "where": "((affect_sales = true) AND (deleted = false) AND (voided = false))",
            "using": "btree"
          },
          {
            "name": "index_adjustments_daily_sales_summary_id_totals",
            "fields": [
              "daily_sales_summary_id",
              "total"
            ],
            "using": "btree"
          },
          {
            "name": "index_adjustments_on_accounting_year",
            "fields": [
              "accounting_year"
            ],
            "using": "btree"
          },
          {
            "name": "index_adjustments_on_company_id",
            "fields": [
              "company_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_adjustments_on_posted_date",
            "fields": [
              "posted_date"
            ],
            "using": "btree"
          },
          {
            "name": "index_adjustments_on_tenant_id_and_printsmith_id",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_adjustments_sales_summary_id_posted_date",
            "fields": [
              "sales_summary_id",
              "posted_date"
            ],
            "where": "(sales_summary_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_adjustments_tenant_id_company_invoice",
            "fields": [
              "tenant_id",
              "company_id",
              "invoice_id",
              "id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "affiliations",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "primary",
            "type": "boolean"
          }
        ],
        "indexes": [
          {
            "name": "index_affiliations_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_affiliations_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "api_logs",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "body",
            "type": "jsonb"
          },
          {
            "name": "response_message",
            "type": "string"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "retry_count",
            "type": "integer"
          },
          {
            "name": "status",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "api_logs_context_id_context_type_body_idx",
            "fields": [
              "context_id",
              "context_type",
              "body"
            ],
            "using": "btree"
          },
          {
            "name": "index_api_logs_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "assets",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "category",
            "type": "string"
          },
          {
            "name": "file_name",
            "type": "string"
          },
          {
            "name": "file_hash",
            "type": "string"
          },
          {
            "name": "content_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "tracker_id",
            "type": "integer"
          },
          {
            "name": "archived",
            "type": "boolean",
            "default": false
          },
          {
            "name": "meta_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [
          {
            "name": "assets_context_id_context_type_file_hash_idx",
            "fields": [
              "context_id",
              "context_type",
              "file_hash"
            ],
            "using": "btree"
          },
          {
            "name": "index_assets_on_category",
            "fields": [
              "category"
            ],
            "using": "btree"
          },
          {
            "name": "index_assets_pending",
            "fields": [
              "tenant_id",
              "context_type",
              "file_hash",
              "created_at"
            ],
            "where": "(((context_type)::text = 'PendingAttachment'::text) AND (file_hash IS NOT NULL))",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "background_job_results",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "job_hash",
            "type": "string"
          },
          {
            "name": "job_type",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "status_view",
            "type": "string"
          },
          {
            "name": "completed_view",
            "type": "string"
          },
          {
            "name": "data",
            "type": "jsonb"
          },
          {
            "name": "result",
            "type": "jsonb"
          },
          {
            "name": "expires_at",
            "type": "datetime"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "background_jobs",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "job_type",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "status_view",
            "type": "string"
          },
          {
            "name": "completed_view",
            "type": "string"
          },
          {
            "name": "data",
            "type": "jsonb"
          },
          {
            "name": "result",
            "type": "jsonb"
          },
          {
            "name": "complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "completed_at",
            "type": "datetime"
          },
          {
            "name": "job_hash",
            "type": "string"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "backups",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "filename",
            "type": "string",
            "null": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "success",
            "type": "boolean",
            "default": true
          }
        ],
        "indexes": [
          {
            "name": "index_backups_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "badges_sashes",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "badge_id",
            "type": "integer"
          },
          {
            "name": "sash_id",
            "type": "integer"
          },
          {
            "name": "notified_user",
            "type": "boolean",
            "default": false
          },
          {
            "name": "created_at",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "bookmarks",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "bookmarks_context_id_user_id_context_type_idx",
            "fields": [
              "context_id",
              "user_id",
              "context_type"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "budget_months",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "budget_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "total",
            "type": "integer",
            "default": 0,
            "null": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "month_date",
            "type": "date"
          },
          {
            "name": "enterprise_total",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "budgets",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "financial_year",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "comp_perc",
            "type": "integer"
          },
          {
            "name": "enterprise_comp_perc",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_budgets_on_tenant_id_and_financial_year",
            "fields": [
              "tenant_id",
              "financial_year"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "builds",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "os",
            "type": "text"
          },
          {
            "name": "checksum",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "business_plan_marketing_activities",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "quarter_1",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "quarter_2",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "quarter_3",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "quarter_4",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "percentage",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "max_cap",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "business_plan_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_business_plan_marketing_activities_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_business_plan_marketing_activities_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "business_plan_sales_investments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "business_plan_id",
            "type": "integer"
          },
          {
            "name": "quarter_1",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "quarter_2",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "quarter_3",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "quarter_4",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [
          {
            "name": "index_business_plan_sales_investments_on_business_plan_id",
            "fields": [
              "business_plan_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_business_plan_sales_investments_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_business_plan_sales_investments_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "business_plans",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "financial_year",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "growth_target",
            "type": "integer",
            "default": 5
          },
          {
            "name": "win_back_target",
            "type": "integer",
            "default": 25
          },
          {
            "name": "ten_companies",
            "type": "jsonb",
            "default": {
            }
          }
        ],
        "indexes": [
          {
            "name": "index_business_plans_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "calendar_entries",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "calendar_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "entry_ident",
            "type": "text",
            "null": false
          },
          {
            "name": "start_time",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "end_time",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "summary",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "updated",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [
          {
            "name": "calendar_entries_calendar_id_entry_ident_key",
            "fields": [
              "calendar_id",
              "entry_ident"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "index_calendar_entries_on_entry_ident",
            "fields": [
              "entry_ident",
              "updated",
              "start_time",
              "id"
            ],
            "where": "(updated = true)",
            "using": "btree"
          },
          {
            "name": "tmp_fix_6",
            "fields": [
              "updated"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "calendar_entry_deletions",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "calendar_ident",
            "type": "string"
          },
          {
            "name": "entry_ident",
            "type": "string"
          },
          {
            "name": "send_updates",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "calendars",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "calendar_ident",
            "type": "text"
          },
          {
            "name": "last_sync",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "next_sync_token",
            "type": "text"
          },
          {
            "name": "timezone",
            "type": "text"
          },
          {
            "name": "user_ids",
            "type": "integer",
            "default": [

            ],
            "array": true
          }
        ],
        "indexes": [
          {
            "name": "calendar_ids_calendar_ids_user_id_fk_idx",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_calendars_calendar_ident",
            "fields": [
              "calendar_ident",
              "id"
            ],
            "where": "(array_length(user_ids, 1) > 0)",
            "using": "btree"
          },
          {
            "name": "index_calendars_user_ids",
            "fields": [
              "user_ids"
            ],
            "using": "gin"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaign_calendar_entries",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "campaign_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "calendar_entry_id",
            "type": "string"
          },
          {
            "name": "date",
            "type": "datetime"
          }
        ],
        "indexes": [
          {
            "name": "index_campaign_calendar_entries_campaign_tenant",
            "fields": [
              "campaign_id",
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaign_counts",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "campaign_id",
            "type": "integer"
          },
          {
            "name": "total_count",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaign_exclusions",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "campaign_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_campaign_exclusions_on_campaign_id",
            "fields": [
              "campaign_id",
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_exclusions_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaign_groups",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "primary_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "campaign_ids",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaign_messages",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "campaign_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "opened",
            "type": "boolean"
          },
          {
            "name": "sent",
            "type": "boolean"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "failed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "note",
            "type": "text"
          },
          {
            "name": "parent_message_id",
            "type": "integer"
          },
          {
            "name": "sent_date",
            "type": "datetime"
          },
          {
            "name": "failed_reason",
            "type": "string"
          },
          {
            "name": "unsubscribed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "parent_contact_id",
            "type": "integer"
          },
          {
            "name": "sent_message_id",
            "type": "string"
          },
          {
            "name": "complaint",
            "type": "string"
          },
          {
            "name": "delivered",
            "type": "boolean",
            "default": false
          },
          {
            "name": "fixed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_campaign_messages_campaign_contact_status_dates",
            "fields": [
              "campaign_id",
              "contact_id",
              "sent",
              "failed",
              "sent_date",
              "created_at",
              "id"
            ],
            "order": {
              "sent_date": "desc",
              "created_at": "desc"
            },
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_on_campaign_id",
            "fields": [
              "campaign_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_on_parent_contact_id",
            "fields": [
              "parent_contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_parent",
            "fields": [
              "parent_message_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_sent_message",
            "fields": [
              "sent_message_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_tenant_stats",
            "fields": [
              "tenant_id",
              "contact_id",
              "campaign_id",
              "sent",
              "opened",
              "failed",
              "unsubscribed",
              "id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaign_messages_trackers",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "campaign_message_id",
            "type": "integer"
          },
          {
            "name": "tracker_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_campaign_messages_trackers_on_campaign_message_id",
            "fields": [
              "campaign_message_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaign_messages_trackers_on_tracker_id",
            "fields": [
              "tracker_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "campaigns",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "global",
            "type": "boolean"
          },
          {
            "name": "status",
            "type": "integer"
          },
          {
            "name": "method",
            "type": "integer"
          },
          {
            "name": "subject",
            "type": "text"
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "email_template_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "parent_id",
            "type": "integer"
          },
          {
            "name": "test",
            "type": "boolean",
            "default": false
          },
          {
            "name": "identity_id",
            "type": "integer"
          },
          {
            "name": "scheduled",
            "type": "boolean",
            "default": false
          },
          {
            "name": "schedule_weekday",
            "type": "integer",
            "default": 0
          },
          {
            "name": "scheduled_at",
            "type": "datetime"
          },
          {
            "name": "schedule_week",
            "type": "integer",
            "default": 1
          },
          {
            "name": "schedule_hour",
            "type": "integer",
            "default": 10
          },
          {
            "name": "allow_override",
            "type": "boolean",
            "default": false
          },
          {
            "name": "test_confirmed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "clear_exclusions",
            "type": "boolean",
            "default": false
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "hidden_tenants",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "enterprise_campaign",
            "type": "boolean",
            "default": false
          },
          {
            "name": "selected_tenants",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "test_emails",
            "type": "string",
            "default": [

            ],
            "array": true
          },
          {
            "name": "global_hide",
            "type": "boolean",
            "default": false
          },
          {
            "name": "paused",
            "type": "boolean",
            "default": false
          },
          {
            "name": "schedule_date",
            "type": "datetime",
            "default": [

            ],
            "array": true
          },
          {
            "name": "schedule_interval_type",
            "type": "string",
            "default": "none"
          },
          {
            "name": "schedule_interval",
            "type": "integer",
            "default": 1
          },
          {
            "name": "schedule_day_lock",
            "type": "string",
            "default": "none"
          },
          {
            "name": "schedule_auto_send",
            "type": "boolean",
            "default": false
          },
          {
            "name": "auto_send_tenants",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "alerts",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "approvals",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "auto_send_throttle_override",
            "type": "boolean",
            "default": false
          },
          {
            "name": "auto_approve",
            "type": "boolean",
            "default": false
          },
          {
            "name": "skips",
            "type": "jsonb",
            "default": {
            }
          }
        ],
        "indexes": [
          {
            "name": "index_campaigns_body_parent",
            "fields": [
              "body"
            ],
            "where": "(parent_id IS NULL)",
            "using": "hash"
          },
          {
            "name": "index_campaigns_body_test",
            "fields": [
              "body"
            ],
            "where": "(test = true)",
            "using": "hash"
          },
          {
            "name": "index_campaigns_id_tenant_not_test",
            "fields": [
              "id",
              "tenant_id",
              "test",
              "paused"
            ],
            "where": "(test = false)",
            "using": "btree"
          },
          {
            "name": "index_campaigns_on_email_template_id",
            "fields": [
              "email_template_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaigns_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaigns_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaigns_on_tenant_parent_created_at_not_test",
            "fields": [
              "tenant_id",
              "parent_id",
              "test",
              "created_at"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(test <> false)",
            "using": "btree"
          },
          {
            "name": "index_campaigns_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaigns_parent_id_md5_body_test",
            "fields": [
              "parent_id",
              "test",
              "tenant_id"
            ],
            "where": "(test = true)",
            "using": "btree"
          },
          {
            "name": "index_campaigns_tenant_id_test_paused",
            "fields": [
              "tenant_id",
              "test",
              "paused",
              "parent_id",
              "id"
            ],
            "where": "(NOT test)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "campaigns_contact_lists",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "campaign_id",
            "type": "integer"
          },
          {
            "name": "contact_list_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_campaigns_contact_lists_on_campaign_id",
            "fields": [
              "campaign_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_campaigns_contact_lists_on_contact_list_id",
            "fields": [
              "contact_list_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "cash_drawers",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "amount",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "arbalance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "cardcount",
            "type": "integer"
          },
          {
            "name": "cardtotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "cashtotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "changefund",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "checkcount",
            "type": "integer"
          },
          {
            "name": "checktotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "fund",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "held",
            "type": "boolean",
            "default": false
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "lastcloseoutdate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "laststartupdate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "paidouts",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "prevarbalance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "transactiondate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "clearbit_quota",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "klass",
            "type": "string"
          },
          {
            "name": "used",
            "type": "integer",
            "default": 0
          },
          {
            "name": "max",
            "type": "integer",
            "default": 1000
          },
          {
            "name": "start_date",
            "type": "datetime"
          },
          {
            "name": "end_date",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "comments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "title",
            "type": "string",
            "limit": 50,
            "default": ""
          },
          {
            "name": "comment",
            "type": "text"
          },
          {
            "name": "commentable_id",
            "type": "integer"
          },
          {
            "name": "commentable_type",
            "type": "string",
            "limit": 255
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_comments_on_commentable_id",
            "fields": [
              "commentable_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_comments_on_commentable_type",
            "fields": [
              "commentable_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_comments_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_comments_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "companies",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "exclude_from_analysis",
            "type": "boolean"
          },
          {
            "name": "walk_in",
            "type": "boolean"
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "avg_conversion_ratio",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "mtd_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "ytd_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "needs_recalc",
            "type": "boolean",
            "default": true
          },
          {
            "name": "sales_hash",
            "type": "hstore",
            "default": {
            }
          },
          {
            "name": "mtd_rank",
            "type": "integer"
          },
          {
            "name": "ytd_rank",
            "type": "integer"
          },
          {
            "name": "ly_rank",
            "type": "integer"
          },
          {
            "name": "rolling_12_month_rank",
            "type": "integer"
          },
          {
            "name": "ly_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "rolling_12_month_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "prospect",
            "type": "boolean",
            "default": false
          },
          {
            "name": "account_type",
            "type": "string"
          },
          {
            "name": "rolling_12_month_rank_ly",
            "type": "integer"
          },
          {
            "name": "rolling_12_month_sales_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "source_billtoaddress_id",
            "type": "integer"
          },
          {
            "name": "source_billtocontact_id",
            "type": "integer"
          },
          {
            "name": "source_salesrep_id",
            "type": "integer"
          },
          {
            "name": "source_shiptoaddress_id",
            "type": "integer"
          },
          {
            "name": "source_contact_id",
            "type": "integer"
          },
          {
            "name": "source_shippingmode_id",
            "type": "integer"
          },
          {
            "name": "source_taxtable_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "marketing_do_not_mail",
            "type": "boolean",
            "default": false
          },
          {
            "name": "needs_avg_conversion_ratio",
            "type": "boolean",
            "default": true
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "last_clearbit_data_fetch_date",
            "type": "datetime"
          },
          {
            "name": "rolling_12_month_cogs",
            "type": "decimal"
          },
          {
            "name": "last_order_date",
            "type": "datetime"
          },
          {
            "name": "growth_percentage",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "lifetime_value",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "needs_lifetime_value_recalc",
            "type": "boolean",
            "default": true
          },
          {
            "name": "oldest_interaction",
            "type": "datetime"
          },
          {
            "name": "rolling_1_month_sales",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "order_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "cache_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "last_viewed",
            "type": "datetime"
          },
          {
            "name": "has_clearbit_data",
            "type": "boolean",
            "default": false
          },
          {
            "name": "clearbit_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "custom_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "account_payable_id",
            "type": "integer"
          },
          {
            "name": "phone",
            "type": "string"
          },
          {
            "name": "master_account",
            "type": "string"
          },
          {
            "name": "lead_source",
            "type": "string"
          },
          {
            "name": "lead_source_2",
            "type": "string"
          },
          {
            "name": "last_contact",
            "type": "datetime"
          },
          {
            "name": "last_email_sent",
            "type": "datetime"
          },
          {
            "name": "last_email_received",
            "type": "datetime"
          },
          {
            "name": "last_phone_call",
            "type": "datetime"
          },
          {
            "name": "rolling_12_month_rank_ly_ly",
            "type": "integer"
          },
          {
            "name": "rolling_12_month_sales_ly_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "rolling_12_month_rank_ly_previous",
            "type": "integer"
          },
          {
            "name": "rolling_12_month_sales_ly_previous",
            "type": "decimal"
          },
          {
            "name": "account_note",
            "type": "string"
          },
          {
            "name": "job_note",
            "type": "string"
          },
          {
            "name": "credit_limit",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "account_created_date",
            "type": "datetime"
          },
          {
            "name": "account_display_id",
            "type": "string"
          },
          {
            "name": "business_type_code",
            "type": "string"
          },
          {
            "name": "last_refreshed_at",
            "type": "datetime"
          },
          {
            "name": "last_refreshed_version",
            "type": "integer"
          },
          {
            "name": "company_created_date",
            "type": "datetime"
          },
          {
            "name": "web",
            "type": "boolean"
          },
          {
            "name": "balance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "no_notifications",
            "type": "boolean",
            "default": false
          },
          {
            "name": "remote_sales_rep_update",
            "type": "boolean"
          },
          {
            "name": "last_pickup_date",
            "type": "datetime"
          },
          {
            "name": "single_sale_only_at",
            "type": "datetime"
          },
          {
            "name": "remote_lead_source_update",
            "type": "boolean"
          },
          {
            "name": "send_invoice_ap_contact",
            "type": "boolean"
          },
          {
            "name": "primary_contact_id",
            "type": "integer"
          },
          {
            "name": "prospect_status_id",
            "type": "integer"
          },
          {
            "name": "prospect_sentiment",
            "type": "integer"
          },
          {
            "name": "invoice_address_id",
            "type": "integer"
          },
          {
            "name": "statement_address_id",
            "type": "integer"
          },
          {
            "name": "est_spend",
            "type": "integer"
          },
          {
            "name": "conv_prob",
            "type": "integer"
          },
          {
            "name": "remote_account_update",
            "type": "boolean"
          },
          {
            "name": "lead_type_id",
            "type": "integer"
          },
          {
            "name": "created_ps",
            "type": "boolean"
          },
          {
            "name": "walk_in_lead_transfer_initial",
            "type": "boolean"
          },
          {
            "name": "walk_in_lead_transfer_to",
            "type": "boolean"
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "last_meeting",
            "type": "datetime"
          },
          {
            "name": "meta_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "mbe_center",
            "type": "boolean",
            "default": false,
            "null": false
          },
          {
            "name": "b2b",
            "type": "boolean",
            "default": false,
            "null": false
          },
          {
            "name": "mbe_id",
            "type": "string",
            "default": ""
          },
          {
            "name": "is_lead",
            "type": "boolean"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          },
          {
            "name": "mbe_privilege",
            "type": "boolean",
            "default": false
          },
          {
            "name": "first_sale_at",
            "type": "datetime"
          },
          {
            "name": "sales_rep_platform_id",
            "type": "string"
          },
          {
            "name": "tmp_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "last_sale_order_date",
            "type": "datetime"
          },
          {
            "name": "last_sale_pickup_date",
            "type": "datetime"
          },
          {
            "name": "last_shipment_date",
            "type": "datetime"
          },
          {
            "name": "last_lapsed_date",
            "type": "datetime"
          },
          {
            "name": "propagate_sales_reps",
            "type": "boolean",
            "default": false
          },
          {
            "name": "financial_year_rank",
            "type": "integer"
          },
          {
            "name": "financial_year_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "financial_year_cogs",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "financial_year_rank_ly",
            "type": "integer"
          },
          {
            "name": "financial_year_sales_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "financial_year_rank_ly_ly",
            "type": "integer"
          },
          {
            "name": "financial_year_sales_ly_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "growth_percentage_financial_year",
            "type": "decimal",
            "default": 0.0
          }
        ],
        "indexes": [
          {
            "name": "companies_invoice_retry",
            "fields": [
              "id",
              "invoice_address_id",
              "deleted"
            ],
            "where": "(remote_account_update = true)",
            "using": "btree"
          },
          {
            "name": "companies_refresh_index",
            "fields": [
              "tenant_id",
              "last_refreshed_at",
              "last_refreshed_version"
            ],
            "using": "btree"
          },
          {
            "name": "companies_remote_account_update",
            "fields": [
              "tenant_id",
              "deleted"
            ],
            "where": "(remote_account_update = true)",
            "using": "btree"
          },
          {
            "name": "companies_sales_rep_indexes",
            "fields": [
              "sales_rep_user_id",
              "source_salesrep_id"
            ],
            "using": "btree"
          },
          {
            "name": "companies_sales_rep_platform",
            "fields": [
              "sales_rep_user_id",
              "sales_rep_platform_id"
            ],
            "using": "btree"
          },
          {
            "name": "companies_sales_rep_platform_tagger",
            "fields": [
              "tenant_id"
            ],
            "where": "((sales_rep_platform_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "companies_sales_rep_tagger",
            "fields": [
              "tenant_id"
            ],
            "where": "((source_salesrep_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "companies_tenant_id_idx",
            "fields": [
              "tenant_id"
            ],
            "where": "(dirty = true)",
            "using": "btree"
          },
          {
            "name": "companies_tenant_id_idx1",
            "fields": [
              "tenant_id"
            ],
            "where": "((needs_avg_conversion_ratio = true) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "companies_tenant_id_printsmith_id_idx",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "companies_tenant_id_rolling_12_month_rank_idx",
            "fields": [
              "tenant_id",
              "rolling_12_month_rank"
            ],
            "where": "((needs_lifetime_value_recalc = true) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "companies_tenant_id_rolling_12_month_sales_idx",
            "fields": [
              "tenant_id",
              "rolling_12_month_sales"
            ],
            "using": "btree"
          },
          {
            "name": "companies_web",
            "fields": [
              "tenant_id",
              "web",
              "deleted"
            ],
            "where": "(web = true)",
            "using": "btree"
          },
          {
            "name": "corey_july_1",
            "fields": [
              "tenant_id",
              "source_salesrep_id",
              "created_at"
            ],
            "where": "(source_salesrep_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_companies_clearbit",
            "fields": [
              "has_clearbit_data",
              "rolling_12_month_rank",
              "rolling_12_month_sales",
              "rolling_12_month_sales_ly",
              "tenant_id",
              "deleted",
              "walk_in"
            ],
            "where": "((has_clearbit_data = false) AND (walk_in = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_companies_id_do_not_mail",
            "fields": [
              "id",
              "marketing_do_not_mail"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_external_id_and_tenant_id",
            "fields": [
              "external_id",
              "tenant_id"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "index_companies_on_lead_type_id",
            "fields": [
              "lead_type_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_location_user_id",
            "fields": [
              "location_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_remote_lead_source_update",
            "fields": [
              "remote_lead_source_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_remote_sales_rep_update",
            "fields": [
              "remote_sales_rep_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_rolling_12_deleted",
            "fields": [
              "tenant_id",
              "rolling_12_month_sales",
              "deleted",
              "id"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_companies_on_single_sale_only_sales_rep_location",
            "fields": [
              "tenant_id",
              "deleted",
              "walk_in",
              "location_user_id",
              "source_salesrep_id",
              "printsmith_id",
              "single_sale_only_at"
            ],
            "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_companies_on_single_sale_only_sales_rep_platform",
            "fields": [
              "tenant_id",
              "deleted",
              "walk_in",
              "location_user_id",
              "sales_rep_platform_id",
              "platform_id",
              "single_sale_only_at"
            ],
            "where": "((NOT deleted) AND (platform_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_companies_on_single_sale_only_sales_rep_platform_location",
            "fields": [
              "tenant_id",
              "deleted",
              "walk_in",
              "location_user_id",
              "sales_rep_platform_id",
              "printsmith_id",
              "single_sale_only_at"
            ],
            "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_companies_on_single_sale_only_sales_rep_platform_user",
            "fields": [
              "tenant_id",
              "deleted",
              "walk_in",
              "sales_rep_user_id",
              "sales_rep_platform_id",
              "printsmith_id",
              "single_sale_only_at"
            ],
            "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_companies_on_single_sale_only_sales_rep_platform_user_pla",
            "fields": [
              "tenant_id",
              "deleted",
              "walk_in",
              "sales_rep_user_id",
              "sales_rep_platform_id",
              "platform_id",
              "single_sale_only_at"
            ],
            "where": "((NOT deleted) AND (platform_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_companies_on_single_sale_only_sales_rep_user",
            "fields": [
              "tenant_id",
              "deleted",
              "walk_in",
              "sales_rep_user_id",
              "source_salesrep_id",
              "printsmith_id",
              "single_sale_only_at"
            ],
            "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_companies_on_tenant_address_ids",
            "fields": [
              "tenant_id",
              "source_billtoaddress_id",
              "source_shiptoaddress_id",
              "statement_address_id",
              "invoice_address_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_tenant_id",
            "fields": [
              "tenant_id",
              "printsmith_id",
              "dirty"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_tenant_id_and_company_created_date",
            "fields": [
              "tenant_id",
              "company_created_date"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_tenant_id_and_rolling_12_month_rank",
            "fields": [
              "tenant_id",
              "rolling_12_month_rank"
            ],
            "using": "btree"
          },
          {
            "name": "index_companies_on_tenant_id_and_rolling_12_month_rank_partial",
            "fields": [
              "tenant_id",
              "rolling_12_month_rank"
            ],
            "where": "((NOT deleted) AND (NOT walk_in))",
            "using": "btree"
          },
          {
            "name": "index_companies_prospect_satatus_id",
            "fields": [
              "prospect_status_id",
              "prospect",
              "id",
              "deleted"
            ],
            "where": "((prospect = true) AND (prospect_status_id IS NOT NULL) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_companies_rank_name_sales_rep",
            "fields": [
              "tenant_id",
              "rolling_12_month_rank",
              "rolling_12_month_rank_ly",
              "name",
              "sales_rep_user_id",
              "source_salesrep_id"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_companies_rank_name_sales_rep_platform",
            "fields": [
              "tenant_id",
              "rolling_12_month_rank",
              "rolling_12_month_rank_ly",
              "name",
              "sales_rep_user_id",
              "sales_rep_platform_id"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_companies_retry_sales_rep_update",
            "fields": [
              "tenant_id",
              "deleted"
            ],
            "where": "(remote_sales_rep_update = true)",
            "using": "btree"
          },
          {
            "name": "index_companies_stats",
            "fields": [
              "tenant_id",
              "deleted",
              "rolling_12_month_sales",
              "rolling_12_month_sales_ly",
              "id",
              "last_order_date",
              "last_pickup_date",
              "rolling_12_month_cogs",
              "growth_percentage",
              "order_count"
            ],
            "where": "((deleted = false) AND ((rolling_12_month_sales > (0)::numeric) OR (rolling_12_month_sales_ly > (0)::numeric)))",
            "using": "btree"
          },
          {
            "name": "index_companies_tenant_do_not_mail",
            "fields": [
              "tenant_id",
              "id",
              "marketing_do_not_mail"
            ],
            "where": "(marketing_do_not_mail = true)",
            "using": "btree"
          },
          {
            "name": "index_companies_tenant_id_sales_rep",
            "fields": [
              "tenant_id",
              "source_salesrep_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(source_salesrep_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_companies_tenant_id_sales_rep_platform",
            "fields": [
              "tenant_id",
              "sales_rep_platform_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(sales_rep_platform_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_companies_tenant_last_order_sales_rep_platform",
            "fields": [
              "tenant_id",
              "last_order_date",
              "single_sale_only_at",
              "oldest_interaction",
              "rolling_12_month_sales",
              "rolling_12_month_sales_ly",
              "sales_rep_user_id",
              "sales_rep_platform_id",
              "id",
              "deleted",
              "walk_in"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_companies_tenant_printsmith",
            "fields": [
              "tenant_id",
              "printsmith_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_company_sales",
            "fields": [
              "tenant_id",
              "rolling_12_month_sales",
              "deleted",
              "source_shiptoaddress_id",
              "sales_rep_user_id",
              "source_salesrep_id",
              "id"
            ],
            "where": "(NOT deleted)",
            "using": "btree"
          },
          {
            "name": "index_company_sales_sales_rep_platform",
            "fields": [
              "tenant_id",
              "rolling_12_month_sales",
              "deleted",
              "source_shiptoaddress_id",
              "sales_rep_user_id",
              "sales_rep_platform_id",
              "id"
            ],
            "where": "(NOT deleted)",
            "using": "btree"
          },
          {
            "name": "index_search_companies",
            "fields": [
              "tenant_id",
              "name",
              "walk_in",
              "deleted",
              "id"
            ],
            "where": "(NOT deleted)",
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_companies",
            "fields": [
              "platform_id",
              "printsmith_id",
              "external_id",
              "id"
            ],
            "where": "(platform_id IS NULL)",
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_companies_source_salesrep_id",
            "fields": [
              "id",
              "source_salesrep_id"
            ],
            "where": "((tmp_data ->> 'companies_source_salesrep_id'::text) IS NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "company_metrics",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "report_month",
            "type": "date"
          },
          {
            "name": "report_series",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_company_metrics_on_company_id",
            "fields": [
              "company_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_company_metrics_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_company_metrics_unique",
            "fields": [
              "report_series",
              "tenant_id",
              "report_month",
              "company_id"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "contact_groups",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "first_name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "last_name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "email",
            "type": "string",
            "limit": 255
          },
          {
            "name": "phone",
            "type": "string",
            "limit": 255
          },
          {
            "name": "estimate_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "invoice_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "estimate_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 0.0
          },
          {
            "name": "invoice_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 0.0
          },
          {
            "name": "first_estimate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "first_invoice",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "last_estimate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "last_invoice",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "sales_total",
            "type": "hstore"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "contact_groups_contacts",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "contact_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "contact_group_id",
            "type": "integer",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_contact_groups_contacts_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "contact_list_counts",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "contact_list_id",
            "type": "integer"
          },
          {
            "name": "total_count",
            "type": "integer"
          },
          {
            "name": "generate_duration",
            "type": "decimal"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "contact_list_exclusions",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "contact_list_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_contact_list_exclusions_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contact_list_exclusions_on_contact_list_id",
            "fields": [
              "contact_list_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "contact_list_rules",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "contact_list_id",
            "type": "integer"
          },
          {
            "name": "category",
            "type": "text"
          },
          {
            "name": "operand",
            "type": "text"
          },
          {
            "name": "value",
            "type": "text"
          },
          {
            "name": "value2",
            "type": "text"
          },
          {
            "name": "modifier",
            "type": "text",
            "default": ""
          },
          {
            "name": "modifier_operand",
            "type": "text",
            "default": ""
          },
          {
            "name": "modifier_value",
            "type": "text",
            "default": ""
          },
          {
            "name": "modifier_value2",
            "type": "text",
            "default": ""
          },
          {
            "name": "negate",
            "type": "boolean",
            "default": false
          },
          {
            "name": "sales_rep_id",
            "type": "integer"
          },
          {
            "name": "taken_by_id",
            "type": "integer"
          },
          {
            "name": "modifier2",
            "type": "string"
          },
          {
            "name": "modifier2_operand",
            "type": "string"
          },
          {
            "name": "modifier2_value",
            "type": "string"
          },
          {
            "name": "modifier2_value2",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_contact_list_rules_on_contact_list_id",
            "fields": [
              "contact_list_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "contact_lists",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "icon",
            "type": "string"
          },
          {
            "name": "colour",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": true
          },
          {
            "name": "hide_from_tenant",
            "type": "boolean",
            "default": false
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "account_type",
            "type": "string",
            "default": "account"
          }
        ],
        "indexes": [
          {
            "name": "index_contact_lists_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "contact_lists_contacts",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "contact_list_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_contact_lists_contacts_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contact_lists_contacts_on_contact_list_id",
            "fields": [
              "contact_list_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "contacts",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "first_name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "last_name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "email",
            "type": "string",
            "limit": 255
          },
          {
            "name": "phone",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "gender",
            "type": "string",
            "limit": 255
          },
          {
            "name": "temp",
            "type": "boolean",
            "default": false
          },
          {
            "name": "source_address_id",
            "type": "integer"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "ready",
            "type": "boolean",
            "default": false
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "assocation_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "source_account_id",
            "type": "integer"
          },
          {
            "name": "remote_update_required",
            "type": "boolean",
            "default": false
          },
          {
            "name": "in_group",
            "type": "boolean",
            "default": false
          },
          {
            "name": "parent_contact_id",
            "type": "integer"
          },
          {
            "name": "mobile",
            "type": "string"
          },
          {
            "name": "fax",
            "type": "string"
          },
          {
            "name": "home_phone",
            "type": "string"
          },
          {
            "name": "twitter",
            "type": "string"
          },
          {
            "name": "other",
            "type": "string"
          },
          {
            "name": "facebook",
            "type": "string"
          },
          {
            "name": "website",
            "type": "string"
          },
          {
            "name": "buy_frequency",
            "type": "float",
            "default": 0.0
          },
          {
            "name": "days_outside_buy_freq",
            "type": "integer",
            "default": 0
          },
          {
            "name": "marketing_do_not_mail",
            "type": "boolean",
            "default": false
          },
          {
            "name": "marketing_unsubscribe",
            "type": "boolean",
            "default": false
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "source_salesrep_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "rolling_12_month_sales",
            "type": "decimal"
          },
          {
            "name": "rolling_12_month_sales_ly",
            "type": "decimal"
          },
          {
            "name": "latest_order_date",
            "type": "datetime"
          },
          {
            "name": "rolling_12_month_cogs",
            "type": "decimal"
          },
          {
            "name": "marketing_unsubscribe_reason",
            "type": "string"
          },
          {
            "name": "on_suppression_list",
            "type": "boolean",
            "default": false
          },
          {
            "name": "growth_percentage",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "rolling_1_month_sales",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "order_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "address_id",
            "type": "integer"
          },
          {
            "name": "average_invoice",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "has_clearbit_data",
            "type": "boolean",
            "default": false
          },
          {
            "name": "clearbit_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "custom_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "last_clearbit_data_fetch_date",
            "type": "datetime"
          },
          {
            "name": "last_viewed",
            "type": "datetime"
          },
          {
            "name": "guessed_gender",
            "type": "string"
          },
          {
            "name": "guessed_gender_confidence",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "bounced_email_addresses",
            "type": "string",
            "default": [

            ],
            "array": true
          },
          {
            "name": "last_contact",
            "type": "datetime"
          },
          {
            "name": "last_email_sent",
            "type": "datetime"
          },
          {
            "name": "last_email_received",
            "type": "datetime"
          },
          {
            "name": "last_phone_call",
            "type": "datetime"
          },
          {
            "name": "rolling_12_month_sales_ly_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "remote_sales_rep_update",
            "type": "boolean"
          },
          {
            "name": "last_pickup_date",
            "type": "datetime"
          },
          {
            "name": "lead_source",
            "type": "string"
          },
          {
            "name": "lead_source_2",
            "type": "string"
          },
          {
            "name": "prefix",
            "type": "string"
          },
          {
            "name": "suffix",
            "type": "string"
          },
          {
            "name": "needs_email_remap",
            "type": "boolean",
            "default": false
          },
          {
            "name": "job_title",
            "type": "string"
          },
          {
            "name": "est_spend",
            "type": "integer"
          },
          {
            "name": "conv_prob",
            "type": "integer"
          },
          {
            "name": "next_activity_date",
            "type": "date"
          },
          {
            "name": "next_activity_type",
            "type": "string"
          },
          {
            "name": "use_contact_address",
            "type": "boolean"
          },
          {
            "name": "prospect_status_id",
            "type": "integer"
          },
          {
            "name": "needs_email_validation",
            "type": "boolean",
            "default": true
          },
          {
            "name": "source_inquiry_id",
            "type": "integer"
          },
          {
            "name": "email_validation_attempts",
            "type": "integer",
            "default": 0
          },
          {
            "name": "next_activity",
            "type": "jsonb",
            "default": {
            },
            "null": false
          },
          {
            "name": "oldest_rolling_12_invoice",
            "type": "datetime"
          },
          {
            "name": "oldest_rolling_12_ly_invoice",
            "type": "datetime"
          },
          {
            "name": "oldest_rolling_12_ly_ly_invoice",
            "type": "datetime"
          },
          {
            "name": "oldest_rolling_1_invoice",
            "type": "datetime"
          },
          {
            "name": "lead_type_id",
            "type": "integer"
          },
          {
            "name": "unsubscribed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "last_meeting",
            "type": "datetime"
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "old_prospect_status_id",
            "type": "integer"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          },
          {
            "name": "lead_created_at",
            "type": "datetime"
          },
          {
            "name": "do_not_sms",
            "type": "boolean"
          },
          {
            "name": "single_sale_only_at",
            "type": "datetime"
          },
          {
            "name": "first_sale_at",
            "type": "datetime"
          },
          {
            "name": "sales_rep_platform_id",
            "type": "string"
          },
          {
            "name": "tmp_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "last_sale_order_date",
            "type": "datetime"
          },
          {
            "name": "last_sale_pickup_date",
            "type": "datetime"
          },
          {
            "name": "last_shipment_date",
            "type": "datetime"
          },
          {
            "name": "oldest_interaction",
            "type": "datetime"
          },
          {
            "name": "last_lapsed_date",
            "type": "datetime"
          },
          {
            "name": "privacy_data",
            "type": "jsonb"
          },
          {
            "name": "do_not_sms_reply",
            "type": "string"
          },
          {
            "name": "potential",
            "type": "integer",
            "default": 1
          },
          {
            "name": "financial_year_rank",
            "type": "integer"
          },
          {
            "name": "financial_year_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "financial_year_cogs",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "financial_year_rank_ly",
            "type": "integer"
          },
          {
            "name": "financial_year_sales_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "financial_year_rank_ly_ly",
            "type": "integer"
          },
          {
            "name": "financial_year_sales_ly_ly",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "growth_percentage_financial_year",
            "type": "decimal",
            "default": 0.0
          }
        ],
        "indexes": [
          {
            "name": "contact_sales_rep_platform_tagger",
            "fields": [
              "tenant_id"
            ],
            "where": "((sales_rep_platform_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "contact_sales_rep_tagger",
            "fields": [
              "tenant_id"
            ],
            "where": "((source_salesrep_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "contacts_associations_complete_idx",
            "fields": [
              "associations_complete"
            ],
            "where": "(associations_complete = false)",
            "using": "btree"
          },
          {
            "name": "contacts_lead_type_id_idx",
            "fields": [
              "lead_type_id"
            ],
            "where": "(prospect_status_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "contacts_prospect_status_id",
            "fields": [
              "tenant_id",
              "deleted"
            ],
            "where": "(prospect_status_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_idx",
            "fields": [
              "tenant_id"
            ],
            "where": "(remote_update_required = true)",
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_idx1",
            "fields": [
              "tenant_id"
            ],
            "where": "((rolling_12_month_sales > (1)::numeric) AND (temp = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_latest_order_date_idx",
            "fields": [
              "tenant_id",
              "latest_order_date"
            ],
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_lower_idx",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_printsmith_id_idx",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_rolling_12_month_sales_idx1",
            "fields": [
              "tenant_id",
              "rolling_12_month_sales"
            ],
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_where_contactable",
            "fields": [
              "tenant_id"
            ],
            "where": "((NOT temp) AND (NOT deleted) AND (NOT marketing_do_not_mail) AND (NOT marketing_unsubscribe) AND (NOT on_suppression_list))",
            "using": "btree"
          },
          {
            "name": "contacts_tenant_id_where_emailable",
            "fields": [
              "tenant_id",
              "id",
              "rolling_12_month_sales",
              "first_name",
              "company_id",
              "deleted",
              "email",
              "temp",
              "marketing_do_not_mail",
              "marketing_unsubscribe",
              "on_suppression_list"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "((NOT temp) AND (NOT marketing_do_not_mail) AND (NOT marketing_unsubscribe) AND (NOT on_suppression_list) AND ((email)::text ~~ '%@%'::text))",
            "using": "btree"
          },
          {
            "name": "corey_july_5",
            "fields": [
              "tenant_id",
              "deleted",
              "id"
            ],
            "where": "(company_id IS NULL)",
            "using": "btree"
          },
          {
            "name": "corey_july_6",
            "fields": [
              "tenant_id"
            ],
            "where": "((source_address_id IS NOT NULL) AND (address_id IS NULL))",
            "using": "btree"
          },
          {
            "name": "index_company_dirty",
            "fields": [
              "tenant_id",
              "dirty",
              "printsmith_id",
              "company_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_clearbit",
            "fields": [
              "has_clearbit_data",
              "rolling_12_month_sales",
              "rolling_12_month_sales_ly",
              "tenant_id",
              "temp"
            ],
            "where": "((has_clearbit_data = false) AND (temp = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_company_sales_name",
            "fields": [
              "tenant_id",
              "company_id",
              "rolling_12_month_sales",
              "first_name",
              "temp",
              "deleted",
              "marketing_do_not_mail",
              "marketing_unsubscribe",
              "on_suppression_list",
              "id"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "((NOT temp) AND (NOT marketing_do_not_mail) AND (NOT marketing_unsubscribe) AND (NOT on_suppression_list))",
            "using": "btree"
          },
          {
            "name": "index_contacts_company_sales_name_not_unsubbed",
            "fields": [
              "tenant_id",
              "company_id",
              "rolling_12_month_sales",
              "first_name",
              "temp",
              "deleted",
              "unsubscribed",
              "id"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "((temp = false) AND (deleted = false) AND (unsubscribed = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_email_validation_attempts",
            "fields": [
              "needs_email_validation",
              "tenant_id",
              "email_validation_attempts",
              "source_created_at",
              "deleted",
              "unsubscribed",
              "temp"
            ],
            "where": "((needs_email_validation = true) AND (deleted = false) AND (unsubscribed = false) AND (temp = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_email_validations",
            "fields": [
              "tenant_id",
              "needs_email_validation",
              "company_id",
              "tenant_id",
              "on_suppression_list",
              "marketing_do_not_mail",
              "deleted",
              "temp"
            ],
            "where": "((on_suppression_list = false) AND (marketing_do_not_mail = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_email_validations_not_unsubbed",
            "fields": [
              "tenant_id",
              "needs_email_validation",
              "company_id",
              "tenant_id",
              "unsubscribed",
              "deleted",
              "temp"
            ],
            "where": "((deleted = false) AND (unsubscribed = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_in_latest_order_date_rolling_12_month_sales",
            "fields": [
              "tenant_id",
              "company_id",
              "latest_order_date",
              "rolling_12_month_sales",
              "sales_rep_user_id",
              "deleted",
              "temp",
              "id"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "((rolling_12_month_sales > (0)::numeric) AND (deleted <> true) AND (temp = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_on_company_id",
            "fields": [
              "company_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_lead_type_id",
            "fields": [
              "lead_type_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_location_user_id",
            "fields": [
              "location_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_parent_contact_id",
            "fields": [
              "parent_contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_remote_sales_rep_update",
            "fields": [
              "remote_sales_rep_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_sales_rep_platform",
            "fields": [
              "sales_rep_platform_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_sales_rep_user_id",
            "fields": [
              "sales_rep_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_source_salesrep_id",
            "fields": [
              "source_salesrep_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_on_tenant_marketing",
            "fields": [
              "tenant_id",
              "marketing_do_not_mail",
              "marketing_unsubscribe",
              "on_suppression_list",
              "id"
            ],
            "where": "((marketing_do_not_mail = false) AND ((marketing_unsubscribe = true) OR (on_suppression_list = true)))",
            "using": "btree"
          },
          {
            "name": "index_contacts_privacy_acknowledgment",
            "fields": [
              "tenant_id"
            ],
            "where": "((privacy_data ->> 'acknowledgment'::text) IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_contacts_privacy_marketing_center",
            "fields": [
              "tenant_id"
            ],
            "where": "((privacy_data ->> 'marketing_center'::text) IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_contacts_privacy_marketing_corporate",
            "fields": [
              "tenant_id"
            ],
            "where": "((privacy_data ->> 'marketing_corporate'::text) IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_contacts_prospect_satatus_id",
            "fields": [
              "prospect_status_id",
              "tenant_id",
              "deleted",
              "company_id"
            ],
            "where": "((prospect_status_id IS NOT NULL) AND (deleted <> false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_retry_sales_rep_update",
            "fields": [
              "tenant_id"
            ],
            "where": "(remote_sales_rep_update = true)",
            "using": "btree"
          },
          {
            "name": "index_contacts_rolling_invoices",
            "fields": [
              "tenant_id",
              "oldest_rolling_1_invoice",
              "oldest_rolling_12_invoice",
              "oldest_rolling_12_ly_invoice",
              "oldest_rolling_12_ly_ly_invoice",
              "id"
            ],
            "where": "((oldest_rolling_1_invoice IS NOT NULL) OR (oldest_rolling_12_invoice IS NOT NULL) OR (oldest_rolling_12_ly_invoice IS NOT NULL) OR (oldest_rolling_12_ly_ly_invoice IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_deleted_stats",
            "fields": [
              "tenant_id",
              "deleted",
              "id",
              "email",
              "company_id",
              "latest_order_date",
              "source_created_at",
              "unsubscribed"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_id_company_sales",
            "fields": [
              "tenant_id",
              "company_id",
              "rolling_12_month_sales",
              "rolling_12_month_sales_ly",
              "id",
              "deleted",
              "temp"
            ],
            "where": "(deleted <> true)",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_id_deleted_stats",
            "fields": [
              "tenant_id",
              "deleted",
              "id",
              "email",
              "company_id",
              "latest_order_date",
              "source_created_at",
              "marketing_do_not_mail",
              "on_suppression_list",
              "marketing_unsubscribe"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_id_sales_rep",
            "fields": [
              "tenant_id",
              "source_salesrep_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(source_salesrep_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_id_sales_rep_platform",
            "fields": [
              "tenant_id",
              "sales_rep_platform_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(sales_rep_platform_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_lower_email_id",
            "fields": [
              "tenant_id",
              "email",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_not_unsubbed",
            "fields": [
              "tenant_id"
            ],
            "where": "((temp = false) AND (deleted = false) AND (unsubscribed = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_not_unsubbed_with_email",
            "fields": [
              "tenant_id",
              "id",
              "rolling_12_month_sales",
              "first_name",
              "company_id",
              "deleted",
              "email",
              "temp",
              "unsubscribed"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "((temp = false) AND (deleted = false) AND (unsubscribed = false) AND ((email)::text ~~ '%@%'::text))",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_oldest_rolling",
            "fields": [
              "tenant_id",
              "oldest_rolling_1_invoice",
              "oldest_rolling_12_invoice",
              "oldest_rolling_12_ly_invoice",
              "oldest_rolling_12_ly_ly_invoice",
              "id"
            ],
            "where": "((oldest_rolling_1_invoice IS NOT NULL) OR (oldest_rolling_12_invoice IS NOT NULL) OR (oldest_rolling_12_ly_invoice IS NOT NULL) OR (oldest_rolling_12_ly_ly_invoice IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_printsmith",
            "fields": [
              "tenant_id",
              "printsmith_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_trimmed_email",
            "fields": [
              "tenant_id",
              "email",
              "on_suppression_list",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_unsubbed",
            "fields": [
              "tenant_id",
              "unsubscribed",
              "id"
            ],
            "where": "(unsubscribed = true)",
            "using": "btree"
          },
          {
            "name": "index_contacts_tenant_unsubscribed",
            "fields": [
              "tenant_id",
              "unsubscribed",
              "deleted",
              "temp",
              "needs_email_validation",
              "company_id"
            ],
            "where": "((unsubscribed = false) AND (deleted = false) AND (temp = false))",
            "using": "btree"
          },
          {
            "name": "index_contacts_with_rolling_12_month_sales",
            "fields": [
              "rolling_12_month_sales"
            ],
            "where": "(rolling_12_month_sales > (0)::numeric)",
            "using": "btree"
          },
          {
            "name": "index_search_contacts",
            "fields": [
              "tenant_id",
              "company_id",
              "first_name",
              "last_name",
              "rolling_12_month_sales"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "(NOT temp)",
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_contacts",
            "fields": [
              "platform_id",
              "printsmith_id",
              "external_id",
              "id"
            ],
            "where": "(platform_id IS NULL)",
            "using": "btree"
          },
          {
            "name": "tmp_fix_10",
            "fields": [
              "tenant_id",
              "rolling_12_month_sales"
            ],
            "order": {
              "rolling_12_month_sales": "desc"
            },
            "where": "(guessed_gender IS NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "countries",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "countries_enterprises",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "country_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "enterprise_id",
            "type": "integer",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_countries_enterprises",
            "fields": [
              "country_id",
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "country_states",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "country_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_country_states_on_country_id",
            "fields": [
              "country_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "country_states_holidays",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "holiday_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "country_state_id",
            "type": "integer",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_holidays_country_states",
            "fields": [
              "holiday_id",
              "country_state_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "deployments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "os",
            "type": "text"
          },
          {
            "name": "checksum",
            "type": "text"
          },
          {
            "name": "version",
            "type": "text"
          },
          {
            "name": "built_on",
            "type": "text"
          },
          {
            "name": "address",
            "type": "text"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_deployments_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_aliases",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "email",
            "type": "string"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_credentials",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "tenant_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "enterprise_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "platform",
            "type": "string",
            "null": false
          },
          {
            "name": "credentials",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_deliveries",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "message",
            "type": "jsonb",
            "default": {
            },
            "null": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_message_activities",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "email_inbox_id",
            "type": "integer"
          },
          {
            "name": "last_email_message_id",
            "type": "integer"
          },
          {
            "name": "last_scan",
            "type": "datetime"
          },
          {
            "name": "forward_scan_id",
            "type": "integer"
          },
          {
            "name": "reverse_scan_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_soft_bounces",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "email_address",
            "type": "string"
          },
          {
            "name": "soft_bounce_count",
            "type": "integer",
            "default": 0
          }
        ],
        "indexes": [
          {
            "name": "index_email_soft_bounces_count",
            "fields": [
              "tenant_id",
              "soft_bounce_count",
              "email_address"
            ],
            "where": "(soft_bounce_count >= 3)",
            "using": "btree"
          },
          {
            "name": "index_email_soft_bounces_on_email_address",
            "fields": [
              "email_address"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_statuses",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "email_address",
            "type": "string"
          },
          {
            "name": "status",
            "type": "integer"
          },
          {
            "name": "info",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_tags",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "label_id",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "label_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          }
        ],
        "indexes": [
          {
            "name": "index_email_tags_on_label_id",
            "fields": [
              "label_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_email_tags_on_label_type",
            "fields": [
              "label_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_email_tags_on_name",
            "fields": [
              "name"
            ],
            "using": "btree"
          },
          {
            "name": "index_email_tags_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_email_tags_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_tags_emails",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "email_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "email_tag_id",
            "type": "integer",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_email_tags_emails_on_email_id_and_email_tag_id",
            "fields": [
              "email_id",
              "email_tag_id"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "email_template_categories",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "email_template_id",
            "type": "integer"
          },
          {
            "name": "category",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_template_fields",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "email_template_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "required",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_template_values",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "email_template_field_id",
            "type": "integer"
          },
          {
            "name": "element_id",
            "type": "integer"
          },
          {
            "name": "element_type",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_templates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "subject",
            "type": "string",
            "limit": 255
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "key",
            "type": "text"
          },
          {
            "name": "shell",
            "type": "boolean",
            "default": false
          },
          {
            "name": "wrapper_id",
            "type": "integer"
          },
          {
            "name": "hidden",
            "type": "boolean",
            "default": false
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "auto_cc",
            "type": "boolean",
            "default": false
          },
          {
            "name": "auto_cc_sales_rep",
            "type": "boolean",
            "default": false
          },
          {
            "name": "archived",
            "type": "boolean",
            "default": false
          },
          {
            "name": "production_location_id",
            "type": "integer"
          },
          {
            "name": "default_attach",
            "type": "boolean",
            "default": false
          },
          {
            "name": "copied_email_template_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "copied_similarity",
            "type": "integer",
            "default": 0
          },
          {
            "name": "copied_root_email_template_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "copied_depth",
            "type": "integer",
            "default": 0
          },
          {
            "name": "root_similarity",
            "type": "integer",
            "default": 0
          },
          {
            "name": "use_roboto",
            "type": "boolean"
          }
        ],
        "indexes": [
          {
            "name": "index_email_templates_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_email_templates_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_validation_reset_contact_ids",
        "primary_key": "contact_id",
        "primary_key_type": "bigint",
        "columns": [

        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": "contact_id",
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "email_validations",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "address",
            "type": "string"
          },
          {
            "name": "code",
            "type": "string"
          },
          {
            "name": "parent_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "fixed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "rescan_needed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "pending_rescan",
            "type": "boolean",
            "default": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_email_validations_contact_created",
            "fields": [
              "contact_id",
              "created_at",
              "tenant_id",
              "enterprise_id",
              "code"
            ],
            "order": {
              "created_at": "desc"
            },
            "using": "btree"
          },
          {
            "name": "index_email_validations_tenant_id",
            "fields": [
              "tenant_id",
              "enterprise_id",
              "contact_id",
              "created_at",
              "code"
            ],
            "order": {
              "created_at": "desc"
            },
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "emails",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "to",
            "type": "text"
          },
          {
            "name": "from",
            "type": "text"
          },
          {
            "name": "read",
            "type": "boolean"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "from_user_id",
            "type": "integer"
          },
          {
            "name": "to_user_id",
            "type": "integer"
          },
          {
            "name": "direction",
            "type": "string",
            "limit": 255
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string",
            "limit": 255
          },
          {
            "name": "subject",
            "type": "text"
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "email_id",
            "type": "string"
          },
          {
            "name": "thread_id",
            "type": "string"
          },
          {
            "name": "processed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "labels",
            "type": "text"
          },
          {
            "name": "sending_as_user_id",
            "type": "integer"
          },
          {
            "name": "cc",
            "type": "string"
          },
          {
            "name": "attachment_uuid",
            "type": "string"
          },
          {
            "name": "test",
            "type": "boolean",
            "default": false
          },
          {
            "name": "bcc",
            "type": "string"
          },
          {
            "name": "failed_reason",
            "type": "string"
          },
          {
            "name": "message_id",
            "type": "string"
          },
          {
            "name": "error_backoff",
            "type": "datetime"
          },
          {
            "name": "bulk",
            "type": "boolean"
          },
          {
            "name": "prospect_status_item_contact_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "emails_created_at_idx",
            "fields": [
              "created_at"
            ],
            "where": "(processed = false)",
            "using": "btree"
          },
          {
            "name": "emails_message_id_idx",
            "fields": [
              "message_id"
            ],
            "using": "btree"
          },
          {
            "name": "emails_tenant_id_email_id_idx",
            "fields": [
              "tenant_id",
              "email_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_emails_on_context_id_and_context_type",
            "fields": [
              "context_id",
              "context_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_emails_on_from_user_id",
            "fields": [
              "from_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_emails_on_thread_id_and_id",
            "fields": [
              "thread_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_emails_on_to_user_id",
            "fields": [
              "to_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_emails_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "emails_trackers",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "email_id",
            "type": "integer"
          },
          {
            "name": "tracker_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_email_trackers_tacker",
            "fields": [
              "tracker_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "enterprise_business_welcomes",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "financial_year",
            "type": "integer"
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_enterprise_business_welcomes_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "enterprise_salestargets",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "prospect_status_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "amount",
            "type": "integer"
          },
          {
            "name": "items",
            "type": "integer"
          },
          {
            "name": "lead_type_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_enterprise_salestargets_on_lead_type_id",
            "fields": [
              "lead_type_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "enterprise_togglefields",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "field",
            "type": "string",
            "limit": 40
          },
          {
            "name": "read_only",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "enterprises",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "show_eula",
            "type": "boolean",
            "default": false
          },
          {
            "name": "eula_body",
            "type": "text"
          },
          {
            "name": "setup_user",
            "type": "string"
          },
          {
            "name": "setup_password",
            "type": "string"
          },
          {
            "name": "campaign_test_address",
            "type": "string"
          },
          {
            "name": "unsubscribe_template",
            "type": "text"
          },
          {
            "name": "banner_id",
            "type": "integer"
          },
          {
            "name": "default_email_template_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "campaign_approval_address",
            "type": "string"
          },
          {
            "name": "intercom_app_id",
            "type": "string"
          },
          {
            "name": "freshchat_token",
            "type": "string"
          },
          {
            "name": "portal_estimate_comment_template_id",
            "type": "integer"
          },
          {
            "name": "portal_estimate_approved_template_id",
            "type": "integer"
          },
          {
            "name": "portal_estimate_canceled_template_id",
            "type": "integer"
          },
          {
            "name": "portal_estimate_copy",
            "type": "text"
          },
          {
            "name": "default_company_emailt_id",
            "type": "integer"
          },
          {
            "name": "default_contact_emailt_id",
            "type": "integer"
          },
          {
            "name": "default_estimate_emailt_id",
            "type": "integer"
          },
          {
            "name": "default_order_emailt_id",
            "type": "integer"
          },
          {
            "name": "default_sale_emailt_id",
            "type": "integer"
          },
          {
            "name": "currency_locale",
            "type": "string"
          },
          {
            "name": "statement_template_name",
            "type": "text"
          },
          {
            "name": "statement_template",
            "type": "text"
          },
          {
            "name": "pdf_gen_link",
            "type": "text"
          },
          {
            "name": "default_salestarget_amount",
            "type": "integer"
          },
          {
            "name": "default_salestarget_number",
            "type": "integer"
          },
          {
            "name": "deleted_at",
            "type": "datetime"
          },
          {
            "name": "api_token",
            "type": "string"
          },
          {
            "name": "default_inquiry_emailt_id",
            "type": "integer"
          },
          {
            "name": "connection_type",
            "type": "string",
            "default": "printsmith"
          },
          {
            "name": "locale",
            "type": "string",
            "default": "en",
            "null": false
          },
          {
            "name": "portal_proof_comment_template_id",
            "type": "integer"
          },
          {
            "name": "portal_proof_approved_template_id",
            "type": "integer"
          },
          {
            "name": "portal_proof_copy",
            "type": "text"
          },
          {
            "name": "brand_colors",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "platform_type",
            "type": "string"
          },
          {
            "name": "default_roboto_font",
            "type": "boolean"
          },
          {
            "name": "agi_brand",
            "type": "boolean"
          },
          {
            "name": "show_language",
            "type": "boolean",
            "default": false
          },
          {
            "name": "default_shipment_emailt_id",
            "type": "integer"
          },
          {
            "name": "show_multi_users",
            "type": "boolean",
            "default": false
          },
          {
            "name": "platform_name",
            "type": "string"
          },
          {
            "name": "tenant_create_identities",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_edit_identities",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_ses_verification",
            "type": "boolean",
            "default": false
          },
          {
            "name": "default_tenant_id",
            "type": "integer"
          },
          {
            "name": "enabled_lang",
            "type": "string",
            "default": [
              "en",
              "en_KKA"
            ],
            "array": true
          },
          {
            "name": "email_blacklist",
            "type": "text"
          },
          {
            "name": "api_base_url",
            "type": "string"
          },
          {
            "name": "api_base_token",
            "type": "string"
          },
          {
            "name": "api_username",
            "type": "string"
          },
          {
            "name": "api_password",
            "type": "string"
          },
          {
            "name": "default_marketing_name_base",
            "type": "string"
          },
          {
            "name": "default_website_base",
            "type": "string"
          },
          {
            "name": "default_facebook",
            "type": "string"
          },
          {
            "name": "default_twitter",
            "type": "string"
          },
          {
            "name": "default_instagram",
            "type": "string"
          },
          {
            "name": "default_youtube",
            "type": "string"
          },
          {
            "name": "default_linked_in",
            "type": "string"
          },
          {
            "name": "csv_col_sep",
            "type": "string",
            "default": ","
          },
          {
            "name": "platform_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "currency_decimal",
            "type": "string",
            "default": "default"
          },
          {
            "name": "business_welcome",
            "type": "text"
          },
          {
            "name": "business_growth",
            "type": "integer",
            "default": 5
          },
          {
            "name": "default_proof_emailt_id",
            "type": "integer"
          },
          {
            "name": "default_revision_emailt_id",
            "type": "integer"
          },
          {
            "name": "default_proof_reminder_emailt_id",
            "type": "integer"
          },
          {
            "name": "starter_pack_url",
            "type": "string"
          },
          {
            "name": "online_help_url",
            "type": "string"
          },
          {
            "name": "user_signature_template",
            "type": "text"
          },
          {
            "name": "proof_banner_id",
            "type": "integer"
          },
          {
            "name": "marketing_banner",
            "type": "string"
          },
          {
            "name": "docs_second",
            "type": "boolean",
            "default": false
          },
          {
            "name": "default_blog",
            "type": "string"
          },
          {
            "name": "default_request_quote",
            "type": "string"
          },
          {
            "name": "default_pinterest",
            "type": "string"
          },
          {
            "name": "marketing_section_url",
            "type": "string"
          },
          {
            "name": "job_titles",
            "type": "string"
          },
          {
            "name": "business_primary_focus",
            "type": "string"
          },
          {
            "name": "bs_benchmark_revenue",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 7.0
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "estimate_elements",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "estimate_id",
            "type": "integer"
          },
          {
            "name": "element_id",
            "type": "integer"
          },
          {
            "name": "element_type",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_estimate_elements_on_element_id_and_element_type",
            "fields": [
              "element_id",
              "element_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimate_elements_on_estimate_id",
            "fields": [
              "estimate_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimate_elements_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "estimates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "grand_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "printsmith_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "status",
            "type": "string",
            "limit": 255
          },
          {
            "name": "deleted_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "on_pending_list",
            "type": "boolean"
          },
          {
            "name": "wanted_by",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "off_pending_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "reorder_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "salesrep_id",
            "type": "integer"
          },
          {
            "name": "notes_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "special_instructions_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "documentlocation_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "total_cost",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "source_taken_by",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_by",
            "type": "string",
            "limit": 255
          },
          {
            "name": "customer_po",
            "type": "string",
            "limit": 255
          },
          {
            "name": "estimate_notes",
            "type": "text"
          },
          {
            "name": "invoice_number",
            "type": "string",
            "limit": 255
          },
          {
            "name": "price_sub_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "price_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "costed",
            "type": "boolean"
          },
          {
            "name": "firm_wanted_by_date",
            "type": "boolean"
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "source_estimate_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_invoice_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "voided",
            "type": "boolean"
          },
          {
            "name": "converted_invoice_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "converted_invoice_number",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_estimate_number",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_invoice_number",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "actioned",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tax",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "grand_total_inc_tax",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "overdue_actioned",
            "type": "boolean",
            "default": false
          },
          {
            "name": "needs_pdf",
            "type": "boolean",
            "default": true
          },
          {
            "name": "key",
            "type": "string"
          },
          {
            "name": "ordered_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "ready",
            "type": "boolean",
            "default": false
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "assocation_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "source_account_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_contact_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "production_location_id",
            "type": "integer"
          },
          {
            "name": "public_token",
            "type": "string"
          },
          {
            "name": "instructions",
            "type": "text"
          },
          {
            "name": "workflow_status",
            "type": "string"
          },
          {
            "name": "follow_up_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "follow_up_count",
            "type": "integer"
          },
          {
            "name": "remote_update_required",
            "type": "boolean",
            "default": false
          },
          {
            "name": "reason",
            "type": "string"
          },
          {
            "name": "pdf_id",
            "type": "integer"
          },
          {
            "name": "source_created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "source_updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "taken_by_id",
            "type": "integer"
          },
          {
            "name": "contact_group_id",
            "type": "integer"
          },
          {
            "name": "rounded_amount",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "taken_by_user_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "report_name",
            "type": "string"
          },
          {
            "name": "pdf_error_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "retry_location_update",
            "type": "boolean",
            "default": false
          },
          {
            "name": "archived_at",
            "type": "datetime"
          },
          {
            "name": "archived_user_id",
            "type": "integer"
          },
          {
            "name": "retry_archive",
            "type": "boolean",
            "default": false
          },
          {
            "name": "parent_contact_id",
            "type": "integer"
          },
          {
            "name": "reason_value",
            "type": "string"
          },
          {
            "name": "dirty_skip_pdf",
            "type": "boolean",
            "default": false
          },
          {
            "name": "job_descriptions",
            "type": "text"
          },
          {
            "name": "last_refreshed_at",
            "type": "datetime"
          },
          {
            "name": "proof_by",
            "type": "datetime"
          },
          {
            "name": "web",
            "type": "boolean"
          },
          {
            "name": "holdstate_id",
            "type": "integer"
          },
          {
            "name": "portal_key",
            "type": "string"
          },
          {
            "name": "approval_status",
            "type": "string"
          },
          {
            "name": "remote_sales_rep_update",
            "type": "boolean"
          },
          {
            "name": "remote_proof_by_update",
            "type": "boolean"
          },
          {
            "name": "retry_convert_update",
            "type": "boolean"
          },
          {
            "name": "inquiry_id",
            "type": "integer"
          },
          {
            "name": "inquiry_auto",
            "type": "boolean"
          },
          {
            "name": "converted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          },
          {
            "name": "sales_rep_platform_id",
            "type": "string"
          },
          {
            "name": "tmp_data",
            "type": "jsonb",
            "default": {
            }
          }
        ],
        "indexes": [
          {
            "name": "corey_july_3",
            "fields": [
              "tenant_id"
            ],
            "where": "(company_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "estimates_dirty_skip_pdf_index",
            "fields": [
              "tenant_id"
            ],
            "where": "(dirty_skip_pdf = true)",
            "using": "btree"
          },
          {
            "name": "estimates_index",
            "fields": [
              "tenant_id",
              "created_at",
              "associations_complete",
              "dirty"
            ],
            "using": "btree"
          },
          {
            "name": "estimates_invoice_number",
            "fields": [
              "tenant_id",
              "invoice_number",
              "deleted",
              "voided"
            ],
            "using": "btree"
          },
          {
            "name": "estimates_retry_archive_index",
            "fields": [
              "tenant_id"
            ],
            "where": "((voided = false) AND (deleted = false) AND (retry_archive = true))",
            "using": "btree"
          },
          {
            "name": "estimates_retry_convert",
            "fields": [
              "tenant_id",
              "updated_at",
              "voided",
              "deleted"
            ],
            "where": "(retry_convert_update = true)",
            "using": "btree"
          },
          {
            "name": "estimates_tenant_id_created_at_idx",
            "fields": [
              "tenant_id",
              "created_at"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(associations_complete = false)",
            "using": "btree"
          },
          {
            "name": "estimates_tenant_id_gin_job_desc",
            "fields": [
              "tenant_id",
              "job_descriptions"
            ],
            "using": "gin"
          },
          {
            "name": "estimates_tenant_id_gin_name",
            "fields": [
              "tenant_id",
              "name"
            ],
            "using": "gin"
          },
          {
            "name": "estimates_tenant_id_idx",
            "fields": [
              "tenant_id"
            ],
            "where": "(dirty = true)",
            "using": "btree"
          },
          {
            "name": "estimates_tenant_id_idx1",
            "fields": [
              "tenant_id"
            ],
            "where": "((remote_update_required = true) AND (voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "estimates_tenant_id_idx2",
            "fields": [
              "tenant_id"
            ],
            "where": "((voided = false) AND (deleted = false) AND (retry_location_update = true))",
            "using": "btree"
          },
          {
            "name": "estimates_tenant_id_off_pending_date_idx",
            "fields": [
              "tenant_id",
              "off_pending_date"
            ],
            "using": "btree"
          },
          {
            "name": "estimates_tenant_id_source_updated_at_asc",
            "fields": [
              "tenant_id",
              "source_updated_at"
            ],
            "where": "(source_updated_at >= '2014-01-01 00:00:00'::timestamp without time zone)",
            "using": "btree"
          },
          {
            "name": "index_estimates_id_company_contact",
            "fields": [
              "tenant_id",
              "company_id",
              "contact_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_company_id",
            "fields": [
              "company_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_contact_id",
            "fields": [
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_dirty_skip_pdf",
            "fields": [
              "dirty_skip_pdf"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_inquiry_id",
            "fields": [
              "inquiry_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_location_user_id",
            "fields": [
              "location_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_pending_list",
            "fields": [
              "tenant_id"
            ],
            "where": "(on_pending_list = true)",
            "using": "btree"
          },
          {
            "name": "index_estimates_on_printsmith_id",
            "fields": [
              "printsmith_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_remote_proof_by_update",
            "fields": [
              "remote_proof_by_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_remote_sales_rep_update",
            "fields": [
              "remote_sales_rep_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_sales_rep_user_id",
            "fields": [
              "sales_rep_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_taken_by_user_id",
            "fields": [
              "taken_by_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_on_tenant_stakenby_screatedat",
            "fields": [
              "tenant_id",
              "source_taken_by",
              "source_created_at"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_ordered_date_tenant_id",
            "fields": [
              "ordered_date",
              "tenant_id",
              "grand_total",
              "voided",
              "deleted"
            ],
            "where": "((NOT voided) AND (NOT deleted))",
            "using": "btree"
          },
          {
            "name": "index_estimates_portal_key",
            "fields": [
              "portal_key"
            ],
            "using": "btree"
          },
          {
            "name": "index_estimates_retry_sales_rep_update",
            "fields": [
              "tenant_id",
              "voided",
              "deleted"
            ],
            "where": "(remote_sales_rep_update = true)",
            "using": "btree"
          },
          {
            "name": "index_estimates_status",
            "fields": [
              "tenant_id",
              "status",
              "deleted",
              "voided"
            ],
            "where": "((NOT deleted) AND (NOT voided))",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_company_source_account",
            "fields": [
              "tenant_id",
              "company_id",
              "source_account_id",
              "created_at",
              "id"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(source_account_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_company_source_contact",
            "fields": [
              "tenant_id",
              "contact_id",
              "source_contact_id",
              "created_at",
              "id"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(source_contact_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_id_sales_rep",
            "fields": [
              "tenant_id",
              "salesrep_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(salesrep_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_id_sales_rep_platform",
            "fields": [
              "tenant_id",
              "sales_rep_platform_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(sales_rep_platform_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_id_taken_by",
            "fields": [
              "tenant_id",
              "source_taken_by",
              "id",
              "taken_by_user_id"
            ],
            "where": "(source_taken_by IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_production_location",
            "fields": [
              "tenant_id",
              "production_location_id",
              "on_pending_list",
              "id"
            ],
            "where": "(on_pending_list IS TRUE)",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_stats",
            "fields": [
              "tenant_id",
              "contact_id",
              "ordered_date",
              "grand_total",
              "voided",
              "deleted",
              "id"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_estimates_tenant_taken_by_ordered_date_status",
            "fields": [
              "tenant_id",
              "taken_by_user_id",
              "ordered_date",
              "status",
              "deleted",
              "voided",
              "id"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_search_estimates",
            "fields": [
              "tenant_id",
              "invoice_number",
              "voided",
              "deleted",
              "name",
              "id"
            ],
            "where": "((NOT deleted) AND (NOT voided))",
            "using": "btree"
          },
          {
            "name": "tmp_fix_9",
            "fields": [
              "tenant_id",
              "pdf_error_count",
              "ordered_date"
            ],
            "order": {
              "ordered_date": "desc"
            },
            "where": "((needs_pdf = true) AND (ordered_date > '2015-07-01 00:00:00'::timestamp without time zone))",
            "using": "btree"
          },
          {
            "name": "tmp_sales_rep_2",
            "fields": [
              "sales_rep_user_id",
              "ordered_date"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "etl_settings",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "klass",
            "type": "string",
            "limit": 255
          },
          {
            "name": "last_created_at",
            "type": "string",
            "limit": 255
          },
          {
            "name": "last_updated_at",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "last_created_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "last_updated_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "last_created_count",
            "type": "integer"
          },
          {
            "name": "last_updated_count",
            "type": "integer"
          },
          {
            "name": "last_created_offset",
            "type": "integer",
            "default": 0
          },
          {
            "name": "last_updated_offset",
            "type": "integer",
            "default": 0
          }
        ],
        "indexes": [
          {
            "name": "tenant_id_klass",
            "fields": [
              "tenant_id",
              "klass"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "event_stats",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "event_type",
            "type": "string"
          },
          {
            "name": "data",
            "type": "jsonb"
          },
          {
            "name": "duration",
            "type": "decimal"
          },
          {
            "name": "source",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [
          {
            "name": "index_event_stats_on_created_at",
            "fields": [
              "created_at"
            ],
            "using": "btree"
          },
          {
            "name": "index_event_stats_on_tenant_event_data_source_duration",
            "fields": [
              "tenant_id",
              "event_type",
              "data",
              "source",
              "duration"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "events",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "event_type",
            "type": "string"
          },
          {
            "name": "status",
            "type": "string",
            "default": "queued"
          },
          {
            "name": "data",
            "type": "jsonb"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "schedule_date",
            "type": "datetime"
          },
          {
            "name": "source",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_events_created_status_queued",
            "fields": [
              "created_at",
              "status",
              "id"
            ],
            "where": "((status)::text = 'queued'::text)",
            "using": "btree"
          },
          {
            "name": "index_events_status_running",
            "fields": [
              "status",
              "updated_at",
              "id"
            ],
            "where": "((status)::text = 'running'::text)",
            "using": "btree"
          },
          {
            "name": "index_events_status_scheduled",
            "fields": [
              "status",
              "schedule_date",
              "id"
            ],
            "where": "((status)::text = 'scheduled'::text)",
            "using": "btree"
          },
          {
            "name": "index_events_tenant_type_data",
            "fields": [
              "tenant_id",
              "event_type",
              "data",
              "status",
              "id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "exclusions",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "exclusions_context_id_user_id_idx",
            "fields": [
              "context_id",
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "filter_defaults",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "section",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_filter_defaults_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_filter_defaults_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "groups",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "group_type",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "default",
            "type": "boolean",
            "default": false
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_groups_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "groups_tenants",
        "primary_key": null,
        "primary_key_type": null,
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "group_id",
            "type": "integer",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_groups_tenants_on_group_id",
            "fields": [
              "group_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_groups_tenants_on_tenant_id_and_group_id",
            "fields": [
              "tenant_id",
              "group_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": false,
          "force": "cascade"
        }
      },
      {
        "name": "hidden_email_templates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "email_template_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "hidden_holidays",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "holiday_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "hidden_lead_types",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "lead_type_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "hidden_task_types",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "task_type_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "holiday_dates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "holiday_id",
            "type": "integer"
          },
          {
            "name": "date",
            "type": "date"
          }
        ],
        "indexes": [
          {
            "name": "index_holiday_dates_on_holiday_id",
            "fields": [
              "holiday_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "holidays",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "state",
            "type": "string",
            "limit": 255
          },
          {
            "name": "year",
            "type": "integer"
          },
          {
            "name": "month",
            "type": "integer"
          },
          {
            "name": "day",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_holidays_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_holidays_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "identities",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "email_marketing",
            "type": "string"
          },
          {
            "name": "contact_name",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "last_validated",
            "type": "datetime"
          },
          {
            "name": "default",
            "type": "boolean",
            "default": false
          },
          {
            "name": "phone",
            "type": "string"
          },
          {
            "name": "address_1",
            "type": "string"
          },
          {
            "name": "address_2",
            "type": "string"
          },
          {
            "name": "suburb",
            "type": "string"
          },
          {
            "name": "state",
            "type": "string"
          },
          {
            "name": "postcode",
            "type": "string"
          },
          {
            "name": "business_hours",
            "type": "text"
          },
          {
            "name": "website",
            "type": "string"
          },
          {
            "name": "marketing_name",
            "type": "string"
          },
          {
            "name": "holiday_last_day",
            "type": "string"
          },
          {
            "name": "holiday_returning",
            "type": "string"
          },
          {
            "name": "website_url",
            "type": "string"
          },
          {
            "name": "request_quote_url",
            "type": "string"
          },
          {
            "name": "facebook",
            "type": "string"
          },
          {
            "name": "twitter",
            "type": "string"
          },
          {
            "name": "instagram",
            "type": "string"
          },
          {
            "name": "pinterest",
            "type": "string"
          },
          {
            "name": "review_url",
            "type": "string"
          },
          {
            "name": "number",
            "type": "string"
          },
          {
            "name": "blog",
            "type": "string"
          },
          {
            "name": "linked_in",
            "type": "string"
          },
          {
            "name": "youtube",
            "type": "string"
          },
          {
            "name": "email_status",
            "type": "text"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "inquiries",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "from_name",
            "type": "string"
          },
          {
            "name": "from_email",
            "type": "string"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "pinned",
            "type": "boolean",
            "default": false
          },
          {
            "name": "priority",
            "type": "integer",
            "default": 1
          },
          {
            "name": "inquiry_type",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "first_name",
            "type": "string"
          },
          {
            "name": "last_name",
            "type": "string"
          },
          {
            "name": "postcode",
            "type": "string"
          },
          {
            "name": "phone",
            "type": "string"
          },
          {
            "name": "company_name",
            "type": "string"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "replied",
            "type": "datetime"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "lead_type_id",
            "type": "integer"
          },
          {
            "name": "lead_source",
            "type": "string"
          },
          {
            "name": "active_inquiry",
            "type": "boolean",
            "default": false
          },
          {
            "name": "invoice_number",
            "type": "string"
          },
          {
            "name": "inquiry_status",
            "type": "integer",
            "default": 0
          },
          {
            "name": "notification_ids",
            "type": "string",
            "default": [

            ],
            "array": true
          },
          {
            "name": "salesrep_id",
            "type": "integer"
          },
          {
            "name": "lost_reason",
            "type": "string"
          },
          {
            "name": "unique_id",
            "type": "integer"
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "has_asset",
            "type": "boolean"
          },
          {
            "name": "inquiry_identifier",
            "type": "integer"
          },
          {
            "name": "sales_rep_platform_id",
            "type": "string"
          },
          {
            "name": "tmp_data",
            "type": "jsonb",
            "default": {
            }
          }
        ],
        "indexes": [
          {
            "name": "index_inquiries_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_inquiries_on_unique_id_and_tenant_id",
            "fields": [
              "unique_id",
              "tenant_id"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "inquiry_attachments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "inquiry_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_inquiry_attachments_on_inquiry_id",
            "fields": [
              "inquiry_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "interest_categories",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "interest_type",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_interest_categories_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "interest_contexts",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "interest_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "interest_type",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_interest_contexts_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "interests",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "interest_category_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_interests_on_interest_category_id",
            "fields": [
              "interest_category_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "invoice_elements",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "invoice_id",
            "type": "integer"
          },
          {
            "name": "element_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "element_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          }
        ],
        "indexes": [
          {
            "name": "index_invoice_elements_on_element_id_and_element_type",
            "fields": [
              "element_id",
              "element_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoice_elements_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "invoices",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "grand_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "printsmith_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "deleted_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "completed",
            "type": "boolean"
          },
          {
            "name": "pickup_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "wanted_by",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "off_pending_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "reorder_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "salesrep_id",
            "type": "integer"
          },
          {
            "name": "notes_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "special_instructions_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "documentlocation_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "total_cost",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "source_taken_by",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_by",
            "type": "string",
            "limit": 255
          },
          {
            "name": "customer_po",
            "type": "string",
            "limit": 255
          },
          {
            "name": "estimate_notes",
            "type": "string",
            "limit": 255
          },
          {
            "name": "invoice_number",
            "type": "string",
            "limit": 255
          },
          {
            "name": "price_sub_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "price_total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "costed",
            "type": "boolean"
          },
          {
            "name": "firm_wanted_by_date",
            "type": "boolean"
          },
          {
            "name": "on_pending_list",
            "type": "boolean"
          },
          {
            "name": "production_location_id",
            "type": "integer"
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "source_invoice_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_estimate_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "voided",
            "type": "boolean"
          },
          {
            "name": "converted_invoice_number",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_invoice_number",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_estimate_number",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "tax",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "grand_total_inc_tax",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "overdue_actioned",
            "type": "boolean",
            "default": false
          },
          {
            "name": "key",
            "type": "string"
          },
          {
            "name": "needs_pdf",
            "type": "boolean",
            "default": true
          },
          {
            "name": "ordered_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "ready",
            "type": "boolean",
            "default": false
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "assocation_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "source_contact_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "source_account_id",
            "type": "integer",
            "limit": 8
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "public_token",
            "type": "string"
          },
          {
            "name": "instructions",
            "type": "text"
          },
          {
            "name": "source_created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "source_updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "pdf_id",
            "type": "integer"
          },
          {
            "name": "accounting_month",
            "type": "integer"
          },
          {
            "name": "accounting_year",
            "type": "integer"
          },
          {
            "name": "sales_summary_id",
            "type": "integer"
          },
          {
            "name": "taken_by_id",
            "type": "integer"
          },
          {
            "name": "contact_group_id",
            "type": "integer"
          },
          {
            "name": "rounded_amount",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "daily_accounting_day",
            "type": "integer"
          },
          {
            "name": "daily_accounting_month",
            "type": "integer"
          },
          {
            "name": "daily_accounting_year",
            "type": "integer"
          },
          {
            "name": "daily_sales_summary_id",
            "type": "integer"
          },
          {
            "name": "taken_by_user_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "report_name",
            "type": "string"
          },
          {
            "name": "remote_update_required",
            "type": "boolean"
          },
          {
            "name": "pdf_error_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "retry_location_update",
            "type": "boolean",
            "default": false
          },
          {
            "name": "amount_due",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "parent_contact_id",
            "type": "integer"
          },
          {
            "name": "dirty_skip_pdf",
            "type": "boolean",
            "default": false
          },
          {
            "name": "job_descriptions",
            "type": "text"
          },
          {
            "name": "last_refreshed_at",
            "type": "datetime"
          },
          {
            "name": "proof_by",
            "type": "datetime"
          },
          {
            "name": "web",
            "type": "boolean"
          },
          {
            "name": "reorder_followed_up",
            "type": "datetime"
          },
          {
            "name": "holdstate_id",
            "type": "integer"
          },
          {
            "name": "remote_sales_rep_update",
            "type": "boolean"
          },
          {
            "name": "remote_po_update",
            "type": "boolean"
          },
          {
            "name": "remote_proof_by_update",
            "type": "boolean"
          },
          {
            "name": "inquiry_id",
            "type": "integer"
          },
          {
            "name": "portal_key",
            "type": "string"
          },
          {
            "name": "proof_approval_status",
            "type": "string"
          },
          {
            "name": "proof_approved_id",
            "type": "integer"
          },
          {
            "name": "proof_id",
            "type": "integer"
          },
          {
            "name": "converted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "source_invoice_external_id",
            "type": "string"
          },
          {
            "name": "meta_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "sale_id",
            "type": "integer"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          },
          {
            "name": "invoice_type",
            "type": "integer",
            "default": 0
          },
          {
            "name": "sales_rep_platform_id",
            "type": "string"
          },
          {
            "name": "tmp_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "source_salesrep_id",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "corey_july_4",
            "fields": [
              "tenant_id"
            ],
            "where": "(company_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_deferred_sales",
            "fields": [
              "tenant_id",
              "grand_total",
              "pickup_date",
              "voided"
            ],
            "where": "(((COALESCE((platform_data ->> 'deferred'::text), 'false'::text))::boolean = true) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoiced_sales",
            "fields": [
              "tenant_id",
              "grand_total",
              "pickup_date",
              "voided"
            ],
            "where": "(((COALESCE((platform_data ->> 'invoiced'::text), 'false'::text))::boolean = true) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoices_accounting_month_year",
            "fields": [
              "tenant_id",
              "accounting_month",
              "accounting_year",
              "pickup_date",
              "grand_total",
              "rounded_amount",
              "voided",
              "deleted"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoices_company_pending",
            "fields": [
              "company_id",
              "on_pending_list",
              "deleted",
              "voided",
              "id"
            ],
            "where": "((on_pending_list = true) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_company_stats",
            "fields": [
              "company_id",
              "pickup_date",
              "deleted",
              "voided",
              "total_cost",
              "grand_total_inc_tax"
            ],
            "where": "((pickup_date IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_contact_id_orders",
            "fields": [
              "contact_id",
              "pickup_date",
              "voided",
              "deleted",
              "id"
            ],
            "where": "((pickup_date IS NOT NULL) AND (NOT voided) AND (NOT deleted))",
            "using": "btree"
          },
          {
            "name": "index_invoices_contact_id_web_voided",
            "fields": [
              "contact_id",
              "web",
              "voided"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_contact_lists",
            "fields": [
              "contact_id",
              "grand_total",
              "on_pending_list",
              "pickup_date",
              "ordered_date",
              "sales_rep_user_id",
              "taken_by_user_id",
              "web",
              "voided",
              "deleted"
            ],
            "where": "((NOT deleted) AND (NOT voided))",
            "using": "btree"
          },
          {
            "name": "index_invoices_daily_sales_summary_id_totals",
            "fields": [
              "daily_sales_summary_id",
              "grand_total",
              "rounded_amount"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_id_company_contact",
            "fields": [
              "tenant_id",
              "company_id",
              "contact_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_accounting_year",
            "fields": [
              "accounting_year"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_company_id",
            "fields": [
              "company_id",
              "id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_company_id_and_pickup_date",
            "fields": [
              "company_id",
              "pickup_date"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_dirty_skip_pdf",
            "fields": [
              "dirty_skip_pdf"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_external_id_and_company_id_and_tenant_id",
            "fields": [
              "external_id",
              "company_id",
              "tenant_id"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "index_invoices_on_inquiry_id",
            "fields": [
              "inquiry_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_location_user_id",
            "fields": [
              "location_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_pending_list",
            "fields": [
              "tenant_id"
            ],
            "where": "(on_pending_list = true)",
            "using": "btree"
          },
          {
            "name": "index_invoices_on_pickup_date",
            "fields": [
              "pickup_date"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_pickup_date_tenant_sales_rep_taken_by",
            "fields": [
              "pickup_date",
              "tenant_id",
              "voided",
              "deleted",
              "sales_rep_user_id",
              "taken_by_user_id",
              "location_user_id",
              "grand_total",
              "rounded_amount",
              "accounting_month",
              "accounting_year"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoices_on_printsmith_id",
            "fields": [
              "printsmith_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_production_location_id",
            "fields": [
              "production_location_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_remote_po_update",
            "fields": [
              "remote_po_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_remote_proof_by_update",
            "fields": [
              "remote_proof_by_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_remote_sales_rep_update",
            "fields": [
              "remote_sales_rep_update"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_remote_update_required",
            "fields": [
              "remote_update_required"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_reorder",
            "fields": [
              "reorder_date",
              "reorder_followed_up",
              "tenant_id",
              "pickup_date",
              "contact_id",
              "company_id",
              "deleted",
              "voided"
            ],
            "where": "((reorder_followed_up IS NULL) AND (pickup_date IS NOT NULL) AND (voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoices_on_sale_id",
            "fields": [
              "sale_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_sales_rep_accounting_pickup_grand_total",
            "fields": [
              "tenant_id",
              "sales_rep_user_id",
              "accounting_month",
              "accounting_year",
              "pickup_date",
              "grand_total",
              "voided",
              "deleted"
            ],
            "where": "((deleted = false) AND (voided = false) AND (pickup_date IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_invoices_on_sales_rep_user_id",
            "fields": [
              "sales_rep_user_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_source_created_at",
            "fields": [
              "source_created_at"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_tenant_id_and_company_id_and_grand_total",
            "fields": [
              "tenant_id",
              "company_id",
              "grand_total",
              "dirty"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_tenant_id_and_ordered_date",
            "fields": [
              "tenant_id",
              "ordered_date"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_on_tenant_stakenby_screatedat",
            "fields": [
              "tenant_id",
              "source_taken_by",
              "source_created_at"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_ordered_date_tenant_id",
            "fields": [
              "ordered_date",
              "tenant_id",
              "grand_total",
              "voided",
              "deleted"
            ],
            "where": "((deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_platform_id",
            "fields": [
              "tenant_id",
              "platform_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_portal_key",
            "fields": [
              "portal_key",
              "id",
              "deleted",
              "voided"
            ],
            "where": "((portal_key IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_retry_sales_rep_update",
            "fields": [
              "tenant_id",
              "voided",
              "deleted"
            ],
            "where": "(remote_sales_rep_update = true)",
            "using": "btree"
          },
          {
            "name": "index_invoices_sales_summary_id_pickup_date",
            "fields": [
              "sales_summary_id",
              "pickup_date"
            ],
            "where": "(sales_summary_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_invoices_sales_summary_id_totals",
            "fields": [
              "sales_summary_id",
              "grand_total",
              "rounded_amount"
            ],
            "using": "btree"
          },
          {
            "name": "index_invoices_source_invoice_platform_id",
            "fields": [
              "tenant_id",
              "voided",
              "deleted"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_invoices_source_shipment_platform_id",
            "fields": [
              "tenant_id",
              "voided",
              "deleted"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_invoices_taken_by_pickup_date_cost",
            "fields": [
              "taken_by_user_id",
              "pickup_date",
              "total_cost",
              "deleted",
              "voided"
            ],
            "where": "((pickup_date IS NOT NULL) AND (total_cost IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_accounting",
            "fields": [
              "tenant_id",
              "id",
              "printsmith_id",
              "pickup_date",
              "deleted",
              "voided",
              "accounting_month",
              "daily_accounting_month"
            ],
            "where": "((pickup_date > '2014-12-31 00:00:00'::timestamp without time zone) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)) AND ((accounting_month IS NULL) OR (daily_accounting_month IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_company_pickup",
            "fields": [
              "tenant_id",
              "company_id",
              "pickup_date",
              "voided",
              "deleted"
            ],
            "where": "((pickup_date IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_company_source_account",
            "fields": [
              "tenant_id",
              "company_id",
              "source_account_id",
              "created_at",
              "id"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(source_account_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_contact_source_contact",
            "fields": [
              "tenant_id",
              "contact_id",
              "source_contact_id",
              "created_at",
              "id"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(source_contact_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_id_pickup_date_sales",
            "fields": [
              "tenant_id",
              "pickup_date",
              "accounting_month",
              "accounting_year",
              "voided",
              "deleted"
            ],
            "where": "((pickup_date IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_id_sales_rep",
            "fields": [
              "tenant_id",
              "salesrep_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(salesrep_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_id_sales_rep_platform",
            "fields": [
              "tenant_id",
              "sales_rep_platform_id",
              "id",
              "sales_rep_user_id",
              "location_user_id"
            ],
            "where": "(sales_rep_platform_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_id_taken_by",
            "fields": [
              "tenant_id",
              "source_taken_by",
              "id",
              "taken_by_user_id"
            ],
            "where": "(source_taken_by IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_platform_id",
            "fields": [
              "tenant_id",
              "platform_id",
              "deleted",
              "voided",
              "id"
            ],
            "where": "(((voided = false) OR (voided IS NULL)) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_printsmith_id_voided",
            "fields": [
              "tenant_id",
              "printsmith_id",
              "voided",
              "id"
            ],
            "where": "((voided = false) OR (voided IS NULL))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_production_location",
            "fields": [
              "tenant_id",
              "production_location_id",
              "voided",
              "deleted",
              "on_pending_list",
              "id"
            ],
            "where": "((voided IS FALSE) AND (deleted IS FALSE) AND (on_pending_list IS TRUE))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_sales_rep_location_created_at",
            "fields": [
              "tenant_id",
              "salesrep_id",
              "location_user_id",
              "created_at",
              "id"
            ],
            "order": {
              "created_at": "desc"
            },
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_sales_rep_platform_location_created_at",
            "fields": [
              "tenant_id",
              "sales_rep_platform_id",
              "location_user_id",
              "created_at",
              "id"
            ],
            "order": {
              "created_at": "desc"
            },
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_source_shipment_platform_id",
            "fields": [
              "id",
              "tenant_id",
              "deleted",
              "voided"
            ],
            "where": "(((voided = false) OR (voided IS NULL)) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_invoices_tenant_stats",
            "fields": [
              "tenant_id",
              "contact_id",
              "ordered_date",
              "grand_total",
              "voided",
              "deleted",
              "id"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_search_orders",
            "fields": [
              "tenant_id",
              "wanted_by",
              "invoice_number",
              "voided",
              "deleted",
              "name",
              "id"
            ],
            "where": "((pickup_date IS NULL) AND (NOT deleted) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "index_search_sales",
            "fields": [
              "tenant_id",
              "pickup_date",
              "invoice_number",
              "voided",
              "deleted",
              "name",
              "id"
            ],
            "where": "((pickup_date IS NOT NULL) AND (NOT deleted) AND (NOT voided))",
            "using": "btree"
          },
          {
            "name": "invoices_accounting_year_month",
            "fields": [
              "tenant_id",
              "accounting_year",
              "accounting_month",
              "voided"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_contact_id_ordered_date_idx",
            "fields": [
              "contact_id",
              "ordered_date"
            ],
            "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "invoices_contact_id_ordered_date_idx1",
            "fields": [
              "contact_id",
              "ordered_date"
            ],
            "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL) AND (pickup_date IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "invoices_contact_id_pickup_date_grand_total_idx",
            "fields": [
              "contact_id",
              "pickup_date",
              "grand_total"
            ],
            "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "invoices_contact_id_pickup_date_idx",
            "fields": [
              "contact_id",
              "pickup_date"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_contact_id_pickup_date_idx1",
            "fields": [
              "contact_id",
              "pickup_date"
            ],
            "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL) AND (pickup_date IS NOT NULL))",
            "using": "btree"
          },
          {
            "name": "invoices_dirty_skip_pdf_index",
            "fields": [
              "tenant_id"
            ],
            "where": "(dirty_skip_pdf = true)",
            "using": "btree"
          },
          {
            "name": "invoices_index",
            "fields": [
              "key",
              "ordered_date",
              "voided",
              "deleted",
              "needs_pdf",
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_ordered_date_index",
            "fields": [
              "ordered_date"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_taken_by",
            "fields": [
              "taken_by_user_id",
              "source_taken_by"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_created_at_idx",
            "fields": [
              "tenant_id",
              "created_at"
            ],
            "order": {
              "created_at": "desc"
            },
            "where": "(associations_complete = false)",
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_gin_name",
            "fields": [
              "tenant_id",
              "name"
            ],
            "using": "gin"
          },
          {
            "name": "invoices_tenant_id_idx1",
            "fields": [
              "tenant_id"
            ],
            "where": "(dirty = true)",
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_invoice_number_idx",
            "fields": [
              "tenant_id",
              "invoice_number"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_pickup_date_accounting_year_accounting_m_idx",
            "fields": [
              "tenant_id",
              "pickup_date",
              "accounting_year",
              "accounting_month",
              "daily_accounting_day",
              "daily_accounting_month",
              "daily_accounting_year"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_printsmith_id_idx",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "where": "(dirty = true)",
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_printsmith_id_idx1",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_source_updated_at_asc",
            "fields": [
              "tenant_id",
              "source_updated_at"
            ],
            "where": "(source_updated_at >= '2014-01-01 00:00:00'::timestamp without time zone)",
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_updated_at_voided_deleted_remote_po_upda_idx",
            "fields": [
              "tenant_id",
              "updated_at",
              "voided",
              "deleted",
              "remote_po_update"
            ],
            "where": "(remote_po_update = true)",
            "using": "btree"
          },
          {
            "name": "invoices_tenant_id_updated_at_voided_deleted_remote_proof_b_idx",
            "fields": [
              "tenant_id",
              "updated_at",
              "voided",
              "deleted",
              "remote_proof_by_update"
            ],
            "where": "(remote_proof_by_update = true)",
            "using": "btree"
          },
          {
            "name": "invoices_unpaid_invoices_checker",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "where": "((pickup_date IS NOT NULL) AND (amount_due > (0)::numeric) AND (deleted = false) AND ((voided IS NULL) OR (voided = false)))",
            "using": "btree"
          },
          {
            "name": "invoices_web",
            "fields": [
              "web",
              "company_id",
              "voided",
              "deleted"
            ],
            "where": "((web = true) AND (deleted = false) AND (voided = false))",
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_invoices",
            "fields": [
              "platform_id",
              "printsmith_id",
              "external_id",
              "id"
            ],
            "where": "(platform_id IS NULL)",
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_invoices_source_salesrep_id",
            "fields": [
              "id",
              "source_salesrep_id"
            ],
            "where": "((tmp_data ->> 'invoices_source_salesrep_id'::text) IS NULL)",
            "using": "btree"
          },
          {
            "name": "tmp_fix_1",
            "fields": [
              "tenant_id",
              "contact_id",
              "company_id"
            ],
            "where": "(company_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "tmp_fix_11",
            "fields": [
              "tenant_id"
            ],
            "where": "((retry_location_update = true) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
            "using": "btree"
          },
          {
            "name": "tmp_fix_3",
            "fields": [
              "tenant_id",
              "taken_by_user_id",
              "source_taken_by",
              "id",
              "created_at"
            ],
            "using": "btree"
          },
          {
            "name": "tmp_fix_8",
            "fields": [
              "tenant_id",
              "pdf_error_count",
              "ordered_date"
            ],
            "order": {
              "ordered_date": "desc"
            },
            "where": "((needs_pdf = true) AND (ordered_date > '2015-07-01 00:00:00'::timestamp without time zone))",
            "using": "btree"
          },
          {
            "name": "tmp_invoice_number",
            "fields": [
              "invoice_number"
            ],
            "using": "btree"
          },
          {
            "name": "tmp_invoices_filter",
            "fields": [
              "tenant_id",
              "reorder_date",
              "pickup_date",
              "amount_due",
              "voided",
              "deleted"
            ],
            "using": "btree"
          },
          {
            "name": "tmp_sales_rep_1",
            "fields": [
              "sales_rep_user_id",
              "pickup_date"
            ],
            "where": "((voided = false) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "unpaid_invoices_idx",
            "fields": [
              "tenant_id"
            ],
            "where": "((voided IS DISTINCT FROM true) AND (deleted = false) AND (pickup_date IS NOT NULL) AND (amount_due > (0)::numeric))",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "job_stats",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "job_name",
            "type": "string"
          },
          {
            "name": "job_id",
            "type": "integer"
          },
          {
            "name": "job_start",
            "type": "datetime"
          },
          {
            "name": "job_end",
            "type": "datetime"
          },
          {
            "name": "exception_type",
            "type": "string"
          },
          {
            "name": "exception_message",
            "type": "string"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "lead_sources",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_lead_sources_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "lead_types",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "lead_status_visibility",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "active_status_version",
            "type": "integer"
          },
          {
            "name": "status",
            "type": "integer",
            "default": 2
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "is_default",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "lists",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "filter",
            "type": "jsonb",
            "default": {
            },
            "null": false
          },
          {
            "name": "user_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "site_wide",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_lists_on_filter",
            "fields": [
              "filter"
            ],
            "using": "gin"
          },
          {
            "name": "index_lists_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "locations",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "default",
            "type": "boolean",
            "default": false
          },
          {
            "name": "identity_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_locations_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "marketing_groups",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "email_template_ids",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "campaign_ids",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "excluded_campaign_ids",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "excluded_email_template_ids",
            "type": "integer",
            "default": [

            ],
            "array": true
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "meeting_attendees",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "meeting_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "email_address",
            "type": "text"
          },
          {
            "name": "status",
            "type": "integer"
          },
          {
            "name": "custom_time_zone",
            "type": "text"
          },
          {
            "name": "note",
            "type": "text"
          },
          {
            "name": "user_calendar_entry_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "meetings",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "message",
            "type": "text"
          },
          {
            "name": "location",
            "type": "text"
          },
          {
            "name": "title",
            "type": "text"
          },
          {
            "name": "summary",
            "type": "text"
          },
          {
            "name": "start_date",
            "type": "datetime"
          },
          {
            "name": "end_date",
            "type": "datetime"
          },
          {
            "name": "status",
            "type": "text"
          },
          {
            "name": "note",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "calendar_needs_update",
            "type": "boolean",
            "default": false
          },
          {
            "name": "user_calendar_entry_id",
            "type": "string"
          },
          {
            "name": "reminder_sent",
            "type": "boolean",
            "default": false
          },
          {
            "name": "prospect_status_item_contact_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "news",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [
          {
            "name": "index_news_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "next_activities",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "scheduled",
            "type": "datetime"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_next_activities_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "notes",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "message",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "title",
            "type": "text"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "prospect_status_item_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "original_users",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "target_user_id",
            "type": "integer"
          },
          {
            "name": "uuid",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "pdfs",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "page_count",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "key",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_pdfs_on_key_and_external_id",
            "fields": [
              "key",
              "external_id"
            ],
            "using": "btree"
          },
          {
            "name": "pdfs_index",
            "fields": [
              "key",
              "printsmith_id"
            ],
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_pdfs",
            "fields": [
              "platform_id",
              "printsmith_id",
              "external_id",
              "id"
            ],
            "where": "(platform_id IS NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "pending_attachments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "uuid",
            "type": "string"
          },
          {
            "name": "file_name",
            "type": "string"
          },
          {
            "name": "path",
            "type": "string"
          },
          {
            "name": "complete",
            "type": "boolean"
          },
          {
            "name": "inline",
            "type": "boolean",
            "default": false
          },
          {
            "name": "needs_asset",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "error",
            "type": "string"
          },
          {
            "name": "warn",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "bulk",
            "type": "boolean"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "phone_calls",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "phoneable_id",
            "type": "integer"
          },
          {
            "name": "phoneable_type",
            "type": "string",
            "limit": 255
          },
          {
            "name": "to",
            "type": "string",
            "limit": 255
          },
          {
            "name": "subject",
            "type": "string",
            "limit": 255
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "call_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "phone",
            "type": "string"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "call_type",
            "type": "string"
          },
          {
            "name": "twillio_message_sid",
            "type": "string"
          },
          {
            "name": "sms_status",
            "type": "string"
          },
          {
            "name": "test_number",
            "type": "string"
          },
          {
            "name": "prospect_status_item_contact_id",
            "type": "integer"
          },
          {
            "name": "twillio_message",
            "type": "string"
          },
          {
            "name": "sms_reply",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_phone_calls_on_phoneable_id_and_phoneable_type",
            "fields": [
              "phoneable_id",
              "phoneable_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_phone_calls_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_phone_calls_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "portal_comments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "context_type",
            "type": "string"
          },
          {
            "name": "context_id",
            "type": "integer"
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "proof_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "production_locations",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "printsmith_key",
            "type": "string"
          },
          {
            "name": "orderby",
            "type": "integer"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_production_locations_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_production_locations_tenant_key",
            "fields": [
              "tenant_id",
              "printsmith_key",
              "deleted",
              "id",
              "orderby",
              "name"
            ],
            "where": "((NOT deleted) AND (printsmith_key IS NOT NULL))",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "proofs",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "asset_data",
            "type": "jsonb"
          },
          {
            "name": "approval_status",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "invoice_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "revision_of_id",
            "type": "integer"
          },
          {
            "name": "revision_count",
            "type": "integer"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "number",
            "type": "integer"
          },
          {
            "name": "approval_date",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "prospect_status_item_contacts",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "prospect_status_item_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "start_date",
            "type": "datetime"
          },
          {
            "name": "due_date",
            "type": "datetime"
          },
          {
            "name": "completion_date",
            "type": "datetime"
          },
          {
            "name": "status",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "prospect_status_item_contact_unique_index",
            "fields": [
              "prospect_status_item_id",
              "contact_id",
              "tenant_id"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "prospect_status_items",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "prospect_status_id",
            "type": "integer"
          },
          {
            "name": "lead_type_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "position",
            "type": "integer"
          },
          {
            "name": "item_type",
            "type": "integer"
          },
          {
            "name": "start_after_days",
            "type": "integer"
          },
          {
            "name": "completion_time",
            "type": "integer",
            "default": 0
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "email_template_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_prospect_status_items_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_prospect_status_items_on_lead_type_id",
            "fields": [
              "lead_type_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_prospect_status_items_on_prospect_status_id",
            "fields": [
              "prospect_status_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_prospect_status_items_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "prospect_status_versions",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "lead_type_id",
            "type": "integer"
          },
          {
            "name": "version_no",
            "type": "integer"
          },
          {
            "name": "status",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_prospect_status_versions_on_lead_type_id",
            "fields": [
              "lead_type_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "prospect_statuses",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "position",
            "type": "integer"
          },
          {
            "name": "lead_type_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "tenant_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "prospect_status_version_id",
            "type": "integer",
            "default": 0
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "read_marks",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "readable_id",
            "type": "integer"
          },
          {
            "name": "readable_type",
            "type": "string",
            "null": false
          },
          {
            "name": "reader_id",
            "type": "integer"
          },
          {
            "name": "reader_type",
            "type": "string",
            "null": false
          },
          {
            "name": "timestamp",
            "type": "datetime"
          }
        ],
        "indexes": [
          {
            "name": "read_marks_reader_readable_index",
            "fields": [
              "reader_id",
              "reader_type",
              "readable_type",
              "readable_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "region_configs",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "option",
            "type": "text"
          },
          {
            "name": "value",
            "type": "text"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "report_rows",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "columns",
            "type": "integer",
            "default": [

            ],
            "array": true
          },
          {
            "name": "report_id",
            "type": "integer"
          },
          {
            "name": "position",
            "type": "integer",
            "default": 0
          }
        ],
        "indexes": [
          {
            "name": "index_report_rows_on_report_id",
            "fields": [
              "report_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "reports",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean"
          }
        ],
        "indexes": [
          {
            "name": "index_reports_on_global",
            "fields": [
              "global"
            ],
            "using": "btree"
          },
          {
            "name": "index_reports_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_reports_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_base_taxes",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "source_type",
            "type": "integer"
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "deleted",
            "type": "boolean"
          },
          {
            "name": "posted_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "source_created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "source_updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "sales_base_id",
            "type": "integer"
          },
          {
            "name": "source_sales_base_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "total_tax",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "total_non_taxable",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "total_taxable",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_sales_base_taxes_tenant_id_taxability",
            "fields": [
              "tenant_id",
              "deleted",
              "source_type",
              "source_sales_base_id",
              "total_taxable",
              "total_non_taxable"
            ],
            "using": "btree"
          },
          {
            "name": "sales_base_taxes_printsmith_id_tenant_id_idx",
            "fields": [
              "printsmith_id",
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_categories",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "glaccount",
            "type": "string"
          },
          {
            "name": "interest",
            "type": "boolean"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "nonsale",
            "type": "boolean"
          },
          {
            "name": "salescatid",
            "type": "integer"
          },
          {
            "name": "shipping",
            "type": "boolean"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_sales_categories_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_rep_updates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_reps",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "dirty",
            "type": "boolean"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "location_id",
            "type": "integer"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "latest_context_date",
            "type": "datetime"
          },
          {
            "name": "auto_mapped",
            "type": "boolean",
            "default": false
          },
          {
            "name": "add_in_table_list",
            "type": "boolean",
            "default": false
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "corey_july_2",
            "fields": [
              "tenant_id"
            ],
            "where": "(user_id IS NOT NULL)",
            "using": "btree"
          },
          {
            "name": "index_sales_reps_on_location_printsmith_id",
            "fields": [
              "location_id",
              "printsmith_id",
              "deleted"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_reps_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_reps_on_user_printsmith_id",
            "fields": [
              "user_id",
              "printsmith_id",
              "deleted"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_reps_tenant_printsmith_id_loction_not_null",
            "fields": [
              "tenant_id",
              "printsmith_id",
              "location_id"
            ],
            "where": "(location_id IS NOT NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_summaries",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "arbalance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "arcard",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "arcash",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "archarge",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "archeck",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "bankdeposit",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "cardcount",
            "type": "integer"
          },
          {
            "name": "closeoutdate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "composite",
            "type": "boolean"
          },
          {
            "name": "datarepaired",
            "type": "boolean"
          },
          {
            "name": "depositbalance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "discounts",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "draw",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "employees",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "enddate",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "fmaccount",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "forfeitdeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "invoicetotal",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "isdeleted",
            "type": "boolean"
          },
          {
            "name": "markups",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "newdeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "nontaxreceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "nontaxsales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "numperiods",
            "type": "integer"
          },
          {
            "name": "onaccount",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "onaccountbalance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "otherhours",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "poscard",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "poscash",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "poscheck",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "presshours",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "productionhours",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "refundchecks",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "returndeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "shiftcloseout",
            "type": "boolean"
          },
          {
            "name": "shipping",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "squarefeet",
            "type": "integer"
          },
          {
            "name": "taxonreceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "taxonsales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "taxablereceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "taxablesales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totaldeletes",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totalmemos",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totalnosalememos",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totalother",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totalreceipts",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totalsales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "totalvoid",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "variance",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "wiptotaldone",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "wiptotalest",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "wiptotalinv",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "daily",
            "type": "boolean",
            "default": false
          },
          {
            "name": "monthly",
            "type": "boolean",
            "default": false
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "applydeposits",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "accounting_day",
            "type": "integer"
          },
          {
            "name": "accounting_month",
            "type": "integer"
          },
          {
            "name": "accounting_year",
            "type": "integer"
          },
          {
            "name": "daily_accounting_day",
            "type": "integer"
          },
          {
            "name": "daily_accounting_month",
            "type": "integer"
          },
          {
            "name": "daily_accounting_year",
            "type": "integer"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "accurate",
            "type": "boolean",
            "default": false
          },
          {
            "name": "difference",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "invoice_count",
            "type": "integer"
          },
          {
            "name": "avg_sale",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "attempts",
            "type": "integer",
            "default": 0
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_sales_summaries_on_accounting_month",
            "fields": [
              "accounting_month"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_summaries_on_accounting_year",
            "fields": [
              "accounting_year"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_summaries_on_printsmith_id_and_tenant_id",
            "fields": [
              "printsmith_id",
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_summaries_tenant_printsmith_id_not_deleted",
            "fields": [
              "tenant_id",
              "printsmith_id",
              "deleted",
              "id"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "sales_summaries_tenant_id_closeoutdate_idx",
            "fields": [
              "tenant_id",
              "closeoutdate"
            ],
            "order": {
              "closeoutdate": "desc"
            },
            "using": "btree"
          },
          {
            "name": "sales_summaries_tenant_id_daily_accounting_year_daily_accou_idx",
            "fields": [
              "tenant_id",
              "daily_accounting_year",
              "daily_accounting_month",
              "daily_accounting_day"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_summary_pickups",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "source_account_history_item_id",
            "type": "integer"
          },
          {
            "name": "account_history_item_id",
            "type": "integer"
          },
          {
            "name": "source_sales_summary_id",
            "type": "integer"
          },
          {
            "name": "sales_summary_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "printsmith_id",
            "type": "integer"
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "ready",
            "type": "boolean",
            "default": false
          },
          {
            "name": "boolean",
            "type": "boolean",
            "default": false
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "assocation_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "integer",
            "type": "integer",
            "default": 0
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_sales_summary_pickups_on_source_account_history_item_id",
            "fields": [
              "source_account_history_item_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_summary_pickups_on_source_sales_summary_id",
            "fields": [
              "source_sales_summary_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_sales_summary_source_account_history_item",
            "fields": [
              "tenant_id",
              "source_account_history_item_id",
              "source_sales_summary_id",
              "deleted"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "sales_summary_pickups_tenant_id_printsmith_id_idx",
            "fields": [
              "tenant_id",
              "printsmith_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sales_tag_by_months",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "total_sales",
            "type": "integer"
          },
          {
            "name": "total_invoice_count",
            "type": "integer"
          },
          {
            "name": "total_companies",
            "type": "integer"
          },
          {
            "name": "tags_data",
            "type": "jsonb",
            "default": {
            },
            "null": false
          },
          {
            "name": "month_date",
            "type": "date"
          },
          {
            "name": "update_required",
            "type": "boolean",
            "default": true
          }
        ],
        "indexes": [
          {
            "name": "index_sales_tag_by_months_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "salestargets",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "target_type",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "amount",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "items",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_salestargets_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "saved_reports",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "data",
            "type": "jsonb"
          },
          {
            "name": "ytd",
            "type": "jsonb",
            "default": {
            },
            "null": false
          },
          {
            "name": "report_type",
            "type": "string"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "shared_users",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "shared_id",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "shipments",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "grand_total",
            "type": "decimal"
          },
          {
            "name": "price_total",
            "type": "decimal"
          },
          {
            "name": "price_sub_total",
            "type": "decimal"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "voided",
            "type": "boolean",
            "default": false
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "needs_pdf",
            "type": "boolean",
            "default": false
          },
          {
            "name": "shipment_type",
            "type": "string"
          },
          {
            "name": "mbe_tracking",
            "type": "string"
          },
          {
            "name": "courier_tracking",
            "type": "string"
          },
          {
            "name": "courier_weight",
            "type": "decimal"
          },
          {
            "name": "shipment_date",
            "type": "datetime"
          },
          {
            "name": "source_account_platform_id",
            "type": "string"
          },
          {
            "name": "source_invoice_platform_id",
            "type": "string"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "pdf_error_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "key",
            "type": "string"
          },
          {
            "name": "associations_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "association_checks",
            "type": "integer",
            "default": 0
          },
          {
            "name": "mbe_service_id",
            "type": "integer"
          },
          {
            "name": "packge_type_id",
            "type": "integer"
          },
          {
            "name": "goods_type_id",
            "type": "integer"
          },
          {
            "name": "courier_id",
            "type": "integer"
          },
          {
            "name": "courier_service_id",
            "type": "integer"
          },
          {
            "name": "delivered",
            "type": "boolean",
            "default": false
          },
          {
            "name": "delivered_date",
            "type": "datetime"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "pdf_id",
            "type": "integer"
          },
          {
            "name": "not_to_invoice",
            "type": "boolean",
            "default": false
          },
          {
            "name": "dirty",
            "type": "boolean",
            "default": false
          },
          {
            "name": "total_cost",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_platform_id",
            "type": "string"
          },
          {
            "name": "tmp_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "source_salesrep_id",
            "type": "string"
          },
          {
            "name": "accounting_month",
            "type": "integer"
          },
          {
            "name": "accounting_year",
            "type": "integer"
          },
          {
            "name": "sales_summary_id",
            "type": "integer"
          },
          {
            "name": "daily_accounting_day",
            "type": "integer"
          },
          {
            "name": "daily_accounting_month",
            "type": "integer"
          },
          {
            "name": "daily_accounting_year",
            "type": "integer"
          },
          {
            "name": "daily_sales_summary_id",
            "type": "integer"
          },
          {
            "name": "inquiry_id",
            "type": "integer"
          },
          {
            "name": "source",
            "type": "string"
          },
          {
            "name": "price_freight",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "price_freight_vat",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "freight_cost",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "total_freight_cost",
            "type": "decimal",
            "default": 0.0
          },
          {
            "name": "mbe_cost",
            "type": "decimal",
            "default": 0.0
          }
        ],
        "indexes": [
          {
            "name": "index_shipments_contact_date",
            "fields": [
              "tenant_id",
              "contact_id",
              "shipment_date",
              "deleted"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_shipments_contact_id_orders",
            "fields": [
              "contact_id",
              "shipment_date",
              "deleted",
              "id"
            ],
            "where": "((shipment_date IS NOT NULL) AND (NOT deleted))",
            "using": "btree"
          },
          {
            "name": "index_shipments_date_contact",
            "fields": [
              "shipment_date",
              "contact_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_company_sales_rep",
            "fields": [
              "company_id",
              "sales_rep_platform_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_inquiry_id",
            "fields": [
              "inquiry_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_courier_id",
            "fields": [
              "tenant_id",
              "courier_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_courier_service_id",
            "fields": [
              "tenant_id",
              "courier_service_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_delivered",
            "fields": [
              "tenant_id",
              "delivered"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_inquiry_id",
            "fields": [
              "tenant_id",
              "inquiry_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_not_to_invoice",
            "fields": [
              "tenant_id",
              "not_to_invoice"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_platform_id",
            "fields": [
              "tenant_id",
              "platform_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_shipment_date",
            "fields": [
              "tenant_id",
              "shipment_date"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_shipment_type",
            "fields": [
              "tenant_id",
              "shipment_type"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_on_tenant_id_and_source_invoice_platform_id",
            "fields": [
              "tenant_id",
              "source_invoice_platform_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_shipments_status_date_total",
            "fields": [
              "tenant_id",
              "status",
              "shipment_date",
              "deleted",
              "grand_total"
            ],
            "where": "(((status)::text = ANY (ARRAY[('CREATED'::character varying)::text, ('DRAFT_WAYBILL'::character varying)::text, ('INVOICED'::character varying)::text])) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "index_shipments_tenant_shipment_date_status",
            "fields": [
              "tenant_id",
              "shipment_date",
              "status"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "index_shipmesssssnts_3",
            "fields": [
              "tenant_id",
              "shipment_date",
              "status"
            ],
            "where": "(deleted = false)",
            "using": "btree"
          },
          {
            "name": "shipments_company_id_shipment_date_idx",
            "fields": [
              "company_id",
              "shipment_date"
            ],
            "where": "(NOT deleted)",
            "using": "btree"
          },
          {
            "name": "shipments_status_index",
            "fields": [
              "tenant_id"
            ],
            "where": "((status)::text = ANY (ARRAY[('CREATED'::character varying)::text, ('DRAFT_WAYBILL'::character varying)::text, ('INVOICED'::character varying)::text]))",
            "using": "btree"
          },
          {
            "name": "shipments_tenant_id_associations_complete_association_check_idx",
            "fields": [
              "tenant_id",
              "associations_complete",
              "association_checks"
            ],
            "where": "(associations_complete = false)",
            "using": "btree"
          },
          {
            "name": "shipments_tenant_id_dirty_idx",
            "fields": [
              "tenant_id",
              "dirty"
            ],
            "where": "(dirty = true)",
            "using": "btree"
          },
          {
            "name": "shipments_tenant_id_shipment_date_contact_id_deleted_idx",
            "fields": [
              "tenant_id",
              "shipment_date",
              "contact_id",
              "deleted"
            ],
            "where": "((shipment_date IS NOT NULL) AND (deleted = false))",
            "using": "btree"
          },
          {
            "name": "tmp_backfill_index_shipments_source_salesrep_id",
            "fields": [
              "id",
              "source_salesrep_id"
            ],
            "where": "((tmp_data ->> 'shipments_source_salesrep_id'::text) IS NULL)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "short_urls",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "slug",
            "type": "string"
          },
          {
            "name": "clicked",
            "type": "integer",
            "default": 0
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sms_template_categories",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "sms_template_id",
            "type": "integer"
          },
          {
            "name": "category",
            "type": "integer"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "sms_templates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "text"
          },
          {
            "name": "body",
            "type": "text"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "user_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "wrapper_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_sms_templates_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "statistics",
        "primary_key": "id",
        "primary_key_type": "bigserial",
        "columns": [
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "month",
            "type": "integer"
          },
          {
            "name": "year",
            "type": "integer"
          },
          {
            "name": "financial_year",
            "type": "integer"
          },
          {
            "name": "rank",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "total",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "average",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "statistic_for",
            "type": "string"
          },
          {
            "name": "needs_recalc",
            "type": "boolean",
            "default": false
          },
          {
            "name": "accounting_year",
            "type": "integer"
          },
          {
            "name": "accounting_month",
            "type": "integer"
          },
          {
            "name": "accounting_day",
            "type": "integer"
          },
          {
            "name": "calendar_year",
            "type": "integer"
          },
          {
            "name": "calendar_month",
            "type": "integer"
          },
          {
            "name": "calendar_day",
            "type": "integer"
          },
          {
            "name": "total_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "invoice_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "cash_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "adjustments",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "day",
            "type": "integer"
          },
          {
            "name": "markups",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "department_cash_sales",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "finance_charges",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "location_id",
            "type": "integer"
          },
          {
            "name": "date",
            "type": "date"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "order_intake",
            "type": "decimal"
          },
          {
            "name": "shipments",
            "type": "decimal"
          },
          {
            "name": "invoiced_sales",
            "type": "decimal"
          },
          {
            "name": "deferred_sales",
            "type": "decimal"
          }
        ],
        "indexes": [
          {
            "name": "index_statistics_on_accounting_month",
            "fields": [
              "accounting_month"
            ],
            "using": "btree"
          },
          {
            "name": "index_statistics_on_accounting_year",
            "fields": [
              "accounting_year"
            ],
            "using": "btree"
          },
          {
            "name": "index_statistics_on_location_id",
            "fields": [
              "location_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_statistics_on_statistic_for",
            "fields": [
              "statistic_for"
            ],
            "using": "btree"
          },
          {
            "name": "index_statistics_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          },
          {
            "name": "statistics_date_tenant_id_idx",
            "fields": [
              "date",
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "statistics_tenant_id_accounting_year_accounting_month_stati_idx",
            "fields": [
              "tenant_id",
              "accounting_year",
              "accounting_month",
              "statistic_for"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": "bigserial",
          "force": "cascade"
        }
      },
      {
        "name": "suppressed_addresses",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "email_address",
            "type": "string"
          },
          {
            "name": "date",
            "type": "string"
          },
          {
            "name": "reason",
            "type": "string"
          },
          {
            "name": "ignore",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [
          {
            "name": "index_suppressed_addresses_tenant_trimmed_email",
            "fields": [
              "tenant_id",
              "ignore",
              "email_address",
              "id"
            ],
            "where": "(ignore = false)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tag_categories",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "word_matches",
            "type": "string",
            "default": "",
            "null": false
          },
          {
            "name": "up_to_date",
            "type": "boolean",
            "default": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "hidden",
            "type": "boolean",
            "default": false
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "performing_cleanup",
            "type": "boolean",
            "default": false
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "hidden_tenants",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "system_match",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_tag_categories_tenant",
            "fields": [
              "tenant_id",
              "enterprise_id",
              "name",
              "hidden_tenants",
              "hidden",
              "performing_cleanup",
              "deleted",
              "id"
            ],
            "where": "((NOT hidden) AND (NOT performing_cleanup) AND (NOT deleted))",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tag_category_contexts",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "tag_category_id",
            "type": "integer"
          },
          {
            "name": "last_scanned_id",
            "type": "integer",
            "default": 0
          },
          {
            "name": "last_scanned_offset",
            "type": "integer",
            "default": 0
          },
          {
            "name": "last_scanned",
            "type": "datetime"
          },
          {
            "name": "scan_progress",
            "type": "jsonb",
            "default": {
            }
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tags",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "taggable_id",
            "type": "integer"
          },
          {
            "name": "taggable_type",
            "type": "string"
          },
          {
            "name": "tag_category_id",
            "type": "integer"
          },
          {
            "name": "manual",
            "type": "boolean",
            "default": false
          },
          {
            "name": "deleted",
            "type": "boolean",
            "default": false
          },
          {
            "name": "parent_id",
            "type": "integer"
          },
          {
            "name": "bubbled",
            "type": "boolean"
          }
        ],
        "indexes": [
          {
            "name": "index_tags_company",
            "fields": [
              "taggable_id",
              "taggable_type",
              "tag_category_id",
              "deleted"
            ],
            "where": "((NOT deleted) AND ((taggable_type)::text = 'Company'::text))",
            "using": "btree"
          },
          {
            "name": "index_tags_contact",
            "fields": [
              "taggable_id",
              "taggable_type",
              "tag_category_id",
              "deleted"
            ],
            "where": "((NOT deleted) AND ((taggable_type)::text = 'Contact'::text))",
            "using": "btree"
          },
          {
            "name": "index_tags_estimate",
            "fields": [
              "taggable_id",
              "taggable_type",
              "tag_category_id",
              "deleted"
            ],
            "where": "((NOT deleted) AND ((taggable_type)::text = 'Estimate'::text))",
            "using": "btree"
          },
          {
            "name": "index_tags_invoice",
            "fields": [
              "taggable_id",
              "taggable_type",
              "tag_category_id",
              "deleted"
            ],
            "where": "((NOT deleted) AND ((taggable_type)::text = 'Invoice'::text))",
            "using": "btree"
          },
          {
            "name": "index_tags_on_tag_category_id",
            "fields": [
              "tag_category_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tags_on_taggable_type_and_taggable_id",
            "fields": [
              "taggable_type",
              "taggable_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tags_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tags_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "taken_by_updates",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "taken_by_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "taken_bys",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "location_id",
            "type": "integer"
          },
          {
            "name": "latest_context_date",
            "type": "datetime"
          },
          {
            "name": "auto_mapped",
            "type": "boolean",
            "default": false
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          }
        ],
        "indexes": [
          {
            "name": "index_taken_bys_on_location_id",
            "fields": [
              "location_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_taken_bys_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_taken_bys_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "targets",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "location_id",
            "type": "integer"
          },
          {
            "name": "taken_by_user_id",
            "type": "integer"
          },
          {
            "name": "sales_rep_user_id",
            "type": "integer"
          },
          {
            "name": "location_user_id",
            "type": "integer"
          },
          {
            "name": "month",
            "type": "integer"
          },
          {
            "name": "year",
            "type": "integer"
          },
          {
            "name": "total",
            "type": "integer"
          },
          {
            "name": "klass",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_targets_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "task_repeats",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "task_id",
            "type": "integer"
          },
          {
            "name": "repeat_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [

        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "task_types",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          }
        ],
        "indexes": [
          {
            "name": "index_task_types_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_task_types_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tasks",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "mode",
            "type": "string"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "text"
          },
          {
            "name": "taskable_id",
            "type": "integer"
          },
          {
            "name": "taskable_type",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "start_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "end_date",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "assigned_user_id",
            "type": "integer"
          },
          {
            "name": "add_to_calendar",
            "type": "boolean",
            "default": false
          },
          {
            "name": "position",
            "type": "integer"
          },
          {
            "name": "calendar_needs_update",
            "type": "boolean",
            "default": false
          },
          {
            "name": "user_calendar_entry_id",
            "type": "string"
          },
          {
            "name": "assigned_user_calendar_entry_id",
            "type": "string"
          },
          {
            "name": "final_comment",
            "type": "text"
          },
          {
            "name": "completed_at",
            "type": "datetime"
          },
          {
            "name": "task_type_id",
            "type": "integer"
          },
          {
            "name": "portal_task",
            "type": "boolean",
            "default": false
          },
          {
            "name": "notify_due",
            "type": "boolean",
            "default": false
          },
          {
            "name": "notify_due_email_sent",
            "type": "boolean",
            "default": false
          },
          {
            "name": "notify_date",
            "type": "datetime"
          },
          {
            "name": "task_repeat_id",
            "type": "integer"
          },
          {
            "name": "notification_ids",
            "type": "string",
            "default": [

            ],
            "array": true
          },
          {
            "name": "inquiry_id",
            "type": "integer"
          },
          {
            "name": "prospect_status_item_contact_id",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_tasks_on_entry_id",
            "fields": [
              "user_calendar_entry_id",
              "assigned_user_calendar_entry_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tasks_on_notify",
            "fields": [
              "notify_due_email_sent",
              "notify_due",
              "notify_date"
            ],
            "where": "((notify_due_email_sent = false) AND (notify_due = true))",
            "using": "btree"
          },
          {
            "name": "index_tasks_on_position",
            "fields": [
              "position"
            ],
            "using": "btree"
          },
          {
            "name": "index_tasks_on_taskable_type_and_taskable_id",
            "fields": [
              "taskable_type",
              "taskable_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tasks_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tasks_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tenants",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "number",
            "type": "string",
            "limit": 255
          },
          {
            "name": "printsmith_ip",
            "type": "string",
            "limit": 255
          },
          {
            "name": "printsmith_username",
            "type": "string",
            "limit": 255
          },
          {
            "name": "printsmith_password",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "printsmith_database",
            "type": "string",
            "limit": 255
          },
          {
            "name": "inital_import_complete",
            "type": "boolean",
            "default": false
          },
          {
            "name": "allow_access",
            "type": "boolean"
          },
          {
            "name": "disable_import",
            "type": "boolean"
          },
          {
            "name": "time_zone",
            "type": "string",
            "default": "UTC"
          },
          {
            "name": "state",
            "type": "string",
            "limit": 255
          },
          {
            "name": "connection_success_counter",
            "type": "integer",
            "default": 0
          },
          {
            "name": "connection_failure_counter",
            "type": "integer",
            "default": 0
          },
          {
            "name": "last_connection_failure_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "connection_status",
            "type": "boolean"
          },
          {
            "name": "financial_year_start_day",
            "type": "integer",
            "default": 1
          },
          {
            "name": "financial_year_start_month",
            "type": "integer",
            "default": 1
          },
          {
            "name": "financial_year_end_day",
            "type": "integer",
            "default": 31
          },
          {
            "name": "financial_year_end_month",
            "type": "integer",
            "default": 12
          },
          {
            "name": "estimate_name",
            "type": "string"
          },
          {
            "name": "ngrok",
            "type": "boolean",
            "default": false
          },
          {
            "name": "printsmith_port",
            "type": "integer"
          },
          {
            "name": "report_url",
            "type": "string"
          },
          {
            "name": "invoice_name",
            "type": "string"
          },
          {
            "name": "ngrok_authtoken",
            "type": "string"
          },
          {
            "name": "ngrok_remote_addr",
            "type": "string"
          },
          {
            "name": "ngrok_uuid",
            "type": "string"
          },
          {
            "name": "s3_region",
            "type": "text"
          },
          {
            "name": "s3_bucket",
            "type": "text"
          },
          {
            "name": "s3_access_key",
            "type": "text"
          },
          {
            "name": "s3_client_secret",
            "type": "text"
          },
          {
            "name": "estimate_views",
            "type": "integer",
            "default": 0
          },
          {
            "name": "wanted_by_adjustments",
            "type": "integer",
            "default": 0
          },
          {
            "name": "needs_backup",
            "type": "boolean"
          },
          {
            "name": "multi_location",
            "type": "boolean",
            "default": false
          },
          {
            "name": "taken_by_for_locations",
            "type": "boolean",
            "default": false
          },
          {
            "name": "sales_rep_for_locations",
            "type": "boolean",
            "default": false
          },
          {
            "name": "training",
            "type": "boolean",
            "default": false
          },
          {
            "name": "beta_tester",
            "type": "boolean"
          },
          {
            "name": "printsmith_version",
            "type": "string"
          },
          {
            "name": "address_1",
            "type": "string"
          },
          {
            "name": "address_2",
            "type": "string"
          },
          {
            "name": "suburb",
            "type": "string"
          },
          {
            "name": "postcode",
            "type": "string"
          },
          {
            "name": "phone",
            "type": "string"
          },
          {
            "name": "email_marketing",
            "type": "string"
          },
          {
            "name": "contact_name",
            "type": "string"
          },
          {
            "name": "business_hours",
            "type": "text"
          },
          {
            "name": "pgdump_path",
            "type": "text"
          },
          {
            "name": "backup_path",
            "type": "text"
          },
          {
            "name": "local_path",
            "type": "text"
          },
          {
            "name": "last_accounting_month",
            "type": "integer"
          },
          {
            "name": "last_accounting_year",
            "type": "integer"
          },
          {
            "name": "marketing_unsubscribe_source_id",
            "type": "integer"
          },
          {
            "name": "default_email_to_test_send",
            "type": "boolean",
            "default": true
          },
          {
            "name": "display_month_first",
            "type": "boolean",
            "default": false
          },
          {
            "name": "estimate_email_template",
            "type": "integer"
          },
          {
            "name": "sale_email_template",
            "type": "integer"
          },
          {
            "name": "order_email_template",
            "type": "integer"
          },
          {
            "name": "contact_email_template",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "ngrok_needs_restart",
            "type": "boolean"
          },
          {
            "name": "most_recent_monthly_closeout_date",
            "type": "date"
          },
          {
            "name": "company_email_template",
            "type": "integer"
          },
          {
            "name": "hide_from_ladders",
            "type": "boolean",
            "default": false
          },
          {
            "name": "show_cogs",
            "type": "boolean",
            "default": true
          },
          {
            "name": "campaign_min_resend_days",
            "type": "integer",
            "default": 25
          },
          {
            "name": "cog_green_threshold",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 30.0
          },
          {
            "name": "cog_orange_threshold",
            "type": "decimal",
            "precision": 19,
            "scale": 2,
            "default": 70.0
          },
          {
            "name": "ngrok_version",
            "type": "string"
          },
          {
            "name": "ngrok_tcp_online",
            "type": "boolean",
            "default": false
          },
          {
            "name": "ngrok_http_online",
            "type": "boolean",
            "default": false
          },
          {
            "name": "week_start",
            "type": "boolean",
            "default": true
          },
          {
            "name": "allow_production_features_on_staging",
            "type": "boolean",
            "default": false
          },
          {
            "name": "campaign_monitor_client_id",
            "type": "text"
          },
          {
            "name": "website",
            "type": "string"
          },
          {
            "name": "wanted_days",
            "type": "integer",
            "default": 1
          },
          {
            "name": "email_blacklist",
            "type": "text"
          },
          {
            "name": "tenant_picker_name",
            "type": "string"
          },
          {
            "name": "marketing_name",
            "type": "string"
          },
          {
            "name": "ngrok_crt",
            "type": "text"
          },
          {
            "name": "ngrok_key",
            "type": "text"
          },
          {
            "name": "demo",
            "type": "boolean",
            "default": false
          },
          {
            "name": "printsmith_api_token",
            "type": "string"
          },
          {
            "name": "exclude_non_sales",
            "type": "boolean",
            "default": true
          },
          {
            "name": "estimate_name_list",
            "type": "string"
          },
          {
            "name": "invoice_name_list",
            "type": "string"
          },
          {
            "name": "estimate_name_default",
            "type": "string"
          },
          {
            "name": "invoice_name_default",
            "type": "string"
          },
          {
            "name": "printsmith_api_version",
            "type": "string"
          },
          {
            "name": "estimate_name_enforce",
            "type": "boolean",
            "default": false
          },
          {
            "name": "invoice_name_enforce",
            "type": "boolean",
            "default": false
          },
          {
            "name": "test_email",
            "type": "string"
          },
          {
            "name": "enforce_old_printsmith_api",
            "type": "boolean",
            "default": false
          },
          {
            "name": "banner_id",
            "type": "integer"
          },
          {
            "name": "holiday_last_day",
            "type": "string"
          },
          {
            "name": "holiday_returning",
            "type": "string"
          },
          {
            "name": "show_company_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "show_contacts_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "show_estimates_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "show_orders_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "show_sales_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "website_url",
            "type": "string"
          },
          {
            "name": "request_quote_url",
            "type": "string"
          },
          {
            "name": "last_sales_report_start",
            "type": "datetime"
          },
          {
            "name": "last_sales_report_finish",
            "type": "datetime"
          },
          {
            "name": "monitor_counters",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "facebook",
            "type": "string"
          },
          {
            "name": "twitter",
            "type": "string"
          },
          {
            "name": "instagram",
            "type": "string"
          },
          {
            "name": "pinterest",
            "type": "string"
          },
          {
            "name": "printsmith_local_port",
            "type": "string",
            "default": "5432"
          },
          {
            "name": "review_url",
            "type": "string"
          },
          {
            "name": "account_history_trigger",
            "type": "boolean",
            "default": true
          },
          {
            "name": "portal_estimate_comment_template_id",
            "type": "integer"
          },
          {
            "name": "portal_estimate_approved_template_id",
            "type": "integer"
          },
          {
            "name": "portal_estimate_canceled_template_id",
            "type": "integer"
          },
          {
            "name": "owner_open_date",
            "type": "datetime"
          },
          {
            "name": "use_complex_cost",
            "type": "boolean",
            "default": false
          },
          {
            "name": "use_smtp",
            "type": "boolean",
            "default": false
          },
          {
            "name": "lead_sources",
            "type": "string"
          },
          {
            "name": "statement_template_name",
            "type": "text"
          },
          {
            "name": "statement_template",
            "type": "text"
          },
          {
            "name": "pay_url",
            "type": "string"
          },
          {
            "name": "auto_self_bcc",
            "type": "boolean",
            "default": false
          },
          {
            "name": "reorder_days",
            "type": "integer",
            "default": 1
          },
          {
            "name": "use_sms",
            "type": "boolean"
          },
          {
            "name": "sms_send_number",
            "type": "string"
          },
          {
            "name": "show_sales",
            "type": "boolean",
            "default": false
          },
          {
            "name": "job_titles",
            "type": "string"
          },
          {
            "name": "budget_lock",
            "type": "boolean",
            "default": false
          },
          {
            "name": "lead_to_psv",
            "type": "boolean"
          },
          {
            "name": "s3_key_created",
            "type": "datetime"
          },
          {
            "name": "backup_api_key",
            "type": "string"
          },
          {
            "name": "show_inquiries",
            "type": "boolean",
            "default": false
          },
          {
            "name": "default_inquiry_user_id",
            "type": "integer"
          },
          {
            "name": "allow_email_validation",
            "type": "boolean",
            "default": false
          },
          {
            "name": "inquiry_email_template",
            "type": "integer"
          },
          {
            "name": "blog",
            "type": "string"
          },
          {
            "name": "linked_in",
            "type": "string"
          },
          {
            "name": "inquiry_auto_assign_estimate",
            "type": "boolean",
            "default": true
          },
          {
            "name": "portal_proof_comment_template_id",
            "type": "integer"
          },
          {
            "name": "portal_proof_approved_template_id",
            "type": "integer"
          },
          {
            "name": "portal_proof_approved_production_location_id",
            "type": "integer"
          },
          {
            "name": "portal_proof_amended_production_location_id",
            "type": "integer"
          },
          {
            "name": "mbe_refresh_token",
            "type": "string"
          },
          {
            "name": "mbe_refresh_token_expire_at",
            "type": "datetime"
          },
          {
            "name": "mbe_access_token",
            "type": "string"
          },
          {
            "name": "mbe_access_token_expire_at",
            "type": "datetime"
          },
          {
            "name": "mbe_tenant_id",
            "type": "string"
          },
          {
            "name": "mbe_multistore_id",
            "type": "string"
          },
          {
            "name": "mbe_store_id",
            "type": "string"
          },
          {
            "name": "address_3",
            "type": "string"
          },
          {
            "name": "mbe_username",
            "type": "string"
          },
          {
            "name": "mbe_password",
            "type": "string"
          },
          {
            "name": "source_created_at",
            "type": "datetime"
          },
          {
            "name": "source_updated_at",
            "type": "datetime"
          },
          {
            "name": "show_lead_types",
            "type": "boolean",
            "default": false
          },
          {
            "name": "use_new_lead",
            "type": "boolean"
          },
          {
            "name": "default_lead_type_id",
            "type": "integer"
          },
          {
            "name": "mbe_api_base_url",
            "type": "string"
          },
          {
            "name": "mbe_api_basic_auth_token",
            "type": "string"
          },
          {
            "name": "shipment_email_template",
            "type": "integer"
          },
          {
            "name": "inquiry_notifications",
            "type": "jsonb"
          },
          {
            "name": "youtube",
            "type": "string"
          },
          {
            "name": "show_shipments_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "show_inquiries_tags",
            "type": "boolean",
            "default": true
          },
          {
            "name": "leads_notify",
            "type": "boolean",
            "default": true
          },
          {
            "name": "platform_data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "business_plan",
            "type": "boolean"
          },
          {
            "name": "follow_up_days",
            "type": "integer",
            "default": 1
          },
          {
            "name": "follow_up_sync",
            "type": "boolean",
            "default": true
          },
          {
            "name": "new_proof_email_template",
            "type": "integer"
          },
          {
            "name": "revision_proof_email_template",
            "type": "integer"
          },
          {
            "name": "proof_reminder_email_template",
            "type": "integer"
          }
        ],
        "indexes": [
          {
            "name": "index_tenants_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "tenant_id",
            "fields": [
              "id",
              "inital_import_complete"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tokens",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "user_id",
            "type": "integer"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "access_token",
            "type": "string",
            "limit": 255
          },
          {
            "name": "refresh_token",
            "type": "string",
            "limit": 255
          },
          {
            "name": "expires_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "sync_token",
            "type": "string"
          },
          {
            "name": "gmail_sync_token",
            "type": "string"
          },
          {
            "name": "gmail_history_id",
            "type": "string"
          },
          {
            "name": "encrypted_access_token",
            "type": "string"
          },
          {
            "name": "encrypted_access_token_iv",
            "type": "string"
          },
          {
            "name": "encrypted_refresh_token",
            "type": "string"
          },
          {
            "name": "encrypted_refresh_token_iv",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_tokens_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_tokens_on_user_id",
            "fields": [
              "user_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "tracker_hits",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tracker_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "user_agent",
            "type": "text"
          },
          {
            "name": "referer",
            "type": "text"
          },
          {
            "name": "bot",
            "type": "boolean"
          },
          {
            "name": "browser_modern",
            "type": "boolean"
          },
          {
            "name": "browser",
            "type": "string"
          },
          {
            "name": "device",
            "type": "string"
          },
          {
            "name": "platform",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_tracker_hits_on_tracker_id",
            "fields": [
              "tracker_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "trackers",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "uuid",
            "type": "text"
          },
          {
            "name": "method",
            "type": "integer"
          },
          {
            "name": "path",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6,
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_trackers_on_uuid",
            "fields": [
              "uuid"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "unsubscribes",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "contact_id",
            "type": "integer"
          },
          {
            "name": "unsub_type",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "data",
            "type": "jsonb",
            "default": {
            }
          },
          {
            "name": "fixed",
            "type": "boolean",
            "default": false
          },
          {
            "name": "fixed_by_user_id",
            "type": "integer"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "indexes": [
          {
            "name": "index_unsubscribes_contact_new_email",
            "fields": [
              "contact_id",
              "unsub_type",
              "email"
            ],
            "where": "((unsub_type)::text = ANY (ARRAY[('hard_bounce'::character varying)::text, ('suppression_list'::character varying)::text]))",
            "using": "btree"
          },
          {
            "name": "index_unsubscribes_tenant_contact_type_email_fixed",
            "fields": [
              "tenant_id",
              "contact_id",
              "unsub_type",
              "email",
              "fixed"
            ],
            "where": "(fixed = false)",
            "using": "btree"
          },
          {
            "name": "index_unsubscribes_tenant_contact_type_email_not_fixed",
            "fields": [
              "tenant_id",
              "contact_id",
              "unsub_type",
              "email",
              "fixed"
            ],
            "where": "(fixed = true)",
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "users",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "manual_email",
            "type": "string",
            "limit": 255,
            "default": ""
          },
          {
            "name": "encrypted_password",
            "type": "string",
            "limit": 255,
            "default": "",
            "null": false
          },
          {
            "name": "reset_password_token",
            "type": "string",
            "limit": 255
          },
          {
            "name": "reset_password_sent_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "remember_created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "sign_in_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "current_sign_in_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "last_sign_in_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "current_sign_in_ip",
            "type": "string",
            "limit": 255
          },
          {
            "name": "last_sign_in_ip",
            "type": "string",
            "limit": 255
          },
          {
            "name": "created_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "precision": 6
          },
          {
            "name": "username",
            "type": "string",
            "limit": 255
          },
          {
            "name": "first_name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "last_name",
            "type": "string",
            "limit": 255
          },
          {
            "name": "roles_mask",
            "type": "integer"
          },
          {
            "name": "gmail_username",
            "type": "string",
            "limit": 255
          },
          {
            "name": "gmail_password",
            "type": "string",
            "limit": 255
          },
          {
            "name": "test_email",
            "type": "string",
            "limit": 255
          },
          {
            "name": "email_signature",
            "type": "text"
          },
          {
            "name": "settings",
            "type": "hstore"
          },
          {
            "name": "hide",
            "type": "boolean",
            "default": false
          },
          {
            "name": "role",
            "type": "string"
          },
          {
            "name": "deleted_at",
            "type": "datetime"
          },
          {
            "name": "task_calendar_color",
            "type": "integer"
          },
          {
            "name": "display_name",
            "type": "string"
          },
          {
            "name": "api_token",
            "type": "string"
          },
          {
            "name": "ip_whitelist",
            "type": "string"
          },
          {
            "name": "sash_id",
            "type": "integer"
          },
          {
            "name": "level",
            "type": "integer",
            "default": 0
          },
          {
            "name": "current_date_for_ui",
            "type": "date"
          },
          {
            "name": "marketing_calendar_events",
            "type": "boolean",
            "default": false
          },
          {
            "name": "eula_accepted_at",
            "type": "datetime"
          },
          {
            "name": "default_alias",
            "type": "string"
          },
          {
            "name": "enterprise_id",
            "type": "integer"
          },
          {
            "name": "banner_id",
            "type": "integer"
          },
          {
            "name": "phone",
            "type": "string"
          },
          {
            "name": "lock_sales_rep",
            "type": "boolean",
            "default": false
          },
          {
            "name": "add_task_to_my_calendar",
            "type": "boolean",
            "default": false
          },
          {
            "name": "smtp_server",
            "type": "string"
          },
          {
            "name": "smtp_port",
            "type": "integer"
          },
          {
            "name": "smtp_username",
            "type": "string"
          },
          {
            "name": "smtp_password",
            "type": "string"
          },
          {
            "name": "hide_reports",
            "type": "boolean",
            "default": false
          },
          {
            "name": "email_notifications",
            "type": "string"
          },
          {
            "name": "sms_test_number",
            "type": "string"
          },
          {
            "name": "last_token_refresh_time",
            "type": "datetime"
          },
          {
            "name": "failed_attempts",
            "type": "integer",
            "default": 0,
            "null": false
          },
          {
            "name": "unlock_token",
            "type": "string"
          },
          {
            "name": "locked_at",
            "type": "datetime"
          },
          {
            "name": "external_id",
            "type": "string"
          },
          {
            "name": "mbe_access_token",
            "type": "text"
          },
          {
            "name": "mbe_refresh_token",
            "type": "text"
          },
          {
            "name": "mbe_refresh_token_expire_at",
            "type": "datetime"
          },
          {
            "name": "platform_id",
            "type": "string"
          },
          {
            "name": "platform_data",
            "type": "jsonb"
          },
          {
            "name": "sso_onboarding",
            "type": "boolean"
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "parent_id",
            "type": "integer"
          },
          {
            "name": "business_plan",
            "type": "boolean"
          },
          {
            "name": "hide_leads",
            "type": "boolean",
            "default": false
          },
          {
            "name": "home_today",
            "type": "boolean",
            "default": false
          },
          {
            "name": "lock_set_default",
            "type": "boolean",
            "default": false
          },
          {
            "name": "bs_job_title",
            "type": "string"
          },
          {
            "name": "bs_years_exp",
            "type": "date"
          },
          {
            "name": "bs_complete_sell",
            "type": "boolean"
          },
          {
            "name": "bs_primary_sale",
            "type": "string"
          }
        ],
        "indexes": [
          {
            "name": "index_users_on_deleted_at",
            "fields": [
              "deleted_at"
            ],
            "using": "btree"
          },
          {
            "name": "index_users_on_enterprise_id",
            "fields": [
              "enterprise_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_users_on_external_id",
            "fields": [
              "external_id"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "index_users_on_reset_password_token",
            "fields": [
              "reset_password_token"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "index_users_on_unlock_token",
            "fields": [
              "unlock_token"
            ],
            "unique": true,
            "using": "btree"
          },
          {
            "name": "index_users_on_username",
            "fields": [
              "username"
            ],
            "unique": true,
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "versions",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "item_type",
            "type": "string",
            "null": false
          },
          {
            "name": "item_id",
            "type": "integer",
            "limit": 8,
            "null": false
          },
          {
            "name": "event",
            "type": "string",
            "null": false
          },
          {
            "name": "whodunnit",
            "type": "string"
          },
          {
            "name": "object",
            "type": "text"
          },
          {
            "name": "created_at",
            "type": "datetime"
          }
        ],
        "indexes": [
          {
            "name": "index_versions_on_item_type_and_item_id",
            "fields": [
              "item_type",
              "item_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "wips",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "date",
            "type": "date"
          },
          {
            "name": "wip_value",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "wip_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "completed_wip_value",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "completed_wip_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "total_wip_value",
            "type": "decimal",
            "precision": 19,
            "scale": 2
          },
          {
            "name": "total_wip_count",
            "type": "integer",
            "default": 0
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_wips_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      },
      {
        "name": "workflows",
        "primary_key": "id",
        "primary_key_type": "bigint",
        "columns": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "company_id",
            "type": "integer"
          },
          {
            "name": "user_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "global",
            "type": "boolean",
            "default": false
          },
          {
            "name": "site_wide",
            "type": "boolean",
            "default": false
          },
          {
            "name": "tenant_id",
            "type": "integer"
          },
          {
            "name": "enterprise_id",
            "type": "integer",
            "null": false
          },
          {
            "name": "created_at",
            "type": "datetime",
            "null": false
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "null": false
          }
        ],
        "indexes": [
          {
            "name": "index_workflows_on_company_id",
            "fields": [
              "company_id"
            ],
            "using": "btree"
          },
          {
            "name": "index_workflows_on_tenant_id",
            "fields": [
              "tenant_id"
            ],
            "using": "btree"
          }
        ],
        "rails_schema": {
          "primary_key": null,
          "id": null,
          "force": "cascade"
        }
      }
    ],
    "foreign_keys": [
      {
        "left": "business_plan_marketing_activities",
        "right": "enterprises"
      },
      {
        "left": "business_plan_marketing_activities",
        "right": "tenants"
      },
      {
        "left": "business_plan_sales_investments",
        "right": "business_plans"
      },
      {
        "left": "business_plan_sales_investments",
        "right": "tenants"
      },
      {
        "left": "business_plan_sales_investments",
        "right": "users"
      },
      {
        "left": "business_plans",
        "right": "tenants"
      },
      {
        "left": "calendar_entries",
        "right": "calendars",
        "name": "calendar_entries_calendar_id_fkey",
        "on_update": "cascade",
        "on_delete": "cascade"
      },
      {
        "left": "company_metrics",
        "right": "companies"
      },
      {
        "left": "company_metrics",
        "right": "tenants"
      },
      {
        "left": "enterprise_business_welcomes",
        "right": "enterprises"
      },
      {
        "left": "enterprise_salestargets",
        "right": "enterprises"
      },
      {
        "left": "enterprise_salestargets",
        "right": "prospect_statuses"
      },
      {
        "left": "groups",
        "right": "enterprises"
      },
      {
        "left": "inquiries",
        "right": "tenants"
      },
      {
        "left": "inquiry_attachments",
        "right": "inquiries"
      },
      {
        "left": "invoices",
        "right": "invoices",
        "column": "sale_id"
      },
      {
        "left": "lead_sources",
        "right": "enterprises"
      },
      {
        "left": "locations",
        "right": "tenants"
      },
      {
        "left": "news",
        "right": "enterprises"
      },
      {
        "left": "next_activities",
        "right": "tenants"
      },
      {
        "left": "prospect_status_item_contacts",
        "right": "contacts"
      },
      {
        "left": "prospect_status_item_contacts",
        "right": "prospect_status_items"
      },
      {
        "left": "prospect_status_item_contacts",
        "right": "tenants"
      },
      {
        "left": "report_rows",
        "right": "reports"
      },
      {
        "left": "sales_tag_by_months",
        "right": "tenants"
      },
      {
        "left": "salestargets",
        "right": "tenants"
      },
      {
        "left": "tags",
        "right": "tenants"
      },
      {
        "left": "tags",
        "right": "users"
      },
      {
        "left": "users",
        "right": "enterprises"
      },
      {
        "left": "wips",
        "right": "tenants"
      }
    ],
    "indexes": [
      {
        "name": "account_history_data_tenant_id_source_invoice_id_idx",
        "fields": [
          "tenant_id",
          "source_invoice_id"
        ],
        "using": "btree"
      },
      {
        "name": "activities_tenant_id_source_created_at_idx",
        "fields": [
          "tenant_id",
          "source_created_at"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "((hide = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "activity_test",
        "fields": [
          "tenant_id",
          "source_created_at"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "((estimate_id IS NOT NULL) AND (invoice_id IS NULL))",
        "using": "btree"
      },
      {
        "name": "activity_test2",
        "fields": [
          "tenant_id",
          "source_created_at"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "(invoice_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "adjustments_dirty_index",
        "fields": [
          "tenant_id"
        ],
        "where": "(dirty = true)",
        "using": "btree"
      },
      {
        "name": "adjustments_refresh_index",
        "fields": [
          "tenant_id",
          "last_refreshed_at",
          "last_refreshed_version"
        ],
        "using": "btree"
      },
      {
        "name": "api_logs_context_id_context_type_body_idx",
        "fields": [
          "context_id",
          "context_type",
          "body"
        ],
        "using": "btree"
      },
      {
        "name": "assets_context_id_context_type_file_hash_idx",
        "fields": [
          "context_id",
          "context_type",
          "file_hash"
        ],
        "using": "btree"
      },
      {
        "name": "bookmarks_context_id_user_id_context_type_idx",
        "fields": [
          "context_id",
          "user_id",
          "context_type"
        ],
        "using": "btree"
      },
      {
        "name": "calendar_entries_calendar_id_entry_ident_key",
        "fields": [
          "calendar_id",
          "entry_ident"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "calendar_ids_calendar_ids_user_id_fk_idx",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "companies_invoice_retry",
        "fields": [
          "id",
          "invoice_address_id",
          "deleted"
        ],
        "where": "(remote_account_update = true)",
        "using": "btree"
      },
      {
        "name": "companies_refresh_index",
        "fields": [
          "tenant_id",
          "last_refreshed_at",
          "last_refreshed_version"
        ],
        "using": "btree"
      },
      {
        "name": "companies_remote_account_update",
        "fields": [
          "tenant_id",
          "deleted"
        ],
        "where": "(remote_account_update = true)",
        "using": "btree"
      },
      {
        "name": "companies_sales_rep_indexes",
        "fields": [
          "sales_rep_user_id",
          "source_salesrep_id"
        ],
        "using": "btree"
      },
      {
        "name": "companies_sales_rep_platform",
        "fields": [
          "sales_rep_user_id",
          "sales_rep_platform_id"
        ],
        "using": "btree"
      },
      {
        "name": "companies_sales_rep_platform_tagger",
        "fields": [
          "tenant_id"
        ],
        "where": "((sales_rep_platform_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "companies_sales_rep_tagger",
        "fields": [
          "tenant_id"
        ],
        "where": "((source_salesrep_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "companies_tenant_id_idx",
        "fields": [
          "tenant_id"
        ],
        "where": "(dirty = true)",
        "using": "btree"
      },
      {
        "name": "companies_tenant_id_idx1",
        "fields": [
          "tenant_id"
        ],
        "where": "((needs_avg_conversion_ratio = true) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "companies_tenant_id_printsmith_id_idx",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "companies_tenant_id_rolling_12_month_rank_idx",
        "fields": [
          "tenant_id",
          "rolling_12_month_rank"
        ],
        "where": "((needs_lifetime_value_recalc = true) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "companies_tenant_id_rolling_12_month_sales_idx",
        "fields": [
          "tenant_id",
          "rolling_12_month_sales"
        ],
        "using": "btree"
      },
      {
        "name": "companies_web",
        "fields": [
          "tenant_id",
          "web",
          "deleted"
        ],
        "where": "(web = true)",
        "using": "btree"
      },
      {
        "name": "contact_sales_rep_platform_tagger",
        "fields": [
          "tenant_id"
        ],
        "where": "((sales_rep_platform_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "contact_sales_rep_tagger",
        "fields": [
          "tenant_id"
        ],
        "where": "((source_salesrep_id IS NULL) AND (sales_rep_user_id IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "contacts_associations_complete_idx",
        "fields": [
          "associations_complete"
        ],
        "where": "(associations_complete = false)",
        "using": "btree"
      },
      {
        "name": "contacts_lead_type_id_idx",
        "fields": [
          "lead_type_id"
        ],
        "where": "(prospect_status_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "contacts_prospect_status_id",
        "fields": [
          "tenant_id",
          "deleted"
        ],
        "where": "(prospect_status_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_idx",
        "fields": [
          "tenant_id"
        ],
        "where": "(remote_update_required = true)",
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_idx1",
        "fields": [
          "tenant_id"
        ],
        "where": "((rolling_12_month_sales > (1)::numeric) AND (temp = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_latest_order_date_idx",
        "fields": [
          "tenant_id",
          "latest_order_date"
        ],
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_lower_idx",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_printsmith_id_idx",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_rolling_12_month_sales_idx1",
        "fields": [
          "tenant_id",
          "rolling_12_month_sales"
        ],
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_where_contactable",
        "fields": [
          "tenant_id"
        ],
        "where": "((NOT temp) AND (NOT deleted) AND (NOT marketing_do_not_mail) AND (NOT marketing_unsubscribe) AND (NOT on_suppression_list))",
        "using": "btree"
      },
      {
        "name": "contacts_tenant_id_where_emailable",
        "fields": [
          "tenant_id",
          "id",
          "rolling_12_month_sales",
          "first_name",
          "company_id",
          "deleted",
          "email",
          "temp",
          "marketing_do_not_mail",
          "marketing_unsubscribe",
          "on_suppression_list"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "((NOT temp) AND (NOT marketing_do_not_mail) AND (NOT marketing_unsubscribe) AND (NOT on_suppression_list) AND ((email)::text ~~ '%@%'::text))",
        "using": "btree"
      },
      {
        "name": "corey_july_1",
        "fields": [
          "tenant_id",
          "source_salesrep_id",
          "created_at"
        ],
        "where": "(source_salesrep_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "corey_july_2",
        "fields": [
          "tenant_id"
        ],
        "where": "(user_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "corey_july_3",
        "fields": [
          "tenant_id"
        ],
        "where": "(company_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "corey_july_4",
        "fields": [
          "tenant_id"
        ],
        "where": "(company_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "corey_july_5",
        "fields": [
          "tenant_id",
          "deleted",
          "id"
        ],
        "where": "(company_id IS NULL)",
        "using": "btree"
      },
      {
        "name": "corey_july_6",
        "fields": [
          "tenant_id"
        ],
        "where": "((source_address_id IS NOT NULL) AND (address_id IS NULL))",
        "using": "btree"
      },
      {
        "name": "emails_created_at_idx",
        "fields": [
          "created_at"
        ],
        "where": "(processed = false)",
        "using": "btree"
      },
      {
        "name": "emails_message_id_idx",
        "fields": [
          "message_id"
        ],
        "using": "btree"
      },
      {
        "name": "emails_tenant_id_email_id_idx",
        "fields": [
          "tenant_id",
          "email_id"
        ],
        "using": "btree"
      },
      {
        "name": "estimates_dirty_skip_pdf_index",
        "fields": [
          "tenant_id"
        ],
        "where": "(dirty_skip_pdf = true)",
        "using": "btree"
      },
      {
        "name": "estimates_index",
        "fields": [
          "tenant_id",
          "created_at",
          "associations_complete",
          "dirty"
        ],
        "using": "btree"
      },
      {
        "name": "estimates_invoice_number",
        "fields": [
          "tenant_id",
          "invoice_number",
          "deleted",
          "voided"
        ],
        "using": "btree"
      },
      {
        "name": "estimates_retry_archive_index",
        "fields": [
          "tenant_id"
        ],
        "where": "((voided = false) AND (deleted = false) AND (retry_archive = true))",
        "using": "btree"
      },
      {
        "name": "estimates_retry_convert",
        "fields": [
          "tenant_id",
          "updated_at",
          "voided",
          "deleted"
        ],
        "where": "(retry_convert_update = true)",
        "using": "btree"
      },
      {
        "name": "estimates_tenant_id_created_at_idx",
        "fields": [
          "tenant_id",
          "created_at"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(associations_complete = false)",
        "using": "btree"
      },
      {
        "name": "estimates_tenant_id_gin_job_desc",
        "fields": [
          "tenant_id",
          "job_descriptions"
        ],
        "using": "gin"
      },
      {
        "name": "estimates_tenant_id_gin_name",
        "fields": [
          "tenant_id",
          "name"
        ],
        "using": "gin"
      },
      {
        "name": "estimates_tenant_id_idx",
        "fields": [
          "tenant_id"
        ],
        "where": "(dirty = true)",
        "using": "btree"
      },
      {
        "name": "estimates_tenant_id_idx1",
        "fields": [
          "tenant_id"
        ],
        "where": "((remote_update_required = true) AND (voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "estimates_tenant_id_idx2",
        "fields": [
          "tenant_id"
        ],
        "where": "((voided = false) AND (deleted = false) AND (retry_location_update = true))",
        "using": "btree"
      },
      {
        "name": "estimates_tenant_id_off_pending_date_idx",
        "fields": [
          "tenant_id",
          "off_pending_date"
        ],
        "using": "btree"
      },
      {
        "name": "estimates_tenant_id_source_updated_at_asc",
        "fields": [
          "tenant_id",
          "source_updated_at"
        ],
        "where": "(source_updated_at >= '2014-01-01 00:00:00'::timestamp without time zone)",
        "using": "btree"
      },
      {
        "name": "exclusions_context_id_user_id_idx",
        "fields": [
          "context_id",
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_account_history_data_on_printsmith_id",
        "fields": [
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_account_history_data_on_source_account_id",
        "fields": [
          "source_account_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_account_history_data_on_source_journal_id",
        "fields": [
          "source_journal_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_account_history_data_source_invoice",
        "fields": [
          "tenant_id",
          "source_invoice_id",
          "printsmith_id",
          "recordtype"
        ],
        "where": "((recordtype)::text = '1'::text)",
        "using": "btree"
      },
      {
        "name": "index_account_history_data_tenant_source_account",
        "fields": [
          "source_account_id",
          "tenant_id",
          "printsmith_id",
          "deleted"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_action_logs_on_action",
        "fields": [
          "action"
        ],
        "using": "btree"
      },
      {
        "name": "index_action_logs_on_location_id",
        "fields": [
          "location_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_action_logs_on_sales_rep_user_id",
        "fields": [
          "sales_rep_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_action_logs_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_action_logs_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_campaign_opened",
        "fields": [
          "tenant_id",
          "activity_for",
          "campaign_id",
          "campaign_message_id",
          "tracker_id",
          "source_created_at",
          "hide",
          "deleted"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "(((activity_for)::text = 'campaign_opened'::text) AND (NOT hide) AND (NOT deleted))",
        "using": "btree"
      },
      {
        "name": "index_activities_campaign_opened_aggregated",
        "fields": [
          "tenant_id",
          "activity_for",
          "campaign_id",
          "source_created_at",
          "hide",
          "deleted"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "(((activity_for)::text = 'campaign_opened_aggregated'::text) AND (NOT hide) AND (NOT deleted))",
        "using": "btree"
      },
      {
        "name": "index_activities_for_email_company",
        "fields": [
          "activity_for",
          "email_id",
          "tenant_id",
          "company_id",
          "source_created_at",
          "hide"
        ],
        "where": "(((activity_for)::text = 'email'::text) AND (email_id IS NOT NULL) AND (company_id IS NOT NULL) AND (hide = false))",
        "using": "btree"
      },
      {
        "name": "index_activities_for_email_contact",
        "fields": [
          "activity_for",
          "email_id",
          "tenant_id",
          "contact_id",
          "source_created_at",
          "hide"
        ],
        "where": "(((activity_for)::text = 'email'::text) AND (email_id IS NOT NULL) AND (contact_id IS NOT NULL) AND (hide = false))",
        "using": "btree"
      },
      {
        "name": "index_activities_new",
        "fields": [
          "tenant_id",
          "source_created_at",
          "created_at",
          "deleted",
          "hide",
          "activity_for"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_activity_for",
        "fields": [
          "activity_for"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_activity_for_email",
        "fields": [
          "activity_for"
        ],
        "where": "((activity_for)::text = 'email'::text)",
        "using": "btree"
      },
      {
        "name": "index_activities_on_activity_for_phone_call",
        "fields": [
          "activity_for"
        ],
        "where": "((activity_for)::text = 'phone_call'::text)",
        "using": "btree"
      },
      {
        "name": "index_activities_on_company_id",
        "fields": [
          "company_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_deleted",
        "fields": [
          "deleted"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_email_id",
        "fields": [
          "email_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_estimate_id",
        "fields": [
          "estimate_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_invoice_id",
        "fields": [
          "invoice_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_phone_call_id",
        "fields": [
          "phone_call_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_shipment_id",
        "fields": [
          "tenant_id",
          "shipment_id",
          "hide",
          "deleted"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_source_created_at",
        "fields": [
          "source_created_at"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "using": "btree"
      },
      {
        "name": "index_activities_on_task_id",
        "fields": [
          "task_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_on_tenant_source_created_at_estimate",
        "fields": [
          "tenant_id",
          "source_created_at"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "((estimate_id IS NOT NULL) AND (invoice_id IS NULL))",
        "using": "btree"
      },
      {
        "name": "index_activities_on_tenant_source_created_at_invoice",
        "fields": [
          "tenant_id",
          "source_created_at"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "(invoice_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_activities_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_activities_tenant_company_contact_estimate",
        "fields": [
          "tenant_id",
          "company_id",
          "contact_id",
          "estimate_id",
          "id"
        ],
        "where": "(estimate_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_activities_tenant_company_contact_invoice",
        "fields": [
          "tenant_id",
          "company_id",
          "contact_id",
          "invoice_id",
          "id"
        ],
        "where": "(invoice_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_activities_tenant_estiamte_invoice_source_created",
        "fields": [
          "tenant_id",
          "source_created_at",
          "estimate_id",
          "invoice_id",
          "company_id",
          "contact_id",
          "id"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "((estimate_id IS NOT NULL) AND (invoice_id IS NULL))",
        "using": "btree"
      },
      {
        "name": "index_activities_tenant_invoice_source_created",
        "fields": [
          "tenant_id",
          "source_created_at",
          "invoice_id",
          "company_id",
          "contact_id",
          "id"
        ],
        "order": {
          "source_created_at": "desc"
        },
        "where": "(invoice_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_addresses_on_company_id",
        "fields": [
          "company_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_adjustments_accounting_month_year",
        "fields": [
          "tenant_id",
          "accounting_month",
          "accounting_year",
          "posted_date",
          "total",
          "voided",
          "deleted"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_adjustments_affect_sales",
        "fields": [
          "affect_sales",
          "deleted",
          "voided",
          "id"
        ],
        "where": "((affect_sales = true) AND (deleted = false) AND (voided = false))",
        "using": "btree"
      },
      {
        "name": "index_adjustments_affect_sales_invoice_id",
        "fields": [
          "tenant_id",
          "invoice_id",
          "affect_sales",
          "total",
          "deleted",
          "voided",
          "id"
        ],
        "where": "((affect_sales = true) AND (deleted = false) AND (voided = false))",
        "using": "btree"
      },
      {
        "name": "index_adjustments_daily_sales_summary_id_totals",
        "fields": [
          "daily_sales_summary_id",
          "total"
        ],
        "using": "btree"
      },
      {
        "name": "index_adjustments_on_accounting_year",
        "fields": [
          "accounting_year"
        ],
        "using": "btree"
      },
      {
        "name": "index_adjustments_on_company_id",
        "fields": [
          "company_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_adjustments_on_posted_date",
        "fields": [
          "posted_date"
        ],
        "using": "btree"
      },
      {
        "name": "index_adjustments_on_tenant_id_and_printsmith_id",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_adjustments_sales_summary_id_posted_date",
        "fields": [
          "sales_summary_id",
          "posted_date"
        ],
        "where": "(sales_summary_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_adjustments_tenant_id_company_invoice",
        "fields": [
          "tenant_id",
          "company_id",
          "invoice_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_affiliations_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_affiliations_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_api_logs_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_assets_on_category",
        "fields": [
          "category"
        ],
        "using": "btree"
      },
      {
        "name": "index_assets_pending",
        "fields": [
          "tenant_id",
          "context_type",
          "file_hash",
          "created_at"
        ],
        "where": "(((context_type)::text = 'PendingAttachment'::text) AND (file_hash IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_backups_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_budgets_on_tenant_id_and_financial_year",
        "fields": [
          "tenant_id",
          "financial_year"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_business_plan_marketing_activities_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_business_plan_marketing_activities_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_business_plan_sales_investments_on_business_plan_id",
        "fields": [
          "business_plan_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_business_plan_sales_investments_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_business_plan_sales_investments_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_business_plans_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_calendar_entries_on_entry_ident",
        "fields": [
          "entry_ident",
          "updated",
          "start_time",
          "id"
        ],
        "where": "(updated = true)",
        "using": "btree"
      },
      {
        "name": "index_calendars_calendar_ident",
        "fields": [
          "calendar_ident",
          "id"
        ],
        "where": "(array_length(user_ids, 1) > 0)",
        "using": "btree"
      },
      {
        "name": "index_calendars_user_ids",
        "fields": [
          "user_ids"
        ],
        "using": "gin"
      },
      {
        "name": "index_campaign_calendar_entries_campaign_tenant",
        "fields": [
          "campaign_id",
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_exclusions_on_campaign_id",
        "fields": [
          "campaign_id",
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_exclusions_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_campaign_contact_status_dates",
        "fields": [
          "campaign_id",
          "contact_id",
          "sent",
          "failed",
          "sent_date",
          "created_at",
          "id"
        ],
        "order": {
          "sent_date": "desc",
          "created_at": "desc"
        },
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_on_campaign_id",
        "fields": [
          "campaign_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_on_parent_contact_id",
        "fields": [
          "parent_contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_parent",
        "fields": [
          "parent_message_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_sent_message",
        "fields": [
          "sent_message_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_tenant_stats",
        "fields": [
          "tenant_id",
          "contact_id",
          "campaign_id",
          "sent",
          "opened",
          "failed",
          "unsubscribed",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_trackers_on_campaign_message_id",
        "fields": [
          "campaign_message_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaign_messages_trackers_on_tracker_id",
        "fields": [
          "tracker_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_body_parent",
        "fields": [
          "body"
        ],
        "where": "(parent_id IS NULL)",
        "using": "hash"
      },
      {
        "name": "index_campaigns_body_test",
        "fields": [
          "body"
        ],
        "where": "(test = true)",
        "using": "hash"
      },
      {
        "name": "index_campaigns_contact_lists_on_campaign_id",
        "fields": [
          "campaign_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_contact_lists_on_contact_list_id",
        "fields": [
          "contact_list_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_id_tenant_not_test",
        "fields": [
          "id",
          "tenant_id",
          "test",
          "paused"
        ],
        "where": "(test = false)",
        "using": "btree"
      },
      {
        "name": "index_campaigns_on_email_template_id",
        "fields": [
          "email_template_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_on_tenant_parent_created_at_not_test",
        "fields": [
          "tenant_id",
          "parent_id",
          "test",
          "created_at"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(test <> false)",
        "using": "btree"
      },
      {
        "name": "index_campaigns_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_campaigns_parent_id_md5_body_test",
        "fields": [
          "parent_id",
          "test",
          "tenant_id"
        ],
        "where": "(test = true)",
        "using": "btree"
      },
      {
        "name": "index_campaigns_tenant_id_test_paused",
        "fields": [
          "tenant_id",
          "test",
          "paused",
          "parent_id",
          "id"
        ],
        "where": "(NOT test)",
        "using": "btree"
      },
      {
        "name": "index_comments_on_commentable_id",
        "fields": [
          "commentable_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_comments_on_commentable_type",
        "fields": [
          "commentable_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_comments_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_comments_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_clearbit",
        "fields": [
          "has_clearbit_data",
          "rolling_12_month_rank",
          "rolling_12_month_sales",
          "rolling_12_month_sales_ly",
          "tenant_id",
          "deleted",
          "walk_in"
        ],
        "where": "((has_clearbit_data = false) AND (walk_in = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_companies_id_do_not_mail",
        "fields": [
          "id",
          "marketing_do_not_mail"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_external_id_and_tenant_id",
        "fields": [
          "external_id",
          "tenant_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_companies_on_lead_type_id",
        "fields": [
          "lead_type_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_location_user_id",
        "fields": [
          "location_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_remote_lead_source_update",
        "fields": [
          "remote_lead_source_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_remote_sales_rep_update",
        "fields": [
          "remote_sales_rep_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_rolling_12_deleted",
        "fields": [
          "tenant_id",
          "rolling_12_month_sales",
          "deleted",
          "id"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_companies_on_single_sale_only_sales_rep_location",
        "fields": [
          "tenant_id",
          "deleted",
          "walk_in",
          "location_user_id",
          "source_salesrep_id",
          "printsmith_id",
          "single_sale_only_at"
        ],
        "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_companies_on_single_sale_only_sales_rep_platform",
        "fields": [
          "tenant_id",
          "deleted",
          "walk_in",
          "location_user_id",
          "sales_rep_platform_id",
          "platform_id",
          "single_sale_only_at"
        ],
        "where": "((NOT deleted) AND (platform_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_companies_on_single_sale_only_sales_rep_platform_location",
        "fields": [
          "tenant_id",
          "deleted",
          "walk_in",
          "location_user_id",
          "sales_rep_platform_id",
          "printsmith_id",
          "single_sale_only_at"
        ],
        "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_companies_on_single_sale_only_sales_rep_platform_user",
        "fields": [
          "tenant_id",
          "deleted",
          "walk_in",
          "sales_rep_user_id",
          "sales_rep_platform_id",
          "printsmith_id",
          "single_sale_only_at"
        ],
        "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_companies_on_single_sale_only_sales_rep_platform_user_pla",
        "fields": [
          "tenant_id",
          "deleted",
          "walk_in",
          "sales_rep_user_id",
          "sales_rep_platform_id",
          "platform_id",
          "single_sale_only_at"
        ],
        "where": "((NOT deleted) AND (platform_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_companies_on_single_sale_only_sales_rep_user",
        "fields": [
          "tenant_id",
          "deleted",
          "walk_in",
          "sales_rep_user_id",
          "source_salesrep_id",
          "printsmith_id",
          "single_sale_only_at"
        ],
        "where": "((NOT deleted) AND (printsmith_id IS NOT NULL) AND (single_sale_only_at IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_companies_on_tenant_address_ids",
        "fields": [
          "tenant_id",
          "source_billtoaddress_id",
          "source_shiptoaddress_id",
          "statement_address_id",
          "invoice_address_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_tenant_id",
        "fields": [
          "tenant_id",
          "printsmith_id",
          "dirty"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_tenant_id_and_company_created_date",
        "fields": [
          "tenant_id",
          "company_created_date"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_tenant_id_and_rolling_12_month_rank",
        "fields": [
          "tenant_id",
          "rolling_12_month_rank"
        ],
        "using": "btree"
      },
      {
        "name": "index_companies_on_tenant_id_and_rolling_12_month_rank_partial",
        "fields": [
          "tenant_id",
          "rolling_12_month_rank"
        ],
        "where": "((NOT deleted) AND (NOT walk_in))",
        "using": "btree"
      },
      {
        "name": "index_companies_prospect_satatus_id",
        "fields": [
          "prospect_status_id",
          "prospect",
          "id",
          "deleted"
        ],
        "where": "((prospect = true) AND (prospect_status_id IS NOT NULL) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_companies_rank_name_sales_rep",
        "fields": [
          "tenant_id",
          "rolling_12_month_rank",
          "rolling_12_month_rank_ly",
          "name",
          "sales_rep_user_id",
          "source_salesrep_id"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_companies_rank_name_sales_rep_platform",
        "fields": [
          "tenant_id",
          "rolling_12_month_rank",
          "rolling_12_month_rank_ly",
          "name",
          "sales_rep_user_id",
          "sales_rep_platform_id"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_companies_retry_sales_rep_update",
        "fields": [
          "tenant_id",
          "deleted"
        ],
        "where": "(remote_sales_rep_update = true)",
        "using": "btree"
      },
      {
        "name": "index_companies_stats",
        "fields": [
          "tenant_id",
          "deleted",
          "rolling_12_month_sales",
          "rolling_12_month_sales_ly",
          "id",
          "last_order_date",
          "last_pickup_date",
          "rolling_12_month_cogs",
          "growth_percentage",
          "order_count"
        ],
        "where": "((deleted = false) AND ((rolling_12_month_sales > (0)::numeric) OR (rolling_12_month_sales_ly > (0)::numeric)))",
        "using": "btree"
      },
      {
        "name": "index_companies_tenant_do_not_mail",
        "fields": [
          "tenant_id",
          "id",
          "marketing_do_not_mail"
        ],
        "where": "(marketing_do_not_mail = true)",
        "using": "btree"
      },
      {
        "name": "index_companies_tenant_id_sales_rep",
        "fields": [
          "tenant_id",
          "source_salesrep_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(source_salesrep_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_companies_tenant_id_sales_rep_platform",
        "fields": [
          "tenant_id",
          "sales_rep_platform_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(sales_rep_platform_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_companies_tenant_last_order_sales_rep_platform",
        "fields": [
          "tenant_id",
          "last_order_date",
          "single_sale_only_at",
          "oldest_interaction",
          "rolling_12_month_sales",
          "rolling_12_month_sales_ly",
          "sales_rep_user_id",
          "sales_rep_platform_id",
          "id",
          "deleted",
          "walk_in"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_companies_tenant_printsmith",
        "fields": [
          "tenant_id",
          "printsmith_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_company_dirty",
        "fields": [
          "tenant_id",
          "dirty",
          "printsmith_id",
          "company_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_company_metrics_on_company_id",
        "fields": [
          "company_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_company_metrics_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_company_metrics_unique",
        "fields": [
          "report_series",
          "tenant_id",
          "report_month",
          "company_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_company_sales",
        "fields": [
          "tenant_id",
          "rolling_12_month_sales",
          "deleted",
          "source_shiptoaddress_id",
          "sales_rep_user_id",
          "source_salesrep_id",
          "id"
        ],
        "where": "(NOT deleted)",
        "using": "btree"
      },
      {
        "name": "index_company_sales_sales_rep_platform",
        "fields": [
          "tenant_id",
          "rolling_12_month_sales",
          "deleted",
          "source_shiptoaddress_id",
          "sales_rep_user_id",
          "sales_rep_platform_id",
          "id"
        ],
        "where": "(NOT deleted)",
        "using": "btree"
      },
      {
        "name": "index_contact_groups_contacts_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contact_list_exclusions_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contact_list_exclusions_on_contact_list_id",
        "fields": [
          "contact_list_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contact_list_rules_on_contact_list_id",
        "fields": [
          "contact_list_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contact_lists_contacts_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contact_lists_contacts_on_contact_list_id",
        "fields": [
          "contact_list_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contact_lists_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_clearbit",
        "fields": [
          "has_clearbit_data",
          "rolling_12_month_sales",
          "rolling_12_month_sales_ly",
          "tenant_id",
          "temp"
        ],
        "where": "((has_clearbit_data = false) AND (temp = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_company_sales_name",
        "fields": [
          "tenant_id",
          "company_id",
          "rolling_12_month_sales",
          "first_name",
          "temp",
          "deleted",
          "marketing_do_not_mail",
          "marketing_unsubscribe",
          "on_suppression_list",
          "id"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "((NOT temp) AND (NOT marketing_do_not_mail) AND (NOT marketing_unsubscribe) AND (NOT on_suppression_list))",
        "using": "btree"
      },
      {
        "name": "index_contacts_company_sales_name_not_unsubbed",
        "fields": [
          "tenant_id",
          "company_id",
          "rolling_12_month_sales",
          "first_name",
          "temp",
          "deleted",
          "unsubscribed",
          "id"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "((temp = false) AND (deleted = false) AND (unsubscribed = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_email_validation_attempts",
        "fields": [
          "needs_email_validation",
          "tenant_id",
          "email_validation_attempts",
          "source_created_at",
          "deleted",
          "unsubscribed",
          "temp"
        ],
        "where": "((needs_email_validation = true) AND (deleted = false) AND (unsubscribed = false) AND (temp = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_email_validations",
        "fields": [
          "tenant_id",
          "needs_email_validation",
          "company_id",
          "tenant_id",
          "on_suppression_list",
          "marketing_do_not_mail",
          "deleted",
          "temp"
        ],
        "where": "((on_suppression_list = false) AND (marketing_do_not_mail = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_email_validations_not_unsubbed",
        "fields": [
          "tenant_id",
          "needs_email_validation",
          "company_id",
          "tenant_id",
          "unsubscribed",
          "deleted",
          "temp"
        ],
        "where": "((deleted = false) AND (unsubscribed = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_in_latest_order_date_rolling_12_month_sales",
        "fields": [
          "tenant_id",
          "company_id",
          "latest_order_date",
          "rolling_12_month_sales",
          "sales_rep_user_id",
          "deleted",
          "temp",
          "id"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "((rolling_12_month_sales > (0)::numeric) AND (deleted <> true) AND (temp = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_on_company_id",
        "fields": [
          "company_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_lead_type_id",
        "fields": [
          "lead_type_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_location_user_id",
        "fields": [
          "location_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_parent_contact_id",
        "fields": [
          "parent_contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_remote_sales_rep_update",
        "fields": [
          "remote_sales_rep_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_sales_rep_platform",
        "fields": [
          "sales_rep_platform_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_sales_rep_user_id",
        "fields": [
          "sales_rep_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_source_salesrep_id",
        "fields": [
          "source_salesrep_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_on_tenant_marketing",
        "fields": [
          "tenant_id",
          "marketing_do_not_mail",
          "marketing_unsubscribe",
          "on_suppression_list",
          "id"
        ],
        "where": "((marketing_do_not_mail = false) AND ((marketing_unsubscribe = true) OR (on_suppression_list = true)))",
        "using": "btree"
      },
      {
        "name": "index_contacts_privacy_acknowledgment",
        "fields": [
          "tenant_id"
        ],
        "where": "((privacy_data ->> 'acknowledgment'::text) IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_contacts_privacy_marketing_center",
        "fields": [
          "tenant_id"
        ],
        "where": "((privacy_data ->> 'marketing_center'::text) IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_contacts_privacy_marketing_corporate",
        "fields": [
          "tenant_id"
        ],
        "where": "((privacy_data ->> 'marketing_corporate'::text) IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_contacts_prospect_satatus_id",
        "fields": [
          "prospect_status_id",
          "tenant_id",
          "deleted",
          "company_id"
        ],
        "where": "((prospect_status_id IS NOT NULL) AND (deleted <> false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_retry_sales_rep_update",
        "fields": [
          "tenant_id"
        ],
        "where": "(remote_sales_rep_update = true)",
        "using": "btree"
      },
      {
        "name": "index_contacts_rolling_invoices",
        "fields": [
          "tenant_id",
          "oldest_rolling_1_invoice",
          "oldest_rolling_12_invoice",
          "oldest_rolling_12_ly_invoice",
          "oldest_rolling_12_ly_ly_invoice",
          "id"
        ],
        "where": "((oldest_rolling_1_invoice IS NOT NULL) OR (oldest_rolling_12_invoice IS NOT NULL) OR (oldest_rolling_12_ly_invoice IS NOT NULL) OR (oldest_rolling_12_ly_ly_invoice IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_deleted_stats",
        "fields": [
          "tenant_id",
          "deleted",
          "id",
          "email",
          "company_id",
          "latest_order_date",
          "source_created_at",
          "unsubscribed"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_id_company_sales",
        "fields": [
          "tenant_id",
          "company_id",
          "rolling_12_month_sales",
          "rolling_12_month_sales_ly",
          "id",
          "deleted",
          "temp"
        ],
        "where": "(deleted <> true)",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_id_deleted_stats",
        "fields": [
          "tenant_id",
          "deleted",
          "id",
          "email",
          "company_id",
          "latest_order_date",
          "source_created_at",
          "marketing_do_not_mail",
          "on_suppression_list",
          "marketing_unsubscribe"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_id_sales_rep",
        "fields": [
          "tenant_id",
          "source_salesrep_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(source_salesrep_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_id_sales_rep_platform",
        "fields": [
          "tenant_id",
          "sales_rep_platform_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(sales_rep_platform_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_lower_email_id",
        "fields": [
          "tenant_id",
          "email",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_not_unsubbed",
        "fields": [
          "tenant_id"
        ],
        "where": "((temp = false) AND (deleted = false) AND (unsubscribed = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_not_unsubbed_with_email",
        "fields": [
          "tenant_id",
          "id",
          "rolling_12_month_sales",
          "first_name",
          "company_id",
          "deleted",
          "email",
          "temp",
          "unsubscribed"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "((temp = false) AND (deleted = false) AND (unsubscribed = false) AND ((email)::text ~~ '%@%'::text))",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_oldest_rolling",
        "fields": [
          "tenant_id",
          "oldest_rolling_1_invoice",
          "oldest_rolling_12_invoice",
          "oldest_rolling_12_ly_invoice",
          "oldest_rolling_12_ly_ly_invoice",
          "id"
        ],
        "where": "((oldest_rolling_1_invoice IS NOT NULL) OR (oldest_rolling_12_invoice IS NOT NULL) OR (oldest_rolling_12_ly_invoice IS NOT NULL) OR (oldest_rolling_12_ly_ly_invoice IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_printsmith",
        "fields": [
          "tenant_id",
          "printsmith_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_trimmed_email",
        "fields": [
          "tenant_id",
          "email",
          "on_suppression_list",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_unsubbed",
        "fields": [
          "tenant_id",
          "unsubscribed",
          "id"
        ],
        "where": "(unsubscribed = true)",
        "using": "btree"
      },
      {
        "name": "index_contacts_tenant_unsubscribed",
        "fields": [
          "tenant_id",
          "unsubscribed",
          "deleted",
          "temp",
          "needs_email_validation",
          "company_id"
        ],
        "where": "((unsubscribed = false) AND (deleted = false) AND (temp = false))",
        "using": "btree"
      },
      {
        "name": "index_contacts_with_rolling_12_month_sales",
        "fields": [
          "rolling_12_month_sales"
        ],
        "where": "(rolling_12_month_sales > (0)::numeric)",
        "using": "btree"
      },
      {
        "name": "index_countries_enterprises",
        "fields": [
          "country_id",
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_country_states_on_country_id",
        "fields": [
          "country_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_deferred_sales",
        "fields": [
          "tenant_id",
          "grand_total",
          "pickup_date",
          "voided"
        ],
        "where": "(((COALESCE((platform_data ->> 'deferred'::text), 'false'::text))::boolean = true) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_deployments_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_soft_bounces_count",
        "fields": [
          "tenant_id",
          "soft_bounce_count",
          "email_address"
        ],
        "where": "(soft_bounce_count >= 3)",
        "using": "btree"
      },
      {
        "name": "index_email_soft_bounces_on_email_address",
        "fields": [
          "email_address"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_tags_emails_on_email_id_and_email_tag_id",
        "fields": [
          "email_id",
          "email_tag_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_email_tags_on_label_id",
        "fields": [
          "label_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_tags_on_label_type",
        "fields": [
          "label_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_tags_on_name",
        "fields": [
          "name"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_tags_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_tags_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_templates_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_templates_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_trackers_tacker",
        "fields": [
          "tracker_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_email_validations_contact_created",
        "fields": [
          "contact_id",
          "created_at",
          "tenant_id",
          "enterprise_id",
          "code"
        ],
        "order": {
          "created_at": "desc"
        },
        "using": "btree"
      },
      {
        "name": "index_email_validations_tenant_id",
        "fields": [
          "tenant_id",
          "enterprise_id",
          "contact_id",
          "created_at",
          "code"
        ],
        "order": {
          "created_at": "desc"
        },
        "using": "btree"
      },
      {
        "name": "index_emails_on_context_id_and_context_type",
        "fields": [
          "context_id",
          "context_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_emails_on_from_user_id",
        "fields": [
          "from_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_emails_on_thread_id_and_id",
        "fields": [
          "thread_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_emails_on_to_user_id",
        "fields": [
          "to_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_emails_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_enterprise_business_welcomes_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_enterprise_salestargets_on_lead_type_id",
        "fields": [
          "lead_type_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimate_elements_on_element_id_and_element_type",
        "fields": [
          "element_id",
          "element_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimate_elements_on_estimate_id",
        "fields": [
          "estimate_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimate_elements_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_id_company_contact",
        "fields": [
          "tenant_id",
          "company_id",
          "contact_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_company_id",
        "fields": [
          "company_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_contact_id",
        "fields": [
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_dirty_skip_pdf",
        "fields": [
          "dirty_skip_pdf"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_inquiry_id",
        "fields": [
          "inquiry_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_location_user_id",
        "fields": [
          "location_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_pending_list",
        "fields": [
          "tenant_id"
        ],
        "where": "(on_pending_list = true)",
        "using": "btree"
      },
      {
        "name": "index_estimates_on_printsmith_id",
        "fields": [
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_remote_proof_by_update",
        "fields": [
          "remote_proof_by_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_remote_sales_rep_update",
        "fields": [
          "remote_sales_rep_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_sales_rep_user_id",
        "fields": [
          "sales_rep_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_taken_by_user_id",
        "fields": [
          "taken_by_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_on_tenant_stakenby_screatedat",
        "fields": [
          "tenant_id",
          "source_taken_by",
          "source_created_at"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_ordered_date_tenant_id",
        "fields": [
          "ordered_date",
          "tenant_id",
          "grand_total",
          "voided",
          "deleted"
        ],
        "where": "((NOT voided) AND (NOT deleted))",
        "using": "btree"
      },
      {
        "name": "index_estimates_portal_key",
        "fields": [
          "portal_key"
        ],
        "using": "btree"
      },
      {
        "name": "index_estimates_retry_sales_rep_update",
        "fields": [
          "tenant_id",
          "voided",
          "deleted"
        ],
        "where": "(remote_sales_rep_update = true)",
        "using": "btree"
      },
      {
        "name": "index_estimates_status",
        "fields": [
          "tenant_id",
          "status",
          "deleted",
          "voided"
        ],
        "where": "((NOT deleted) AND (NOT voided))",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_company_source_account",
        "fields": [
          "tenant_id",
          "company_id",
          "source_account_id",
          "created_at",
          "id"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(source_account_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_company_source_contact",
        "fields": [
          "tenant_id",
          "contact_id",
          "source_contact_id",
          "created_at",
          "id"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(source_contact_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_id_sales_rep",
        "fields": [
          "tenant_id",
          "salesrep_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(salesrep_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_id_sales_rep_platform",
        "fields": [
          "tenant_id",
          "sales_rep_platform_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(sales_rep_platform_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_id_taken_by",
        "fields": [
          "tenant_id",
          "source_taken_by",
          "id",
          "taken_by_user_id"
        ],
        "where": "(source_taken_by IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_production_location",
        "fields": [
          "tenant_id",
          "production_location_id",
          "on_pending_list",
          "id"
        ],
        "where": "(on_pending_list IS TRUE)",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_stats",
        "fields": [
          "tenant_id",
          "contact_id",
          "ordered_date",
          "grand_total",
          "voided",
          "deleted",
          "id"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_estimates_tenant_taken_by_ordered_date_status",
        "fields": [
          "tenant_id",
          "taken_by_user_id",
          "ordered_date",
          "status",
          "deleted",
          "voided",
          "id"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_event_stats_on_created_at",
        "fields": [
          "created_at"
        ],
        "using": "btree"
      },
      {
        "name": "index_event_stats_on_tenant_event_data_source_duration",
        "fields": [
          "tenant_id",
          "event_type",
          "data",
          "source",
          "duration"
        ],
        "using": "btree"
      },
      {
        "name": "index_events_created_status_queued",
        "fields": [
          "created_at",
          "status",
          "id"
        ],
        "where": "((status)::text = 'queued'::text)",
        "using": "btree"
      },
      {
        "name": "index_events_status_running",
        "fields": [
          "status",
          "updated_at",
          "id"
        ],
        "where": "((status)::text = 'running'::text)",
        "using": "btree"
      },
      {
        "name": "index_events_status_scheduled",
        "fields": [
          "status",
          "schedule_date",
          "id"
        ],
        "where": "((status)::text = 'scheduled'::text)",
        "using": "btree"
      },
      {
        "name": "index_events_tenant_type_data",
        "fields": [
          "tenant_id",
          "event_type",
          "data",
          "status",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_filter_defaults_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_filter_defaults_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_groups_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_groups_tenants_on_group_id",
        "fields": [
          "group_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_groups_tenants_on_tenant_id_and_group_id",
        "fields": [
          "tenant_id",
          "group_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_holiday_dates_on_holiday_id",
        "fields": [
          "holiday_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_holidays_country_states",
        "fields": [
          "holiday_id",
          "country_state_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_holidays_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_holidays_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_inquiries_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_inquiries_on_unique_id_and_tenant_id",
        "fields": [
          "unique_id",
          "tenant_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_inquiry_attachments_on_inquiry_id",
        "fields": [
          "inquiry_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_interest_categories_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_interest_contexts_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_interests_on_interest_category_id",
        "fields": [
          "interest_category_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoice_elements_on_element_id_and_element_type",
        "fields": [
          "element_id",
          "element_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoice_elements_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoiced_sales",
        "fields": [
          "tenant_id",
          "grand_total",
          "pickup_date",
          "voided"
        ],
        "where": "(((COALESCE((platform_data ->> 'invoiced'::text), 'false'::text))::boolean = true) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_invoices_accounting_month_year",
        "fields": [
          "tenant_id",
          "accounting_month",
          "accounting_year",
          "pickup_date",
          "grand_total",
          "rounded_amount",
          "voided",
          "deleted"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_invoices_company_pending",
        "fields": [
          "company_id",
          "on_pending_list",
          "deleted",
          "voided",
          "id"
        ],
        "where": "((on_pending_list = true) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_company_stats",
        "fields": [
          "company_id",
          "pickup_date",
          "deleted",
          "voided",
          "total_cost",
          "grand_total_inc_tax"
        ],
        "where": "((pickup_date IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_contact_id_orders",
        "fields": [
          "contact_id",
          "pickup_date",
          "voided",
          "deleted",
          "id"
        ],
        "where": "((pickup_date IS NOT NULL) AND (NOT voided) AND (NOT deleted))",
        "using": "btree"
      },
      {
        "name": "index_invoices_contact_id_web_voided",
        "fields": [
          "contact_id",
          "web",
          "voided"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_contact_lists",
        "fields": [
          "contact_id",
          "grand_total",
          "on_pending_list",
          "pickup_date",
          "ordered_date",
          "sales_rep_user_id",
          "taken_by_user_id",
          "web",
          "voided",
          "deleted"
        ],
        "where": "((NOT deleted) AND (NOT voided))",
        "using": "btree"
      },
      {
        "name": "index_invoices_daily_sales_summary_id_totals",
        "fields": [
          "daily_sales_summary_id",
          "grand_total",
          "rounded_amount"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_id_company_contact",
        "fields": [
          "tenant_id",
          "company_id",
          "contact_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_accounting_year",
        "fields": [
          "accounting_year"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_company_id",
        "fields": [
          "company_id",
          "id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_company_id_and_pickup_date",
        "fields": [
          "company_id",
          "pickup_date"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_dirty_skip_pdf",
        "fields": [
          "dirty_skip_pdf"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_external_id_and_company_id_and_tenant_id",
        "fields": [
          "external_id",
          "company_id",
          "tenant_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_invoices_on_inquiry_id",
        "fields": [
          "inquiry_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_location_user_id",
        "fields": [
          "location_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_pending_list",
        "fields": [
          "tenant_id"
        ],
        "where": "(on_pending_list = true)",
        "using": "btree"
      },
      {
        "name": "index_invoices_on_pickup_date",
        "fields": [
          "pickup_date"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_pickup_date_tenant_sales_rep_taken_by",
        "fields": [
          "pickup_date",
          "tenant_id",
          "voided",
          "deleted",
          "sales_rep_user_id",
          "taken_by_user_id",
          "location_user_id",
          "grand_total",
          "rounded_amount",
          "accounting_month",
          "accounting_year"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_invoices_on_printsmith_id",
        "fields": [
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_production_location_id",
        "fields": [
          "production_location_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_remote_po_update",
        "fields": [
          "remote_po_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_remote_proof_by_update",
        "fields": [
          "remote_proof_by_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_remote_sales_rep_update",
        "fields": [
          "remote_sales_rep_update"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_remote_update_required",
        "fields": [
          "remote_update_required"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_reorder",
        "fields": [
          "reorder_date",
          "reorder_followed_up",
          "tenant_id",
          "pickup_date",
          "contact_id",
          "company_id",
          "deleted",
          "voided"
        ],
        "where": "((reorder_followed_up IS NULL) AND (pickup_date IS NOT NULL) AND (voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_invoices_on_sale_id",
        "fields": [
          "sale_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_sales_rep_accounting_pickup_grand_total",
        "fields": [
          "tenant_id",
          "sales_rep_user_id",
          "accounting_month",
          "accounting_year",
          "pickup_date",
          "grand_total",
          "voided",
          "deleted"
        ],
        "where": "((deleted = false) AND (voided = false) AND (pickup_date IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_invoices_on_sales_rep_user_id",
        "fields": [
          "sales_rep_user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_source_created_at",
        "fields": [
          "source_created_at"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_tenant_id_and_company_id_and_grand_total",
        "fields": [
          "tenant_id",
          "company_id",
          "grand_total",
          "dirty"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_tenant_id_and_ordered_date",
        "fields": [
          "tenant_id",
          "ordered_date"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_on_tenant_stakenby_screatedat",
        "fields": [
          "tenant_id",
          "source_taken_by",
          "source_created_at"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_ordered_date_tenant_id",
        "fields": [
          "ordered_date",
          "tenant_id",
          "grand_total",
          "voided",
          "deleted"
        ],
        "where": "((deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_platform_id",
        "fields": [
          "tenant_id",
          "platform_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_portal_key",
        "fields": [
          "portal_key",
          "id",
          "deleted",
          "voided"
        ],
        "where": "((portal_key IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_retry_sales_rep_update",
        "fields": [
          "tenant_id",
          "voided",
          "deleted"
        ],
        "where": "(remote_sales_rep_update = true)",
        "using": "btree"
      },
      {
        "name": "index_invoices_sales_summary_id_pickup_date",
        "fields": [
          "sales_summary_id",
          "pickup_date"
        ],
        "where": "(sales_summary_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_invoices_sales_summary_id_totals",
        "fields": [
          "sales_summary_id",
          "grand_total",
          "rounded_amount"
        ],
        "using": "btree"
      },
      {
        "name": "index_invoices_source_invoice_platform_id",
        "fields": [
          "tenant_id",
          "voided",
          "deleted"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_invoices_source_shipment_platform_id",
        "fields": [
          "tenant_id",
          "voided",
          "deleted"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_invoices_taken_by_pickup_date_cost",
        "fields": [
          "taken_by_user_id",
          "pickup_date",
          "total_cost",
          "deleted",
          "voided"
        ],
        "where": "((pickup_date IS NOT NULL) AND (total_cost IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_accounting",
        "fields": [
          "tenant_id",
          "id",
          "printsmith_id",
          "pickup_date",
          "deleted",
          "voided",
          "accounting_month",
          "daily_accounting_month"
        ],
        "where": "((pickup_date > '2014-12-31 00:00:00'::timestamp without time zone) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)) AND ((accounting_month IS NULL) OR (daily_accounting_month IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_company_pickup",
        "fields": [
          "tenant_id",
          "company_id",
          "pickup_date",
          "voided",
          "deleted"
        ],
        "where": "((pickup_date IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_company_source_account",
        "fields": [
          "tenant_id",
          "company_id",
          "source_account_id",
          "created_at",
          "id"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(source_account_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_contact_source_contact",
        "fields": [
          "tenant_id",
          "contact_id",
          "source_contact_id",
          "created_at",
          "id"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(source_contact_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_id_pickup_date_sales",
        "fields": [
          "tenant_id",
          "pickup_date",
          "accounting_month",
          "accounting_year",
          "voided",
          "deleted"
        ],
        "where": "((pickup_date IS NOT NULL) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_id_sales_rep",
        "fields": [
          "tenant_id",
          "salesrep_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(salesrep_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_id_sales_rep_platform",
        "fields": [
          "tenant_id",
          "sales_rep_platform_id",
          "id",
          "sales_rep_user_id",
          "location_user_id"
        ],
        "where": "(sales_rep_platform_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_id_taken_by",
        "fields": [
          "tenant_id",
          "source_taken_by",
          "id",
          "taken_by_user_id"
        ],
        "where": "(source_taken_by IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_platform_id",
        "fields": [
          "tenant_id",
          "platform_id",
          "deleted",
          "voided",
          "id"
        ],
        "where": "(((voided = false) OR (voided IS NULL)) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_printsmith_id_voided",
        "fields": [
          "tenant_id",
          "printsmith_id",
          "voided",
          "id"
        ],
        "where": "((voided = false) OR (voided IS NULL))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_production_location",
        "fields": [
          "tenant_id",
          "production_location_id",
          "voided",
          "deleted",
          "on_pending_list",
          "id"
        ],
        "where": "((voided IS FALSE) AND (deleted IS FALSE) AND (on_pending_list IS TRUE))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_sales_rep_location_created_at",
        "fields": [
          "tenant_id",
          "salesrep_id",
          "location_user_id",
          "created_at",
          "id"
        ],
        "order": {
          "created_at": "desc"
        },
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_sales_rep_platform_location_created_at",
        "fields": [
          "tenant_id",
          "sales_rep_platform_id",
          "location_user_id",
          "created_at",
          "id"
        ],
        "order": {
          "created_at": "desc"
        },
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_source_shipment_platform_id",
        "fields": [
          "id",
          "tenant_id",
          "deleted",
          "voided"
        ],
        "where": "(((voided = false) OR (voided IS NULL)) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_invoices_tenant_stats",
        "fields": [
          "tenant_id",
          "contact_id",
          "ordered_date",
          "grand_total",
          "voided",
          "deleted",
          "id"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_lead_sources_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_lists_on_filter",
        "fields": [
          "filter"
        ],
        "using": "gin"
      },
      {
        "name": "index_lists_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_locations_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_news_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_next_activities_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_pdfs_on_key_and_external_id",
        "fields": [
          "key",
          "external_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_phone_calls_on_phoneable_id_and_phoneable_type",
        "fields": [
          "phoneable_id",
          "phoneable_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_phone_calls_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_phone_calls_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_production_locations_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_production_locations_tenant_key",
        "fields": [
          "tenant_id",
          "printsmith_key",
          "deleted",
          "id",
          "orderby",
          "name"
        ],
        "where": "((NOT deleted) AND (printsmith_key IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "index_prospect_status_items_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_prospect_status_items_on_lead_type_id",
        "fields": [
          "lead_type_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_prospect_status_items_on_prospect_status_id",
        "fields": [
          "prospect_status_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_prospect_status_items_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_prospect_status_versions_on_lead_type_id",
        "fields": [
          "lead_type_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_report_rows_on_report_id",
        "fields": [
          "report_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_reports_on_global",
        "fields": [
          "global"
        ],
        "using": "btree"
      },
      {
        "name": "index_reports_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_reports_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_base_taxes_tenant_id_taxability",
        "fields": [
          "tenant_id",
          "deleted",
          "source_type",
          "source_sales_base_id",
          "total_taxable",
          "total_non_taxable"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_categories_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_reps_on_location_printsmith_id",
        "fields": [
          "location_id",
          "printsmith_id",
          "deleted"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_reps_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_reps_on_user_printsmith_id",
        "fields": [
          "user_id",
          "printsmith_id",
          "deleted"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_reps_tenant_printsmith_id_loction_not_null",
        "fields": [
          "tenant_id",
          "printsmith_id",
          "location_id"
        ],
        "where": "(location_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "index_sales_summaries_on_accounting_month",
        "fields": [
          "accounting_month"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_summaries_on_accounting_year",
        "fields": [
          "accounting_year"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_summaries_on_printsmith_id_and_tenant_id",
        "fields": [
          "printsmith_id",
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_summaries_tenant_printsmith_id_not_deleted",
        "fields": [
          "tenant_id",
          "printsmith_id",
          "deleted",
          "id"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_sales_summary_pickups_on_source_account_history_item_id",
        "fields": [
          "source_account_history_item_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_summary_pickups_on_source_sales_summary_id",
        "fields": [
          "source_sales_summary_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_sales_summary_source_account_history_item",
        "fields": [
          "tenant_id",
          "source_account_history_item_id",
          "source_sales_summary_id",
          "deleted"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_sales_tag_by_months_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_salestargets_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_search_companies",
        "fields": [
          "tenant_id",
          "name",
          "walk_in",
          "deleted",
          "id"
        ],
        "where": "(NOT deleted)",
        "using": "btree"
      },
      {
        "name": "index_search_contacts",
        "fields": [
          "tenant_id",
          "company_id",
          "first_name",
          "last_name",
          "rolling_12_month_sales"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "(NOT temp)",
        "using": "btree"
      },
      {
        "name": "index_search_estimates",
        "fields": [
          "tenant_id",
          "invoice_number",
          "voided",
          "deleted",
          "name",
          "id"
        ],
        "where": "((NOT deleted) AND (NOT voided))",
        "using": "btree"
      },
      {
        "name": "index_search_orders",
        "fields": [
          "tenant_id",
          "wanted_by",
          "invoice_number",
          "voided",
          "deleted",
          "name",
          "id"
        ],
        "where": "((pickup_date IS NULL) AND (NOT deleted) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "index_search_sales",
        "fields": [
          "tenant_id",
          "pickup_date",
          "invoice_number",
          "voided",
          "deleted",
          "name",
          "id"
        ],
        "where": "((pickup_date IS NOT NULL) AND (NOT deleted) AND (NOT voided))",
        "using": "btree"
      },
      {
        "name": "index_shipments_contact_date",
        "fields": [
          "tenant_id",
          "contact_id",
          "shipment_date",
          "deleted"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_shipments_contact_id_orders",
        "fields": [
          "contact_id",
          "shipment_date",
          "deleted",
          "id"
        ],
        "where": "((shipment_date IS NOT NULL) AND (NOT deleted))",
        "using": "btree"
      },
      {
        "name": "index_shipments_date_contact",
        "fields": [
          "shipment_date",
          "contact_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_company_sales_rep",
        "fields": [
          "company_id",
          "sales_rep_platform_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_inquiry_id",
        "fields": [
          "inquiry_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_courier_id",
        "fields": [
          "tenant_id",
          "courier_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_courier_service_id",
        "fields": [
          "tenant_id",
          "courier_service_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_delivered",
        "fields": [
          "tenant_id",
          "delivered"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_inquiry_id",
        "fields": [
          "tenant_id",
          "inquiry_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_not_to_invoice",
        "fields": [
          "tenant_id",
          "not_to_invoice"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_platform_id",
        "fields": [
          "tenant_id",
          "platform_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_shipment_date",
        "fields": [
          "tenant_id",
          "shipment_date"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_shipment_type",
        "fields": [
          "tenant_id",
          "shipment_type"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_on_tenant_id_and_source_invoice_platform_id",
        "fields": [
          "tenant_id",
          "source_invoice_platform_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_shipments_status_date_total",
        "fields": [
          "tenant_id",
          "status",
          "shipment_date",
          "deleted",
          "grand_total"
        ],
        "where": "(((status)::text = ANY (ARRAY[('CREATED'::character varying)::text, ('DRAFT_WAYBILL'::character varying)::text, ('INVOICED'::character varying)::text])) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "index_shipments_tenant_shipment_date_status",
        "fields": [
          "tenant_id",
          "shipment_date",
          "status"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_shipmesssssnts_3",
        "fields": [
          "tenant_id",
          "shipment_date",
          "status"
        ],
        "where": "(deleted = false)",
        "using": "btree"
      },
      {
        "name": "index_sms_templates_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_statistics_on_accounting_month",
        "fields": [
          "accounting_month"
        ],
        "using": "btree"
      },
      {
        "name": "index_statistics_on_accounting_year",
        "fields": [
          "accounting_year"
        ],
        "using": "btree"
      },
      {
        "name": "index_statistics_on_location_id",
        "fields": [
          "location_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_statistics_on_statistic_for",
        "fields": [
          "statistic_for"
        ],
        "using": "btree"
      },
      {
        "name": "index_statistics_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_suppressed_addresses_tenant_trimmed_email",
        "fields": [
          "tenant_id",
          "ignore",
          "email_address",
          "id"
        ],
        "where": "(ignore = false)",
        "using": "btree"
      },
      {
        "name": "index_tag_categories_tenant",
        "fields": [
          "tenant_id",
          "enterprise_id",
          "name",
          "hidden_tenants",
          "hidden",
          "performing_cleanup",
          "deleted",
          "id"
        ],
        "where": "((NOT hidden) AND (NOT performing_cleanup) AND (NOT deleted))",
        "using": "btree"
      },
      {
        "name": "index_tags_company",
        "fields": [
          "taggable_id",
          "taggable_type",
          "tag_category_id",
          "deleted"
        ],
        "where": "((NOT deleted) AND ((taggable_type)::text = 'Company'::text))",
        "using": "btree"
      },
      {
        "name": "index_tags_contact",
        "fields": [
          "taggable_id",
          "taggable_type",
          "tag_category_id",
          "deleted"
        ],
        "where": "((NOT deleted) AND ((taggable_type)::text = 'Contact'::text))",
        "using": "btree"
      },
      {
        "name": "index_tags_estimate",
        "fields": [
          "taggable_id",
          "taggable_type",
          "tag_category_id",
          "deleted"
        ],
        "where": "((NOT deleted) AND ((taggable_type)::text = 'Estimate'::text))",
        "using": "btree"
      },
      {
        "name": "index_tags_invoice",
        "fields": [
          "taggable_id",
          "taggable_type",
          "tag_category_id",
          "deleted"
        ],
        "where": "((NOT deleted) AND ((taggable_type)::text = 'Invoice'::text))",
        "using": "btree"
      },
      {
        "name": "index_tags_on_tag_category_id",
        "fields": [
          "tag_category_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tags_on_taggable_type_and_taggable_id",
        "fields": [
          "taggable_type",
          "taggable_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tags_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tags_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_taken_bys_on_location_id",
        "fields": [
          "location_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_taken_bys_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_taken_bys_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_targets_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_task_types_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_task_types_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tasks_on_entry_id",
        "fields": [
          "user_calendar_entry_id",
          "assigned_user_calendar_entry_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tasks_on_notify",
        "fields": [
          "notify_due_email_sent",
          "notify_due",
          "notify_date"
        ],
        "where": "((notify_due_email_sent = false) AND (notify_due = true))",
        "using": "btree"
      },
      {
        "name": "index_tasks_on_position",
        "fields": [
          "position"
        ],
        "using": "btree"
      },
      {
        "name": "index_tasks_on_taskable_type_and_taskable_id",
        "fields": [
          "taskable_type",
          "taskable_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tasks_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tasks_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tenants_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tokens_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tokens_on_user_id",
        "fields": [
          "user_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_tracker_hits_on_tracker_id",
        "fields": [
          "tracker_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_trackers_on_uuid",
        "fields": [
          "uuid"
        ],
        "using": "btree"
      },
      {
        "name": "index_unsubscribes_contact_new_email",
        "fields": [
          "contact_id",
          "unsub_type",
          "email"
        ],
        "where": "((unsub_type)::text = ANY (ARRAY[('hard_bounce'::character varying)::text, ('suppression_list'::character varying)::text]))",
        "using": "btree"
      },
      {
        "name": "index_unsubscribes_tenant_contact_type_email_fixed",
        "fields": [
          "tenant_id",
          "contact_id",
          "unsub_type",
          "email",
          "fixed"
        ],
        "where": "(fixed = false)",
        "using": "btree"
      },
      {
        "name": "index_unsubscribes_tenant_contact_type_email_not_fixed",
        "fields": [
          "tenant_id",
          "contact_id",
          "unsub_type",
          "email",
          "fixed"
        ],
        "where": "(fixed = true)",
        "using": "btree"
      },
      {
        "name": "index_users_on_deleted_at",
        "fields": [
          "deleted_at"
        ],
        "using": "btree"
      },
      {
        "name": "index_users_on_enterprise_id",
        "fields": [
          "enterprise_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_users_on_external_id",
        "fields": [
          "external_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_users_on_reset_password_token",
        "fields": [
          "reset_password_token"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_users_on_unlock_token",
        "fields": [
          "unlock_token"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_users_on_username",
        "fields": [
          "username"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "index_versions_on_item_type_and_item_id",
        "fields": [
          "item_type",
          "item_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_wips_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_workflows_on_company_id",
        "fields": [
          "company_id"
        ],
        "using": "btree"
      },
      {
        "name": "index_workflows_on_tenant_id",
        "fields": [
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_accounting_year_month",
        "fields": [
          "tenant_id",
          "accounting_year",
          "accounting_month",
          "voided"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_contact_id_ordered_date_idx",
        "fields": [
          "contact_id",
          "ordered_date"
        ],
        "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "invoices_contact_id_ordered_date_idx1",
        "fields": [
          "contact_id",
          "ordered_date"
        ],
        "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL) AND (pickup_date IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "invoices_contact_id_pickup_date_grand_total_idx",
        "fields": [
          "contact_id",
          "pickup_date",
          "grand_total"
        ],
        "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "invoices_contact_id_pickup_date_idx",
        "fields": [
          "contact_id",
          "pickup_date"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_contact_id_pickup_date_idx1",
        "fields": [
          "contact_id",
          "pickup_date"
        ],
        "where": "((voided = false) AND (deleted = false) AND (ordered_date IS NOT NULL) AND (pickup_date IS NOT NULL))",
        "using": "btree"
      },
      {
        "name": "invoices_dirty_skip_pdf_index",
        "fields": [
          "tenant_id"
        ],
        "where": "(dirty_skip_pdf = true)",
        "using": "btree"
      },
      {
        "name": "invoices_index",
        "fields": [
          "key",
          "ordered_date",
          "voided",
          "deleted",
          "needs_pdf",
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_ordered_date_index",
        "fields": [
          "ordered_date"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_taken_by",
        "fields": [
          "taken_by_user_id",
          "source_taken_by"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_created_at_idx",
        "fields": [
          "tenant_id",
          "created_at"
        ],
        "order": {
          "created_at": "desc"
        },
        "where": "(associations_complete = false)",
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_gin_name",
        "fields": [
          "tenant_id",
          "name"
        ],
        "using": "gin"
      },
      {
        "name": "invoices_tenant_id_idx1",
        "fields": [
          "tenant_id"
        ],
        "where": "(dirty = true)",
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_invoice_number_idx",
        "fields": [
          "tenant_id",
          "invoice_number"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_pickup_date_accounting_year_accounting_m_idx",
        "fields": [
          "tenant_id",
          "pickup_date",
          "accounting_year",
          "accounting_month",
          "daily_accounting_day",
          "daily_accounting_month",
          "daily_accounting_year"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_printsmith_id_idx",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "where": "(dirty = true)",
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_printsmith_id_idx1",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_source_updated_at_asc",
        "fields": [
          "tenant_id",
          "source_updated_at"
        ],
        "where": "(source_updated_at >= '2014-01-01 00:00:00'::timestamp without time zone)",
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_updated_at_voided_deleted_remote_po_upda_idx",
        "fields": [
          "tenant_id",
          "updated_at",
          "voided",
          "deleted",
          "remote_po_update"
        ],
        "where": "(remote_po_update = true)",
        "using": "btree"
      },
      {
        "name": "invoices_tenant_id_updated_at_voided_deleted_remote_proof_b_idx",
        "fields": [
          "tenant_id",
          "updated_at",
          "voided",
          "deleted",
          "remote_proof_by_update"
        ],
        "where": "(remote_proof_by_update = true)",
        "using": "btree"
      },
      {
        "name": "invoices_unpaid_invoices_checker",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "where": "((pickup_date IS NOT NULL) AND (amount_due > (0)::numeric) AND (deleted = false) AND ((voided IS NULL) OR (voided = false)))",
        "using": "btree"
      },
      {
        "name": "invoices_web",
        "fields": [
          "web",
          "company_id",
          "voided",
          "deleted"
        ],
        "where": "((web = true) AND (deleted = false) AND (voided = false))",
        "using": "btree"
      },
      {
        "name": "pdfs_index",
        "fields": [
          "key",
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "printsmith_id",
        "fields": [
          "printsmith_id",
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "prospect_status_item_contact_unique_index",
        "fields": [
          "prospect_status_item_id",
          "contact_id",
          "tenant_id"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "read_marks_reader_readable_index",
        "fields": [
          "reader_id",
          "reader_type",
          "readable_type",
          "readable_id"
        ],
        "using": "btree"
      },
      {
        "name": "sales_base_taxes_printsmith_id_tenant_id_idx",
        "fields": [
          "printsmith_id",
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "sales_summaries_tenant_id_closeoutdate_idx",
        "fields": [
          "tenant_id",
          "closeoutdate"
        ],
        "order": {
          "closeoutdate": "desc"
        },
        "using": "btree"
      },
      {
        "name": "sales_summaries_tenant_id_daily_accounting_year_daily_accou_idx",
        "fields": [
          "tenant_id",
          "daily_accounting_year",
          "daily_accounting_month",
          "daily_accounting_day"
        ],
        "using": "btree"
      },
      {
        "name": "sales_summary_pickups_tenant_id_printsmith_id_idx",
        "fields": [
          "tenant_id",
          "printsmith_id"
        ],
        "using": "btree"
      },
      {
        "name": "shipments_company_id_shipment_date_idx",
        "fields": [
          "company_id",
          "shipment_date"
        ],
        "where": "(NOT deleted)",
        "using": "btree"
      },
      {
        "name": "shipments_status_index",
        "fields": [
          "tenant_id"
        ],
        "where": "((status)::text = ANY (ARRAY[('CREATED'::character varying)::text, ('DRAFT_WAYBILL'::character varying)::text, ('INVOICED'::character varying)::text]))",
        "using": "btree"
      },
      {
        "name": "shipments_tenant_id_associations_complete_association_check_idx",
        "fields": [
          "tenant_id",
          "associations_complete",
          "association_checks"
        ],
        "where": "(associations_complete = false)",
        "using": "btree"
      },
      {
        "name": "shipments_tenant_id_dirty_idx",
        "fields": [
          "tenant_id",
          "dirty"
        ],
        "where": "(dirty = true)",
        "using": "btree"
      },
      {
        "name": "shipments_tenant_id_shipment_date_contact_id_deleted_idx",
        "fields": [
          "tenant_id",
          "shipment_date",
          "contact_id",
          "deleted"
        ],
        "where": "((shipment_date IS NOT NULL) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "statistics_date_tenant_id_idx",
        "fields": [
          "date",
          "tenant_id"
        ],
        "using": "btree"
      },
      {
        "name": "statistics_tenant_id_accounting_year_accounting_month_stati_idx",
        "fields": [
          "tenant_id",
          "accounting_year",
          "accounting_month",
          "statistic_for"
        ],
        "using": "btree"
      },
      {
        "name": "tenant_id",
        "fields": [
          "id",
          "inital_import_complete"
        ],
        "using": "btree"
      },
      {
        "name": "tenant_id_klass",
        "fields": [
          "tenant_id",
          "klass"
        ],
        "unique": true,
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_addresses",
        "fields": [
          "platform_id",
          "printsmith_id",
          "external_id",
          "id"
        ],
        "where": "(platform_id IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_companies",
        "fields": [
          "platform_id",
          "printsmith_id",
          "external_id",
          "id"
        ],
        "where": "(platform_id IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_companies_source_salesrep_id",
        "fields": [
          "id",
          "source_salesrep_id"
        ],
        "where": "((tmp_data ->> 'companies_source_salesrep_id'::text) IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_contacts",
        "fields": [
          "platform_id",
          "printsmith_id",
          "external_id",
          "id"
        ],
        "where": "(platform_id IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_invoices",
        "fields": [
          "platform_id",
          "printsmith_id",
          "external_id",
          "id"
        ],
        "where": "(platform_id IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_invoices_source_salesrep_id",
        "fields": [
          "id",
          "source_salesrep_id"
        ],
        "where": "((tmp_data ->> 'invoices_source_salesrep_id'::text) IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_pdfs",
        "fields": [
          "platform_id",
          "printsmith_id",
          "external_id",
          "id"
        ],
        "where": "(platform_id IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_backfill_index_shipments_source_salesrep_id",
        "fields": [
          "id",
          "source_salesrep_id"
        ],
        "where": "((tmp_data ->> 'shipments_source_salesrep_id'::text) IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_fix_1",
        "fields": [
          "tenant_id",
          "contact_id",
          "company_id"
        ],
        "where": "(company_id IS NOT NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_fix_10",
        "fields": [
          "tenant_id",
          "rolling_12_month_sales"
        ],
        "order": {
          "rolling_12_month_sales": "desc"
        },
        "where": "(guessed_gender IS NULL)",
        "using": "btree"
      },
      {
        "name": "tmp_fix_11",
        "fields": [
          "tenant_id"
        ],
        "where": "((retry_location_update = true) AND (deleted = false) AND ((voided = false) OR (voided IS NULL)))",
        "using": "btree"
      },
      {
        "name": "tmp_fix_3",
        "fields": [
          "tenant_id",
          "taken_by_user_id",
          "source_taken_by",
          "id",
          "created_at"
        ],
        "using": "btree"
      },
      {
        "name": "tmp_fix_6",
        "fields": [
          "updated"
        ],
        "using": "btree"
      },
      {
        "name": "tmp_fix_8",
        "fields": [
          "tenant_id",
          "pdf_error_count",
          "ordered_date"
        ],
        "order": {
          "ordered_date": "desc"
        },
        "where": "((needs_pdf = true) AND (ordered_date > '2015-07-01 00:00:00'::timestamp without time zone))",
        "using": "btree"
      },
      {
        "name": "tmp_fix_9",
        "fields": [
          "tenant_id",
          "pdf_error_count",
          "ordered_date"
        ],
        "order": {
          "ordered_date": "desc"
        },
        "where": "((needs_pdf = true) AND (ordered_date > '2015-07-01 00:00:00'::timestamp without time zone))",
        "using": "btree"
      },
      {
        "name": "tmp_invoice_number",
        "fields": [
          "invoice_number"
        ],
        "using": "btree"
      },
      {
        "name": "tmp_invoices_filter",
        "fields": [
          "tenant_id",
          "reorder_date",
          "pickup_date",
          "amount_due",
          "voided",
          "deleted"
        ],
        "using": "btree"
      },
      {
        "name": "tmp_sales_rep_1",
        "fields": [
          "sales_rep_user_id",
          "pickup_date"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "tmp_sales_rep_2",
        "fields": [
          "sales_rep_user_id",
          "ordered_date"
        ],
        "where": "((voided = false) AND (deleted = false))",
        "using": "btree"
      },
      {
        "name": "unpaid_invoices_idx",
        "fields": [
          "tenant_id"
        ],
        "where": "((voided IS DISTINCT FROM true) AND (deleted = false) AND (pickup_date IS NOT NULL) AND (amount_due > (0)::numeric))",
        "using": "btree"
      }
    ],
    "meta": {
      "rails": 4,
      "database": {
        "type": "postgres",
        "version": null,
        "extensions": [
          "plpgsql",
          "btree_gin",
          "hstore",
          "pg_stat_statements",
          "pg_trgm"
        ]
      },
      "unique_keys": [
        {
          "type": "columns",
          "category": null,
          "key": "all",
          "keys": [
            "name",
            "type",
            "precision",
            "scale",
            "default",
            "null",
            "limit",
            "array"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,default,array",
          "keys": [
            "name",
            "type",
            "default",
            "array"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,default,null",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,limit",
          "keys": [
            "name",
            "type",
            "limit"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,limit,default",
          "keys": [
            "name",
            "type",
            "limit",
            "default"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,limit,default,null",
          "keys": [
            "name",
            "type",
            "limit",
            "default",
            "null"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,limit,null",
          "keys": [
            "name",
            "type",
            "limit",
            "null"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,null",
          "keys": [
            "name",
            "type",
            "null"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,precision",
          "keys": [
            "name",
            "type",
            "precision"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,precision,null",
          "keys": [
            "name",
            "type",
            "precision",
            "null"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,precision,scale",
          "keys": [
            "name",
            "type",
            "precision",
            "scale"
          ]
        },
        {
          "type": "columns",
          "category": null,
          "key": "name,type,precision,scale,default",
          "keys": [
            "name",
            "type",
            "precision",
            "scale",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "boolean",
          "key": "all",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "boolean",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "boolean",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "boolean",
          "key": "name,type,default,null",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "date",
          "key": "all",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "date",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "datetime",
          "key": "all",
          "keys": [
            "name",
            "type",
            "precision",
            "null",
            "default",
            "array"
          ]
        },
        {
          "type": "fields",
          "category": "datetime",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "datetime",
          "key": "name,type,default,array",
          "keys": [
            "name",
            "type",
            "default",
            "array"
          ]
        },
        {
          "type": "fields",
          "category": "datetime",
          "key": "name,type,null",
          "keys": [
            "name",
            "type",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "datetime",
          "key": "name,type,precision",
          "keys": [
            "name",
            "type",
            "precision"
          ]
        },
        {
          "type": "fields",
          "category": "datetime",
          "key": "name,type,precision,null",
          "keys": [
            "name",
            "type",
            "precision",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "decimal",
          "key": "all",
          "keys": [
            "name",
            "type",
            "precision",
            "scale",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "decimal",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "decimal",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "decimal",
          "key": "name,type,precision,scale",
          "keys": [
            "name",
            "type",
            "precision",
            "scale"
          ]
        },
        {
          "type": "fields",
          "category": "decimal",
          "key": "name,type,precision,scale,default",
          "keys": [
            "name",
            "type",
            "precision",
            "scale",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "float",
          "key": "all",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "float",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "float",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "hstore",
          "key": "all",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "hstore",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "hstore",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "all",
          "keys": [
            "name",
            "type",
            "default",
            "null",
            "array",
            "limit"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type,default,array",
          "keys": [
            "name",
            "type",
            "default",
            "array"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type,default,null",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type,limit",
          "keys": [
            "name",
            "type",
            "limit"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type,limit,null",
          "keys": [
            "name",
            "type",
            "limit",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "integer",
          "key": "name,type,null",
          "keys": [
            "name",
            "type",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "jsonb",
          "key": "all",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "jsonb",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "jsonb",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "jsonb",
          "key": "name,type,default,null",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "all",
          "keys": [
            "name",
            "type",
            "limit",
            "null",
            "default",
            "array"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,default,array",
          "keys": [
            "name",
            "type",
            "default",
            "array"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,default,null",
          "keys": [
            "name",
            "type",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,limit",
          "keys": [
            "name",
            "type",
            "limit"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,limit,default",
          "keys": [
            "name",
            "type",
            "limit",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,limit,default,null",
          "keys": [
            "name",
            "type",
            "limit",
            "default",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "string",
          "key": "name,type,null",
          "keys": [
            "name",
            "type",
            "null"
          ]
        },
        {
          "type": "fields",
          "category": "text",
          "key": "all",
          "keys": [
            "name",
            "type",
            "null",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "text",
          "key": "name,type",
          "keys": [
            "name",
            "type"
          ]
        },
        {
          "type": "fields",
          "category": "text",
          "key": "name,type,default",
          "keys": [
            "name",
            "type",
            "default"
          ]
        },
        {
          "type": "fields",
          "category": "text",
          "key": "name,type,null",
          "keys": [
            "name",
            "type",
            "null"
          ]
        },
        {
          "type": "foreign_keys",
          "category": null,
          "key": "all",
          "keys": [
            "left",
            "right",
            "name",
            "on_update",
            "on_delete",
            "column"
          ]
        },
        {
          "type": "foreign_keys",
          "category": null,
          "key": "left,right",
          "keys": [
            "left",
            "right"
          ]
        },
        {
          "type": "foreign_keys",
          "category": null,
          "key": "left,right,column",
          "keys": [
            "left",
            "right",
            "column"
          ]
        },
        {
          "type": "foreign_keys",
          "category": null,
          "key": "left,right,name,on_update,on_delete",
          "keys": [
            "left",
            "right",
            "name",
            "on_update",
            "on_delete"
          ]
        },
        {
          "type": "indexes",
          "category": null,
          "key": "all",
          "keys": [
            "name",
            "fields",
            "using",
            "where",
            "order",
            "unique"
          ]
        },
        {
          "type": "indexes",
          "category": null,
          "key": "name,fields,order,using",
          "keys": [
            "name",
            "fields",
            "order",
            "using"
          ]
        },
        {
          "type": "indexes",
          "category": null,
          "key": "name,fields,order,where,using",
          "keys": [
            "name",
            "fields",
            "order",
            "where",
            "using"
          ]
        },
        {
          "type": "indexes",
          "category": null,
          "key": "name,fields,unique,using",
          "keys": [
            "name",
            "fields",
            "unique",
            "using"
          ]
        },
        {
          "type": "indexes",
          "category": null,
          "key": "name,fields,using",
          "keys": [
            "name",
            "fields",
            "using"
          ]
        },
        {
          "type": "indexes",
          "category": null,
          "key": "name,fields,where,using",
          "keys": [
            "name",
            "fields",
            "where",
            "using"
          ]
        }
      ]
    }
  },
  "investigate": {
    "issues": [
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_account_id",
        "message": "account_history_data.source_account_id => source_accounts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "company_id",
        "message": "account_history_data.company_id => companies - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_invoice_id",
        "message": "account_history_data.source_invoice_id => source_invoices - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "invoice_id",
        "message": "account_history_data.invoice_id => invoices - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_journal_id",
        "message": "account_history_data.source_journal_id => source_journals - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "adjustment_id",
        "message": "account_history_data.adjustment_id => adjustments - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "finalpaycct_id",
        "message": "account_history_data.finalpaycct_id => finalpayccts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "finalpaymentcreditcard_id",
        "message": "account_history_data.finalpaymentcreditcard_id => finalpaymentcreditcards - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "partialpaycct_id",
        "message": "account_history_data.partialpaycct_id => partialpayccts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "partialpaymentcreditcard_id",
        "message": "account_history_data.partialpaymentcreditcard_id => partialpaymentcreditcards - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "totaltax_id",
        "message": "account_history_data.totaltax_id => totaltaxes - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "tenant_id",
        "message": "account_history_data.tenant_id => tenants - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "printsmith_id",
        "message": "account_history_data.printsmith_id => printsmiths - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "platform_id",
        "message": "account_history_data.platform_id => platforms - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "user_id",
        "message": "action_logs.user_id => users - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sales_rep_user_id",
        "message": "action_logs.sales_rep_user_id => sales_rep_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "location_id",
        "message": "action_logs.location_id => locations - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "context_id",
        "message": "action_logs.context_id => contexts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "element_id",
        "message": "activities.element_id => elements - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "contact_id",
        "message": "activities.contact_id => contacts - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "estimate_id",
        "message": "activities.estimate_id => estimates - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "phone_call_id",
        "message": "activities.phone_call_id => phone_calls - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "task_id",
        "message": "activities.task_id => tasks - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "email_id",
        "message": "activities.email_id => emails - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "comment_id",
        "message": "activities.comment_id => comments - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "order_id",
        "message": "activities.order_id => orders - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sale_id",
        "message": "activities.sale_id => sales - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "tracker_id",
        "message": "activities.tracker_id => trackers - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "email_message_id",
        "message": "activities.email_message_id => email_messages - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "note_id",
        "message": "activities.note_id => notes - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "campaign_id",
        "message": "activities.campaign_id => campaigns - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "campaign_message_id",
        "message": "activities.campaign_message_id => campaign_messages - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "parent_contact_id",
        "message": "activities.parent_contact_id => parent_contacts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_comment_id",
        "message": "activities.portal_comment_id => portal_comments - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "meeting_id",
        "message": "activities.meeting_id => meetings - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "inquiry_id",
        "message": "activities.inquiry_id => inquiries - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "shipment_id",
        "message": "activities.shipment_id => shipments - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "external_id",
        "message": "addresses.external_id => externals - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "location_user_id",
        "message": "adjustments.location_user_id => location_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sales_summary_id",
        "message": "adjustments.sales_summary_id => sales_summaries - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "daily_sales_summary_id",
        "message": "adjustments.daily_sales_summary_id => daily_sales_summaries - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "enterprise_id",
        "message": "assets.enterprise_id => enterprises - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "badge_id",
        "message": "badges_sashes.badge_id => badges - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sash_id",
        "message": "badges_sashes.sash_id => sashes - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "budget_id",
        "message": "budget_months.budget_id => budgets - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "business_plan_id",
        "message": "business_plan_marketing_activities.business_plan_id => business_plans - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "calendar_id",
        "message": "calendar_entries.calendar_id => calendars - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "calendar_entry_id",
        "message": "campaign_calendar_entries.calendar_entry_id => calendar_entries - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "primary_id",
        "message": "campaign_groups.primary_id => primaries - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "parent_message_id",
        "message": "campaign_messages.parent_message_id => parent_messages - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sent_message_id",
        "message": "campaign_messages.sent_message_id => sent_messages - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "email_template_id",
        "message": "campaigns.email_template_id => email_templates - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "parent_id",
        "message": "campaigns.parent_id => parents - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "identity_id",
        "message": "campaigns.identity_id => identities - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "contact_list_id",
        "message": "campaigns_contact_lists.contact_list_id => contact_lists - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "commentable_id",
        "message": "comments.commentable_id => commentables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_billtoaddress_id",
        "message": "companies.source_billtoaddress_id => source_billtoaddresses - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_billtocontact_id",
        "message": "companies.source_billtocontact_id => source_billtocontacts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_salesrep_id",
        "message": "companies.source_salesrep_id => source_salesreps - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_shiptoaddress_id",
        "message": "companies.source_shiptoaddress_id => source_shiptoaddresses - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_contact_id",
        "message": "companies.source_contact_id => source_contacts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_shippingmode_id",
        "message": "companies.source_shippingmode_id => source_shippingmodes - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_taxtable_id",
        "message": "companies.source_taxtable_id => source_taxtables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "account_payable_id",
        "message": "companies.account_payable_id => account_payables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "account_display_id",
        "message": "companies.account_display_id => account_displays - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "primary_contact_id",
        "message": "companies.primary_contact_id => primary_contacts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "prospect_status_id",
        "message": "companies.prospect_status_id => prospect_statuses - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "invoice_address_id",
        "message": "companies.invoice_address_id => invoice_addresses - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "statement_address_id",
        "message": "companies.statement_address_id => statement_addresses - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "lead_type_id",
        "message": "companies.lead_type_id => lead_types - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "mbe_id",
        "message": "companies.mbe_id => mbes - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sales_rep_platform_id",
        "message": "companies.sales_rep_platform_id => sales_rep_platforms - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "contact_group_id",
        "message": "contact_groups_contacts.contact_group_id => contact_groups - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sales_rep_id",
        "message": "contact_list_rules.sales_rep_id => sales_reps - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "taken_by_id",
        "message": "contact_list_rules.taken_by_id => taken_bies - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_address_id",
        "message": "contacts.source_address_id => source_addresses - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "address_id",
        "message": "contacts.address_id => addresses - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_inquiry_id",
        "message": "contacts.source_inquiry_id => source_inquiries - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "old_prospect_status_id",
        "message": "contacts.old_prospect_status_id => old_prospect_statuses - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "country_id",
        "message": "countries_enterprises.country_id => countries - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "holiday_id",
        "message": "country_states_holidays.holiday_id => holidays - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "country_state_id",
        "message": "country_states_holidays.country_state_id => country_states - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "email_inbox_id",
        "message": "email_message_activities.email_inbox_id => email_inboxes - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "last_email_message_id",
        "message": "email_message_activities.last_email_message_id => last_email_messages - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "forward_scan_id",
        "message": "email_message_activities.forward_scan_id => forward_scans - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "reverse_scan_id",
        "message": "email_message_activities.reverse_scan_id => reverse_scans - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "label_id",
        "message": "email_tags.label_id => labels - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "email_tag_id",
        "message": "email_tags_emails.email_tag_id => email_tags - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "email_template_field_id",
        "message": "email_template_values.email_template_field_id => email_template_fields - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "wrapper_id",
        "message": "email_templates.wrapper_id => wrappers - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "production_location_id",
        "message": "email_templates.production_location_id => production_locations - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "copied_email_template_id",
        "message": "email_templates.copied_email_template_id => copied_email_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "copied_root_email_template_id",
        "message": "email_templates.copied_root_email_template_id => copied_root_email_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "from_user_id",
        "message": "emails.from_user_id => from_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "to_user_id",
        "message": "emails.to_user_id => to_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "thread_id",
        "message": "emails.thread_id => threads - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sending_as_user_id",
        "message": "emails.sending_as_user_id => sending_as_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "message_id",
        "message": "emails.message_id => messages - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "prospect_status_item_contact_id",
        "message": "emails.prospect_status_item_contact_id => prospect_status_item_contacts - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "banner_id",
        "message": "enterprises.banner_id => banners - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_email_template_id",
        "message": "enterprises.default_email_template_id => default_email_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "intercom_app_id",
        "message": "enterprises.intercom_app_id => intercom_apps - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_estimate_comment_template_id",
        "message": "enterprises.portal_estimate_comment_template_id => portal_estimate_comment_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_estimate_approved_template_id",
        "message": "enterprises.portal_estimate_approved_template_id => portal_estimate_approved_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_estimate_canceled_template_id",
        "message": "enterprises.portal_estimate_canceled_template_id => portal_estimate_canceled_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_company_emailt_id",
        "message": "enterprises.default_company_emailt_id => default_company_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_contact_emailt_id",
        "message": "enterprises.default_contact_emailt_id => default_contact_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_estimate_emailt_id",
        "message": "enterprises.default_estimate_emailt_id => default_estimate_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_order_emailt_id",
        "message": "enterprises.default_order_emailt_id => default_order_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_sale_emailt_id",
        "message": "enterprises.default_sale_emailt_id => default_sale_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_inquiry_emailt_id",
        "message": "enterprises.default_inquiry_emailt_id => default_inquiry_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_proof_comment_template_id",
        "message": "enterprises.portal_proof_comment_template_id => portal_proof_comment_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_proof_approved_template_id",
        "message": "enterprises.portal_proof_approved_template_id => portal_proof_approved_templates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_shipment_emailt_id",
        "message": "enterprises.default_shipment_emailt_id => default_shipment_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_tenant_id",
        "message": "enterprises.default_tenant_id => default_tenants - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_proof_emailt_id",
        "message": "enterprises.default_proof_emailt_id => default_proof_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_revision_emailt_id",
        "message": "enterprises.default_revision_emailt_id => default_revision_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_proof_reminder_emailt_id",
        "message": "enterprises.default_proof_reminder_emailt_id => default_proof_reminder_emailts - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "proof_banner_id",
        "message": "enterprises.proof_banner_id => proof_banners - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "salesrep_id",
        "message": "estimates.salesrep_id => salesreps - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "notes_id",
        "message": "estimates.notes_id => notes - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "special_instructions_id",
        "message": "estimates.special_instructions_id => special_instructions - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "documentlocation_id",
        "message": "estimates.documentlocation_id => documentlocations - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_estimate_id",
        "message": "estimates.source_estimate_id => source_estimates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "converted_invoice_id",
        "message": "estimates.converted_invoice_id => converted_invoices - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "pdf_id",
        "message": "estimates.pdf_id => pdfs - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "taken_by_user_id",
        "message": "estimates.taken_by_user_id => taken_by_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "archived_user_id",
        "message": "estimates.archived_user_id => archived_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "holdstate_id",
        "message": "estimates.holdstate_id => holdstates - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "last_created_id",
        "message": "etl_settings.last_created_id => last_createds - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "last_updated_id",
        "message": "etl_settings.last_updated_id => last_updateds - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "group_id",
        "message": "groups_tenants.group_id => groups - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "task_type_id",
        "message": "hidden_task_types.task_type_id => task_types - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "unique_id",
        "message": "inquiries.unique_id => uniques - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "interest_id",
        "message": "interest_contexts.interest_id => interests - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "interest_category_id",
        "message": "interests.interest_category_id => interest_categories - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "proof_approved_id",
        "message": "invoices.proof_approved_id => proof_approveds - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "proof_id",
        "message": "invoices.proof_id => proofs - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_invoice_external_id",
        "message": "invoices.source_invoice_external_id => source_invoice_externals - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "job_id",
        "message": "job_stats.job_id => jobs - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "user_calendar_entry_id",
        "message": "meeting_attendees.user_calendar_entry_id => user_calendar_entries - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "prospect_status_item_id",
        "message": "notes.prospect_status_item_id => prospect_status_items - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "target_user_id",
        "message": "original_users.target_user_id => target_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "phoneable_id",
        "message": "phone_calls.phoneable_id => phoneables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "revision_of_id",
        "message": "proofs.revision_of_id => revision_ofs - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "prospect_status_version_id",
        "message": "prospect_statuses.prospect_status_version_id => prospect_status_versions - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "readable_id",
        "message": "read_marks.readable_id => readables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "reader_id",
        "message": "read_marks.reader_id => readers - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "report_id",
        "message": "report_rows.report_id => reports - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sales_base_id",
        "message": "sales_base_taxes.sales_base_id => sales_bases - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_sales_base_id",
        "message": "sales_base_taxes.source_sales_base_id => source_sales_bases - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_account_history_item_id",
        "message": "sales_summary_pickups.source_account_history_item_id => source_account_history_items - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "account_history_item_id",
        "message": "sales_summary_pickups.account_history_item_id => account_history_items - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_sales_summary_id",
        "message": "sales_summary_pickups.source_sales_summary_id => source_sales_summaries - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "shared_id",
        "message": "shared_users.shared_id => shareds - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_account_platform_id",
        "message": "shipments.source_account_platform_id => source_account_platforms - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "source_invoice_platform_id",
        "message": "shipments.source_invoice_platform_id => source_invoice_platforms - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "mbe_service_id",
        "message": "shipments.mbe_service_id => mbe_services - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "packge_type_id",
        "message": "shipments.packge_type_id => packge_types - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "goods_type_id",
        "message": "shipments.goods_type_id => goods_types - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "courier_id",
        "message": "shipments.courier_id => couriers - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "courier_service_id",
        "message": "shipments.courier_service_id => courier_services - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "sms_template_id",
        "message": "sms_template_categories.sms_template_id => sms_templates - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "tag_category_id",
        "message": "tag_category_contexts.tag_category_id => tag_categories - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "last_scanned_id",
        "message": "tag_category_contexts.last_scanned_id => last_scanneds - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "taggable_id",
        "message": "tags.taggable_id => taggables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "taskable_id",
        "message": "tasks.taskable_id => taskables - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "assigned_user_id",
        "message": "tasks.assigned_user_id => assigned_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "assigned_user_calendar_entry_id",
        "message": "tasks.assigned_user_calendar_entry_id => assigned_user_calendar_entries - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "task_repeat_id",
        "message": "tasks.task_repeat_id => task_repeats - Relationship not found in DB, so have inferred this relationship. You may want to check that this relation is correct"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "marketing_unsubscribe_source_id",
        "message": "tenants.marketing_unsubscribe_source_id => marketing_unsubscribe_sources - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "campaign_monitor_client_id",
        "message": "tenants.campaign_monitor_client_id => campaign_monitor_clients - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_inquiry_user_id",
        "message": "tenants.default_inquiry_user_id => default_inquiry_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_proof_approved_production_location_id",
        "message": "tenants.portal_proof_approved_production_location_id => portal_proof_approved_production_locations - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "portal_proof_amended_production_location_id",
        "message": "tenants.portal_proof_amended_production_location_id => portal_proof_amended_production_locations - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "mbe_tenant_id",
        "message": "tenants.mbe_tenant_id => mbe_tenants - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "mbe_multistore_id",
        "message": "tenants.mbe_multistore_id => mbe_multistores - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "mbe_store_id",
        "message": "tenants.mbe_store_id => mbe_stores - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "default_lead_type_id",
        "message": "tenants.default_lead_type_id => default_lead_types - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "gmail_history_id",
        "message": "tokens.gmail_history_id => gmail_histories - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "fixed_by_user_id",
        "message": "unsubscribes.fixed_by_user_id => fixed_by_users - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step3_attach_columns",
        "location": "lookup_foreign_table",
        "key": "item_id",
        "message": "versions.item_id => items - Table not found for a column that looks like foreign_key"
      },
      {
        "step": "step4_attach_erd_files_models",
        "location": "extract_options",
        "key": null,
        "message": "undefined local variable or method `belongs_to_required' for #<Step4AttachErdFiles:0x00007fc75e290338>"
      }
    ]
  }
}