[
  {
    "class_name": "AccountHistoryData",
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "belongs_to": [
      {
        "name": "company",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Activity",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      },
      {
        "name": "estimate",
        "opts": {
        },
        "block": null
      },
      {
        "name": "invoice",
        "opts": {
        },
        "block": null
      },
      {
        "name": "order",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sale",
        "opts": {
        },
        "block": null
      },
      {
        "name": "phone_call",
        "opts": {
        },
        "block": null
      },
      {
        "name": "task",
        "opts": {
        },
        "block": null
      },
      {
        "name": "email",
        "opts": {
        },
        "block": null
      },
      {
        "name": "comment",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tracker",
        "opts": {
        },
        "block": null
      },
      {
        "name": "note",
        "opts": {
        },
        "block": null
      },
      {
        "name": "shipment",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaign",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaign_message",
        "opts": {
        },
        "block": null
      },
      {
        "name": "portal_comment",
        "opts": {
        },
        "block": null
      },
      {
        "name": "comment",
        "opts": {
        },
        "block": null
      },
      {
        "name": "inquiry",
        "opts": {
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ where(hide: false, deleted: false).order(\"activities.source_created_at DESC NULLS LAST\") }"
    },
    "before_create": [
      {
        "name": "update_source_created_at"
      }
    ],
    "before_save": [
      {
        "name": "update_source_created_at"
      }
    ],
    "after_create": [
      {
        "name": "update_last_contact"
      }
    ],
    "after_save": [
      {
        "name": "update_last_contact"
      }
    ]
  },
  {
    "class_name": "Address",
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Adjustment",
    "default_scope": {
      "block": "{ where(affect_sales: true, deleted: false, voided: false) }"
    },
    "scopes": [
      {
        "name": "for_dates",
        "opts": {
        },
        "block": "->(start_date, end_date) { where(posted_date: start_date..end_date) }"
      },
      {
        "name": "non_closed_out",
        "opts": {
        },
        "block": "-> { where(accounting_month: nil) }"
      }
    ],
    "belongs_to": [
      {
        "name": "invoice",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "sales_rep_user_id"
        },
        "block": null
      },
      {
        "name": "location",
        "opts": {
          "class_name": "Location",
          "foreign_key": "id",
          "primary_key": "location_user_id"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ApiLog",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Asset",
    "attr_accessor": [
      "file",
      "new_file_contents",
      "new_file_name"
    ],
    "before_save": [
      {
        "name": "upload_to_s3"
      }
    ],
    "after_destroy": [
      {
        "name": "remove_from_s3",
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ where.not(file_hash: nil) }"
    },
    "scopes": [
      {
        "name": "by_tenant",
        "opts": {
        },
        "block": "-> (tenant) { where(\"assets.tenant_id = ? OR assets.global = true\", tenant.id) }"
      },
      {
        "name": "by_enterprise",
        "opts": {
        },
        "block": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
      }
    ]
  },
  {
    "class_name": "BackgroundJob",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "BackgroundJobResult",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Backup",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
          "inverse_of": "backups"
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Bookmark",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "custx": {
      "validates_uniqueness_of": {
        "name": "user_id",
        "opts": {
          "scope": [
            "context_type",
            "context_id"
          ]
        }
      }
    },
    "scopes": [
      {
        "name": "for_user",
        "opts": {
        },
        "block": "-> (user) { where(user_id: user.id) }"
      }
    ]
  },
  {
    "class_name": "Budget",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "budget_months",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "default_scope": {
      "on": "create",
      "block": null
    },
    "validate": [
      {
        "names": [
          "ensure_valid_financial_year"
        ],
        "opts": {
          "on": "create"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "BudgetMonth",
    "belongs_to": [
      {
        "name": "budget",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "budget",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "BusinessPlan",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "business_plan_sales_investments",
        "opts": {
        },
        "block": null
      },
      {
        "name": "business_plan_marketing_activities",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "BusinessPlanMarketingActivity",
    "belongs_to": [
      {
        "name": "business_plan",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "BusinessPlanSalesInvestment",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "business_plan",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Calendar",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
          "required": true
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "user",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "calendar_entries",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "CalendarEntry",
    "belongs_to": [
      {
        "name": "calendar",
        "opts": {
          "required": true
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "calendar",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "CalendarEntryDeletion",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
          "required": true
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "user",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "tokens",
        "opts": {
          "through": "user"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Campaign",
    "enum": [
      {
        "status": [
          "unsent",
          "sent",
          "sending",
          "complete"
        ]
      },
      {
        "method": [
          "email",
          "sms",
          "print",
          "phone"
        ]
      },
      {
        "schedule_week": {
          "first_week": 1,
          "second_week": 2,
          "third_week": 3,
          "last_week": -1
        }
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "length": {
            "minimum": 4
          }
        }
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "contact_lists",
        "opts": {
          "autosave": true
        },
        "block": "-> { uniq }, autosave: true"
      }
    ],
    "has_many": [
      {
        "name": "messages",
        "opts": {
          "class_name": "CampaignMessage",
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "exclusions",
        "opts": {
          "class_name": "CampaignExclusion",
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "counts",
        "opts": {
          "class_name": "CampaignCount",
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "trackers",
        "opts": {
          "through": "messages"
        },
        "block": null
      },
      {
        "name": "hits",
        "opts": {
          "through": "trackers"
        },
        "block": null
      },
      {
        "name": "email_template_values",
        "opts": {
          "as": "element"
        },
        "block": null
      },
      {
        "name": "campaign_calendar_entries",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "email_template",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "identity",
        "opts": {
        },
        "block": null
      }
    ],
    "before_save": [
      {
        "name": "change_schedule"
      },
      {
        "name": "update_scheduled_at"
      },
      {
        "name": "make_global_if_enterprise"
      }
    ],
    "scopes": [
      {
        "name": "scheduled",
        "opts": {
        },
        "block": "-> (tenant) { where(parent_id: nil, scheduled: true).where(\"campaigns.schedule_interval_type <> 'none' OR (campaigns.schedule_interval_type = 'none' AND (NOW() - (campaigns.schedule_date[1] - interval '#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second') <= interval '3 days') AND NOT EXISTS(SELECT null FROM campaigns c1 WHERE c1.tenant_id = #{tenant.id} AND c1.parent_id = campaigns.id AND c1.test = FALSE AND c1.created_at >= ((campaigns.schedule_date[1] - interval '#{Time.now.in_time_zone(tenant.time_zone).utc_offset} second') - interval '2 days' )))\") }"
      },
      {
        "name": "without_hidden",
        "opts": {
        },
        "block": "-> (tenant) { where(\"(campaigns.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE AND campaigns.global_hide IS DISTINCT FROM TRUE\") }"
      },
      {
        "name": "require_selected_enterprise",
        "opts": {
        },
        "block": "-> (tenant) { where(\"campaigns.enterprise_campaign = FALSE OR (campaigns.enterprise_campaign = TRUE AND ? = ANY(campaigns.selected_tenants))\", tenant.id) }"
      }
    ],
    "attr_accessor": [
      "new_schedule_date"
    ],
    "default_scope": {
      "block": null
    },
    "validate": [
      {
        "names": [
          "name_must_be_unique",
          "name_must_not_be_in_global"
        ],
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "CampaignCalendarEntry",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaign",
        "opts": {
        },
        "block": null
      },
      {
        "name": "calendar_entry",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "CampaignCount",
    "belongs_to": [
      {
        "name": "campaign",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "CampaignExclusion",
    "belongs_to": [
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaign",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "CampaignMessage",
    "belongs_to": [
      {
        "name": "campaign",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "trackers",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "has_many": [
      {
        "name": "hits",
        "opts": {
          "through": "trackers"
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "has_clicks",
        "opts": {
        },
        "block": "-> { where(\"EXISTS (SELECT null FROM campaign_messages_trackers INNER JOIN trackers ON trackers.id = campaign_messages_trackers.tracker_id INNER JOIN tracker_hits ON tracker_hits.tracker_id = trackers.id WHERE trackers.method != 0 AND trackers.path NOT LIKE '%unsubscribe%' AND campaign_messages_trackers.campaign_message_id = campaign_messages.id)\") }"
      }
    ]
  },
  {
    "class_name": "Comment",
    "belongs_to": [
      {
        "name": "commentable",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ order(created_at: :asc) }"
    }
  },
  {
    "class_name": "Company",
    "enum": [
      {
        "prospect_sentiment": {
          "bad": 0,
          "normal": 1,
          "great": 2
        }
      }
    ],
    "has_one": [
      {
        "name": "location",
        "opts": {
          "class_name": "Location",
          "foreign_key": "id",
          "primary_key": "location_user_id"
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "sales_rep_user",
        "opts": {
          "class_name": "User"
        },
        "block": null
      },
      {
        "name": "primary_contact",
        "opts": {
          "class_name": "Contact"
        },
        "block": "->  (company) {\n    if Platform.is_mbe?(company)\n      unscope(:where).where.not(deleted: true).where(id: company.primary_contact_id)\n    else\n      unscope(:where).where(\"id = ? OR (platform_id = ? AND platform_id IS NOT NULL)\", company.primary_contact_id, company.source_contact_id).where.not(deleted: true).where.not(temp: true)\n    end\n  }, class_name: \"Contact\""
      },
      {
        "name": "tenant",
        "opts": {
          "inverse_of": "companies"
        },
        "block": null
      },
      {
        "name": "statement_address",
        "opts": {
          "class_name": "Address"
        },
        "block": null
      },
      {
        "name": "invoice_address",
        "opts": {
          "class_name": "Address"
        },
        "block": null
      },
      {
        "name": "prospect_status",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "account_history_data",
        "opts": {
          "class_name": "AccountHistoryData"
        },
        "block": null
      },
      {
        "name": "estimates",
        "opts": {
          "inverse_of": "company"
        },
        "block": null
      },
      {
        "name": "invoices",
        "opts": {
          "inverse_of": "company"
        },
        "block": null
      },
      {
        "name": "sales",
        "opts": {
          "inverse_of": "company"
        },
        "block": null
      },
      {
        "name": "orders",
        "opts": {
          "inverse_of": "company"
        },
        "block": null
      },
      {
        "name": "statistics",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contacts",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
          "as": "taskable"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "as": "phoneable"
        },
        "block": null
      },
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "inquiries",
        "opts": {
        },
        "block": null
      }
    ],
    "attr_accessor": [
      "new_tag_category_id"
    ]
  },
  {
    "class_name": "CompanyMetric",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Contact",
    "enum": [
      {
        "potential": {
          "cold": 1,
          "warm": 2,
          "hot": 3
        }
      },
      {
        "potential": {
          "cold": 1,
          "warm": 2,
          "hot": 3
        }
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status",
        "opts": {
        },
        "block": null
      },
      {
        "name": "parent_contact",
        "opts": {
          "class_name": "Contact",
          "foreign_key": "parent_contact_id"
        },
        "block": null
      },
      {
        "name": "address",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "invoices",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sales",
        "opts": {
        },
        "block": null
      },
      {
        "name": "estimates",
        "opts": {
        },
        "block": null
      },
      {
        "name": "orders",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
          "as": "taskable"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "as": "phoneable"
        },
        "block": null
      },
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaign_messages",
        "opts": {
        },
        "block": null
      },
      {
        "name": "emails",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "next_activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "interest_contexts",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "inquiries",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_item_contacts",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "location",
        "opts": {
          "class_name": "Location",
          "foreign_key": "id",
          "primary_key": "location_user_id"
        },
        "block": null
      },
      {
        "name": "sales_rep_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "sales_rep_user_id"
        },
        "block": null
      },
      {
        "name": "inquiry",
        "opts": {
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "contact_lists",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "before_save": [
      {
        "name": "check_email_changed"
      }
    ],
    "custx": {
      "pg_search_scope": {
        "name": "search_by_text",
        "opts": {
          "against": [
            "first_name",
            "last_name"
          ],
          "using": {
            "tsearch": {
              "prefix": true
            }
          }
        }
      }
    },
    "scopes": [
      {
        "name": "marketing",
        "opts": {
        },
        "block": "-> (tenant) { joins(\"LEFT OUTER JOIN companies ON companies.id = contacts.company_id\").where(tenant_id: tenant.id, deleted: false, temp: false, unsubscribed: false, companies: {marketing_do_not_mail: false}) }"
      },
      {
        "name": "no_pending_estimates",
        "opts": {
        },
        "block": "-> { where(\"NOT EXISTS(SELECT null FROM estimates WHERE estimates.contact_id = contacts.id AND estimates.on_pending_list = true)\") }"
      },
      {
        "name": "no_pending_invoices",
        "opts": {
        },
        "block": "-> { where(\"NOT EXISTS(SELECT null FROM invoices WHERE invoices.contact_id = contacts.id AND invoices.on_pending_list = true)\") }"
      },
      {
        "name": "rolling_1_month_sales",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0)').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.month)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as rolling_1_month_sales\") }"
      },
      {
        "name": "calculated_rolling_1_month_sales",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 1.month)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_1_month_sales\") }"
      },
      {
        "name": "calculated_rolling_12_month_sales",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_sales\") }"
      },
      {
        "name": "calculated_rolling_12_month_sales_ly",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 2.years)..(Date.tomorrow - 1.year)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_sales_ly\") }"
      },
      {
        "name": "calculated_rolling_12_month_sales_ly_ly",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (Date.tomorrow - 3.years)..(Date.tomorrow - 2.years)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_sales_ly_ly\") }"
      },
      {
        "name": "calculated_rolling_12_month_cogs",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('ROUND(CASE COALESCE(SUM(invoices.grand_total_inc_tax), 0) WHEN 0 THEN 0 ELSE COALESCE(SUM(invoices.total_cost), 0) / SUM(invoices.grand_total_inc_tax) END, 2)').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_rolling_12_month_cogs\") }"
      },
      {
        "name": "calculated_financial_year_sales",
        "opts": {
        },
        "block": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: FinancialYear.new(tenant).start_date..FinancialYear.new(tenant).end_date).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_sales\") }"
      },
      {
        "name": "calculated_financial_year_sales_ly",
        "opts": {
        },
        "block": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (FinancialYear.new(tenant).start_date - 1.year)..(FinancialYear.new(tenant).end_date - 1.year)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_sales_ly\") }"
      },
      {
        "name": "calculated_financial_year_sales_ly_ly",
        "opts": {
        },
        "block": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select('COALESCE(SUM(invoices.grand_total), 0) + COALESCE(SUM(adjustments.total), 0)').invoiced(invoiced_only).joins('LEFT OUTER JOIN \"adjustments\" ON adjustments.invoice_id = invoices.id AND adjustments.tenant_id = invoices.tenant_id AND adjustments.affect_sales = true AND adjustments.deleted = FALSE AND adjustments.voided = FALSE').where(pickup_date: (FinancialYear.new(tenant).start_date - 2.years)..(FinancialYear.new(tenant).end_date - 2.years)).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_sales_ly_ly\") }"
      },
      {
        "name": "calculated_financial_year_cogs",
        "opts": {
        },
        "block": "-> (tenant, invoiced_only=false) { select(\"(#{Sale.select('ROUND(CASE COALESCE(SUM(invoices.grand_total_inc_tax), 0) WHEN 0 THEN 0 ELSE COALESCE(SUM(invoices.total_cost), 0) / SUM(invoices.grand_total_inc_tax) END, 2)').invoiced(invoiced_only).where(pickup_date: FinancialYear.new(tenant).start_date..FinancialYear.new(tenant).end_date).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_financial_year_cogs\") }"
      },
      {
        "name": "calculated_average_invoice",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('COALESCE(ROUND(AVG(invoices.grand_total), 2), 0)').invoiced(invoiced_only).where(pickup_date: (Date.tomorrow - 1.year)..Date.tomorrow).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_average_invoice\") }"
      },
      {
        "name": "calculated_oldest_rolling_1_invoice",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 1.month)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_1_invoice\") }"
      },
      {
        "name": "calculated_oldest_rolling_12_invoice",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 1.year)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_invoice\") }"
      },
      {
        "name": "calculated_oldest_rolling_12_ly_invoice",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 2.years)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_ly_invoice\") }"
      },
      {
        "name": "calculated_oldest_rolling_12_ly_ly_invoice",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').where('invoices.pickup_date >= ?', (Date.tomorrow - 3.years)).order(pickup_date: :asc).limit(1).to_sql}) as calculated_oldest_rolling_12_ly_ly_invoice\") }"
      },
      {
        "name": "calculated_first_sale_date",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.contact_id = contacts.id').order(pickup_date: :asc).limit(1).to_sql}) as calculated_first_sale_date\") }"
      },
      {
        "name": "calculated_last_pickup_date",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').invoiced(invoiced_only).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').order(pickup_date: :desc).limit(1).to_sql}) as calculated_last_pickup_date\") }"
      },
      {
        "name": "calculated_last_sale_order_date",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.ordered_date').where.not(ordered_date: nil).where('invoices.contact_id = contacts.id').invoiced(invoiced_only).order(ordered_date: :desc).limit(1).to_sql}) as calculated_last_sale_order_date\") }"
      },
      {
        "name": "calculated_last_sale_pickup_date",
        "opts": {
        },
        "block": "-> (invoiced_only=false) { select(\"(#{Sale.select('invoices.pickup_date').where.not(pickup_date: nil).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').invoiced(invoiced_only).order(pickup_date: :desc).limit(1).to_sql}) as calculated_last_sale_pickup_date\") }"
      },
      {
        "name": "calculated_last_shipment_date",
        "opts": {
        },
        "block": "-> { select(\"(#{Shipment.select('shipments.shipment_date').where.not(shipment_date: nil).where('shipments.tenant_id = contacts.tenant_id AND shipments.shipment_date IS NOT NULL AND shipments.contact_id = contacts.id').order(shipment_date: :desc).limit(1).to_sql}) as calculated_last_shipment_date\") }"
      },
      {
        "name": "order_count",
        "opts": {
        },
        "block": "-> { select(\"(#{Order.select('COUNT(*)').where(on_pending_list: true).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as order_count\") }"
      },
      {
        "name": "with_ranks",
        "opts": {
        },
        "block": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales DESC NULLS LAST) AS calculated_rank\") }"
      },
      {
        "name": "with_ranks_ly",
        "opts": {
        },
        "block": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales_ly DESC NULLS LAST) AS calculated_rank_ly\") }"
      },
      {
        "name": "with_ranks_ly_ly",
        "opts": {
        },
        "block": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.rolling_12_month_sales_ly_ly DESC NULLS LAST) AS calculated_rank_ly_ly\") }"
      },
      {
        "name": "with_ranks_financial_year",
        "opts": {
        },
        "block": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales DESC NULLS LAST) AS calculated_rank_financial_year\") }"
      },
      {
        "name": "with_ranks_financial_year_ly",
        "opts": {
        },
        "block": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales_ly DESC NULLS LAST) AS calculated_rank_financial_year_ly\") }"
      },
      {
        "name": "with_ranks_financial_year_ly_ly",
        "opts": {
        },
        "block": "-> { select(\"contacts.*, rank() OVER (PARTITION BY contacts.tenant_id ORDER BY contacts.financial_year_sales_ly_ly DESC NULLS LAST) AS calculated_rank_financial_year_ly_ly\") }"
      },
      {
        "name": "calculated_last_email_sent",
        "opts": {
        },
        "block": "-> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = 'email' AND activities.email_id IS NOT NULL\").order('activities.source_created_at DESC NULLS LAST').limit(1).to_sql}) AS calculated_last_email_sent\") }"
      },
      {
        "name": "calculated_last_email_received",
        "opts": {
        },
        "block": "-> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = 'email' AND activities.email_id IS NULL\").order('activities.source_created_at DESC NULLS LAST').limit(1).to_sql}) AS calculated_last_email_received\") }"
      },
      {
        "name": "calculated_last_phone_call",
        "opts": {
        },
        "block": "-> { select(\"(#{Activity.select(:source_created_at).where(\"activities.contact_id = contacts.id AND activities.activity_for = 'phone_call' AND activities.phone_call_id IS NOT NULL\").order('activities.source_created_at DESC NULLS LAST').limit(1).to_sql}) AS calculated_last_phone_call\") }"
      },
      {
        "name": "calculated_last_order_date",
        "opts": {
        },
        "block": "-> { select(\"(#{Order.select('invoices.ordered_date').where.not(ordered_date: nil).where('invoices.contact_id = contacts.id').order(ordered_date: :desc).limit(1).to_sql}) as calculated_last_order_date\") }"
      },
      {
        "name": "calculated_order_count",
        "opts": {
        },
        "block": "-> { select(\"(#{Order.select('COUNT(*)').where(on_pending_list: true).where('invoices.ordered_date IS NOT NULL AND invoices.contact_id = contacts.id').to_sql}) as calculated_order_count\") }"
      },
      {
        "name": "by_parents",
        "opts": {
        },
        "block": "->  { where(\"contacts.parent_contact_id = contacts.id\") }"
      },
      {
        "name": "by_parents_with_unmapped",
        "opts": {
        },
        "block": "-> { where(\"contacts.parent_contact_id = contacts.id OR parent_contact_id = ?\", -1) }"
      },
      {
        "name": "single_purchase",
        "opts": {
        },
        "block": "-> { where.not(single_sale_only_at: nil) }"
      },
      {
        "name": "first_sale",
        "opts": {
        },
        "block": "-> { where.not(first_sale_at: nil) }"
      }
    ],
    "attr_accessor": [
      "score"
    ]
  },
  {
    "class_name": "ContactGroup",
    "has_and_belongs_to_many": [
      {
        "name": "contacts",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ContactList",
    "require": [
      "zip"
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "length": {
            "minimum": 4
          }
        }
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "rules",
        "opts": {
          "class_name": "ContactListRule",
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "exclusions",
        "opts": {
          "class_name": "ContactListExclusion",
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "counts",
        "opts": {
          "class_name": "ContactListCount",
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "campaigns",
        "opts": {
        },
        "block": "-> { uniq }"
      },
      {
        "name": "contacts",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "scopes": [
      {
        "name": "tenant_scope",
        "opts": {
        },
        "block": "lambda { |tenant_id| where(\"contact_lists.tenant_id = ? OR contact_lists.global = ?\", tenant_id, true) }"
      },
      {
        "name": "user_scope",
        "opts": {
        },
        "block": "lambda { |user_id| joins(\"INNER JOIN users ON users.id = '#{user_id}'\").where(\"contact_lists.hide_from_tenant = 'false' OR users.role = 'Super User' OR users.role = 'Enterprise User'\", user_id) }"
      }
    ]
  },
  {
    "class_name": "ContactListCount",
    "belongs_to": [
      {
        "name": "contact_list",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ContactListExclusion",
    "belongs_to": [
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact_list",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ContactListRule",
    "belongs_to": [
      {
        "name": "contact_list",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taken_by",
        "opts": {
        },
        "block": null
      }
    ],
    "attr_accessor": [
      "date_format"
    ],
    "default_scope": {
      "block": "do |rule|\n    if rule.contact_list.global\n      rule.sales_rep_id = nil\n      rule.taken_by_id = nil\n    end\n\n    if ContactListRule.get_type(rule.category).nil? && ContactListRule.get_modifiers(rule.category).nil?\n      rule.errors[:base] << \"Invalid Category.\"\n    else\n\n      if ContactListRule.exists?(contact_list_id: rule.contact_list.id, category: rule.category, operand: rule.operand, value: rule.value, value2: rule.value2, modifier: rule.modifier, modifier_operand: rule.modifier_operand, modifier_value: rule.modifier_value, modifier_value2: rule.modifier_value2, modifier2: rule.modifier2, modifier2_operand: rule.modifier2_operand, modifier2_value: rule.modifier2_value, modifier2_value2: rule.modifier2_value2, negate: rule.negate, sales_rep_id: rule.sales_rep_id, taken_by_id: rule.taken_by_id)\n        rule.errors[:base] << \"This rule already exists.\"\n      end\n\n      if !ContactListRule.get_type(rule.category).nil?\n        if rule.logical_operand == \"unknown\"\n          rule.errors[:base] << \"Invalid Operand.\"\n        else\n          case ContactListRule.get_type(rule.category)\n          when \"numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"inverted_numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"inverted_integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"existence\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"boolean\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"value\"\n            case rule.category\n            when \"company_status\"\n              rule.errors[:base] << \"Invalid value.\" unless ContactListRule.company_status.any? { |possible_value| possible_value[1] == value }\n            when \"lead_stage\"\n              if value != \"any\"\n                lead_stage = ProspectStatus.where(id: value).first\n                rule.errors[:base] << \"Invalid lead stage.\" unless lead_stage\n              end\n            when \"lead_type\"\n              lead_type = LeadType.where(id: value).first\n              rule.errors[:base] << \"Invalid lead type.\" unless lead_type\n            when \"privacy\"\n              if !rule.contact_list.enterprise.privacy_types.include?(value)\n                rule.errors[:base] << \"Invalid privacy option.\"\n              end\n            else\n              rule.errors[:base] << \"Unhandled value validation.\"\n            end\n          when \"match\"\n            rule.errors[:base] << \"Invalid value.\" if rule.value.blank?\n            rule.value2 = \"\"\n          when \"tag\"\n            tag_category = TagCategory.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Tag.\" if tag_category.nil?\n            rule.value2 = \"\"\n          when \"campaign\"\n            campaign = Campaign.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Campaign.\" if campaign.nil?\n            if rule.value2.blank?\n              rule.value2 = \"\"\n            elsif %w[opened not_opened].include?(rule.value2)\n              # Do nothing\n            else\n              rule.errors[:base] << \"Invalid Campaign send status.\" if campaign.nil?\n            end\n\n          when \"date\"\n            rule.errors[:base] << \"Date is invalid.\" unless date_validate?(rule.value, rule.date_format)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date is invalid.\" unless date_validate?(rule.value2, rule.date_format)\n            end\n          when \"relative_date\"\n            rule.errors[:base] << \"Date must be a relative date. (Such as '3 days ago')\" unless date_relative_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a relative date. (Such as '3 days ago').\" unless date_relative_validate?(rule.value2)\n            end\n          when \"quarter\"\n            rule.errors[:base] << \"Date must be a quarter.\" unless quarter_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a quarter.\" unless quarter_validate?(rule.value2)\n            end\n          when \"sales_rep\"\n            if contact_list.tenant.sales_rep_for_locations\n              location = Location.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Location.\" if location.nil?\n            else\n              sales_rep = User.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Sales Rep.\" if sales_rep.nil?\n            end\n          when \"estimates_status\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"industry\"\n            valid = false\n            industries = rule.value.try(:split, \",\") || []\n            if industries.count > 0\n              valid = (industries - Company.sub_industries_hash.map { |item| item[\"name\"] }).empty?\n            end\n            rule.value2 = \"\"\n            rule.errors[:base] << \"Invalid Industry\" if !valid\n          else\n            rule.errors[:base] << \"Unhandled validation.\"\n          end\n        end\n      end\n\n      if !rule.modifier.blank?\n        errors = rule.valid_modifier?(1)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n      if !rule.modifier2.blank?\n        errors = rule.valid_modifier?(2)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n    end\n  end"
    },
    "validate": [
      {
        "names": [

        ],
        "opts": {
        },
        "block": "do |rule|\n    if rule.contact_list.global\n      rule.sales_rep_id = nil\n      rule.taken_by_id = nil\n    end\n\n    if ContactListRule.get_type(rule.category).nil? && ContactListRule.get_modifiers(rule.category).nil?\n      rule.errors[:base] << \"Invalid Category.\"\n    else\n\n      if ContactListRule.exists?(contact_list_id: rule.contact_list.id, category: rule.category, operand: rule.operand, value: rule.value, value2: rule.value2, modifier: rule.modifier, modifier_operand: rule.modifier_operand, modifier_value: rule.modifier_value, modifier_value2: rule.modifier_value2, modifier2: rule.modifier2, modifier2_operand: rule.modifier2_operand, modifier2_value: rule.modifier2_value, modifier2_value2: rule.modifier2_value2, negate: rule.negate, sales_rep_id: rule.sales_rep_id, taken_by_id: rule.taken_by_id)\n        rule.errors[:base] << \"This rule already exists.\"\n      end\n\n      if !ContactListRule.get_type(rule.category).nil?\n        if rule.logical_operand == \"unknown\"\n          rule.errors[:base] << \"Invalid Operand.\"\n        else\n          case ContactListRule.get_type(rule.category)\n          when \"numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"inverted_numeric\"\n            rule.errors[:base] << \"Value must be numeric.\" unless numeric_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be numeric.\" unless numeric_validate?(rule.value2)\n            end\n          when \"integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"inverted_integer\"\n            rule.errors[:base] << \"Value must be an integer.\" unless integer_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Value2 must be an integer.\" unless integer_validate?(rule.value2)\n            end\n          when \"existence\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"boolean\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"value\"\n            case rule.category\n            when \"company_status\"\n              rule.errors[:base] << \"Invalid value.\" unless ContactListRule.company_status.any? { |possible_value| possible_value[1] == value }\n            when \"lead_stage\"\n              if value != \"any\"\n                lead_stage = ProspectStatus.where(id: value).first\n                rule.errors[:base] << \"Invalid lead stage.\" unless lead_stage\n              end\n            when \"lead_type\"\n              lead_type = LeadType.where(id: value).first\n              rule.errors[:base] << \"Invalid lead type.\" unless lead_type\n            when \"privacy\"\n              if !rule.contact_list.enterprise.privacy_types.include?(value)\n                rule.errors[:base] << \"Invalid privacy option.\"\n              end\n            else\n              rule.errors[:base] << \"Unhandled value validation.\"\n            end\n          when \"match\"\n            rule.errors[:base] << \"Invalid value.\" if rule.value.blank?\n            rule.value2 = \"\"\n          when \"tag\"\n            tag_category = TagCategory.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Tag.\" if tag_category.nil?\n            rule.value2 = \"\"\n          when \"campaign\"\n            campaign = Campaign.unscoped.where(id: rule.value).first\n            rule.errors[:base] << \"Invalid Campaign.\" if campaign.nil?\n            if rule.value2.blank?\n              rule.value2 = \"\"\n            elsif %w[opened not_opened].include?(rule.value2)\n              # Do nothing\n            else\n              rule.errors[:base] << \"Invalid Campaign send status.\" if campaign.nil?\n            end\n\n          when \"date\"\n            rule.errors[:base] << \"Date is invalid.\" unless date_validate?(rule.value, rule.date_format)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date is invalid.\" unless date_validate?(rule.value2, rule.date_format)\n            end\n          when \"relative_date\"\n            rule.errors[:base] << \"Date must be a relative date. (Such as '3 days ago')\" unless date_relative_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a relative date. (Such as '3 days ago').\" unless date_relative_validate?(rule.value2)\n            end\n          when \"quarter\"\n            rule.errors[:base] << \"Date must be a quarter.\" unless quarter_validate?(rule.value)\n            if rule.operand == \"between\"\n              rule.errors[:base] << \"Second date must be a quarter.\" unless quarter_validate?(rule.value2)\n            end\n          when \"sales_rep\"\n            if contact_list.tenant.sales_rep_for_locations\n              location = Location.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Location.\" if location.nil?\n            else\n              sales_rep = User.where(id: sales_rep_id).first\n              rule.errors[:base] << \"Invalid Sales Rep.\" if sales_rep.nil?\n            end\n          when \"estimates_status\"\n            rule.value = \"\"\n            rule.value2 = \"\"\n          when \"industry\"\n            valid = false\n            industries = rule.value.try(:split, \",\") || []\n            if industries.count > 0\n              valid = (industries - Company.sub_industries_hash.map { |item| item[\"name\"] }).empty?\n            end\n            rule.value2 = \"\"\n            rule.errors[:base] << \"Invalid Industry\" if !valid\n          else\n            rule.errors[:base] << \"Unhandled validation.\"\n          end\n        end\n      end\n\n      if !rule.modifier.blank?\n        errors = rule.valid_modifier?(1)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n      if !rule.modifier2.blank?\n        errors = rule.valid_modifier?(2)\n        rule.errors[:base].concat(errors) if errors.count > 0\n      end\n\n    end\n  end"
      }
    ]
  },
  {
    "class_name": "Country",
    "has_many": [
      {
        "name": "country_states",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "enterprises",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "CountryState",
    "belongs_to": [
      {
        "name": "country",
        "opts": {
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "holidays",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Deployment",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "backups",
        "opts": {
          "primary_key": "tenant_id",
          "foreign_key": "tenant_id"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Email",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sending_as_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "sending_as_user_id"
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "email_tags",
        "opts": {
        },
        "block": null
      },
      {
        "name": "trackers",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "has_many": [
      {
        "name": "hits",
        "opts": {
          "through": "trackers"
        },
        "block": null
      }
    ],
    "attr_accessor": [
      "from_name",
      "to_name"
    ],
    "alias_attribute": [
      {
        "left": "date",
        "right": "created_at"
      },
      {
        "left": "from_address",
        "right": "from"
      },
      {
        "left": "to_address",
        "right": "to"
      }
    ]
  },
  {
    "class_name": "EmailAlias",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "custx": {
      "validates_uniqueness_of": {
        "name": "email",
        "opts": {
          "scope": "user_id"
        }
      }
    },
    "default_scope": {
      "block": null
    },
    "validate": [
      {
        "names": [
          "check_email_valid"
        ],
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailAttachment",
    "establish_connection": "mail_",
    "belongs_to": [
      {
        "name": "email_message",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "email_inbox",
        "opts": {
          "through": "email_message"
        },
        "block": null
      }
    ],
    "alias_attribute": [
      {
        "left": "message",
        "right": "email_message"
      },
      {
        "left": "inbox",
        "right": "email_inbox"
      }
    ]
  },
  {
    "class_name": "EmailCredential",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailInbox",
    "table_name": "inboxes",
    "primary_key": "id",
    "establish_connection": "mail_",
    "has_many": [
      {
        "name": "email_messages",
        "opts": {
        },
        "block": null
      }
    ],
    "alias_attribute": [
      {
        "left": "messages",
        "right": "email_messages"
      }
    ]
  },
  {
    "class_name": "EmailInboxWrite",
    "establish_connection": "mail_",
    "table_name": "inboxes"
  },
  {
    "class_name": "EmailLabel",
    "establish_connection": "mail_",
    "has_and_belongs_to_many": [
      {
        "name": "email_messages",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "belongs_to": [
      {
        "name": "email_inbox",
        "opts": {
        },
        "block": null
      }
    ],
    "alias_attribute": [
      {
        "left": "inbox",
        "right": "email_inbox"
      },
      {
        "left": "messages",
        "right": "email_messages"
      }
    ]
  },
  {
    "class_name": "EmailMessage",
    "table_name": "messages",
    "primary_key": "id",
    "establish_connection": "mail_",
    "has_and_belongs_to_many": [
      {
        "name": "email_labels",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "has_many": [
      {
        "name": "email_attachments",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "email_inbox",
        "opts": {
        },
        "block": null
      }
    ],
    "alias_attribute": [
      {
        "left": "inbox",
        "right": "email_inbox"
      },
      {
        "left": "labels",
        "right": "email_labels"
      }
    ],
    "attr_accessor": [
      "failed",
      "sent_id"
    ]
  },
  {
    "class_name": "EmailStatus",
    "enum": [
      {
        "status": [
          "bounce",
          "complaint",
          "unsubscribe"
        ]
      }
    ]
  },
  {
    "class_name": "EmailTag",
    "has_and_belongs_to_many": [
      {
        "name": "emails",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailTemplate",
    "require": [
      "fuzzystringmatch"
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "wrapper",
        "opts": {
          "class_name": "EmailTemplate",
          "foreign_key": "wrapper_id"
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "email_template_fields",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "email_template_categories",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "hidden_email_templates",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "before_save": [
      {
        "name": "nullify_global_tenant_id"
      }
    ],
    "accepts_nested_attributes_for": [
      {
        "name": "email_template_fields",
        "opts": {
          "reject_if": "#<Proc:0x00007ff8588e7b20 /Users/davidcruwys/dev/printspeak/printspeak-master/app/models/email_template.rb:15 (lambda)>",
          "allow_destroy": true
        }
      }
    ],
    "attr_accessor": [
      "hide"
    ],
    "scopes": [
      {
        "name": "by_category",
        "opts": {
        },
        "block": "-> (tenant, categories) { joins(\"LEFT OUTER JOIN email_template_categories ON email_template_categories.email_template_id = email_templates.id\").where(\"email_template_categories.category = ? OR email_templates.id = ?\", categories.to_s.blank? ? 0 : categories.to_s, tenant.enterprise.default_email_template_id).distinct }"
      },
      {
        "name": "by_tenant",
        "opts": {
        },
        "block": "-> (tenant) { where(shell: false, hidden: false).where.not(archived: true).where(\"email_templates.tenant_id = ? OR (email_templates.global = ? AND email_templates.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(\"LEFT OUTER JOIN hidden_email_templates ON hidden_email_templates.email_template_id = email_templates.id\").having(\"? != ALL(array_agg(hidden_email_templates.tenant_id)) OR 0 = ALL(array_agg(COALESCE(hidden_email_templates.tenant_id, 0)))\", tenant.id).group(\"email_templates.id\") }"
      },
      {
        "name": "by_enterprise",
        "opts": {
        },
        "block": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
      },
      {
        "name": "only_category",
        "opts": {
        },
        "block": "-> (categories) { joins(\"LEFT OUTER JOIN email_template_categories ON email_template_categories.email_template_id = email_templates.id\").where(\"email_template_categories.category = ?\", categories.to_s.blank? ? 0 : categories.to_s).distinct }"
      }
    ],
    "default_scope": {
      "block": null
    },
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": true
        }
      },
      {
        "name": "name",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      },
      {
        "name": "subject",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      }
    ],
    "validate": [
      {
        "names": [
          "name_must_be_unique",
          "name_must_not_be_in_global"
        ],
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailTemplateCategory",
    "enum": [
      {
        "categories": {
          "inquiries": 9,
          "shipments": 10,
          "estimates": 1,
          "orders": 2,
          "sales": 3,
          "campaigns": 5,
          "contacts": 6,
          "companies": 7,
          "comments": 8
        }
      }
    ],
    "belongs_to": [
      {
        "name": "email_template",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailTemplateField",
    "belongs_to": [
      {
        "name": "email_template",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "values",
        "opts": {
          "class_name": "EmailTemplateValue"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailTemplateValue",
    "belongs_to": [
      {
        "name": "email_template_field",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaign",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EmailValidation",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Enterprise",
    "has_many": [
      {
        "name": "tenants",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise_togglefields",
        "opts": {
        },
        "block": null
      },
      {
        "name": "news",
        "opts": {
        },
        "block": null
      },
      {
        "name": "groups",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaigns",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact_lists",
        "opts": {
        },
        "block": null
      },
      {
        "name": "task_types",
        "opts": {
        },
        "block": null
      },
      {
        "name": "workflows",
        "opts": {
        },
        "block": null
      },
      {
        "name": "interest_categories",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_statuses",
        "opts": {
        },
        "block": "-> { where(lead_type_id: 0, tenant_id: 0, prospect_status_version_id: 0).order(name: :asc) }"
      },
      {
        "name": "enterprise_salestargets",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise_business_welcomes",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_types",
        "opts": {
        },
        "block": "-> { where(tenant_id: nil, global: true) }"
      },
      {
        "name": "lead_sources",
        "opts": {
        },
        "block": null
      },
      {
        "name": "holidays",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_items",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tag_categories",
        "opts": {
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "countries",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "default_group",
        "opts": {
          "class_name": "Group"
        },
        "block": "-> { where(default: true) }, class_name: \"Group\""
      }
    ],
    "default_scope": {
      "block": "{ where(deleted_at: nil) }"
    }
  },
  {
    "class_name": "EnterpriseBusinessWelcome",
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EnterpriseSalestarget",
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EnterpriseTogglefield",
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "enterprise",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Estimate",
    "default_scope": {
      "block": "{ where(voided: false, deleted: false) }"
    },
    "has_secure_token": [
      {
        "name": "public_token"
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
          "inverse_of": "estimates"
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
          "inverse_of": "estimates"
        },
        "block": null
      },
      {
        "name": "production_location",
        "opts": {
          "inverse_of": "invoices"
        },
        "block": null
      },
      {
        "name": "contact_group",
        "opts": {
        },
        "block": null
      },
      {
        "name": "pdf",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taken_by",
        "opts": {
        },
        "block": null
      },
      {
        "name": "inquiry",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "tasks",
        "opts": {
          "as": "taskable"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "as": "phoneable"
        },
        "block": null
      },
      {
        "name": "comments",
        "opts": {
          "as": "commentable"
        },
        "block": null
      },
      {
        "name": "emails",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
          "as": "context"
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "contact",
        "opts": {
          "class_name": "Contact",
          "foreign_key": "id",
          "primary_key": "contact_id"
        },
        "block": null
      },
      {
        "name": "location",
        "opts": {
          "class_name": "Location",
          "foreign_key": "id",
          "primary_key": "location_user_id"
        },
        "block": null
      },
      {
        "name": "taken_by_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "taken_by_user_id"
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "for_tenant",
        "opts": {
        },
        "block": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
      },
      {
        "name": "for_dates",
        "opts": {
        },
        "block": "->(start_date, end_date) { where(ordered_date: start_date..end_date) }"
      },
      {
        "name": "including_companies",
        "opts": {
        },
        "block": "-> { includes(:company) }"
      },
      {
        "name": "won",
        "opts": {
        },
        "block": "-> { where(status: \"Won\") }"
      },
      {
        "name": "lost",
        "opts": {
        },
        "block": "-> { where(status: \"Lost\") }"
      },
      {
        "name": "pending",
        "opts": {
        },
        "block": "-> { where(status: \"\") }"
      },
      {
        "name": "overdue",
        "opts": {
        },
        "block": "-> (today = Time.now) { where(\"wanted_by < ?\", today) }"
      },
      {
        "name": "lonely",
        "opts": {
        },
        "block": "lambda { joins(\"LEFT OUTER JOIN tags ON estimates.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }"
      },
      {
        "name": "needs_pdf",
        "opts": {
        },
        "block": "-> { where(\"ordered_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }"
      }
    ]
  },
  {
    "class_name": "EstimateElement",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "estimate",
        "opts": {
        },
        "block": null
      },
      {
        "name": "element",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EtlSetting",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Event",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "EventStat",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Exclusion",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "custx": {
      "validates_uniqueness_of": {
        "name": "user_id",
        "opts": {
          "scope": [
            "context_type",
            "context_id"
          ]
        }
      }
    },
    "scopes": [
      {
        "name": "for_user",
        "opts": {
        },
        "block": "-> (user) { where(user_id: (user.is_a? Integer) ? user : user.id) }"
      }
    ]
  },
  {
    "class_name": "FilterDefault",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "custx": {
      "validates_uniqueness_of": {
        "name": "user_id",
        "opts": {
          "scope": [
            "context_type",
            "context_id"
          ]
        }
      }
    }
  },
  {
    "class_name": "Group",
    "default_scope": {
      "block": "{ order(name: :asc) }"
    },
    "has_and_belongs_to_many": [
      {
        "name": "tenants",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "enterprise",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "HiddenEmailTemplate",
    "belongs_to": [
      {
        "name": "email_template",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "HiddenHoliday",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "holiday",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "HiddenLeadType",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "HiddenTaskType",
    "belongs_to": [
      {
        "name": "task_type",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Holiday",
    "default_scope": {
      "block": "do\n    validate_holiday_dates\n  end"
    },
    "scopes": [
      {
        "name": "visible",
        "opts": {
        },
        "block": "-> {\n    includes(:hidden_holidays)\n    .where(hidden_holidays: { holiday_id: nil })\n  }"
      },
      {
        "name": "has_dates",
        "opts": {
        },
        "block": "-> {\n    where.not(holiday_dates: { date: nil }) # SHOW ONLY HOLIDAYS THAT HAVE DATES\n  }"
      },
      {
        "name": "by_tenant_all",
        "opts": {
        },
        "block": "-> (tenant) {\n    where(\"holidays.global = ? OR holidays.tenant_id = ?\", true, tenant.id)\n  }"
      },
      {
        "name": "by_state",
        "opts": {
        },
        "block": "-> (state) {\n    joins(:country_states).where(\"country_states.name = ?\",  state)\n  }"
      },
      {
        "name": "by_month_year",
        "opts": {
        },
        "block": "-> (month, year) {\n      where(\"extract(month from holiday_dates.date) = ?\", month)\n      .where(\"extract(year from holiday_dates.date) = ?\", year)\n  }"
      },
      {
        "name": "current_month",
        "opts": {
        },
        "block": "-> {\n      where(\"extract(month from holiday_dates.date) = ?\",  Date.today.month)\n      .where(\"extract(year from holiday_dates.date) = ?\",  Date.today.year)\n  }"
      },
      {
        "name": "gone",
        "opts": {
        },
        "block": "-> (selected_date) { where(\"extract(day from holiday_dates.date) < ?\", selected_date.day) }"
      },
      {
        "name": "left",
        "opts": {
        },
        "block": "-> (selected_date) { where(\"extract(day from holiday_dates.date) > ?\", selected_date.day) }"
      }
    ],
    "has_many": [
      {
        "name": "holiday_dates",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "hidden_holidays",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "country_states",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Holiday name is required."
          }
        }
      },
      {
        "name": "holiday_dates",
        "opts": {
          "presence": {
            "message": "Holiday dates are required."
          }
        }
      }
    ],
    "validate": [
      {
        "names": [

        ],
        "opts": {
        },
        "block": "do\n    validate_holiday_dates\n  end"
      }
    ]
  },
  {
    "class_name": "HolidayDate",
    "belongs_to": [
      {
        "name": "holiday",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "HolidayState",
    "belongs_to": [
      {
        "name": "holidays",
        "opts": {
        },
        "block": null
      },
      {
        "name": "country_states",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Identity",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "locations",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaigns",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Inquiry",
    "has_many": [
      {
        "name": "inquiry_attachments",
        "opts": {
        },
        "block": null
      },
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "as": "phoneable"
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
          "as": "taskable"
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
          "as": "context"
        },
        "block": null
      }
    ],
    "enum": [
      {
        "inquiry_type": {
          "Website": 1,
          "Email": 2
        }
      },
      {
        "inquiry_status": {
          "Unread": 0,
          "Read": 7,
          "Awaiting Details": 1,
          "In progress": 2,
          "Replied": 3,
          "Won": 4,
          "Lost": 5,
          "Archived": 6
        }
      },
      {
        "inquiry_lost_reason": {
          "Do not offer products/services requested": 1,
          "Test inquiry": 2,
          "Insufficient information to quote": 3,
          "Unable to reach contact": 4,
          "Responded too late": 5,
          "Estimate lost": 6,
          "SPAM": 7
        }
      },
      {
        "inquiry_identifier": {
          "Quote Request": 1,
          "Send a file": 2,
          "Contact us": 3,
          "Shipment Request": 4,
          "General": 5,
          "Logistica": 6,
          "e-link": 7,
          "Web Services": 8,
          "Touch": 9,
          "Address": 10,
          "Spedizioni-imballaggio": 11,
          "Printing-Marketing": 12,
          "E-commerce": 13,
          "SafeValue": 14,
          "1M Project": 15
        }
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "InquiryAttachment",
    "belongs_to": [
      {
        "name": "inquiry",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Interest",
    "belongs_to": [
      {
        "name": "interest_category",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ order(\"LOWER(name) ASC\") }"
    }
  },
  {
    "class_name": "InterestCategory",
    "enum": [
      {
        "interest_type": {
          "personal": 1,
          "product": 2
        }
      }
    ],
    "default_scope": {
      "block": "{ order(\"LOWER(name) ASC\") }"
    },
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "interests",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "InterestContext",
    "belongs_to": [
      {
        "name": "interest",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Invoice",
    "default_scope": {
      "block": "{ where(\"invoices.voided = false or invoices.voided is null\").where(deleted: false) }"
    },
    "after_commit": [
      {
        "name": "recalc_statistics"
      }
    ],
    "has_secure_token": [
      {
        "name": "public_token"
      }
    ],
    "has_many": [
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "actions",
        "opts": {
          "as": "actionable"
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
          "as": "taskable"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "as": "phoneable"
        },
        "block": null
      },
      {
        "name": "emails",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "proofs",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
          "inverse_of": "invoices"
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
          "inverse_of": "invoices"
        },
        "block": null
      },
      {
        "name": "production_location",
        "opts": {
          "inverse_of": "invoices"
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
          "inverse_of": "sales"
        },
        "block": null
      },
      {
        "name": "pdf",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "location",
        "opts": {
          "class_name": "Location",
          "foreign_key": "id",
          "primary_key": "location_user_id"
        },
        "block": null
      },
      {
        "name": "sales_rep_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "sales_rep_user_id"
        },
        "block": null
      },
      {
        "name": "taken_by_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "taken_by_user_id"
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
          "class_name": "Contact",
          "foreign_key": "id",
          "primary_key": "contact_id"
        },
        "block": null
      },
      {
        "name": "adjustment",
        "opts": {
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "for_tenant",
        "opts": {
        },
        "block": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
      },
      {
        "name": "for_dates",
        "opts": {
        },
        "block": "->(start_date, end_date) { where(ordered_date: start_date..end_date) }"
      },
      {
        "name": "including_companies",
        "opts": {
        },
        "block": "-> { includes(:company) }"
      },
      {
        "name": "lonely",
        "opts": {
        },
        "block": "lambda { joins(\"LEFT OUTER JOIN tags ON invoices.id = tags.taggable_id\").where(\"tags.taggable_id IS NULL\") }"
      },
      {
        "name": "needs_pdf",
        "opts": {
        },
        "block": "-> { where(\"ordered_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, ordered_date DESC\") }"
      },
      {
        "name": "invoiced",
        "opts": {
        },
        "block": "-> (invoiced_only=true) { where(Invoice.INVOICED) if invoiced_only }"
      },
      {
        "name": "deferred",
        "opts": {
        },
        "block": "-> (deferred_only=true) { where(Invoice.DEFERRED) if deferred_only }"
      },
      {
        "name": "mbe_invoiced",
        "opts": {
        },
        "block": "-> (invoiced_only=true) { invoiced(invoiced_only) }"
      },
      {
        "name": "mbe_deferred",
        "opts": {
        },
        "block": "-> (deferred_only=true) { deferred(deferred_only) }"
      }
    ]
  },
  {
    "class_name": "InvoiceElement",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "invoice",
        "opts": {
        },
        "block": null
      },
      {
        "name": "element",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "LeadSource",
    "default_scope": {
      "block": "{ order(\"LOWER(lead_sources.name) ASC\") }"
    },
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "LeadType",
    "default_scope": {
      "block": null
    },
    "validate": [
      {
        "names": [
          "name_unique"
        ],
        "opts": {
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "visible",
        "opts": {
        },
        "block": "-> {\n    includes(:hidden_lead_types)\n    .where(hidden_lead_types: { lead_type: nil })\n  }"
      },
      {
        "name": "active",
        "opts": {
        },
        "block": "-> {\n    where.not(status: [2, 3, 4])\n    .order(name: :asc)\n  }"
      },
      {
        "name": "by_tenant",
        "opts": {
        },
        "block": "-> (tenant) { where.not(status: [2, 3, 4]).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(\"LEFT OUTER JOIN hidden_lead_types ON hidden_lead_types.lead_type_id = lead_types.id\").having(\"? != ALL(array_agg(hidden_lead_types.tenant_id)) OR 0 = ALL(array_agg(COALESCE(hidden_lead_types.tenant_id, 0)))\", tenant.id).joins(:prospect_statuses).group(\"lead_types.id\") }"
      },
      {
        "name": "by_tenant_old",
        "opts": {
        },
        "block": "-> (tenant) { where(status: 4).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).joins(:prospect_statuses).group(\"lead_types.id\")  }"
      },
      {
        "name": "by_tenant_archived",
        "opts": {
        },
        "block": "-> (tenant) {\n    where(status: 3).where(\"lead_types.tenant_id = ? OR (lead_types.global = ? AND lead_types.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id)\n    .joins(:prospect_status_version)\n    .joins(:prospect_statuses)\n    .joins(\"LEFT JOIN prospect_status_items ON prospect_status_items.prospect_status_id = prospect_statuses.id AND prospect_status_items.lead_type_id = lead_types.id\").where.not('prospect_status_items.id': nil)\n    .group(\"lead_types.id\")\n  }"
      }
    ],
    "enum": [
      {
        "status": {
          "Live": 1,
          "Draft": 2,
          "Archived": 3,
          "Old": 4
        }
      }
    ],
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_version",
        "opts": {
          "class_name": "ProspectStatusVersion",
          "foreign_key": "active_status_version"
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "prospect_status_items",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_versions",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contacts",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_statuses",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "hidden_lead_types",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "enterprise_salestarget",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "List",
    "store_accessor": [
      "filter",
      "abc"
    ]
  },
  {
    "class_name": "Location",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
          "inverse_of": "backups"
        },
        "block": null
      },
      {
        "name": "identity",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      },
      {
        "name": "name",
        "opts": {
          "presence": true
        }
      }
    ],
    "has_many": [
      {
        "name": "statistics",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sales_reps",
        "opts": {
        },
        "block": null
      },
      {
        "name": "adjustments",
        "opts": {
          "foreign_key": "location_user_id",
          "primary_key": "id"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Meeting",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "attendees",
        "opts": {
          "inverse_of": "meeting",
          "class_name": "MeetingAttendee",
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "accepts_nested_attributes_for": [
      {
        "name": "attendees",
        "opts": {
        }
      }
    ],
    "attr_accessor": [
      "status_complete"
    ],
    "scopes": [
      {
        "name": "contextual",
        "opts": {
        },
        "block": "lambda { |context| where(context_type: context.class, context_id: context.id) }"
      }
    ],
    "validates": [
      {
        "name": "title",
        "opts": {
          "presence": {
            "message": "Title is required."
          }
        }
      }
    ]
  },
  {
    "class_name": "MeetingAttendee",
    "enum": [
      {
        "status": [
          "unknown",
          "sent",
          "received",
          "accepted",
          "rejected"
        ]
      }
    ],
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "meeting",
        "opts": {
          "inverse_of": "attendees"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "News",
    "custx": {
      "acts_as_readable": {
        "opts": {
          "on": "created_at"
        }
      }
    },
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "by_enterprise",
        "opts": {
        },
        "block": "-> (enterprise_id) { where(\"enterprise_id = ? or global IS TRUE\", enterprise_id) }"
      }
    ]
  },
  {
    "class_name": "NextActivity",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "active",
        "opts": {
        },
        "block": "-> {\n    where(status: \"active\")\n  }"
      }
    ]
  },
  {
    "class_name": "Note",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "scopes": [
      {
        "name": "contextual",
        "opts": {
        },
        "block": "lambda { |context| where(context_type: context.class, context_id: context.id) }"
      }
    ],
    "validates": [
      {
        "name": "title",
        "opts": {
          "presence": {
            "message": "Title is required."
          }
        }
      },
      {
        "name": "message",
        "opts": {
          "presence": {
            "message": "Message is required."
          }
        }
      }
    ]
  },
  {
    "class_name": "Order",
    "table_name": "invoices",
    "belongs_to": [
      {
        "name": "sale",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "sales_reps",
        "opts": {
          "class_name": "SalesRep",
          "foreign_key": "platform_id",
          "primary_key": "sales_rep_platform_id"
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "for_tenant",
        "opts": {
        },
        "block": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
      },
      {
        "name": "for_dates",
        "opts": {
        },
        "block": "->(start_date, end_date) { where(ordered_date: start_date..end_date) }"
      },
      {
        "name": "including_companies",
        "opts": {
        },
        "block": "-> { includes(:company) }"
      }
    ]
  },
  {
    "class_name": "OriginalUser",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "user",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "PendingAttachment",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "before_destroy": [
      {
        "name": "cleanup_temporary_files"
      }
    ]
  },
  {
    "class_name": "PhoneCall",
    "validates": [
      {
        "name": "subject",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      }
    ],
    "belongs_to": [
      {
        "name": "phoneable",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "activities",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "contextual",
        "opts": {
        },
        "block": "lambda { |context| where(context_type: context.class, context_id: context.id) }"
      }
    ]
  },
  {
    "class_name": "PortalComment",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "context",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ProductionLocation",
    "default_scope": {
      "block": "{ where(deleted: false).order(\"orderby ASC NULLS LAST, name ASC\") }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "estimates",
        "opts": {
          "inverse_of": "production_location"
        },
        "block": null
      },
      {
        "name": "invoices",
        "opts": {
          "inverse_of": "production_location"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Proof",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "invoice",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ProspectStatus",
    "default_scope": {
      "block": null
    },
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": "-> { where(enterprise_id: 0, lead_type_id: 0).order(name: :asc) }"
      },
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_version",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "prospect_status_items",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "enterprise_salestarget",
        "opts": {
        },
        "block": null
      }
    ],
    "custx": {
      "acts_as_list": {
        "opts": {
          "scope": "lead_type_id = #{lead_type_id} AND tenant_id = #{tenant_id} AND prospect_status_version_id = #{prospect_status_version_id} AND enterprise_id = #{enterprise_id}"
        }
      }
    },
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Status name can't be blank (required)."
          }
        }
      },
      {
        "name": "name",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      }
    ],
    "validate": [
      {
        "names": [
          "check_valid_lead_stage"
        ],
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "ProspectStatusItem",
    "default_scope": {
      "block": "{ order(position: :asc) }"
    },
    "custx": {
      "acts_as_list": {
        "opts": {
          "scope": [
            "lead_type_id",
            "prospect_status_id",
            "enterprise_id"
          ]
        }
      }
    },
    "enum": [
      {
        "item_type": {
          "Email": 0,
          "Call": 1,
          "Task": 2,
          "Meeting": 3
        }
      }
    ],
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      },
      {
        "name": "email_template",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "prospect_status_item_contacts",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Item name can't be blank (required)."
          }
        }
      },
      {
        "name": "name",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      }
    ],
    "scopes": [
      {
        "name": "by_contact",
        "opts": {
        },
        "block": "-> (contact) {\n    joins(\"LEFT JOIN prospect_status_item_contacts ON prospect_status_item_contacts.prospect_status_item_id = prospect_status_items.id AND prospect_status_item_contacts.contact_id = #{ contact.id }\")\n  }"
      }
    ]
  },
  {
    "class_name": "ProspectStatusItemContact",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_item",
        "opts": {
        },
        "block": null
      }
    ],
    "enum": [
      {
        "activity_status": {
          "In Progress": 2,
          "Completed": 1,
          "Skipped": 3
        }
      }
    ]
  },
  {
    "class_name": "ProspectStatusVersion",
    "default_scope": {
      "block": "{ order(version_no: :asc) }"
    },
    "enum": [
      {
        "status": {
          "Live": 1,
          "Draft": 2,
          "Locked": 3
        }
      }
    ],
    "belongs_to": [
      {
        "name": "lead_type",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "prospect_statuses",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "prospect_status",
        "opts": {
        },
        "block": null
      }
    ],
    "custx": {
      "acts_as_list": {
        "opts": {
          "scope": "lead_type",
          "column": "version_no"
        }
      }
    }
  },
  {
    "class_name": "Report",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      },
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Report name cannot be empty!"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "report_row",
        "opts": {
        },
        "block": "-> { order(position: :asc) }"
      }
    ]
  },
  {
    "class_name": "ReportRow",
    "belongs_to": [
      {
        "name": "report",
        "opts": {
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ order(\"position ASC\") }"
    },
    "custx": {
      "acts_as_list": {
        "opts": {
          "scope": "report"
        }
      }
    }
  },
  {
    "class_name": "Sale",
    "table_name": "invoices",
    "has_many": [
      {
        "name": "actions",
        "opts": {
          "as": "actionable"
        },
        "block": null
      },
      {
        "name": "orders",
        "opts": {
          "foreign_key": "sale_id"
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ where.not(pickup_date: nil).where(voided: false, deleted: false) }"
    },
    "scopes": [
      {
        "name": "for_dates",
        "opts": {
        },
        "block": "->(start_date, end_date) { where(pickup_date: start_date..end_date) }"
      },
      {
        "name": "non_closed_out",
        "opts": {
        },
        "block": "-> { where(accounting_month: nil) }"
      }
    ]
  },
  {
    "class_name": "SalesBaseTax",
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "SalesCategory",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "SalesRep",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "location",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "estimates",
        "opts": {
        },
        "block": null
      },
      {
        "name": "invoices",
        "opts": {
        },
        "block": null
      },
      {
        "name": "shipments",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "SalesRepUpdate",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sales_rep",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      },
      {
        "name": "sales_rep",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "SalesSummary",
    "default_scope": {
      "block": "{ where(isdeleted: false, deleted: false) }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "SalesSummaryPickup",
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "SalesTagByMonth",
    "default_scope": {
      "block": "{\n    order(month_date: :desc)\n  }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Salestarget",
    "enum": [
      {
        "target_type": {
          "Leads": 1,
          "Accounts": 2,
          "Activity": 3,
          "Lead Types": 4
        }
      }
    ],
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "SavedReport",
    "custx": {
      "has_paper_trail": {
      }
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "SharedUser",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "shared",
        "opts": {
          "class_name": "User",
          "foreign_key": "shared_id"
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "user",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      },
      {
        "name": "shared",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Shipment",
    "has_many": [
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
          "as": "taskable"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "as": "phoneable"
        },
        "block": null
      },
      {
        "name": "emails",
        "opts": {
          "as": "context"
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
          "as": "context"
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company",
        "opts": {
        },
        "block": null
      },
      {
        "name": "pdf",
        "opts": {
        },
        "block": null
      },
      {
        "name": "inquiry",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "contact",
        "opts": {
          "class_name": "Contact",
          "foreign_key": "id",
          "primary_key": "contact_id"
        },
        "block": null
      },
      {
        "name": "sales_rep_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "sales_rep_user_id"
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "scopes": [
      {
        "name": "for_tenant",
        "opts": {
        },
        "block": "->(tenant_id) { where(tenant_id: Array(tenant_id).first) }"
      },
      {
        "name": "for_dates",
        "opts": {
        },
        "block": "->(start_date, end_date) { where(shipment_date: start_date..end_date) }"
      },
      {
        "name": "needs_pdf",
        "opts": {
        },
        "block": "-> { where(\"shipment_date > '2015-07-01'\").where(needs_pdf: true).where(\"pdf_error_count < 5\").order(\"pdf_error_count ASC, shipment_date DESC, mbe_tracking ASC\") }"
      }
    ]
  },
  {
    "class_name": "ShortUrl",
    "custx": {
      "validates_presence_of": {
        "name": "url",
        "opts": {
        }
      },
      "validates_uniqueness_of": {
        "name": "slug",
        "opts": {
        }
      },
      "validates_length_of": {
        "name": "slug",
        "opts": {
          "within": "3..255",
          "on": "create",
          "message": "too long"
        }
      }
    },
    "before_validation": [
      {
        "name": "generate_slug",
        "block": null
      }
    ]
  },
  {
    "class_name": "SmsTemplate",
    "default_scope": {
      "block": "{ order(name: :asc) }"
    },
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "wrapper",
        "opts": {
          "class_name": "SmsTemplate",
          "foreign_key": "wrapper_id"
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "sms_template_categories",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "before_save": [
      {
        "name": "nullify_global_tenant_id"
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": true
        }
      },
      {
        "name": "name",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      },
      {
        "name": "body",
        "opts": {
          "presence": true
        }
      }
    ],
    "scopes": [
      {
        "name": "by_category",
        "opts": {
        },
        "block": "-> (tenant, categories) { joins(\"LEFT OUTER JOIN sms_template_categories ON sms_template_categories.sms_template_id = sms_templates.id\").where(\"sms_template_categories.category = ?\", categories.to_s.blank? ? 0 : categories.to_s) }"
      },
      {
        "name": "by_tenant",
        "opts": {
        },
        "block": "-> (tenant) { where(\"sms_templates.tenant_id = ? OR (sms_templates.global = ? AND sms_templates.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).group(\"sms_templates.id\") }"
      },
      {
        "name": "by_enterprise",
        "opts": {
        },
        "block": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
      }
    ]
  },
  {
    "class_name": "SmsTemplateCategory",
    "enum": [
      {
        "category": {
          "estimates": 1,
          "orders": 2,
          "sales": 3,
          "campaigns": 5,
          "contacts": 6,
          "companies": 7,
          "comments": 8
        }
      }
    ],
    "belongs_to": [
      {
        "name": "sms_template",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "SmsTemplateField",
    "belongs_to": [
      {
        "name": "sms_template",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "values",
        "opts": {
          "class_name": "SmsTemplateValue"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Statistic",
    "belongs_to": [
      {
        "name": "company",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "location",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "current_accounting_month",
        "opts": {
        },
        "block": "-> { where(accounting_year: 0, accounting_month: 0) }"
      }
    ]
  },
  {
    "class_name": "Tag",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taggable",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "tag_category",
        "opts": {
        },
        "block": null
      },
      {
        "name": "parent",
        "opts": {
          "class_name": "Tag",
          "foreign_key": "parent_id"
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "children",
        "opts": {
          "class_name": "Tag",
          "foreign_key": "parent_id"
        },
        "block": null
      }
    ],
    "default_scope": {
      "block": "{ where(deleted: false) }"
    },
    "scopes": [
      {
        "name": "without_hidden",
        "opts": {
        },
        "block": "-> (tenant) { joins(:tag_category).where(\"(tag_categories.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE\") }"
      }
    ]
  },
  {
    "class_name": "TagCategory",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "contexts",
        "opts": {
          "class_name": "TagCategoryContext",
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "tags",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "attr_accessor": [
      "global"
    ],
    "default_scope": {
      "block": "{ where(hidden: false, performing_cleanup: false, deleted: false) }"
    },
    "scopes": [
      {
        "name": "by_tenant",
        "opts": {
        },
        "block": "-> (tenant) { where(\"(tag_categories.tenant_id = ? OR tag_categories.tenant_id IS NULL) AND tag_categories.enterprise_id = ?\", tenant.id, tenant.enterprise_id) }"
      },
      {
        "name": "without_hidden",
        "opts": {
        },
        "block": "-> (tenant) { where(\"(tag_categories.hidden_tenants->>'#{tenant.id}')::BOOLEAN IS DISTINCT FROM TRUE\") }"
      },
      {
        "name": "global_only",
        "opts": {
        },
        "block": "-> { where(\"tag_categories.tenant_id IS NULL\") }"
      }
    ]
  },
  {
    "class_name": "TagCategoryContext",
    "belongs_to": [
      {
        "name": "tag_category",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "TakenBy",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      },
      {
        "name": "location",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_many": [
      {
        "name": "estimates",
        "opts": {
        },
        "block": null
      },
      {
        "name": "invoices",
        "opts": {
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "with_valid_state",
        "opts": {
        },
        "block": "-> { where(\"latest_context_date >= ? OR (latest_context_date IS NULL AND created_at >= ?)\", 24.months.ago, 1.day.ago) }"
      }
    ]
  },
  {
    "class_name": "TakenByUpdate",
    "table_name": "taken_by_updates",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taken_by",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      },
      {
        "name": "taken_by",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Target",
    "enum": [
      {
        "klass": [
          "estimate",
          "sale",
          "shipment",
          "deferred"
        ]
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "location",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taken_by_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "taken_by_user_id"
        },
        "block": null
      },
      {
        "name": "sales_rep_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "sales_rep_user_id"
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "Task",
    "custx": {
      "acts_as_readable": {
        "opts": {
          "on": "created_at"
        }
      },
      "acts_as_commentable": {
      }
    },
    "belongs_to": [
      {
        "name": "user",
        "opts": {
        },
        "block": "-> { unscope(where: :deleted_at) }"
      },
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taskable",
        "opts": {
          "polymorphic": true
        },
        "block": null
      },
      {
        "name": "task_type",
        "opts": {
        },
        "block": null
      },
      {
        "name": "task_repeat",
        "opts": {
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "assigned_user",
        "opts": {
          "class_name": "User",
          "foreign_key": "id",
          "primary_key": "assigned_user_id"
        },
        "block": "-> { unscope(where: :deleted_at) }, class_name: \"User\", foreign_key: \"id\", primary_key: \"assigned_user_id\""
      }
    ],
    "has_many": [
      {
        "name": "activities",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "comments",
        "opts": {
          "as": "commentable"
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Task name is required."
          }
        }
      },
      {
        "name": "assigned_user_id",
        "opts": {
          "presence": {
            "message": "Please add a user."
          }
        }
      },
      {
        "name": "end_date",
        "opts": {
          "presence": {
            "message": "Due date is required."
          }
        }
      },
      {
        "name": "start_date",
        "opts": {
          "presence": {
            "message": "Start date is required."
          }
        }
      }
    ]
  },
  {
    "class_name": "TaskRepeat",
    "belongs_to": [
      {
        "name": "task",
        "opts": {
        },
        "block": null
      }
    ],
    "custx": {
      "validates_uniqueness_of": {
        "name": "task_id",
        "opts": {
        }
      }
    }
  },
  {
    "class_name": "TaskType",
    "default_scope": {
      "block": "{\n    order(name: :asc)\n  }"
    },
    "scopes": [
      {
        "name": "visible",
        "opts": {
        },
        "block": "-> (tenant) {\n    joins(\"LEFT JOIN hidden_task_types ON hidden_task_types.task_type_id = task_types.id AND hidden_task_types.tenant_id = #{tenant.id}\")\n    .where(\"hidden_task_types.task_type_id IS NULL\")\n  }"
      },
      {
        "name": "by_tenant_all",
        "opts": {
        },
        "block": "->(tenant) {\n    where(enterprise_id: tenant.enterprise_id).where(\"task_types.global = ? OR task_types.tenant_id = ?\", true, tenant.id)\n  }"
      }
    ],
    "has_many": [
      {
        "name": "hidden_task_types",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
        },
        "block": null
      }
    ],
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      },
      {
        "name": "user",
        "opts": {
        },
        "block": null
      }
    ],
    "after_destroy": [
      {
        "name": null,
        "block": "{ |record| record.tasks.update_all(task_type_id: nil) }"
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Task type name is required."
          }
        }
      }
    ]
  },
  {
    "class_name": "Tenant",
    "default_scope": {
      "block": "do |tenant|\n    begin\n      Mail::Address.new(\"#{tenant.marketing_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      tenant.errors[:base] << \"Marketing name contains invalid characters\"\n    end\n  end"
    },
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "enterprise",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "groups",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "account_history_data",
        "opts": {
          "inverse_of": "tenant",
          "class_name": "AccountHistoryData"
        },
        "block": null
      },
      {
        "name": "action_logs",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "activities",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "addresses",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "adjustments",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "api_logs",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "assets",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "background_jobs",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "backups",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "budgets",
        "opts": {
        },
        "block": null
      },
      {
        "name": "business_plans",
        "opts": {
        },
        "block": null
      },
      {
        "name": "campaigns",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "campaign_calendar_entries",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "campaign_counts",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "cash_sales",
        "opts": {
        },
        "block": null
      },
      {
        "name": "comments",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "companies",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "contacts",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "contact_groups",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "contact_lists",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "contact_list_counts",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "contact_list_exclusions",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "deployments",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "emails",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "email_credentials",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "email_templates",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "email_validations",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "estimates",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "estimate_elements",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "etl_settings",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "events",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "event_stats",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "filter_defaults",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "hidden_email_templates",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "hidden_holidays",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "holidays",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "identities",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "imports",
        "opts": {
        },
        "block": null
      },
      {
        "name": "inquiries",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "interest_contexts",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "invoices",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "invoice_elements",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "locations",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "logs",
        "opts": {
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "metric_results",
        "opts": {
        },
        "block": null
      },
      {
        "name": "metrics",
        "opts": {
        },
        "block": null
      },
      {
        "name": "next_activities",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "shipments",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "orders",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "invoiced_orders",
        "opts": {
          "inverse_of": "tenant",
          "class_name": "Order"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
        },
        "block": null
      },
      {
        "name": "pings",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "pending_attachments",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "phone_calls",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "portal_comments",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "production_locations",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "proofs",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "reports",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales_base_taxes",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales_categories",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales_reps",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales_rep_updates",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales_summaries",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sales_summary_pickups",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "salestargets",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "saved_reports",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "sms_templates",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "statistics",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "tags",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "tag_categories",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "taken_bys",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "taken_by_updates",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "targets",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "tasks",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "unsubscribes",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "workflows",
        "opts": {
          "inverse_of": "tenant"
        },
        "block": null
      },
      {
        "name": "holidays",
        "opts": {
        },
        "block": null
      },
      {
        "name": "lead_types",
        "opts": {
        },
        "block": null
      },
      {
        "name": "prospect_status_items",
        "opts": {
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
        },
        "block": null
      },
      {
        "name": "wips",
        "opts": {
        },
        "block": null
      },
      {
        "name": "company_metrics",
        "opts": {
        },
        "block": null
      },
      {
        "name": "next_activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sales_tag_by_months",
        "opts": {
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "real",
        "opts": {
        },
        "block": "-> { enabled.where(training: false, demo: false) }"
      },
      {
        "name": "enabled",
        "opts": {
        },
        "block": "-> { where(inital_import_complete: true) }"
      },
      {
        "name": "disabled",
        "opts": {
        },
        "block": "-> { where(inital_import_complete: false) }"
      },
      {
        "name": "mbe",
        "opts": {
        },
        "block": "-> { joins(:enterprise).where(enterprises: {platform_type: \"mbe\"}) }"
      },
      {
        "name": "printsmith",
        "opts": {
        },
        "block": "-> { joins(:enterprise).where(enterprises: {platform_type: \"printsmith\"}) }"
      },
      {
        "name": "sales_metrics_range",
        "opts": {
        },
        "block": "-> (c_start, c_finish, ly_start, ly_finish) { select(\"id, number, marketing_name, (#{Invoice.select('COALESCE(SUM(grand_total), 0)').where(pickup_date: c_start..c_finish).where('invoices.tenant_id = tenants.id').to_sql}) as sales_py, (#{Invoice.select('COALESCE(COUNT(DISTINCT company_id), 0)').where(pickup_date: c_start..c_finish).where('invoices.tenant_id = tenants.id').to_sql}) as customers_py, (#{Invoice.select('COALESCE(SUM(grand_total), 0)').where(pickup_date: ly_start..ly_finish).where('invoices.tenant_id = tenants.id').to_sql}) as sales_ly, (#{Invoice.select('COALESCE(COUNT(DISTINCT company_id), 0)').where(pickup_date: ly_start..ly_finish).where('invoices.tenant_id = tenants.id').to_sql}) as customers_ly\").where(enterprise_id: 3).where.not(id: 210) }"
      }
    ],
    "validate": [
      {
        "names": [

        ],
        "opts": {
        },
        "block": "do |tenant|\n    begin\n      Mail::Address.new(\"#{tenant.marketing_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      tenant.errors[:base] << \"Marketing name contains invalid characters\"\n    end\n  end"
      }
    ]
  },
  {
    "class_name": "Token",
    "belongs_to": [
      {
        "name": "user",
        "opts": {
          "required": true
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "user",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "custx": {
      "attr_encrypted": {
        "name": "refresh_token",
        "opts": {
          "key": "ABC"
        }
      }
    }
  },
  {
    "class_name": "Tracker",
    "enum": [
      {
        "method": [
          "image",
          "url",
          "asset"
        ]
      }
    ],
    "has_and_belongs_to_many": [
      {
        "name": "campaign_messages",
        "opts": {
        },
        "block": "-> { uniq }"
      },
      {
        "name": "emails",
        "opts": {
        },
        "block": "-> { uniq }"
      }
    ],
    "has_many": [
      {
        "name": "hits",
        "opts": {
          "class_name": "TrackerHit",
          "dependent": "destroy"
        },
        "block": null
      }
    ],
    "scopes": [
      {
        "name": "no_unsub_links",
        "opts": {
        },
        "block": "-> { where(\"trackers.path NOT LIKE ?\", \"%unsubscribe%\") }"
      }
    ]
  },
  {
    "class_name": "TrackerHit",
    "belongs_to": [
      {
        "name": "tracker",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tracker",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "scopes": [
      {
        "name": "no_unsub_links",
        "opts": {
        },
        "block": "-> { where(\"trackers.path NOT LIKE ?\", \"%unsubscribe%\") }"
      }
    ]
  },
  {
    "class_name": "Unsubscribe",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      },
      {
        "name": "contact",
        "opts": {
        },
        "block": null
      }
    ]
  },
  {
    "class_name": "User",
    "custx": {
      "acts_as_reader": {
      },
      "validates_confirmation_of": {
        "name": "password",
        "opts": {
          "message": "should match New Password",
          "unless": "skip_password_validation"
        }
      },
      "with_options": [
        {
          "opts": {
            "on": "admin"
          },
          "block": "with_options({on: :admin}) do |for_admin|\n    for_admin.validates :first_name, presence: { message: \"First name required.\" }, unless: :skip_admin_validation\n    for_admin.validates :last_name, presence: { message: \"Last name required.\" }, unless: :skip_admin_validation\n    for_admin.validates :username, presence: { message: \"Cannot be blank.\" }, unless: :skip_admin_validation\n    for_admin.validates :password, presence: { message: \"Password is mandatory.\" }, unless: :skip_admin_validation\n  end"
        },
        {
          "opts": {
            "on": "sso"
          },
          "block": "with_options({on: :sso}) do |for_sso|\n    for_sso.validates :first_name, presence: { message: \"First name required.\" }\n    for_sso.validates :last_name, presence: { message: \"Last name required.\" }\n  end"
        }
      ]
    },
    "default_scope": {
      "block": "do |user|\n    user.errors[:base] << \"Banner merge field missing in email signature\" if !user.banner.nil? && !user.email_signature.include?(\"{{banner}}\")\n    begin\n      Mail::Address.new(\"#{user.display_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      user.errors[:base] << \"Display name contains invalid characters\"\n    end\n  end"
    },
    "require": [
      "google/apis/calendar_v3"
    ],
    "attr_accessor": [
      "skip_username_validation",
      "skip_password_validation",
      "skip_admin_validation",
      "update_from_primary",
      "updated_roles",
      "taken_by_ids"
    ],
    "before_save": [
      {
        "name": "ensure_parent"
      }
    ],
    "after_save": [
      {
        "name": "sync"
      }
    ],
    "validate": [
      {
        "names": [
          "username_unique"
        ],
        "opts": {
        },
        "block": null
      },
      {
        "names": [

        ],
        "opts": {
        },
        "block": "do |user|\n    user.errors[:base] << \"Banner merge field missing in email signature\" if !user.banner.nil? && !user.email_signature.include?(\"{{banner}}\")\n    begin\n      Mail::Address.new(\"#{user.display_name} <test@test.com>\").format\n    rescue Mail::Field::ParseError\n      user.errors[:base] << \"Display name contains invalid characters\"\n    end\n  end"
      }
    ],
    "validates": [
      {
        "name": "password",
        "opts": {
          "length": {
            "minimum": 8,
            "message": "8+ characters"
          },
          "unless": "skip_password_validation"
        }
      },
      {
        "name": "password",
        "opts": {
          "format": {
            "with": "(?x-mi:((?:(?=.*\\d)).*))",
            "message": "1 digit"
          },
          "unless": "skip_password_validation"
        }
      },
      {
        "name": "password",
        "opts": {
          "format": {
            "with": "(?x-mi:((?:(?=.*[a-z])).*))",
            "message": "1 lowercase letter"
          },
          "unless": "skip_password_validation"
        }
      },
      {
        "name": "password",
        "opts": {
          "format": {
            "with": "(?x-mi:((?:(?=.*[A-Z])).*))",
            "message": "1 uppercase letter"
          },
          "unless": "skip_password_validation"
        }
      },
      {
        "name": "password",
        "opts": {
          "format": {
            "with": "(?x-mi:((?:(?=.*\\W)).*))",
            "message": "1 special character"
          },
          "unless": "skip_password_validation"
        }
      },
      {
        "name": "enterprise",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      },
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ],
    "devise": [
      "database_authenticatable",
      "rememberable",
      "trackable",
      "timeoutable",
      "lockable"
    ],
    "belongs_to": [
      {
        "name": "enterprise",
        "opts": {
          "required": true
        },
        "block": null
      },
      {
        "name": "tenant",
        "opts": {
          "required": true
        },
        "block": null
      }
    ],
    "has_one": [
      {
        "name": "token",
        "opts": {
        },
        "block": null
      }
    ],
    "has_many": [
      {
        "name": "phone_calls",
        "opts": {
        },
        "block": null
      },
      {
        "name": "emails",
        "opts": {
        },
        "block": null
      },
      {
        "name": "activities",
        "opts": {
        },
        "block": null
      },
      {
        "name": "taken_bys",
        "opts": {
        },
        "block": null
      },
      {
        "name": "sales_reps",
        "opts": {
        },
        "block": null
      },
      {
        "name": "target_results",
        "opts": {
        },
        "block": null
      },
      {
        "name": "estimates",
        "opts": {
          "through": "taken_bys"
        },
        "block": null
      },
      {
        "name": "invoices",
        "opts": {
          "through": "taken_bys"
        },
        "block": null
      },
      {
        "name": "campaigns",
        "opts": {
        },
        "block": null
      },
      {
        "name": "statistics",
        "opts": {
        },
        "block": null
      },
      {
        "name": "shared_users",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "email_aliases",
        "opts": {
          "dependent": "destroy"
        },
        "block": null
      },
      {
        "name": "holidays",
        "opts": {
        },
        "block": null
      },
      {
        "name": "notes",
        "opts": {
        },
        "block": null
      },
      {
        "name": "adjustments",
        "opts": {
          "foreign_key": "sales_rep_user_id",
          "primary_key": "id"
        },
        "block": null
      },
      {
        "name": "filter_defaults",
        "opts": {
        },
        "block": null
      },
      {
        "name": "meetings",
        "opts": {
        },
        "block": null
      }
    ],
    "before_validation": [
      {
        "name": null,
        "block": "do\n    self.banner_id = 0 if banner.nil?\n    self.number = number.gsub(/[^0-9]/, \"\") if attribute_present?(\"number\")\n  end"
      }
    ]
  },
  {
    "class_name": "Wip",
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "validates": [
      {
        "name": "tenant",
        "opts": {
          "presence": {
            "message": "must exist"
          }
        }
      }
    ]
  },
  {
    "class_name": "Workflow",
    "default_scope": {
      "block": "{ order(name: :asc) }"
    },
    "belongs_to": [
      {
        "name": "tenant",
        "opts": {
        },
        "block": null
      }
    ],
    "before_save": [
      {
        "name": "nullify_global_tenant_id"
      }
    ],
    "validates": [
      {
        "name": "name",
        "opts": {
          "presence": {
            "message": "Workflow name can't be blank (required)."
          }
        }
      },
      {
        "name": "name",
        "opts": {
          "length": {
            "maximum": 250
          }
        }
      }
    ],
    "scopes": [
      {
        "name": "by_tenant",
        "opts": {
        },
        "block": "-> (tenant) { where(\"workflows.tenant_id = ? OR (workflows.global = ? AND workflows.enterprise_id = ?)\", tenant.id, true, tenant.enterprise.id).group(\"workflows.id\") }"
      },
      {
        "name": "by_enterprise",
        "opts": {
        },
        "block": "-> (enterprise) { where(enterprise_id: enterprise.nil? ? -1 : enterprise.id) }"
      }
    ]
  }
]